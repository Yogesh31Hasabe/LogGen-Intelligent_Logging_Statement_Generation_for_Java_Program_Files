file_name,original_file_content,Input,Label,Output,OriginalWithPlaceholder
src/main/java/co/aurasphere/botmill/fb/FbBot.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import co.aurasphere.botmill.core.BotDefinition;
import co.aurasphere.botmill.core.BotMillPolicy;
import co.aurasphere.botmill.core.BotMillSession;
import co.aurasphere.botmill.fb.actionframe.ActionFrame;
import co.aurasphere.botmill.fb.autoreply.AutoReply;
import co.aurasphere.botmill.fb.event.FbBotMillEvent;
import co.aurasphere.botmill.fb.model.annotation.FbBotMillInit;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;


/**
 * Base {@link BotDefinition} implementation.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 */
public abstract class FbBot implements BotDefinition {

	/**
	 * The logger.
	 */
	private static final Logger logger = LoggerFactory
			.getLogger(FbBot.class);

	/**
	 * A list of registered {@link FbBotMillEvent} for the current bot.
	 */
	private List<ActionFrame> actionFrameList;
	/**
	 * The policy this bot follows when processing the callback handler list.
	 */
	private BotMillPolicy botMillPolicy;
	/**
	 * The bot mill session.
	 */
	private BotMillSession botMillSession;
	/**
	 * The {@link FbBotMillEvent} object created by this class for each
	 * annotated method.
	 */
	private volatile FbBotMillEvent event;
	
	/** The envelope. */
	private volatile MessageEnvelope envelope;
	
	/** The action frame. */
	private volatile ActionFrame actionFrame;
	
	/**
	 * Sets the event.
	 *
	 * @param event the new event
	 */
	public synchronized void setEvent(FbBotMillEvent event) {this.event = event;}
	public synchronized FbBotMillEvent getEvent() {return this.event;}
	
	/**
	 * Sets the envelope.
	 *
	 * @param envelope the new envelope
	 */
	public synchronized void setEnvelope(MessageEnvelope envelope) {this.envelope = envelope;}
	public synchronized MessageEnvelope getEnvelope() {return this.envelope;}

	/**
	 * Base constructor. Instantiates a bot and registers it to the context.
	 * 
	 * @param botmillPolicy
	 *            the policy this bot should follow.
	 */
	public FbBot(BotMillPolicy botmillPolicy) {
		logger.debug(""AbstractFbot - Start Initialize"");
		
		this.botMillPolicy = botmillPolicy;
		this.actionFrameList = new ArrayList<ActionFrame>();
		this.buildAnnotatedInitBehaviour();
		
		
		// Create the botmill session.
		
		FbBotMillContext.getInstance().register(this);

		logger.debug(""AbstractFbot - End Initialize"");
	}
	

	/**
	 * Base constructor. Instantiates a bot and registers it to the context.
	 */
	public FbBot() {
		this(BotMillPolicy.FIRST_ONLY);
	}

	/**
	 * This is the method to define the behaviour of the bot. As of the
	 * introduction of the Annotation based configuration, this is overriden on
	 * the supertype level.
	 * 
	 * The method can still be overriden by a concrete Bot class and use to
	 * define behaviour.
	 */
	public void defineBehaviour() {
	};

	/**
	 * Adds an {@link ActionFrame} to this bot.
	 * 
	 * @param actionFrame
	 *            the actionFrame to add.
	 */
	public void addActionFrame(ActionFrame actionFrame) {
		this.actionFrameList.add(actionFrame);
	}

	/**
	 * Adds an {@link ActionFrame} to this bot.
	 * 
	 * @param event
	 *            the {@link FbBotMillEvent} to handle.
	 * @param reply
	 *            the {@link AutoReply} which should handle the event.
	 */
	public void addActionFrame(FbBotMillEvent event, AutoReply reply) {
		ActionFrame frame = new ActionFrame(event, reply);
		this.actionFrameList.add(frame);
	}

	/**
	 * Adds an {@link ActionFrame} to this bot with multiple reply.
	 * 
	 * @param event
	 *            the {@link FbBotMillEvent} to handle.
	 * @param replies
	 *            the collection of {@link AutoReply} which should handle the
	 *            event.
	 */
	public void addActionFrame(FbBotMillEvent event, AutoReply... replies) {
		ActionFrame frame = new ActionFrame(event, replies);
		this.actionFrameList.add(frame);
	}

	/**
	 * Builds the annotated init behaviour.
	 */
	private void buildAnnotatedInitBehaviour() {
		Method[] methods = this.getClass().getMethods();
		for (Method method : methods) {
			if (method.isAnnotationPresent(FbBotMillInit.class)) {
				try {
					method.invoke(this);
				} catch (Exception e) {
					logger.error(e.getMessage());
				}
			}
		}
	}

	/**
	 * This method is used to create multiple replies.
	 *
	 * @param replies
	 *            the set of replies in a form of a var-args
	 */
	protected void reply(AutoReply... replies) {
		for(AutoReply autoReply: replies) {
			autoReply.reply(this.getEnvelope());
		}
	}

	/**
	 * Bot mill session.
	 *
	 * @return the bot mill session
	 */
	protected final synchronized BotMillSession botMillSession() {
		return this.botMillSession;
	}
	
	/**
	 * This method is used to create a reply.
	 *
	 * @param reply
	 *            the reply
	 */
	protected void reply(AutoReply reply) {
		reply.reply(this.getEnvelope());
	}
	
	/**
	 * Adds the reply.
	 *
	 * @param reply the reply
	 */
	protected void addReply(AutoReply reply) {
		if(actionFrame == null) {
			actionFrame = new ActionFrame(this.getEvent());
		}
		actionFrame.addReply(reply);
	}
	
	/**
	 * Execute replies.
	 */
	protected void executeReplies() {
		if(actionFrame.getEvent().verifyEventCondition(this.getEnvelope())) {
			if (actionFrame.getReplies() != null && actionFrame.getReplies().size() > 0) {
				if (actionFrame.processMultipleReply(envelope)
						&& this.botMillPolicy.equals(BotMillPolicy.FIRST_ONLY)) {
				}
			} else {
				if (actionFrame.process(envelope)
						&& this.botMillPolicy.equals(BotMillPolicy.FIRST_ONLY)) {
				}
			}
		}
		actionFrame = null;
	}

	
	/**
	 * Checks if there's any registered {@link FbBotMillEvent} for the incoming
	 * callback. If there's any, then the callback is handled. The chain will be
	 * processed according to the {@link BotMillPolicy} followed by this bot. If
	 * the policy is {@link BotMillPolicy#FIRST_ONLY}, the chain will be
	 * processed until the first callback matches. Otherwise, if the policy is
	 * {@link BotMillPolicy#PROCESS_ALL}, all the chain will always be
	 * processed.
	 * 
	 * @param envelope
	 *            the incoming message.
	 */
	public void processMessage(MessageEnvelope envelope) {
		
		for (ActionFrame f : this.actionFrameList) {
			// If the policy is FIRST_ONLY stop processing the chain at the
			// first trigger.
			this.envelope = new MessageEnvelope();
			if (f.getReplies() != null && f.getReplies().size() > 0) {
				if (f.processMultipleReply(envelope)
						&& this.botMillPolicy.equals(BotMillPolicy.FIRST_ONLY)) {
					break;
				}
			} else {
				if (f.process(envelope)
						&& this.botMillPolicy.equals(BotMillPolicy.FIRST_ONLY)) {
					break;
				}
			}
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((actionFrameList == null) ? 0 : actionFrameList.hashCode());
		result = prime * result
				+ ((botMillPolicy == null) ? 0 : botMillPolicy.hashCode());
		result = prime * result
				+ ((botMillSession == null) ? 0 : botMillSession.hashCode());
		result = prime * result + ((event == null) ? 0 : event.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		FbBot other = (FbBot) obj;
		if (actionFrameList == null) {
			if (other.actionFrameList != null)
				return false;
		} else if (!actionFrameList.equals(other.actionFrameList))
			return false;
		if (botMillPolicy != other.botMillPolicy)
			return false;
		if (botMillSession == null) {
			if (other.botMillSession != null)
				return false;
		} else if (!botMillSession.equals(other.botMillSession))
			return false;
		if (event == null) {
			if (other.event != null)
				return false;
		} else if (!event.equals(other.event))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
//	@Override
//	public String toString() {
//		return ""AbstractFbBot [actionFrameList="" + actionFrameList
//				+ "", botMillPolicy="" + botMillPolicy + "", botMillSession=""
//				+ botMillSession + "", event="" + event + ""]"";
//	}

}
","package co.aurasphere.botmill.fb; public abstract class FbBot implements BotDefinition { private static final Logger logger = LoggerFactory
			.getLogger(FbBot.class); private List<ActionFrame> actionFrameList; private BotMillPolicy botMillPolicy; private BotMillSession botMillSession; private volatile FbBotMillEvent event; private volatile MessageEnvelope envelope; private volatile ActionFrame actionFrame; public synchronized void setEvent(FbBotMillEvent event) { this.event = event; } public synchronized FbBotMillEvent getEvent() { return this.event; } public synchronized void setEnvelope(MessageEnvelope envelope) { this.envelope = envelope; } public synchronized MessageEnvelope getEnvelope() { return this.envelope; } public FbBot(BotMillPolicy botmillPolicy) { this.botMillPolicy = botmillPolicy; this.actionFrameList = new ArrayList<ActionFrame>(); this.buildAnnotatedInitBehaviour(); FbBotMillContext.getInstance().register(this); } public FbBot() { this(BotMillPolicy.FIRST_ONLY); } public void defineBehaviour() { } ; public void addActionFrame(ActionFrame actionFrame) { this.actionFrameList.add(actionFrame); } public void addActionFrame(FbBotMillEvent event, AutoReply reply) { ActionFrame frame = new ActionFrame(event, reply); this.actionFrameList.add(frame); } public void addActionFrame(FbBotMillEvent event, AutoReply... replies) { ActionFrame frame = new ActionFrame(event, replies); this.actionFrameList.add(frame); } private void buildAnnotatedInitBehaviour() { Method[] methods = this.getClass().getMethods(); for (Method method : methods) { if (method.isAnnotationPresent(FbBotMillInit.class)) { try { method.invoke(this); } catch (Exception e) { } } } } protected void reply(AutoReply... replies) { for(AutoReply autoReply: replies) { autoReply.reply(this.getEnvelope()); } } protected final synchronized BotMillSession botMillSession() { return this.botMillSession; } protected void reply(AutoReply reply) { reply.reply(this.getEnvelope()); } protected void addReply(AutoReply reply) { if(actionFrame == null) { actionFrame = new ActionFrame(this.getEvent()); } actionFrame.addReply(reply); } protected void executeReplies() { if(actionFrame.getEvent().verifyEventCondition(this.getEnvelope())) { if (actionFrame.getReplies() != null && actionFrame.getReplies().size() > 0) { if (actionFrame.processMultipleReply(envelope)
						&& this.botMillPolicy.equals(BotMillPolicy.FIRST_ONLY)) { } } else { if (actionFrame.process(envelope)
						&& this.botMillPolicy.equals(BotMillPolicy.FIRST_ONLY)) { } } } actionFrame = null; } public void processMessage(MessageEnvelope envelope) { for (ActionFrame f : this.actionFrameList) { this.envelope = new MessageEnvelope(); if (f.getReplies() != null && f.getReplies().size() > 0) { if (f.processMultipleReply(envelope)
						&& this.botMillPolicy.equals(BotMillPolicy.FIRST_ONLY)) { break; } } else { if (f.process(envelope)
						&& this.botMillPolicy.equals(BotMillPolicy.FIRST_ONLY)) { break; } } } } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((actionFrameList == null) ? 0 : actionFrameList.hashCode()); result = prime * result
				+ ((botMillPolicy == null) ? 0 : botMillPolicy.hashCode()); result = prime * result
				+ ((botMillSession == null) ? 0 : botMillSession.hashCode()); result = prime * result + ((event == null) ? 0 : event.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FbBot other = (FbBot) obj; if (actionFrameList == null) { if (other.actionFrameList != null)
				return false; } else if (!actionFrameList.equals(other.actionFrameList))
			return false; if (botMillPolicy != other.botMillPolicy)
			return false; if (botMillSession == null) { if (other.botMillSession != null)
				return false; } else if (!botMillSession.equals(other.botMillSession))
			return false; if (event == null) { if (other.event != null)
				return false; } else if (!event.equals(other.event))
			return false; return true; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb; public abstract class FbBot implements BotDefinition { private static final Logger logger = LoggerFactory
			.getLogger(FbBot.class); private List<ActionFrame> actionFrameList; private BotMillPolicy botMillPolicy; private BotMillSession botMillSession; private volatile FbBotMillEvent event; private volatile MessageEnvelope envelope; private volatile ActionFrame actionFrame; public synchronized void setEvent(FbBotMillEvent event) { this.event = event; } public synchronized FbBotMillEvent getEvent() { return this.event; } public synchronized void setEnvelope(MessageEnvelope envelope) { this.envelope = envelope; } public synchronized MessageEnvelope getEnvelope() { return this.envelope; } public FbBot(BotMillPolicy botmillPolicy) { <FILL_ME> this.botMillPolicy = botmillPolicy; this.actionFrameList = new ArrayList<ActionFrame>(); this.buildAnnotatedInitBehaviour(); FbBotMillContext.getInstance().register(this); <FILL_ME> } public FbBot() { this(BotMillPolicy.FIRST_ONLY); } public void defineBehaviour() { } ; public void addActionFrame(ActionFrame actionFrame) { this.actionFrameList.add(actionFrame); } public void addActionFrame(FbBotMillEvent event, AutoReply reply) { ActionFrame frame = new ActionFrame(event, reply); this.actionFrameList.add(frame); } public void addActionFrame(FbBotMillEvent event, AutoReply... replies) { ActionFrame frame = new ActionFrame(event, replies); this.actionFrameList.add(frame); } private void buildAnnotatedInitBehaviour() { Method[] methods = this.getClass().getMethods(); for (Method method : methods) { if (method.isAnnotationPresent(FbBotMillInit.class)) { try { method.invoke(this); } catch (Exception e) { <FILL_ME> } } } } protected void reply(AutoReply... replies) { for(AutoReply autoReply: replies) { autoReply.reply(this.getEnvelope()); } } protected final synchronized BotMillSession botMillSession() { return this.botMillSession; } protected void reply(AutoReply reply) { reply.reply(this.getEnvelope()); } protected void addReply(AutoReply reply) { if(actionFrame == null) { actionFrame = new ActionFrame(this.getEvent()); } actionFrame.addReply(reply); } protected void executeReplies() { if(actionFrame.getEvent().verifyEventCondition(this.getEnvelope())) { if (actionFrame.getReplies() != null && actionFrame.getReplies().size() > 0) { if (actionFrame.processMultipleReply(envelope)
						&& this.botMillPolicy.equals(BotMillPolicy.FIRST_ONLY)) { } } else { if (actionFrame.process(envelope)
						&& this.botMillPolicy.equals(BotMillPolicy.FIRST_ONLY)) { } } } actionFrame = null; } public void processMessage(MessageEnvelope envelope) { for (ActionFrame f : this.actionFrameList) { this.envelope = new MessageEnvelope(); if (f.getReplies() != null && f.getReplies().size() > 0) { if (f.processMultipleReply(envelope)
						&& this.botMillPolicy.equals(BotMillPolicy.FIRST_ONLY)) { break; } } else { if (f.process(envelope)
						&& this.botMillPolicy.equals(BotMillPolicy.FIRST_ONLY)) { break; } } } } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((actionFrameList == null) ? 0 : actionFrameList.hashCode()); result = prime * result
				+ ((botMillPolicy == null) ? 0 : botMillPolicy.hashCode()); result = prime * result
				+ ((botMillSession == null) ? 0 : botMillSession.hashCode()); result = prime * result + ((event == null) ? 0 : event.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FbBot other = (FbBot) obj; if (actionFrameList == null) { if (other.actionFrameList != null)
				return false; } else if (!actionFrameList.equals(other.actionFrameList))
			return false; if (botMillPolicy != other.botMillPolicy)
			return false; if (botMillSession == null) { if (other.botMillSession != null)
				return false; } else if (!botMillSession.equals(other.botMillSession))
			return false; if (event == null) { if (other.event != null)
				return false; } else if (!event.equals(other.event))
			return false; return true; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb; 
import java.lang.reflect.Method; import java.util.ArrayList; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import co.aurasphere.botmill.core.BotDefinition; import co.aurasphere.botmill.core.BotMillPolicy; import co.aurasphere.botmill.core.BotMillSession; import co.aurasphere.botmill.fb.actionframe.ActionFrame; import co.aurasphere.botmill.fb.autoreply.AutoReply; import co.aurasphere.botmill.fb.event.FbBotMillEvent; import co.aurasphere.botmill.fb.model.annotation.FbBotMillInit; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; 
  public abstract class FbBot implements BotDefinition { /**
 * Base {@link BotDefinition} implementation.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 */  private static final Logger logger = LoggerFactory
			.getLogger(FbBot.class); /**
	 * The logger.
	 */  private List<ActionFrame> actionFrameList; /**
	 * A list of registered {@link FbBotMillEvent} for the current bot.
	 */ private BotMillPolicy botMillPolicy; /**
	 * The policy this bot follows when processing the callback handler list.
	 */ private BotMillSession botMillSession; /**
	 * The bot mill session.
	 */ private volatile FbBotMillEvent event; /**
	 * The {@link FbBotMillEvent} object created by this class for each
	 * annotated method.
	 */ 	 private volatile MessageEnvelope envelope; /** The envelope. */ 	 private volatile ActionFrame actionFrame; /** The action frame. */ 	 public synchronized void setEvent(FbBotMillEvent event) { this.event = event; } public synchronized FbBotMillEvent getEvent() { return this.event; } /**
	 * Sets the event.
	 *
	 * @param event the new event
	 */ 	 public synchronized void setEnvelope(MessageEnvelope envelope) { this.envelope = envelope; } public synchronized MessageEnvelope getEnvelope() { return this.envelope; } /**
	 * Sets the envelope.
	 *
	 * @param envelope the new envelope
	 */  public FbBot(BotMillPolicy botmillPolicy) { <FILL_ME> /**
	 * Base constructor. Instantiates a bot and registers it to the context.
	 * 
	 * @param botmillPolicy
	 *            the policy this bot should follow.
	 */ this.botMillPolicy = botmillPolicy; this.actionFrameList = new ArrayList<ActionFrame>(); this.buildAnnotatedInitBehaviour(); 		 		
		 // Create the botmill session. FbBotMillContext.getInstance().register(this); <FILL_ME> 		 }  	
 public FbBot() { this(BotMillPolicy.FIRST_ONLY); }  /**
	 * Base constructor. Instantiates a bot and registers it to the context.
	 */ public void defineBehaviour() { } ;  /**
	 * This is the method to define the behaviour of the bot. As of the
	 * introduction of the Annotation based configuration, this is overriden on
	 * the supertype level.
	 * 
	 * The method can still be overriden by a concrete Bot class and use to
	 * define behaviour.
	 */ public void addActionFrame(ActionFrame actionFrame) { this.actionFrameList.add(actionFrame); }  /**
	 * Adds an {@link ActionFrame} to this bot.
	 * 
	 * @param actionFrame
	 *            the actionFrame to add.
	 */ public void addActionFrame(FbBotMillEvent event, AutoReply reply) { ActionFrame frame = new ActionFrame(event, reply); this.actionFrameList.add(frame); }  /**
	 * Adds an {@link ActionFrame} to this bot.
	 * 
	 * @param event
	 *            the {@link FbBotMillEvent} to handle.
	 * @param reply
	 *            the {@link AutoReply} which should handle the event.
	 */ public void addActionFrame(FbBotMillEvent event, AutoReply... replies) { ActionFrame frame = new ActionFrame(event, replies); this.actionFrameList.add(frame); }  /**
	 * Adds an {@link ActionFrame} to this bot with multiple reply.
	 * 
	 * @param event
	 *            the {@link FbBotMillEvent} to handle.
	 * @param replies
	 *            the collection of {@link AutoReply} which should handle the
	 *            event.
	 */ private void buildAnnotatedInitBehaviour() { Method[] methods = this.getClass().getMethods(); for (Method method : methods) { if (method.isAnnotationPresent(FbBotMillInit.class)) { try { method.invoke(this); } catch (Exception e) { <FILL_ME> } } } }  /**
	 * Builds the annotated init behaviour.
	 */ protected void reply(AutoReply... replies) { for(AutoReply autoReply: replies) { autoReply.reply(this.getEnvelope()); } }  /**
	 * This method is used to create multiple replies.
	 *
	 * @param replies
	 *            the set of replies in a form of a var-args
	 */ protected final synchronized BotMillSession botMillSession() { return this.botMillSession; }  /**
	 * Bot mill session.
	 *
	 * @return the bot mill session
	 */ protected void reply(AutoReply reply) { reply.reply(this.getEnvelope()); } 	 /**
	 * This method is used to create a reply.
	 *
	 * @param reply
	 *            the reply
	 */ protected void addReply(AutoReply reply) { if(actionFrame == null) { actionFrame = new ActionFrame(this.getEvent()); } actionFrame.addReply(reply); } 	 /**
	 * Adds the reply.
	 *
	 * @param reply the reply
	 */ protected void executeReplies() { if(actionFrame.getEvent().verifyEventCondition(this.getEnvelope())) { if (actionFrame.getReplies() != null && actionFrame.getReplies().size() > 0) { if (actionFrame.processMultipleReply(envelope)
						&& this.botMillPolicy.equals(BotMillPolicy.FIRST_ONLY)) { } } else { if (actionFrame.process(envelope)
						&& this.botMillPolicy.equals(BotMillPolicy.FIRST_ONLY)) { } } } actionFrame = null; } 	 /**
	 * Execute replies.
	 */ public void processMessage(MessageEnvelope envelope) { 
	 for (ActionFrame f : this.actionFrameList) { /**
	 * Checks if there's any registered {@link FbBotMillEvent} for the incoming
	 * callback. If there's any, then the callback is handled. The chain will be
	 * processed according to the {@link BotMillPolicy} followed by this bot. If
	 * the policy is {@link BotMillPolicy#FIRST_ONLY}, the chain will be
	 * processed until the first callback matches. Otherwise, if the policy is
	 * {@link BotMillPolicy#PROCESS_ALL}, all the chain will always be
	 * processed.
	 * 
	 * @param envelope
	 *            the incoming message.
	 */ 		 this.envelope = new MessageEnvelope(); if (f.getReplies() != null && f.getReplies().size() > 0) { if (f.processMultipleReply(envelope)
						&& this.botMillPolicy.equals(BotMillPolicy.FIRST_ONLY)) { break; } } else { if (f.process(envelope)
						&& this.botMillPolicy.equals(BotMillPolicy.FIRST_ONLY)) { break; } } } } // If the policy is FIRST_ONLY stop processing the chain at the // first trigger. @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((actionFrameList == null) ? 0 : actionFrameList.hashCode()); result = prime * result
				+ ((botMillPolicy == null) ? 0 : botMillPolicy.hashCode()); result = prime * result
				+ ((botMillSession == null) ? 0 : botMillSession.hashCode()); result = prime * result + ((event == null) ? 0 : event.hashCode()); return result; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */ @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FbBot other = (FbBot) obj; if (actionFrameList == null) { if (other.actionFrameList != null)
				return false; } else if (!actionFrameList.equals(other.actionFrameList))
			return false; if (botMillPolicy != other.botMillPolicy)
			return false; if (botMillSession == null) { if (other.botMillSession != null)
				return false; } else if (!botMillSession.equals(other.botMillSession))
			return false; if (event == null) { if (other.event != null)
				return false; } else if (!event.equals(other.event))
			return false; return true; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ //	@Override //	public String toString() { //		return ""AbstractFbBot [actionFrameList="" + actionFrameList //				+ "", botMillPolicy="" + botMillPolicy + "", botMillSession="" //				+ botMillSession + "", event="" + event + ""]""; } //	} "
src/main/java/co/aurasphere/botmill/fb/FbBotApi.java,"package co.aurasphere.botmill.fb;

import co.aurasphere.botmill.core.BotDefinition;
import co.aurasphere.botmill.fb.autoreply.AutoReply;

/**
 * The Class FbBotApi.
 */
public class FbBotApi {
	
	/** The bot definition. */
	private static BotDefinition botDefinition;
	
	/**
	 * Sets the fb bot.
	 *
	 * @param botDefinition the new fb bot
	 */
	public static void setFbBot(BotDefinition botDefinition) {
		FbBotApi.botDefinition = botDefinition;
	}
	
	/**
	 * Reply.
	 *
	 * @param reply the reply
	 */
	public static void reply(AutoReply reply) {
		if(FbBotApi.botDefinition == null) {
			botDefinition = new FbBotApiBot();
		}
		((FbBot)FbBotApi.botDefinition).reply(reply);
	}


}
class FbBotApiBot extends FbBot implements BotDefinition {
	public FbBotApiBot() {
	}
}
",package co.aurasphere.botmill.fb; public class FbBotApi { private static BotDefinition botDefinition; public static void setFbBot(BotDefinition botDefinition) { FbBotApi.botDefinition = botDefinition; } public static void reply(AutoReply reply) { if(FbBotApi.botDefinition == null) { botDefinition = new FbBotApiBot(); } ((FbBot)FbBotApi.botDefinition).reply(reply); } } class FbBotApiBot extends FbBot implements BotDefinition { public FbBotApiBot() { } },0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,package co.aurasphere.botmill.fb; public class FbBotApi { private static BotDefinition botDefinition; public static void setFbBot(BotDefinition botDefinition) { FbBotApi.botDefinition = botDefinition; } public static void reply(AutoReply reply) { if(FbBotApi.botDefinition == null) { botDefinition = new FbBotApiBot(); } ((FbBot)FbBotApi.botDefinition).reply(reply); } } class FbBotApiBot extends FbBot implements BotDefinition { public FbBotApiBot() { } } ,"package co.aurasphere.botmill.fb; 
import co.aurasphere.botmill.core.BotDefinition; import co.aurasphere.botmill.fb.autoreply.AutoReply;  /**
 * The Class FbBotApi.
 */ public class FbBotApi { 	 /** The bot definition. */ private static BotDefinition botDefinition; 	 /**
	 * Sets the fb bot.
	 *
	 * @param botDefinition the new fb bot
	 */ public static void setFbBot(BotDefinition botDefinition) { FbBotApi.botDefinition = botDefinition; } 	 /**
	 * Reply.
	 *
	 * @param reply the reply
	 */ public static void reply(AutoReply reply) { if(FbBotApi.botDefinition == null) { botDefinition = new FbBotApiBot(); } ((FbBot)FbBotApi.botDefinition).reply(reply); } 
 } class FbBotApiBot extends FbBot implements BotDefinition { public FbBotApiBot() { } }  "
src/main/java/co/aurasphere/botmill/fb/FbBotConfiguration.java,"package co.aurasphere.botmill.fb;

import co.aurasphere.botmill.core.internal.util.ConfigurationUtils;

public abstract class FbBotConfiguration {

	/** The Constant FB_BOTMILL_PAGE_TOKEN. */
	private static final String FB_BOTMILL_PAGE_TOKEN = ""fb.page.token"";

	/** The Constant FB_BOTMILL_VALIDATION_TOKEN. */
	private static final String FB_BOTMILL_VALIDATION_TOKEN = ""fb.validation.token"";

	public FbBotConfiguration() {
		this.buildFbBotConfig();
	}

	/**
	 * Builds the Fb bot config.
	 *
	 * @throws BotMillMissingConfigurationException
	 *             the bot mill missing configuration exception
	 */
	private void buildFbBotConfig() {

		FbBotMillContext.getInstance().setup(
				ConfigurationUtils.getEncryptedConfiguration().getProperty(FB_BOTMILL_PAGE_TOKEN),
				ConfigurationUtils.getEncryptedConfiguration().getProperty(FB_BOTMILL_VALIDATION_TOKEN));

	}
}
","package co.aurasphere.botmill.fb; public abstract class FbBotConfiguration { private static final String FB_BOTMILL_PAGE_TOKEN = ""fb.page.token""; private static final String FB_BOTMILL_VALIDATION_TOKEN = ""fb.validation.token""; public FbBotConfiguration() { this.buildFbBotConfig(); } private void buildFbBotConfig() { FbBotMillContext.getInstance().setup(
				ConfigurationUtils.getEncryptedConfiguration().getProperty(FB_BOTMILL_PAGE_TOKEN),
				ConfigurationUtils.getEncryptedConfiguration().getProperty(FB_BOTMILL_VALIDATION_TOKEN)); } }",0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb; public abstract class FbBotConfiguration { private static final String FB_BOTMILL_PAGE_TOKEN = ""fb.page.token""; private static final String FB_BOTMILL_VALIDATION_TOKEN = ""fb.validation.token""; public FbBotConfiguration() { this.buildFbBotConfig(); } private void buildFbBotConfig() { FbBotMillContext.getInstance().setup(
				ConfigurationUtils.getEncryptedConfiguration().getProperty(FB_BOTMILL_PAGE_TOKEN),
				ConfigurationUtils.getEncryptedConfiguration().getProperty(FB_BOTMILL_VALIDATION_TOKEN)); } } ","package co.aurasphere.botmill.fb; 
import co.aurasphere.botmill.core.internal.util.ConfigurationUtils;  public abstract class FbBotConfiguration {  /** The Constant FB_BOTMILL_PAGE_TOKEN. */ private static final String FB_BOTMILL_PAGE_TOKEN = ""fb.page.token"";  /** The Constant FB_BOTMILL_VALIDATION_TOKEN. */ private static final String FB_BOTMILL_VALIDATION_TOKEN = ""fb.validation.token"";  public FbBotConfiguration() { this.buildFbBotConfig(); }  /**
	 * Builds the Fb bot config.
	 *
	 * @throws BotMillMissingConfigurationException
	 *             the bot mill missing configuration exception
	 */ private void buildFbBotConfig() {  FbBotMillContext.getInstance().setup(
				ConfigurationUtils.getEncryptedConfiguration().getProperty(FB_BOTMILL_PAGE_TOKEN),
				ConfigurationUtils.getEncryptedConfiguration().getProperty(FB_BOTMILL_VALIDATION_TOKEN));  } }  "
src/main/java/co/aurasphere/botmill/fb/FbBotMillContext.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb;

import java.util.ArrayList;
import java.util.List;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.support.FbBotMillMonitor;


/**
 * Class that contains all the context information used to handle bots and
 * communicate with Facebook. The context is a singleton.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 */
public class FbBotMillContext {

	/**
	 * A list of the registered bots in the context. A {@link FbBot} 
	 * can't be used unless it's registered to the context.
	 */
	private List<FbBot> registeredBots;

	/**
	 * The validation token used for the Facebook webhook. For more informations
	 * read Facebook Messenger Platform documentation.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/quickstart""
	 *      />Facebook Messenger Platform documentation</a>
	 * 
	 */
	private String validationToken;

	/**
	 * The current instance.
	 */
	private static FbBotMillContext instance;

	/**
	 * The page token used by Facebook for authentication. For more informations
	 * read Facebook Messenger Platform documentation.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/quickstart""
	 *      />Facebook Messenger Platform documentation</a>
	 * 
	 */
	private String pageToken;

	/**
	 * Boolean that indicates whether the validator is enabled or not.
	 */
	private boolean validationEnabled;

	/**
	 * A list of the registered monitors in the context.
	 * 
	 * @since 1.1.0
	 */
	private List<FbBotMillMonitor> registeredMonitors;
	
	
	/** The message envelope. */
	public MessageEnvelope messageEnvelope;

	/**
	 * Instantiates a new FbBotMillContext. The validator is enabled by default.
	 */
	private FbBotMillContext() {
		this.registeredBots = new ArrayList<FbBot>();
		this.validationEnabled = true;
		this.registeredMonitors = new ArrayList<FbBotMillMonitor>();
	}

	/**
	 * Registers an {@link FbBot} to the context. A bot can't be used
	 * unless it's registered to the context.
	 * 
	 * @param fbBot
	 *            the bot to register.
	 */
	void register(FbBot fbBot) {
		if (fbBot != null) {
			this.registeredBots.add(fbBot);
		}
	}

	/**
	 * Gets the current instance of FbBotMillContext.
	 *
	 * @return the current instance of FbBotMillContext.
	 */
	public static FbBotMillContext getInstance() {
		if (instance == null) {
			instance = new FbBotMillContext();
		}
		return instance;
	}

	/**
	 * Gets the {@link #registeredBots}.
	 *
	 * @return the {@link #registeredBots}.
	 */
	public List<FbBot> getRegisteredBots() {
		return this.registeredBots;
	}

	/**
	 * Gets the {@link #validationToken}.
	 *
	 * @return the {@link #validationToken}.
	 */
	public String getValidationToken() {
		return this.validationToken;
	}

	/**
	 * Sets the {@link #validationToken}. This method is deprecated. Use
	 * {@link #setup(String, String)} instead.
	 *
	 * @param validationToken
	 *            the {@link #validationToken} to set.
	 */
	@Deprecated
	public void setValidationToken(String validationToken) {
		this.validationToken = validationToken;
	}

	/**
	 * Gets the {@link #pageToken}.
	 *
	 * @return the {@link #pageToken}.
	 */
	public String getPageToken() {
		return this.pageToken;
	}

	/**
	 * Sets the {@link #pageToken}. This method is deprecated. Use
	 * {@link #setup(String, String)} instead.
	 *
	 * @param pageToken
	 *            the {@link #pageToken} to set.
	 */
	@Deprecated
	public void setPageToken(String pageToken) {
		this.pageToken = pageToken;
	}

	/**
	 * Checks if is validation enabled.
	 *
	 * @return true, if is validation enabled
	 */
	public boolean isValidationEnabled() {
		return this.validationEnabled;
	}

	/**
	 * Sets the {@link #validationEnabled}.
	 *
	 * @param validationEnabled
	 *            the {@link #validationEnabled} to set.
	 */
	public void setValidationEnabled(boolean validationEnabled) {
		this.validationEnabled = validationEnabled;
	}

	/**
	 * Convenience method for quickly setting up the FbBotMill environment.
	 * 
	 * @param pageToken
	 *            the validation token for the Facebook page.
	 * @param validationToken
	 *            the validation token for the Facebook webhook.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/quickstart"">
	 *      Facebook Messenger Platform documentation</a>
	 */
	public void setup(String pageToken, String validationToken) {
		this.pageToken = pageToken;
		this.validationToken = validationToken;
	}

	/**
	 * Registers a monitor to the context. A monitor needs to be registered to
	 * this context in order to be used.
	 * 
	 * @param monitor
	 *            the monitor to be registered.
	 * @since 1.1.0
	 */
	public void registerMonitor(FbBotMillMonitor monitor) {
		this.registeredMonitors.add(monitor);
	}

	/**
	 * Gets the list of registered monitors to this context.
	 * 
	 * @return a list of registered monitors to this context.
	 * @since 1.1.0
	 */
	public List<FbBotMillMonitor> getRegisteredMonitors() {
		return this.registeredMonitors;
	}
	
	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""FbBotMillContext [registeredBots="" + registeredBots
				+ "", validationToken="" + validationToken + "", pageToken=""
				+ pageToken + "", validationEnabled="" + validationEnabled + ""]"";
	}

}
","package co.aurasphere.botmill.fb; public class FbBotMillContext { private List<FbBot> registeredBots; private String validationToken; private static FbBotMillContext instance; private String pageToken; private boolean validationEnabled; private List<FbBotMillMonitor> registeredMonitors; public MessageEnvelope messageEnvelope; private FbBotMillContext() { this.registeredBots = new ArrayList<FbBot>(); this.validationEnabled = true; this.registeredMonitors = new ArrayList<FbBotMillMonitor>(); } void register(FbBot fbBot) { if (fbBot != null) { this.registeredBots.add(fbBot); } } public static FbBotMillContext getInstance() { if (instance == null) { instance = new FbBotMillContext(); } return instance; } public List<FbBot> getRegisteredBots() { return this.registeredBots; } public String getValidationToken() { return this.validationToken; } @Deprecated
	public void setValidationToken(String validationToken) { this.validationToken = validationToken; } public String getPageToken() { return this.pageToken; } @Deprecated
	public void setPageToken(String pageToken) { this.pageToken = pageToken; } public boolean isValidationEnabled() { return this.validationEnabled; } public void setValidationEnabled(boolean validationEnabled) { this.validationEnabled = validationEnabled; } public void setup(String pageToken, String validationToken) { this.pageToken = pageToken; this.validationToken = validationToken; } public void registerMonitor(FbBotMillMonitor monitor) { this.registeredMonitors.add(monitor); } public List<FbBotMillMonitor> getRegisteredMonitors() { return this.registeredMonitors; } @Override
	public String toString() { return ""FbBotMillContext [registeredBots="" + registeredBots
				+ "", validationToken="" + validationToken + "", pageToken=""
				+ pageToken + "", validationEnabled="" + validationEnabled + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb; public class FbBotMillContext { private List<FbBot> registeredBots; private String validationToken; private static FbBotMillContext instance; private String pageToken; private boolean validationEnabled; private List<FbBotMillMonitor> registeredMonitors; public MessageEnvelope messageEnvelope; private FbBotMillContext() { this.registeredBots = new ArrayList<FbBot>(); this.validationEnabled = true; this.registeredMonitors = new ArrayList<FbBotMillMonitor>(); } void register(FbBot fbBot) { if (fbBot != null) { this.registeredBots.add(fbBot); } } public static FbBotMillContext getInstance() { if (instance == null) { instance = new FbBotMillContext(); } return instance; } public List<FbBot> getRegisteredBots() { return this.registeredBots; } public String getValidationToken() { return this.validationToken; } @Deprecated
	public void setValidationToken(String validationToken) { this.validationToken = validationToken; } public String getPageToken() { return this.pageToken; } @Deprecated
	public void setPageToken(String pageToken) { this.pageToken = pageToken; } public boolean isValidationEnabled() { return this.validationEnabled; } public void setValidationEnabled(boolean validationEnabled) { this.validationEnabled = validationEnabled; } public void setup(String pageToken, String validationToken) { this.pageToken = pageToken; this.validationToken = validationToken; } public void registerMonitor(FbBotMillMonitor monitor) { this.registeredMonitors.add(monitor); } public List<FbBotMillMonitor> getRegisteredMonitors() { return this.registeredMonitors; } @Override
	public String toString() { return ""FbBotMillContext [registeredBots="" + registeredBots
				+ "", validationToken="" + validationToken + "", pageToken=""
				+ pageToken + "", validationEnabled="" + validationEnabled + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb; 
import java.util.ArrayList; import java.util.List; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.support.FbBotMillMonitor; 
  public class FbBotMillContext { /**
 * Class that contains all the context information used to handle bots and
 * communicate with Facebook. The context is a singleton.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 */  private List<FbBot> registeredBots; /**
	 * A list of the registered bots in the context. A {@link FbBot} 
	 * can't be used unless it's registered to the context.
	 */  private String validationToken; /**
	 * The validation token used for the Facebook webhook. For more informations
	 * read Facebook Messenger Platform documentation.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/quickstart""
	 *      />Facebook Messenger Platform documentation</a>
	 * 
	 */  private static FbBotMillContext instance; /**
	 * The current instance.
	 */  private String pageToken; /**
	 * The page token used by Facebook for authentication. For more informations
	 * read Facebook Messenger Platform documentation.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/quickstart""
	 *      />Facebook Messenger Platform documentation</a>
	 * 
	 */  private boolean validationEnabled; /**
	 * Boolean that indicates whether the validator is enabled or not.
	 */  private List<FbBotMillMonitor> registeredMonitors; /**
	 * A list of the registered monitors in the context.
	 * 
	 * @since 1.1.0
	 */ 	
	 public MessageEnvelope messageEnvelope; /** The message envelope. */  private FbBotMillContext() { this.registeredBots = new ArrayList<FbBot>(); this.validationEnabled = true; this.registeredMonitors = new ArrayList<FbBotMillMonitor>(); } /**
	 * Instantiates a new FbBotMillContext. The validator is enabled by default.
	 */  void register(FbBot fbBot) { if (fbBot != null) { this.registeredBots.add(fbBot); } } /**
	 * Registers an {@link FbBot} to the context. A bot can't be used
	 * unless it's registered to the context.
	 * 
	 * @param fbBot
	 *            the bot to register.
	 */  public static FbBotMillContext getInstance() { if (instance == null) { instance = new FbBotMillContext(); } return instance; } /**
	 * Gets the current instance of FbBotMillContext.
	 *
	 * @return the current instance of FbBotMillContext.
	 */  public List<FbBot> getRegisteredBots() { return this.registeredBots; } /**
	 * Gets the {@link #registeredBots}.
	 *
	 * @return the {@link #registeredBots}.
	 */  public String getValidationToken() { return this.validationToken; } /**
	 * Gets the {@link #validationToken}.
	 *
	 * @return the {@link #validationToken}.
	 */  @Deprecated
	public void setValidationToken(String validationToken) { this.validationToken = validationToken; } /**
	 * Sets the {@link #validationToken}. This method is deprecated. Use
	 * {@link #setup(String, String)} instead.
	 *
	 * @param validationToken
	 *            the {@link #validationToken} to set.
	 */  public String getPageToken() { return this.pageToken; } /**
	 * Gets the {@link #pageToken}.
	 *
	 * @return the {@link #pageToken}.
	 */  @Deprecated
	public void setPageToken(String pageToken) { this.pageToken = pageToken; } /**
	 * Sets the {@link #pageToken}. This method is deprecated. Use
	 * {@link #setup(String, String)} instead.
	 *
	 * @param pageToken
	 *            the {@link #pageToken} to set.
	 */  public boolean isValidationEnabled() { return this.validationEnabled; } /**
	 * Checks if is validation enabled.
	 *
	 * @return true, if is validation enabled
	 */  public void setValidationEnabled(boolean validationEnabled) { this.validationEnabled = validationEnabled; } /**
	 * Sets the {@link #validationEnabled}.
	 *
	 * @param validationEnabled
	 *            the {@link #validationEnabled} to set.
	 */  public void setup(String pageToken, String validationToken) { this.pageToken = pageToken; this.validationToken = validationToken; } /**
	 * Convenience method for quickly setting up the FbBotMill environment.
	 * 
	 * @param pageToken
	 *            the validation token for the Facebook page.
	 * @param validationToken
	 *            the validation token for the Facebook webhook.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/quickstart"">
	 *      Facebook Messenger Platform documentation</a>
	 */  public void registerMonitor(FbBotMillMonitor monitor) { this.registeredMonitors.add(monitor); } /**
	 * Registers a monitor to the context. A monitor needs to be registered to
	 * this context in order to be used.
	 * 
	 * @param monitor
	 *            the monitor to be registered.
	 * @since 1.1.0
	 */  public List<FbBotMillMonitor> getRegisteredMonitors() { return this.registeredMonitors; } /**
	 * Gets the list of registered monitors to this context.
	 * 
	 * @return a list of registered monitors to this context.
	 * @since 1.1.0
	 */ 	 @Override
	public String toString() { return ""FbBotMillContext [registeredBots="" + registeredBots
				+ "", validationToken="" + validationToken + "", pageToken=""
				+ pageToken + "", validationEnabled="" + validationEnabled + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/FbBotMillServlet.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import co.aurasphere.botmill.core.BotDefinition;
import co.aurasphere.botmill.core.base.BotMillServlet;
import co.aurasphere.botmill.fb.internal.util.json.FbBotMillJsonUtils;
import co.aurasphere.botmill.fb.internal.util.network.FbBotMillNetworkConstants;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.incoming.MessengerCallback;
import co.aurasphere.botmill.fb.model.incoming.MessengerCallbackEntry;
import co.aurasphere.botmill.fb.model.incoming.handler.IncomingToOutgoingMessageHandler;


/**
 * Main Servlet for FbBotMill framework. This servlet requires an init-param
 * containing the fully qualified name of a class implementing
 * {@link BotDefinition} in which the initial configuration is done. If not such
 * class is found or can't be loaded, a ServletException is thrown during
 * initialization.
 * 
 * The FbBotMillServlet supports GET requests only for the Subscribing phase and
 * POST requests for all the Facebook callbacks. For more information about how
 * the communication is handled, check the documentation for {@link #doGet},
 * {@link #doPost(HttpServletRequest, HttpServletResponse)} and Facebook's
 * documentation with the link below.
 *
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/quickstart"">
 *      Facebook Subscription info</a>
 * 
 */
public class FbBotMillServlet extends BotMillServlet {

	/**
	 * The logger.
	 */
	private static final Logger logger = LoggerFactory
			.getLogger(FbBotMillServlet.class);

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;
	

	/**
	 * Specifies how to handle a GET request. GET requests are used by Facebook
	 * only during the WebHook registration. During this phase, the
	 * FbBotMillServlet checks that the
	 * {@link FbBotMillNetworkConstants#HUB_MODE_PARAMETER} value received
	 * equals to {@link FbBotMillNetworkConstants#HUB_MODE_SUBSCRIBE} and that
	 * the {@link FbBotMillNetworkConstants#HUB_VERIFY_TOKEN_PARAMETER} value
	 * received equals to the {@link FbBotMillContext#getValidationToken()}. If
	 * that's true, then the FbBotMillServlet will reply sending back the value
	 * of the {@link FbBotMillNetworkConstants#HUB_CHALLENGE_PARAMETER}
	 * received, in order to confirm the registration, otherwise it will return
	 * an error 403.
	 *
	 * @param req
	 *            the req
	 * @param resp
	 *            the resp
	 * @throws ServletException
	 *             the servlet exception
	 * @throws IOException
	 *             Signals that an I/O exception has occurred.
	 */
	@Override
	@SuppressWarnings(""unchecked"")
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {

		// Retrieves GET parameters.
		String validationToken = FbBotMillContext.getInstance()
				.getValidationToken();
		Map<String, String[]> parameters = req.getParameterMap();
		String hubMode = safeUnwrapGetParameters(parameters
				.get(FbBotMillNetworkConstants.HUB_MODE_PARAMETER));
		String hubToken = safeUnwrapGetParameters(parameters
				.get(FbBotMillNetworkConstants.HUB_VERIFY_TOKEN_PARAMETER));
		String hubChallenge = safeUnwrapGetParameters(parameters
				.get(FbBotMillNetworkConstants.HUB_CHALLENGE_PARAMETER));

		// Checks parameters and responds according to that.
		if (hubMode.equals(FbBotMillNetworkConstants.HUB_MODE_SUBSCRIBE)
				&& hubToken.equals(validationToken)) {
			logger.info(""Subscription OK."");
			resp.setStatus(200);
			resp.setContentType(""text/plain"");
			resp.getWriter().write(hubChallenge);
		} else {
			logger.warn(""GET received is not a subscription or wrong validation token. Ensure you have set the correct validation token using FbBotMillContext.getInstance().setup(String, String)."");
			resp.sendError(403);
		}
	}

	/**
	 * Specifies how to handle a POST request. It parses the request as a
	 * {@link MessengerCallback} object. If the request is not a
	 * MessengerCallback, then the FbBotMillServlet logs an error and does
	 * nothing, otherwise it will forward the request to all registered bots in
	 * order to let them process the callbacks.
	 *
	 * @param req
	 *            the req
	 * @param resp
	 *            the resp
	 * @throws ServletException
	 *             the servlet exception
	 * @throws IOException
	 *             Signals that an I/O exception has occurred.
	 */
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {

		logger.trace(""POST received!"");
		MessengerCallback callback = new MessengerCallback();

		// Extrapolates and logs the JSON for debugging.
		String json = readerToString(req.getReader());
		logger.debug(""JSON input: "" + json);

		// Parses the request as a MessengerCallback.
		try {
			callback = FbBotMillJsonUtils.fromJson(json, MessengerCallback.class);
		} catch (Exception e) {
			logger.error(""Error during MessengerCallback parsing: "", e);
			return;
		}

		// If the received POST is a MessengerCallback, it forwards the last
		// envelope of all the callbacks received to the registered bots.
		if (callback != null) {
			List<MessengerCallbackEntry> callbackEntries = callback.getEntry();
			if (callbackEntries != null) {
				for (MessengerCallbackEntry entry : callbackEntries) {
					List<MessageEnvelope> envelopes = entry.getMessaging();
					if (envelopes != null) {
						MessageEnvelope lastEnvelope = envelopes.get(envelopes.size() - 1);
						IncomingToOutgoingMessageHandler.getInstance().process(lastEnvelope);
					}
				}
			}
		}
		// Always set to ok.
		resp.setStatus(HttpServletResponse.SC_OK);
	}

	/**
	 * Method which returns the first String in a String array if present or the
	 * empty String otherwise. Used to unwrap the GET arguments from an
	 * {@link HttpServletRequest#getParameterMap()} which returns a String array
	 * for each GET parameter.
	 * 
	 * @param parameter
	 *            the String array to unwrap.
	 * @return the first String of the array if found or the empty String
	 *         otherwise.
	 */
	private static String safeUnwrapGetParameters(String[] parameter) {
		if (parameter == null || parameter[0] == null) {
			return """";
		}
		return parameter[0];
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""FbBotMillServlet []"";
	}

}","package co.aurasphere.botmill.fb; import java.io.IOException; import java.util.List; import java.util.Map; import javax.servlet.ServletException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import co.aurasphere.botmill.core.BotDefinition; import co.aurasphere.botmill.core.base.BotMillServlet; import co.aurasphere.botmill.fb.internal.util.json.FbBotMillJsonUtils; import co.aurasphere.botmill.fb.internal.util.network.FbBotMillNetworkConstants; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.incoming.MessengerCallback; import co.aurasphere.botmill.fb.model.incoming.MessengerCallbackEntry; import co.aurasphere.botmill.fb.model.incoming.handler.IncomingToOutgoingMessageHandler; public class FbBotMillServlet extends BotMillServlet { private static final Logger logger = LoggerFactory
			.getLogger(FbBotMillServlet.class); private static final long serialVersionUID = 1L; @Override
	@SuppressWarnings(""unchecked"")
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException { String validationToken = FbBotMillContext.getInstance()
				.getValidationToken(); Map<String, String[]> parameters = req.getParameterMap(); String hubMode = safeUnwrapGetParameters(parameters
				.get(FbBotMillNetworkConstants.HUB_MODE_PARAMETER)); String hubToken = safeUnwrapGetParameters(parameters
				.get(FbBotMillNetworkConstants.HUB_VERIFY_TOKEN_PARAMETER)); String hubChallenge = safeUnwrapGetParameters(parameters
				.get(FbBotMillNetworkConstants.HUB_CHALLENGE_PARAMETER)); if (hubMode.equals(FbBotMillNetworkConstants.HUB_MODE_SUBSCRIBE)
				&& hubToken.equals(validationToken)) { resp.setStatus(200); resp.setContentType(""text/plain""); resp.getWriter().write(hubChallenge); } else { resp.sendError(403); } } @Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException { MessengerCallback callback = new MessengerCallback(); String json = readerToString(req.getReader()); try { callback = FbBotMillJsonUtils.fromJson(json, MessengerCallback.class); } catch (Exception e) { return; } if (callback != null) { List<MessengerCallbackEntry> callbackEntries = callback.getEntry(); if (callbackEntries != null) { for (MessengerCallbackEntry entry : callbackEntries) { List<MessageEnvelope> envelopes = entry.getMessaging(); if (envelopes != null) { MessageEnvelope lastEnvelope = envelopes.get(envelopes.size() - 1); IncomingToOutgoingMessageHandler.getInstance().process(lastEnvelope); } } } } resp.setStatus(HttpServletResponse.SC_OK); } private static String safeUnwrapGetParameters(String[] parameter) { if (parameter == null || parameter[0] == null) { return """"; } return parameter[0]; } @Override
	public String toString() { return ""FbBotMillServlet []""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb; import java.io.IOException; import java.util.List; import java.util.Map; import javax.servlet.ServletException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import co.aurasphere.botmill.core.BotDefinition; import co.aurasphere.botmill.core.base.BotMillServlet; import co.aurasphere.botmill.fb.internal.util.json.FbBotMillJsonUtils; import co.aurasphere.botmill.fb.internal.util.network.FbBotMillNetworkConstants; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.incoming.MessengerCallback; import co.aurasphere.botmill.fb.model.incoming.MessengerCallbackEntry; import co.aurasphere.botmill.fb.model.incoming.handler.IncomingToOutgoingMessageHandler; public class FbBotMillServlet extends BotMillServlet { private static final Logger logger = LoggerFactory
			.getLogger(FbBotMillServlet.class); private static final long serialVersionUID = 1L; @Override
	@SuppressWarnings(""unchecked"")
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException { String validationToken = FbBotMillContext.getInstance()
				.getValidationToken(); Map<String, String[]> parameters = req.getParameterMap(); String hubMode = safeUnwrapGetParameters(parameters
				.get(FbBotMillNetworkConstants.HUB_MODE_PARAMETER)); String hubToken = safeUnwrapGetParameters(parameters
				.get(FbBotMillNetworkConstants.HUB_VERIFY_TOKEN_PARAMETER)); String hubChallenge = safeUnwrapGetParameters(parameters
				.get(FbBotMillNetworkConstants.HUB_CHALLENGE_PARAMETER)); if (hubMode.equals(FbBotMillNetworkConstants.HUB_MODE_SUBSCRIBE)
				&& hubToken.equals(validationToken)) { <FILL_ME> resp.setStatus(200); resp.setContentType(""text/plain""); resp.getWriter().write(hubChallenge); } else { <FILL_ME> resp.sendError(403); } } @Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException { <FILL_ME> MessengerCallback callback = new MessengerCallback(); String json = readerToString(req.getReader()); <FILL_ME> try { callback = FbBotMillJsonUtils.fromJson(json, MessengerCallback.class); } catch (Exception e) { <FILL_ME> return; } if (callback != null) { List<MessengerCallbackEntry> callbackEntries = callback.getEntry(); if (callbackEntries != null) { for (MessengerCallbackEntry entry : callbackEntries) { List<MessageEnvelope> envelopes = entry.getMessaging(); if (envelopes != null) { MessageEnvelope lastEnvelope = envelopes.get(envelopes.size() - 1); IncomingToOutgoingMessageHandler.getInstance().process(lastEnvelope); } } } } resp.setStatus(HttpServletResponse.SC_OK); } private static String safeUnwrapGetParameters(String[] parameter) { if (parameter == null || parameter[0] == null) { return """"; } return parameter[0]; } @Override
	public String toString() { return ""FbBotMillServlet []""; } }","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb;  import java.io.IOException; import java.util.List; import java.util.Map;  import javax.servlet.ServletException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse;  import org.slf4j.Logger; import org.slf4j.LoggerFactory;  import co.aurasphere.botmill.core.BotDefinition; import co.aurasphere.botmill.core.base.BotMillServlet; import co.aurasphere.botmill.fb.internal.util.json.FbBotMillJsonUtils; import co.aurasphere.botmill.fb.internal.util.network.FbBotMillNetworkConstants; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.incoming.MessengerCallback; import co.aurasphere.botmill.fb.model.incoming.MessengerCallbackEntry; import co.aurasphere.botmill.fb.model.incoming.handler.IncomingToOutgoingMessageHandler; 
 /**
 * Main Servlet for FbBotMill framework. This servlet requires an init-param
 * containing the fully qualified name of a class implementing
 * {@link BotDefinition} in which the initial configuration is done. If not such
 * class is found or can't be loaded, a ServletException is thrown during
 * initialization.
 * 
 * The FbBotMillServlet supports GET requests only for the Subscribing phase and
 * POST requests for all the Facebook callbacks. For more information about how
 * the communication is handled, check the documentation for {@link #doGet},
 * {@link #doPost(HttpServletRequest, HttpServletResponse)} and Facebook's
 * documentation with the link below.
 *
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/quickstart"">
 *      Facebook Subscription info</a>
 * 
 */ public class FbBotMillServlet extends BotMillServlet {  /**
	 * The logger.
	 */ private static final Logger logger = LoggerFactory
			.getLogger(FbBotMillServlet.class);  /**
	 * The serial version UID.
	 */ private static final long serialVersionUID = 1L; 	
 /**
	 * Specifies how to handle a GET request. GET requests are used by Facebook
	 * only during the WebHook registration. During this phase, the
	 * FbBotMillServlet checks that the
	 * {@link FbBotMillNetworkConstants#HUB_MODE_PARAMETER} value received
	 * equals to {@link FbBotMillNetworkConstants#HUB_MODE_SUBSCRIBE} and that
	 * the {@link FbBotMillNetworkConstants#HUB_VERIFY_TOKEN_PARAMETER} value
	 * received equals to the {@link FbBotMillContext#getValidationToken()}. If
	 * that's true, then the FbBotMillServlet will reply sending back the value
	 * of the {@link FbBotMillNetworkConstants#HUB_CHALLENGE_PARAMETER}
	 * received, in order to confirm the registration, otherwise it will return
	 * an error 403.
	 *
	 * @param req
	 *            the req
	 * @param resp
	 *            the resp
	 * @throws ServletException
	 *             the servlet exception
	 * @throws IOException
	 *             Signals that an I/O exception has occurred.
	 */ @Override
	@SuppressWarnings(""unchecked"")
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {  // Retrieves GET parameters. String validationToken = FbBotMillContext.getInstance()
				.getValidationToken(); Map<String, String[]> parameters = req.getParameterMap(); String hubMode = safeUnwrapGetParameters(parameters
				.get(FbBotMillNetworkConstants.HUB_MODE_PARAMETER)); String hubToken = safeUnwrapGetParameters(parameters
				.get(FbBotMillNetworkConstants.HUB_VERIFY_TOKEN_PARAMETER)); String hubChallenge = safeUnwrapGetParameters(parameters
				.get(FbBotMillNetworkConstants.HUB_CHALLENGE_PARAMETER));  // Checks parameters and responds according to that. if (hubMode.equals(FbBotMillNetworkConstants.HUB_MODE_SUBSCRIBE)
				&& hubToken.equals(validationToken)) { <FILL_ME> resp.setStatus(200); resp.setContentType(""text/plain""); resp.getWriter().write(hubChallenge); } else { <FILL_ME> resp.sendError(403); } }  /**
	 * Specifies how to handle a POST request. It parses the request as a
	 * {@link MessengerCallback} object. If the request is not a
	 * MessengerCallback, then the FbBotMillServlet logs an error and does
	 * nothing, otherwise it will forward the request to all registered bots in
	 * order to let them process the callbacks.
	 *
	 * @param req
	 *            the req
	 * @param resp
	 *            the resp
	 * @throws ServletException
	 *             the servlet exception
	 * @throws IOException
	 *             Signals that an I/O exception has occurred.
	 */ @Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException { <FILL_ME>  MessengerCallback callback = new MessengerCallback();  // Extrapolates and logs the JSON for debugging. String json = readerToString(req.getReader()); <FILL_ME>  // Parses the request as a MessengerCallback. try { callback = FbBotMillJsonUtils.fromJson(json, MessengerCallback.class); } catch (Exception e) { <FILL_ME> return; }  // If the received POST is a MessengerCallback, it forwards the last // envelope of all the callbacks received to the registered bots. if (callback != null) { List<MessengerCallbackEntry> callbackEntries = callback.getEntry(); if (callbackEntries != null) { for (MessengerCallbackEntry entry : callbackEntries) { List<MessageEnvelope> envelopes = entry.getMessaging(); if (envelopes != null) { MessageEnvelope lastEnvelope = envelopes.get(envelopes.size() - 1); IncomingToOutgoingMessageHandler.getInstance().process(lastEnvelope); } } } } // Always set to ok. resp.setStatus(HttpServletResponse.SC_OK); }  /**
	 * Method which returns the first String in a String array if present or the
	 * empty String otherwise. Used to unwrap the GET arguments from an
	 * {@link HttpServletRequest#getParameterMap()} which returns a String array
	 * for each GET parameter.
	 * 
	 * @param parameter
	 *            the String array to unwrap.
	 * @return the first String of the array if found or the empty String
	 *         otherwise.
	 */ private static String safeUnwrapGetParameters(String[] parameter) { if (parameter == null || parameter[0] == null) { return """"; } return parameter[0]; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ @Override
	public String toString() { return ""FbBotMillServlet []""; }  }"
src/main/java/co/aurasphere/botmill/fb/actionframe/ActionFrame.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.actionframe;

import java.util.ArrayList;
import java.util.List;

import co.aurasphere.botmill.fb.autoreply.AutoReply;
import co.aurasphere.botmill.fb.event.FbBotMillEvent;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;

/**
 * Class that represents a {@link FbBotMillEvent} and the {@link AutoReply} to
 * it.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 */
public class ActionFrame {

	/**
	 * The event of this frame that will trigger the reply.
	 */
	private FbBotMillEvent event;

	/**
	 * The reply of this frame to send if the event is triggered.
	 */
	private AutoReply reply;

	/**
	 * The replies of this frame to send if the event is triggered.
	 */
	private List<AutoReply> replies;

	/**
	 * Gets the reply.
	 *
	 * @return the reply
	 */
	public AutoReply getReply() {
		return this.reply;
	}

	/**
	 * Gets the event.
	 *
	 * @return the event
	 */
	public FbBotMillEvent getEvent() {
		return this.event;
	}

	/**
	 * Gets the replies.
	 *
	 * @return the replies
	 */
	public List<AutoReply> getReplies() {
		return replies;
	}

	/**
	 * Instantiates a new action frame.
	 *
	 * @param event
	 *            the event
	 */
	public ActionFrame(FbBotMillEvent event) {
		this.event = event;
		this.replies = new ArrayList<AutoReply>();
	}

	/**
	 * Instantiates a new action frame.
	 *
	 * @param event
	 *            the {@link #event}.
	 * @param reply
	 *            the {@link #reply}.
	 */
	public ActionFrame(FbBotMillEvent event, AutoReply reply) {
		this.event = event;
		this.reply = reply;
	}

	/**
	 * Instantiates a new action frame with multiple / collection replies.
	 *
	 * @param event
	 *            the {@link #event}.
	 * @param replies
	 *            the {@link #replies}.
	 */
	public ActionFrame(FbBotMillEvent event, AutoReply... replies) {
		this.event = event;
		for (AutoReply autoReply : replies) {
			this.replies.add(autoReply);
		}

	}

	/**
	 * Adds the reply.
	 *
	 * @param autoReply
	 *            the auto reply
	 */
	public void addReply(AutoReply autoReply) {
		this.getReplies().add(autoReply);
	}

	/**
	 * Executes the reply if the event is triggered.
	 *
	 * @param envelope
	 *            the incoming message.
	 * @return true, if the event has been triggered.
	 */
	public boolean process(MessageEnvelope envelope) {
		if (this.event == null) {
			return false;
		}

		boolean triggered = this.event.verifyEventCondition(envelope);
		if (triggered) {
			beforeReply(envelope);
			if (this.reply != null) {
				this.reply.reply(envelope);
			}
			afterReply(envelope);
		}
		return triggered;
	}

	/**
	 * Executes multiple replies when multiple autoreply is set.
	 * 
	 * @param envelope
	 *            the incoming message.
	 * @return true, if the event has been triggered.
	 */
	public boolean processMultipleReply(MessageEnvelope envelope) {
		if (this.event == null) {
			return false;
		}
		boolean triggered = this.event.verifyEventCondition(envelope);
		if (triggered) {
			beforeReply(envelope);
			if (this.replies != null) {
				synchronized (replies) {
					for (AutoReply reply : replies) {
						reply.reply(envelope);
					}
				}
			}
			afterReply(envelope);
		}
		return triggered;
	}

	/**
	 * Convenience method executed before the reply is sent to the user. Default
	 * implementation does nothing, but you can override it with your desired
	 * behavior.
	 * 
	 * @param envelope
	 *            the incoming message.
	 */
	public void beforeReply(MessageEnvelope envelope) {
	};

	/**
	 * Convenience method executed after the reply is sent to the user. Default
	 * implementation does nothing, but you can override it with your desired
	 * behavior.
	 * 
	 * @param envelope
	 *            the incoming message.
	 */
	public void afterReply(MessageEnvelope envelope) {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((event == null) ? 0 : event.hashCode());
		result = prime * result + ((reply == null) ? 0 : reply.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ActionFrame other = (ActionFrame) obj;
		if (event == null) {
			if (other.event != null)
				return false;
		} else if (!event.equals(other.event))
			return false;
		if (reply == null) {
			if (other.reply != null)
				return false;
		} else if (!reply.equals(other.reply))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""ActionFrame [event="" + event + "", reply="" + reply + ""]"";
	};

}
","package co.aurasphere.botmill.fb.actionframe; public class ActionFrame { private FbBotMillEvent event; private AutoReply reply; private List<AutoReply> replies; public AutoReply getReply() { return this.reply; } public FbBotMillEvent getEvent() { return this.event; } public List<AutoReply> getReplies() { return replies; } public ActionFrame(FbBotMillEvent event) { this.event = event; this.replies = new ArrayList<AutoReply>(); } public ActionFrame(FbBotMillEvent event, AutoReply reply) { this.event = event; this.reply = reply; } public ActionFrame(FbBotMillEvent event, AutoReply... replies) { this.event = event; for (AutoReply autoReply : replies) { this.replies.add(autoReply); } } public void addReply(AutoReply autoReply) { this.getReplies().add(autoReply); } public boolean process(MessageEnvelope envelope) { if (this.event == null) { return false; } boolean triggered = this.event.verifyEventCondition(envelope); if (triggered) { beforeReply(envelope); if (this.reply != null) { this.reply.reply(envelope); } afterReply(envelope); } return triggered; } public boolean processMultipleReply(MessageEnvelope envelope) { if (this.event == null) { return false; } boolean triggered = this.event.verifyEventCondition(envelope); if (triggered) { beforeReply(envelope); if (this.replies != null) { synchronized (replies) { for (AutoReply reply : replies) { reply.reply(envelope); } } } afterReply(envelope); } return triggered; } public void beforeReply(MessageEnvelope envelope) { } ; public void afterReply(MessageEnvelope envelope) { } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((event == null) ? 0 : event.hashCode()); result = prime * result + ((reply == null) ? 0 : reply.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ActionFrame other = (ActionFrame) obj; if (event == null) { if (other.event != null)
				return false; } else if (!event.equals(other.event))
			return false; if (reply == null) { if (other.reply != null)
				return false; } else if (!reply.equals(other.reply))
			return false; return true; } @Override
	public String toString() { return ""ActionFrame [event="" + event + "", reply="" + reply + ""]""; } ; }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.actionframe; public class ActionFrame { private FbBotMillEvent event; private AutoReply reply; private List<AutoReply> replies; public AutoReply getReply() { return this.reply; } public FbBotMillEvent getEvent() { return this.event; } public List<AutoReply> getReplies() { return replies; } public ActionFrame(FbBotMillEvent event) { this.event = event; this.replies = new ArrayList<AutoReply>(); } public ActionFrame(FbBotMillEvent event, AutoReply reply) { this.event = event; this.reply = reply; } public ActionFrame(FbBotMillEvent event, AutoReply... replies) { this.event = event; for (AutoReply autoReply : replies) { this.replies.add(autoReply); } } public void addReply(AutoReply autoReply) { this.getReplies().add(autoReply); } public boolean process(MessageEnvelope envelope) { if (this.event == null) { return false; } boolean triggered = this.event.verifyEventCondition(envelope); if (triggered) { beforeReply(envelope); if (this.reply != null) { this.reply.reply(envelope); } afterReply(envelope); } return triggered; } public boolean processMultipleReply(MessageEnvelope envelope) { if (this.event == null) { return false; } boolean triggered = this.event.verifyEventCondition(envelope); if (triggered) { beforeReply(envelope); if (this.replies != null) { synchronized (replies) { for (AutoReply reply : replies) { reply.reply(envelope); } } } afterReply(envelope); } return triggered; } public void beforeReply(MessageEnvelope envelope) { } ; public void afterReply(MessageEnvelope envelope) { } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((event == null) ? 0 : event.hashCode()); result = prime * result + ((reply == null) ? 0 : reply.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ActionFrame other = (ActionFrame) obj; if (event == null) { if (other.event != null)
				return false; } else if (!event.equals(other.event))
			return false; if (reply == null) { if (other.reply != null)
				return false; } else if (!reply.equals(other.reply))
			return false; return true; } @Override
	public String toString() { return ""ActionFrame [event="" + event + "", reply="" + reply + ""]""; } ; } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.actionframe; 
import java.util.ArrayList; import java.util.List; 
import co.aurasphere.botmill.fb.autoreply.AutoReply; import co.aurasphere.botmill.fb.event.FbBotMillEvent; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;  /**
 * Class that represents a {@link FbBotMillEvent} and the {@link AutoReply} to
 * it.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 */ public class ActionFrame {  /**
	 * The event of this frame that will trigger the reply.
	 */ private FbBotMillEvent event;  /**
	 * The reply of this frame to send if the event is triggered.
	 */ private AutoReply reply;  /**
	 * The replies of this frame to send if the event is triggered.
	 */ private List<AutoReply> replies;  /**
	 * Gets the reply.
	 *
	 * @return the reply
	 */ public AutoReply getReply() { return this.reply; }  /**
	 * Gets the event.
	 *
	 * @return the event
	 */ public FbBotMillEvent getEvent() { return this.event; }  /**
	 * Gets the replies.
	 *
	 * @return the replies
	 */ public List<AutoReply> getReplies() { return replies; }  /**
	 * Instantiates a new action frame.
	 *
	 * @param event
	 *            the event
	 */ public ActionFrame(FbBotMillEvent event) { this.event = event; this.replies = new ArrayList<AutoReply>(); }  /**
	 * Instantiates a new action frame.
	 *
	 * @param event
	 *            the {@link #event}.
	 * @param reply
	 *            the {@link #reply}.
	 */ public ActionFrame(FbBotMillEvent event, AutoReply reply) { this.event = event; this.reply = reply; }  /**
	 * Instantiates a new action frame with multiple / collection replies.
	 *
	 * @param event
	 *            the {@link #event}.
	 * @param replies
	 *            the {@link #replies}.
	 */ public ActionFrame(FbBotMillEvent event, AutoReply... replies) { this.event = event; for (AutoReply autoReply : replies) { this.replies.add(autoReply); }  }  /**
	 * Adds the reply.
	 *
	 * @param autoReply
	 *            the auto reply
	 */ public void addReply(AutoReply autoReply) { this.getReplies().add(autoReply); }  /**
	 * Executes the reply if the event is triggered.
	 *
	 * @param envelope
	 *            the incoming message.
	 * @return true, if the event has been triggered.
	 */ public boolean process(MessageEnvelope envelope) { if (this.event == null) { return false; }  boolean triggered = this.event.verifyEventCondition(envelope); if (triggered) { beforeReply(envelope); if (this.reply != null) { this.reply.reply(envelope); } afterReply(envelope); } return triggered; }  /**
	 * Executes multiple replies when multiple autoreply is set.
	 * 
	 * @param envelope
	 *            the incoming message.
	 * @return true, if the event has been triggered.
	 */ public boolean processMultipleReply(MessageEnvelope envelope) { if (this.event == null) { return false; } boolean triggered = this.event.verifyEventCondition(envelope); if (triggered) { beforeReply(envelope); if (this.replies != null) { synchronized (replies) { for (AutoReply reply : replies) { reply.reply(envelope); } } } afterReply(envelope); } return triggered; }  /**
	 * Convenience method executed before the reply is sent to the user. Default
	 * implementation does nothing, but you can override it with your desired
	 * behavior.
	 * 
	 * @param envelope
	 *            the incoming message.
	 */ public void beforeReply(MessageEnvelope envelope) { } ;  /**
	 * Convenience method executed after the reply is sent to the user. Default
	 * implementation does nothing, but you can override it with your desired
	 * behavior.
	 * 
	 * @param envelope
	 *            the incoming message.
	 */ public void afterReply(MessageEnvelope envelope) { }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */ @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((event == null) ? 0 : event.hashCode()); result = prime * result + ((reply == null) ? 0 : reply.hashCode()); return result; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */ @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ActionFrame other = (ActionFrame) obj; if (event == null) { if (other.event != null)
				return false; } else if (!event.equals(other.event))
			return false; if (reply == null) { if (other.reply != null)
				return false; } else if (!reply.equals(other.reply))
			return false; return true; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ @Override
	public String toString() { return ""ActionFrame [event="" + event + "", reply="" + reply + ""]""; } ;  }  "
src/main/java/co/aurasphere/botmill/fb/api/MessagingInsightApi.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.api;

import co.aurasphere.botmill.fb.internal.util.network.FbBotMillNetworkController;
import co.aurasphere.botmill.fb.model.api.messaginginsight.DailyUniqueActiveThreadCounts;
import co.aurasphere.botmill.fb.model.api.messaginginsight.DailyUniqueConversationCounts;

/**
 * Base class for handling Messaging Insight API.
 * 
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/insights/page-messaging""
 *      >Facebook's Messaging Insight API Reference.</a>
 * @since 2.0.0
 */
public class MessagingInsightApi {

	/**
	 * Instantiates a new MessagingInsightApi.
	 */
	private MessagingInsightApi() {
	}

	/**
	 * Gets the daily unique active thread counts.
	 *
	 * @return the daily unique active thread counts.
	 */
	public static DailyUniqueActiveThreadCounts getDailyUniqueActiveThreadCounts() {
		return FbBotMillNetworkController.getDailyUniqueActiveThreadCounts();
	}

	/**
	 * Gets the daily unique conversation counts.
	 *
	 * @return the daily unique conversation counts.
	 */
	public static DailyUniqueConversationCounts getDailyUniqueConversationCounts() {
		return FbBotMillNetworkController.getDailyUniqueConversationCounts();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""MessagingInsightApi []"";
	}

}
","package co.aurasphere.botmill.fb.api; public class MessagingInsightApi { private MessagingInsightApi() { } public static DailyUniqueActiveThreadCounts getDailyUniqueActiveThreadCounts() { return FbBotMillNetworkController.getDailyUniqueActiveThreadCounts(); } public static DailyUniqueConversationCounts getDailyUniqueConversationCounts() { return FbBotMillNetworkController.getDailyUniqueConversationCounts(); } @Override
	public String toString() { return ""MessagingInsightApi []""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.api; public class MessagingInsightApi { private MessagingInsightApi() { } public static DailyUniqueActiveThreadCounts getDailyUniqueActiveThreadCounts() { return FbBotMillNetworkController.getDailyUniqueActiveThreadCounts(); } public static DailyUniqueConversationCounts getDailyUniqueConversationCounts() { return FbBotMillNetworkController.getDailyUniqueConversationCounts(); } @Override
	public String toString() { return ""MessagingInsightApi []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.api; 
import co.aurasphere.botmill.fb.internal.util.network.FbBotMillNetworkController; import co.aurasphere.botmill.fb.model.api.messaginginsight.DailyUniqueActiveThreadCounts; import co.aurasphere.botmill.fb.model.api.messaginginsight.DailyUniqueConversationCounts;  /**
 * Base class for handling Messaging Insight API.
 * 
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/insights/page-messaging""
 *      >Facebook's Messaging Insight API Reference.</a>
 * @since 2.0.0
 */ public class MessagingInsightApi {  /**
	 * Instantiates a new MessagingInsightApi.
	 */ private MessagingInsightApi() { }  /**
	 * Gets the daily unique active thread counts.
	 *
	 * @return the daily unique active thread counts.
	 */ public static DailyUniqueActiveThreadCounts getDailyUniqueActiveThreadCounts() { return FbBotMillNetworkController.getDailyUniqueActiveThreadCounts(); }  /**
	 * Gets the daily unique conversation counts.
	 *
	 * @return the daily unique conversation counts.
	 */ public static DailyUniqueConversationCounts getDailyUniqueConversationCounts() { return FbBotMillNetworkController.getDailyUniqueConversationCounts(); }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ @Override
	public String toString() { return ""MessagingInsightApi []""; }  }  "
src/main/java/co/aurasphere/botmill/fb/api/MessengerCodeApi.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.api;

import co.aurasphere.botmill.fb.internal.util.network.FbBotMillNetworkController;
import co.aurasphere.botmill.fb.model.api.messengercode.MessengerCode;
import co.aurasphere.botmill.fb.model.api.messengercode.MessengerCodeRequest;

/**
 * Base class for handling Messenger Code API.
 * 
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-code""
 *      >Facebook's Messenger Code API Reference.</a>
 * @since 2.0.0
 */
public class MessengerCodeApi {

	/**
	 * Instantiates a new MessengerCodeApi.
	 */
	private MessengerCodeApi() {
	}

	/**
	 * Gets a messenger code(Facebook's Messenger QR Code).
	 * 
	 * @param request
	 *            the size of the code to retrieve.
	 * @return a {@link MessengerCode}.
	 */
	public static MessengerCode getMessengerCode(MessengerCodeRequest request) {
		return FbBotMillNetworkController.postMessengerCode(request);
	}

	/**
	 * Gets a messenger code(Facebook's Messenger QR Code).
	 * 
	 * @param imageSize
	 *            the size of the code to retrieve.
	 * @return a {@link MessengerCode}.
	 */
	public static MessengerCode getMessengerCode(int imageSize) {
		MessengerCodeRequest request = new MessengerCodeRequest(imageSize);
		return getMessengerCode(request);
	}

	/**
	 * Gets a messenger code(Facebook's Messenger QR Code) with default size
	 * (1000 px).
	 * 
	 * @return a {@link MessengerCode}.
	 */
	public static MessengerCode getMessengerCode() {
		MessengerCodeRequest request = new MessengerCodeRequest();
		return getMessengerCode(request);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""MessengerCodeApi []"";
	}

}
","package co.aurasphere.botmill.fb.api; public class MessengerCodeApi { private MessengerCodeApi() { } public static MessengerCode getMessengerCode(MessengerCodeRequest request) { return FbBotMillNetworkController.postMessengerCode(request); } public static MessengerCode getMessengerCode(int imageSize) { MessengerCodeRequest request = new MessengerCodeRequest(imageSize); return getMessengerCode(request); } public static MessengerCode getMessengerCode() { MessengerCodeRequest request = new MessengerCodeRequest(); return getMessengerCode(request); } @Override
	public String toString() { return ""MessengerCodeApi []""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.api; public class MessengerCodeApi { private MessengerCodeApi() { } public static MessengerCode getMessengerCode(MessengerCodeRequest request) { return FbBotMillNetworkController.postMessengerCode(request); } public static MessengerCode getMessengerCode(int imageSize) { MessengerCodeRequest request = new MessengerCodeRequest(imageSize); return getMessengerCode(request); } public static MessengerCode getMessengerCode() { MessengerCodeRequest request = new MessengerCodeRequest(); return getMessengerCode(request); } @Override
	public String toString() { return ""MessengerCodeApi []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.api; 
import co.aurasphere.botmill.fb.internal.util.network.FbBotMillNetworkController; import co.aurasphere.botmill.fb.model.api.messengercode.MessengerCode; import co.aurasphere.botmill.fb.model.api.messengercode.MessengerCodeRequest;  /**
 * Base class for handling Messenger Code API.
 * 
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-code""
 *      >Facebook's Messenger Code API Reference.</a>
 * @since 2.0.0
 */ public class MessengerCodeApi {  /**
	 * Instantiates a new MessengerCodeApi.
	 */ private MessengerCodeApi() { }  /**
	 * Gets a messenger code(Facebook's Messenger QR Code).
	 * 
	 * @param request
	 *            the size of the code to retrieve.
	 * @return a {@link MessengerCode}.
	 */ public static MessengerCode getMessengerCode(MessengerCodeRequest request) { return FbBotMillNetworkController.postMessengerCode(request); }  /**
	 * Gets a messenger code(Facebook's Messenger QR Code).
	 * 
	 * @param imageSize
	 *            the size of the code to retrieve.
	 * @return a {@link MessengerCode}.
	 */ public static MessengerCode getMessengerCode(int imageSize) { MessengerCodeRequest request = new MessengerCodeRequest(imageSize); return getMessengerCode(request); }  /**
	 * Gets a messenger code(Facebook's Messenger QR Code) with default size
	 * (1000 px).
	 * 
	 * @return a {@link MessengerCode}.
	 */ public static MessengerCode getMessengerCode() { MessengerCodeRequest request = new MessengerCodeRequest(); return getMessengerCode(request); }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ @Override
	public String toString() { return ""MessengerCodeApi []""; }  }  "
src/main/java/co/aurasphere/botmill/fb/api/MessengerProfileApi.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.api;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import co.aurasphere.botmill.core.BotDefinition;
import co.aurasphere.botmill.fb.internal.util.network.FbBotMillNetworkController;
import co.aurasphere.botmill.fb.model.api.messengerprofile.DeleteMessengerProfileRequest;
import co.aurasphere.botmill.fb.model.api.messengerprofile.Greeting;
import co.aurasphere.botmill.fb.model.api.messengerprofile.HomeUrl;
import co.aurasphere.botmill.fb.model.api.messengerprofile.HomeUrlRequest;
import co.aurasphere.botmill.fb.model.api.messengerprofile.SetAccountLinkingUrlRequest;
import co.aurasphere.botmill.fb.model.api.messengerprofile.SetGetStartedButtonRequest;
import co.aurasphere.botmill.fb.model.api.messengerprofile.SetGreetingTextRequest;
import co.aurasphere.botmill.fb.model.api.messengerprofile.SetWhitelistedDomainsRequest;
import co.aurasphere.botmill.fb.model.api.messengerprofile.persistentmenu.PersistentMenu;
import co.aurasphere.botmill.fb.model.api.messengerprofile.persistentmenu.PersistentMenuRequest;

/**
 * Class which handles the configuration of the Facebook Messenger Platform
 * Messenger Profile (for more informations, see the link below). The methods of
 * this class needs to be called only once and thus shouldn't be put on the
 * class that implements {@link BotDefinition}. The best way of handling the
 * configuration would be defining your own class with a main method and put the
 * call on it.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile/get-started-button""
 *      >Facebook's Messenger Profile Documentation</a>
 */
public class MessengerProfileApi {

	/**
	 * The logger.
	 */
	private static final Logger logger = LoggerFactory.getLogger(MessengerProfileApi.class);

	/**
	 * Instantiates a new MessengerProfileApi.
	 */
	private MessengerProfileApi() {
	}

	/**
	 * Sets the Get Started Button for the bot. The Get Started button is only
	 * rendered the first time the user interacts with a the Page on Messenger.
	 * When this button is tapped, the defined payload will be sent back with a
	 * postback received callback.
	 *
	 * @param payload
	 *            the payload to return when the button is tapped.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile/get-started-button""
	 *      >Facebook's Messenger Platform Get Started Button Documentation</a>
	 */
	public static void setGetStartedButton(String payload) {
		if (payload == null || """".equals(payload)) {
			logger.error(""FbBotMill validation error: Get Started Button payload can't be null or empty!"");
			return;
		}
		SetGetStartedButtonRequest request = new SetGetStartedButtonRequest(payload);
		FbBotMillNetworkController.postMessengerProfile(request);
	}

	/**
	 * Removes the current Get Started Button.
	 * 
	 * @see #setGetStartedButton(String)
	 */
	public static void deleteGetStartedButton() {
		DeleteMessengerProfileRequest request = new DeleteMessengerProfileRequest(""get_started"");
		FbBotMillNetworkController.deleteMessengerProfile(request);
	}

	/**
	 * Sets the greeting message for the bot. The Greeting Text is only rendered
	 * the first time the user interacts with a the Page on Messenger.
	 *
	 * @param message
	 *            the greeting message to show.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile/greeting-text""
	 *      >Facebook's Messenger Platform Greeting Text Documentation</a>
	 */
	public static void setGreetingMessage(String message) {
		SetGreetingTextRequest request = new SetGreetingTextRequest(message);
		FbBotMillNetworkController.postMessengerProfile(request);
	}

	/**
	 * Sets the greeting message for the bot. The Greeting Text is only rendered
	 * the first time the user interacts with a the Page on Messenger.
	 *
	 * @param message
	 *            the greeting messages to show.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile/greeting-text""
	 *      >Facebook's Messenger Platform Greeting Text Documentation</a>
	 */
	public static void setGreetingMessage(List<Greeting> message) {
		SetGreetingTextRequest request = new SetGreetingTextRequest(message);
		FbBotMillNetworkController.postMessengerProfile(request);
	}

	/**
	 * Removes the current Greeting Message.
	 * 
	 * @see #setGreetingMessage(String)
	 */
	public static void deleteGreetingMessage() {
		DeleteMessengerProfileRequest request = new DeleteMessengerProfileRequest(""greeting"");
		FbBotMillNetworkController.deleteMessengerProfile(request);
	}

	/**
	 * Adds a list of domains that needs to be whitelisted.
	 *
	 * @param whitelistedDomains
	 *            the list of domains to whitelist.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile/domain-whitelisting""
	 *      >Facebook's Messenger Platform Domain Whitelisting Documentation</a>
	 */
	public static void setWhitelistedDomains(List<String> whitelistedDomains) {
		SetWhitelistedDomainsRequest request = new SetWhitelistedDomainsRequest(whitelistedDomains);
		FbBotMillNetworkController.postMessengerProfile(request);
	}

	/**
	 * Removes the list of domains that are currently whitelisted.
	 *
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile/domain-whitelisting""
	 *      >Facebook's Messenger Platform Domain Whitelisting Documentation</a>
	 */
	public static void deleteWhitelistedDomains() {
		DeleteMessengerProfileRequest request = new DeleteMessengerProfileRequest(""whitelisted_domains"");
		FbBotMillNetworkController.deleteMessengerProfile(request);
	}

	/**
	 * Adds an URL used for account linking.
	 *
	 * @param accountLinkingUrl
	 *            the URL for the account linking.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile/account-linking-url""
	 *      >Facebook's Messenger Platform Account Linking URL Documentation</a>
	 */
	public static void setAccountLinkingUrl(String accountLinkingUrl) {
		SetAccountLinkingUrlRequest request = new SetAccountLinkingUrlRequest(accountLinkingUrl);
		FbBotMillNetworkController.postMessengerProfile(request);
	}

	/**
	 * Removes the URL used for account linking.
	 *
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile/account-linking-url""
	 *      >Facebook's Messenger Platform Account Linking URL Documentation</a>
	 */
	public static void deleteAccountLinkingUrl() {
		DeleteMessengerProfileRequest request = new DeleteMessengerProfileRequest(""account_linking_url"");
		FbBotMillNetworkController.deleteMessengerProfile(request);
	}

	/**
	 * Sets the persistent menus.
	 *
	 * @param persistentMenu
	 *            the new persistent menus
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile/persistent-menu"">
	 *      Facebook's Messenger Platform Persistent Menu Documentation</a>
	 */
	public static void setPersistentMenus(List<PersistentMenu> persistentMenu) {
		PersistentMenuRequest persistentMenuRequest = new PersistentMenuRequest();
		persistentMenuRequest.addAllPersistentMenu(persistentMenu);
		FbBotMillNetworkController.postMessengerProfile(persistentMenuRequest);
	}

	/**
	 * Removes the Persistent Menus.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile/persistent-menu"">
	 *      Facebook's Messenger Platform Persistent Menu Documentation</a>
	 */
	public static void deletePersistentMenus() {
		DeleteMessengerProfileRequest request = new DeleteMessengerProfileRequest(""persistent_menu"");
		FbBotMillNetworkController.deleteMessengerProfile(request);
	}

	/**
	 * This sets the home url of the Bot
	 * 
	 * @param homeUrl
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile/home-url/v2.9"">
	 *      Chat Extension Home URL</a>
	 */
	public static void setHomeUrl(HomeUrl homeUrl) {
		HomeUrlRequest homeUrlRequest = new HomeUrlRequest();
		homeUrlRequest.setHomeUrl(homeUrl);
		FbBotMillNetworkController.postMessengerProfile(homeUrlRequest);

	}

	/**
	 * Removes the home url.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile/home-url/v2.9"">
	 *      Chat Extension Home URL</a>
	 */
	public static void deleteHomeUrl() {
		DeleteMessengerProfileRequest request = new DeleteMessengerProfileRequest(""home_url"");
		FbBotMillNetworkController.deleteMessengerProfile(request);

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""FbBotMillThreadSettingsConfiguration []"";
	}

}
","package co.aurasphere.botmill.fb.api; public class MessengerProfileApi { private static final Logger logger = LoggerFactory.getLogger(MessengerProfileApi.class); private MessengerProfileApi() { } public static void setGetStartedButton(String payload) { if (payload == null || """".equals(payload)) { return; } SetGetStartedButtonRequest request = new SetGetStartedButtonRequest(payload); FbBotMillNetworkController.postMessengerProfile(request); } public static void deleteGetStartedButton() { DeleteMessengerProfileRequest request = new DeleteMessengerProfileRequest(""get_started""); FbBotMillNetworkController.deleteMessengerProfile(request); } public static void setGreetingMessage(String message) { SetGreetingTextRequest request = new SetGreetingTextRequest(message); FbBotMillNetworkController.postMessengerProfile(request); } public static void setGreetingMessage(List<Greeting> message) { SetGreetingTextRequest request = new SetGreetingTextRequest(message); FbBotMillNetworkController.postMessengerProfile(request); } public static void deleteGreetingMessage() { DeleteMessengerProfileRequest request = new DeleteMessengerProfileRequest(""greeting""); FbBotMillNetworkController.deleteMessengerProfile(request); } public static void setWhitelistedDomains(List<String> whitelistedDomains) { SetWhitelistedDomainsRequest request = new SetWhitelistedDomainsRequest(whitelistedDomains); FbBotMillNetworkController.postMessengerProfile(request); } public static void deleteWhitelistedDomains() { DeleteMessengerProfileRequest request = new DeleteMessengerProfileRequest(""whitelisted_domains""); FbBotMillNetworkController.deleteMessengerProfile(request); } public static void setAccountLinkingUrl(String accountLinkingUrl) { SetAccountLinkingUrlRequest request = new SetAccountLinkingUrlRequest(accountLinkingUrl); FbBotMillNetworkController.postMessengerProfile(request); } public static void deleteAccountLinkingUrl() { DeleteMessengerProfileRequest request = new DeleteMessengerProfileRequest(""account_linking_url""); FbBotMillNetworkController.deleteMessengerProfile(request); } public static void setPersistentMenus(List<PersistentMenu> persistentMenu) { PersistentMenuRequest persistentMenuRequest = new PersistentMenuRequest(); persistentMenuRequest.addAllPersistentMenu(persistentMenu); FbBotMillNetworkController.postMessengerProfile(persistentMenuRequest); } public static void deletePersistentMenus() { DeleteMessengerProfileRequest request = new DeleteMessengerProfileRequest(""persistent_menu""); FbBotMillNetworkController.deleteMessengerProfile(request); } public static void setHomeUrl(HomeUrl homeUrl) { HomeUrlRequest homeUrlRequest = new HomeUrlRequest(); homeUrlRequest.setHomeUrl(homeUrl); FbBotMillNetworkController.postMessengerProfile(homeUrlRequest); } public static void deleteHomeUrl() { DeleteMessengerProfileRequest request = new DeleteMessengerProfileRequest(""home_url""); FbBotMillNetworkController.deleteMessengerProfile(request); } @Override
	public String toString() { return ""FbBotMillThreadSettingsConfiguration []""; } }",0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.api; public class MessengerProfileApi { private static final Logger logger = LoggerFactory.getLogger(MessengerProfileApi.class); private MessengerProfileApi() { } public static void setGetStartedButton(String payload) { if (payload == null || """".equals(payload)) { <FILL_ME> return; } SetGetStartedButtonRequest request = new SetGetStartedButtonRequest(payload); FbBotMillNetworkController.postMessengerProfile(request); } public static void deleteGetStartedButton() { DeleteMessengerProfileRequest request = new DeleteMessengerProfileRequest(""get_started""); FbBotMillNetworkController.deleteMessengerProfile(request); } public static void setGreetingMessage(String message) { SetGreetingTextRequest request = new SetGreetingTextRequest(message); FbBotMillNetworkController.postMessengerProfile(request); } public static void setGreetingMessage(List<Greeting> message) { SetGreetingTextRequest request = new SetGreetingTextRequest(message); FbBotMillNetworkController.postMessengerProfile(request); } public static void deleteGreetingMessage() { DeleteMessengerProfileRequest request = new DeleteMessengerProfileRequest(""greeting""); FbBotMillNetworkController.deleteMessengerProfile(request); } public static void setWhitelistedDomains(List<String> whitelistedDomains) { SetWhitelistedDomainsRequest request = new SetWhitelistedDomainsRequest(whitelistedDomains); FbBotMillNetworkController.postMessengerProfile(request); } public static void deleteWhitelistedDomains() { DeleteMessengerProfileRequest request = new DeleteMessengerProfileRequest(""whitelisted_domains""); FbBotMillNetworkController.deleteMessengerProfile(request); } public static void setAccountLinkingUrl(String accountLinkingUrl) { SetAccountLinkingUrlRequest request = new SetAccountLinkingUrlRequest(accountLinkingUrl); FbBotMillNetworkController.postMessengerProfile(request); } public static void deleteAccountLinkingUrl() { DeleteMessengerProfileRequest request = new DeleteMessengerProfileRequest(""account_linking_url""); FbBotMillNetworkController.deleteMessengerProfile(request); } public static void setPersistentMenus(List<PersistentMenu> persistentMenu) { PersistentMenuRequest persistentMenuRequest = new PersistentMenuRequest(); persistentMenuRequest.addAllPersistentMenu(persistentMenu); FbBotMillNetworkController.postMessengerProfile(persistentMenuRequest); } public static void deletePersistentMenus() { DeleteMessengerProfileRequest request = new DeleteMessengerProfileRequest(""persistent_menu""); FbBotMillNetworkController.deleteMessengerProfile(request); } public static void setHomeUrl(HomeUrl homeUrl) { HomeUrlRequest homeUrlRequest = new HomeUrlRequest(); homeUrlRequest.setHomeUrl(homeUrl); FbBotMillNetworkController.postMessengerProfile(homeUrlRequest); } public static void deleteHomeUrl() { DeleteMessengerProfileRequest request = new DeleteMessengerProfileRequest(""home_url""); FbBotMillNetworkController.deleteMessengerProfile(request); } @Override
	public String toString() { return ""FbBotMillThreadSettingsConfiguration []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.api; 
import java.util.List; 
import org.slf4j.Logger; import org.slf4j.LoggerFactory; 
import co.aurasphere.botmill.core.BotDefinition; import co.aurasphere.botmill.fb.internal.util.network.FbBotMillNetworkController; import co.aurasphere.botmill.fb.model.api.messengerprofile.DeleteMessengerProfileRequest; import co.aurasphere.botmill.fb.model.api.messengerprofile.Greeting; import co.aurasphere.botmill.fb.model.api.messengerprofile.HomeUrl; import co.aurasphere.botmill.fb.model.api.messengerprofile.HomeUrlRequest; import co.aurasphere.botmill.fb.model.api.messengerprofile.SetAccountLinkingUrlRequest; import co.aurasphere.botmill.fb.model.api.messengerprofile.SetGetStartedButtonRequest; import co.aurasphere.botmill.fb.model.api.messengerprofile.SetGreetingTextRequest; import co.aurasphere.botmill.fb.model.api.messengerprofile.SetWhitelistedDomainsRequest; import co.aurasphere.botmill.fb.model.api.messengerprofile.persistentmenu.PersistentMenu; import co.aurasphere.botmill.fb.model.api.messengerprofile.persistentmenu.PersistentMenuRequest;  /**
 * Class which handles the configuration of the Facebook Messenger Platform
 * Messenger Profile (for more informations, see the link below). The methods of
 * this class needs to be called only once and thus shouldn't be put on the
 * class that implements {@link BotDefinition}. The best way of handling the
 * configuration would be defining your own class with a main method and put the
 * call on it.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile/get-started-button""
 *      >Facebook's Messenger Profile Documentation</a>
 */ public class MessengerProfileApi {  /**
	 * The logger.
	 */ private static final Logger logger = LoggerFactory.getLogger(MessengerProfileApi.class);  /**
	 * Instantiates a new MessengerProfileApi.
	 */ private MessengerProfileApi() { }  /**
	 * Sets the Get Started Button for the bot. The Get Started button is only
	 * rendered the first time the user interacts with a the Page on Messenger.
	 * When this button is tapped, the defined payload will be sent back with a
	 * postback received callback.
	 *
	 * @param payload
	 *            the payload to return when the button is tapped.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile/get-started-button""
	 *      >Facebook's Messenger Platform Get Started Button Documentation</a>
	 */ public static void setGetStartedButton(String payload) { if (payload == null || """".equals(payload)) { <FILL_ME> return; } SetGetStartedButtonRequest request = new SetGetStartedButtonRequest(payload); FbBotMillNetworkController.postMessengerProfile(request); }  /**
	 * Removes the current Get Started Button.
	 * 
	 * @see #setGetStartedButton(String)
	 */ public static void deleteGetStartedButton() { DeleteMessengerProfileRequest request = new DeleteMessengerProfileRequest(""get_started""); FbBotMillNetworkController.deleteMessengerProfile(request); }  /**
	 * Sets the greeting message for the bot. The Greeting Text is only rendered
	 * the first time the user interacts with a the Page on Messenger.
	 *
	 * @param message
	 *            the greeting message to show.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile/greeting-text""
	 *      >Facebook's Messenger Platform Greeting Text Documentation</a>
	 */ public static void setGreetingMessage(String message) { SetGreetingTextRequest request = new SetGreetingTextRequest(message); FbBotMillNetworkController.postMessengerProfile(request); }  /**
	 * Sets the greeting message for the bot. The Greeting Text is only rendered
	 * the first time the user interacts with a the Page on Messenger.
	 *
	 * @param message
	 *            the greeting messages to show.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile/greeting-text""
	 *      >Facebook's Messenger Platform Greeting Text Documentation</a>
	 */ public static void setGreetingMessage(List<Greeting> message) { SetGreetingTextRequest request = new SetGreetingTextRequest(message); FbBotMillNetworkController.postMessengerProfile(request); }  /**
	 * Removes the current Greeting Message.
	 * 
	 * @see #setGreetingMessage(String)
	 */ public static void deleteGreetingMessage() { DeleteMessengerProfileRequest request = new DeleteMessengerProfileRequest(""greeting""); FbBotMillNetworkController.deleteMessengerProfile(request); }  /**
	 * Adds a list of domains that needs to be whitelisted.
	 *
	 * @param whitelistedDomains
	 *            the list of domains to whitelist.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile/domain-whitelisting""
	 *      >Facebook's Messenger Platform Domain Whitelisting Documentation</a>
	 */ public static void setWhitelistedDomains(List<String> whitelistedDomains) { SetWhitelistedDomainsRequest request = new SetWhitelistedDomainsRequest(whitelistedDomains); FbBotMillNetworkController.postMessengerProfile(request); }  /**
	 * Removes the list of domains that are currently whitelisted.
	 *
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile/domain-whitelisting""
	 *      >Facebook's Messenger Platform Domain Whitelisting Documentation</a>
	 */ public static void deleteWhitelistedDomains() { DeleteMessengerProfileRequest request = new DeleteMessengerProfileRequest(""whitelisted_domains""); FbBotMillNetworkController.deleteMessengerProfile(request); }  /**
	 * Adds an URL used for account linking.
	 *
	 * @param accountLinkingUrl
	 *            the URL for the account linking.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile/account-linking-url""
	 *      >Facebook's Messenger Platform Account Linking URL Documentation</a>
	 */ public static void setAccountLinkingUrl(String accountLinkingUrl) { SetAccountLinkingUrlRequest request = new SetAccountLinkingUrlRequest(accountLinkingUrl); FbBotMillNetworkController.postMessengerProfile(request); }  /**
	 * Removes the URL used for account linking.
	 *
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile/account-linking-url""
	 *      >Facebook's Messenger Platform Account Linking URL Documentation</a>
	 */ public static void deleteAccountLinkingUrl() { DeleteMessengerProfileRequest request = new DeleteMessengerProfileRequest(""account_linking_url""); FbBotMillNetworkController.deleteMessengerProfile(request); }  /**
	 * Sets the persistent menus.
	 *
	 * @param persistentMenu
	 *            the new persistent menus
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile/persistent-menu"">
	 *      Facebook's Messenger Platform Persistent Menu Documentation</a>
	 */ public static void setPersistentMenus(List<PersistentMenu> persistentMenu) { PersistentMenuRequest persistentMenuRequest = new PersistentMenuRequest(); persistentMenuRequest.addAllPersistentMenu(persistentMenu); FbBotMillNetworkController.postMessengerProfile(persistentMenuRequest); }  /**
	 * Removes the Persistent Menus.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile/persistent-menu"">
	 *      Facebook's Messenger Platform Persistent Menu Documentation</a>
	 */ public static void deletePersistentMenus() { DeleteMessengerProfileRequest request = new DeleteMessengerProfileRequest(""persistent_menu""); FbBotMillNetworkController.deleteMessengerProfile(request); }  /**
	 * This sets the home url of the Bot
	 * 
	 * @param homeUrl
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile/home-url/v2.9"">
	 *      Chat Extension Home URL</a>
	 */ public static void setHomeUrl(HomeUrl homeUrl) { HomeUrlRequest homeUrlRequest = new HomeUrlRequest(); homeUrlRequest.setHomeUrl(homeUrl); FbBotMillNetworkController.postMessengerProfile(homeUrlRequest);  }  /**
	 * Removes the home url.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile/home-url/v2.9"">
	 *      Chat Extension Home URL</a>
	 */ public static void deleteHomeUrl() { DeleteMessengerProfileRequest request = new DeleteMessengerProfileRequest(""home_url""); FbBotMillNetworkController.deleteMessengerProfile(request);  }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ @Override
	public String toString() { return ""FbBotMillThreadSettingsConfiguration []""; }  }  "
src/main/java/co/aurasphere/botmill/fb/api/ThreadSettingsApi.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.api;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import co.aurasphere.botmill.core.BotDefinition;
import co.aurasphere.botmill.fb.internal.util.network.FbBotMillNetworkController;
import co.aurasphere.botmill.fb.model.api.threadsettings.CallToActionsRequest;
import co.aurasphere.botmill.fb.model.api.threadsettings.DomainActionType;
import co.aurasphere.botmill.fb.model.api.threadsettings.ThreadState;
import co.aurasphere.botmill.fb.model.api.threadsettings.WhitelistDomainRequest;
import co.aurasphere.botmill.fb.model.api.threadsettings.greeting.SetGreetingTextRequest;
import co.aurasphere.botmill.fb.model.api.threadsettings.payment.PaymentDevModeAction;
import co.aurasphere.botmill.fb.model.api.threadsettings.payment.PaymentSettings;
import co.aurasphere.botmill.fb.model.outcoming.template.button.Button;
import co.aurasphere.botmill.fb.model.outcoming.template.button.ButtonType;
import co.aurasphere.botmill.fb.model.outcoming.template.button.BuyButton;
import co.aurasphere.botmill.fb.model.outcoming.template.button.PaymentSummary;
import co.aurasphere.botmill.fb.model.outcoming.template.button.PostbackButton;
import co.aurasphere.botmill.fb.model.outcoming.template.button.WebUrlButton;

/**
 * Class which handles the configuration of the Facebook Messenger Platform
 * Thread Settings (for more informations, see the link below). The methods of
 * this class needs to be called only once and thus shouldn't be put on the
 * class that implements {@link BotDefinition}. The best way of handling the
 * configuration would be defining your own class with a main method and put the
 * call on it.
 *
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings""
 *      >Facebook's Thread Settings Documentation</a>
 * @deprecated Use {@link MessengerProfileApi} instead.
 */
@Deprecated
public class ThreadSettingsApi {

	/**
	 * The logger.
	 */
	private static final Logger logger = LoggerFactory
			.getLogger(ThreadSettingsApi.class);

	/**
	 * Instantiates a new ThreadSettingsApi.
	 */
	private ThreadSettingsApi() {
	}

	/**
	 * This method is used to add any payment settings needed.
	 * 
	 * @param paymentSettings
	 *            the payment settings object.
	 * @see <a
	 *      href=""https://developers.facebook.com/docs/messenger-platform/thread-settings/payment""
	 *      >Payments settings</a>
	 */
	public static void addPaymentSettings(PaymentSettings paymentSettings) {
		if (paymentSettings == null) {
			logger.error(""FbBotMill validation error: Payment Settings can't be null or empty!"");
			return;
		}
		FbBotMillNetworkController.postThreadSetting(paymentSettings);
	}

	/**
	 * Sets the greeting message for the bot. The Greeting Text is only rendered
	 * the first time the user interacts with a the Page on Messenger.
	 *
	 * @param message
	 *            the greeting message to show.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/greeting-text""
	 *      >Facebook's Greeting Text Documentation</a>
	 */
	public static void setGreetingMessage(String message) {
		if (message == null || """".equals(message)) {
			logger.error(""FbBotMill validation error: Greeting message can't be null or empty!"");
			return;
		}
		SetGreetingTextRequest request = new SetGreetingTextRequest(message);
		FbBotMillNetworkController.postThreadSetting(request);
	}

	/**
	 * Sets the Get Started Button for the bot. The Get Started button is only
	 * rendered the first time the user interacts with a the Page on Messenger.
	 * When this button is tapped, the defined payload will be sent back with a
	 * postback received callback.
	 *
	 * @param payload
	 *            the payload to return when the button is tapped.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/get-started-button""
	 *      >Facebook's Get Started Button Documentation</a>
	 */
	public static void setGetStartedButton(String payload) {
		if (payload == null || """".equals(payload)) {
			logger.error(""FbBotMill validation error: Get Started Button payload can't be null or empty!"");
			return;
		}
		Button button = new PostbackButton(null, ButtonType.POSTBACK, payload);
		List<Button> buttonList = new ArrayList<Button>();
		buttonList.add(button);
		CallToActionsRequest request = new CallToActionsRequest(
				ThreadState.NEW_THREAD, buttonList);
		FbBotMillNetworkController.postThreadSetting(request);
	}

	/**
	 * Removes the current Get Started Button.
	 * 
	 * @see #setGetStartedButton(String)
	 */
	public static void deleteGetStartedButton() {
		CallToActionsRequest request = new CallToActionsRequest(
				ThreadState.NEW_THREAD, null);
		FbBotMillNetworkController.deleteThreadSetting(request);
	}

	/**
	 * Sets a Persistent Menu of buttons which is always available to the user.
	 * This menu should contain top-level actions that users can enact at any
	 * point. Having a persistent menu easily communicates the basic
	 * capabilities of your bot for first-time and returning users. The menu can
	 * be invoked by a user, by tapping on the 3-caret icon on the left of the
	 * composer.
	 *
	 * @param buttons
	 *            a list of {@link Button} (max 5 elements) to use as menu. The
	 *            buttons can only be {@link PostbackButton} or
	 *            {@link WebUrlButton}. Phone buttons are not supported.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/persistent-menu""
	 *      >Facebook's Persistent Menu Documentation</a>
	 */
	public static void setPersistentMenu(List<Button> buttons) {
		if (buttons == null || buttons.isEmpty() || buttons.size() > 5) {
			logger.error(""FbBotMill validation error: Persistent Menu Buttons can't be null or empty and must be less than 5!"");
			return;
		}
		CallToActionsRequest request = new CallToActionsRequest(
				ThreadState.EXISTING_THREAD, buttons);
		FbBotMillNetworkController.postThreadSetting(request);
	}

	/**
	 * Removes the current Persistent Menu.
	 * 
	 * @see #setPersistentMenu(List)
	 */
	public static void deletePersistentMenu() {
		CallToActionsRequest request = new CallToActionsRequest(
				ThreadState.EXISTING_THREAD, null);
		FbBotMillNetworkController.deleteThreadSetting(request);
	}

	/**
	 * Adds a list of domains that needs to be ""white listed"".
	 *
	 * @param whiteListDomains
	 *            the list of domains in String.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/domain-whitelisting""
	 *      >Facebook's Messenger Platform Domain Whitelisting Thread Settings
	 *      Documentation</a>
	 */
	public static void setWhiteListDomains(List<String> whiteListDomains) {
		WhitelistDomainRequest request = new WhitelistDomainRequest(
				whiteListDomains, DomainActionType.ADD);
		FbBotMillNetworkController.postThreadSetting(request);
	}

	/**
	 * Adds a single domain on the list of domains that needs to be
	 * ""white listed"".
	 *
	 * @param domain
	 *            the domain that needs to be ""white listed"".
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/domain-whitelisting""
	 *      >Facebook's Messenger Platform Domain Whitelisting Thread Settings
	 *      Documentation</a>
	 */
	public static void addWhiteListDomain(String domain) {
		WhitelistDomainRequest request = new WhitelistDomainRequest();
		request.addWhiteListedDomain(domain);
		request.setDomainActionType(DomainActionType.ADD);
		FbBotMillNetworkController.postThreadSetting(request);
	}

	/**
	 * Removes a single domain on the list of domains that needs to be
	 * ""white listed"".
	 *
	 * @param domain
	 *            the domain that needs to be removed.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/domain-whitelisting""
	 *      >Facebook's Messenger Platform Domain Whitelisting Thread Settings
	 *      Documentation</a>
	 */
	public static void deleteWhiteListDomain(String domain) {
		WhitelistDomainRequest request = new WhitelistDomainRequest();
		request.addWhiteListedDomain(domain);
		request.setDomainActionType(DomainActionType.REMOVE);
		FbBotMillNetworkController.postThreadSetting(request);
	}

	/**
	 * Removes a list of domains that are currently ""white listed"".
	 *
	 * @param whiteListDomains
	 *            the list of domains that needs to be removed.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/domain-whitelisting""
	 *      >Facebook's Messenger Platform Domain Whitelisting Thread Settings
	 *      Documentation</a>
	 */
	public static void deleteWhiteListDomains(List<String> whiteListDomains) {
		WhitelistDomainRequest request = new WhitelistDomainRequest(
				whiteListDomains, DomainActionType.REMOVE);
		FbBotMillNetworkController.postThreadSetting(request);
	}

	/**
	 * Adds a list of testers for payments. You can add payment test users so
	 * that their credit card won't be charged during your development. Once
	 * added, it will impact both Buy Button and Webview Extension integrations,
	 * any payment send to these users will be a dummy charge. If you are only
	 * testing {@link BuyButton}, consider using the
	 * {@link PaymentSummary#setTestPayment(boolean)} flag which is simpler for
	 * testing.
	 *
	 * @param paymentTestersIds
	 *            the testers app-scoped IDs to add to the testers list.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/payment""
	 *      >Facebook's Messenger Platform Payments Thread Settings
	 *      Documentation</a>
	 * @since 1.2.0
	 */
	public static void addPaymentsTesters(List<String> paymentTestersIds) {
		PaymentSettings request = new PaymentSettings();
		request.setPaymentTesters(paymentTestersIds);
		request.setPaymentDevModeAction(PaymentDevModeAction.ADD);
		FbBotMillNetworkController.postThreadSetting(request);
	}

	/**
	 * Adds a single tester for payments. You can add payment test users so that
	 * their credit card won't be charged during your development. Once added,
	 * it will impact both Buy Button and Webview Extension integrations, any
	 * payment send to these users will be a dummy charge. If you are only
	 * testing {@link BuyButton}, consider using the
	 * {@link PaymentSummary#setTestPayment(boolean)} flag which is simpler for
	 * testing.
	 *
	 * @param paymentTesterId
	 *            the tester app-scoped ID to add to the testers list.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/payment""
	 *      >Facebook's Messenger Platform Payments Thread Settings
	 *      Documentation</a>
	 * @since 1.2.0
	 */
	public static void addPaymentsTester(String paymentTesterId) {
		PaymentSettings request = new PaymentSettings();
		List<String> paymentTestersIds = new ArrayList<String>();
		request.setPaymentTesters(paymentTestersIds);
		request.setPaymentDevModeAction(PaymentDevModeAction.ADD);
		FbBotMillNetworkController.postThreadSetting(request);
	}

	/**
	 * Removes a single tester for payments. You can add payment test users so
	 * that their credit card won't be charged during your development. Once
	 * added, it will impact both Buy Button and Webview Extension integrations,
	 * any payment send to these users will be a dummy charge. If you are only
	 * testing {@link BuyButton}, consider using the
	 * {@link PaymentSummary#setTestPayment(boolean)} flag which is simpler for
	 * testing.
	 *
	 * @param paymentTesterId
	 *            the tester app-scoped ID to remove from the testers list.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/payment""
	 *      >Facebook's Messenger Platform Payments Thread Settings
	 *      Documentation</a>
	 * @since 1.2.0
	 */
	public static void removePaymentsTester(String paymentTesterId) {
		PaymentSettings request = new PaymentSettings();
		List<String> paymentTestersIds = new ArrayList<String>();
		request.setPaymentTesters(paymentTestersIds);
		request.setPaymentDevModeAction(PaymentDevModeAction.REMOVE);
		FbBotMillNetworkController.postThreadSetting(request);
	}

	/**
	 * Removes a list of testers for payments. You can add payment test users so
	 * that their credit card won't be charged during your development. Once
	 * added, it will impact both Buy Button and Webview Extension integrations,
	 * any payment send to these users will be a dummy charge. If you are only
	 * testing {@link BuyButton}, consider using the
	 * {@link PaymentSummary#setTestPayment(boolean)} flag which is simpler for
	 * testing.
	 *
	 * @param paymentTestersIds
	 *            the testers app-scoped IDs to remove from the testers list.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/payment""
	 *      >Facebook's Messenger Platform Payments Thread Settings
	 *      Documentation</a>
	 * @since 1.2.0
	 */
	public static void removePaymentsTesters(List<String> paymentTestersIds) {
		PaymentSettings request = new PaymentSettings();
		request.setPaymentTesters(paymentTestersIds);
		request.setPaymentDevModeAction(PaymentDevModeAction.REMOVE);
		FbBotMillNetworkController.postThreadSetting(request);
	}

	/**
	 * Sets the payment public key. The payment_public_key is used to encrypt
	 * sensitive payment data sent to you.
	 *
	 * @param publicKey
	 *            the public key to set.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/payment""
	 *      >Facebook's Messenger Platform Payments Thread Settings
	 *      Documentation</a>
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/payments-reference#encryption_key""
	 *      >Facebook's Messenger Platform Creating Encryption Documentation</a>
	 * @since 1.2.0
	 */
	public static void setPaymentsPublicKey(String publicKey) {
		PaymentSettings request = new PaymentSettings();
		request.setPrivacyUrl(publicKey);
		FbBotMillNetworkController.postThreadSetting(request);
	}

	/**
	 * Sets the payment privacy Url. The payment_privacy_url will appear in
	 * Facebook's payment dialogs and people will be able to view these terms.
	 *
	 * @param privacyUrl
	 *            the privacy Url to set.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/payment""
	 *      >Facebook's Messenger Platform Payments Thread Settings
	 *      Documentation</a>
	 * @since 1.2.0
	 */
	public static void setPaymentsPrivacyUrl(String privacyUrl) {
		PaymentSettings request = new PaymentSettings();
		request.setPrivacyUrl(privacyUrl);
		FbBotMillNetworkController.postThreadSetting(request);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""FbBotMillThreadSettingsConfiguration []"";
	}

}
","package co.aurasphere.botmill.fb.api; @Deprecated
public class ThreadSettingsApi { private static final Logger logger = LoggerFactory
			.getLogger(ThreadSettingsApi.class); private ThreadSettingsApi() { } public static void addPaymentSettings(PaymentSettings paymentSettings) { if (paymentSettings == null) { return; } FbBotMillNetworkController.postThreadSetting(paymentSettings); } public static void setGreetingMessage(String message) { if (message == null || """".equals(message)) { return; } SetGreetingTextRequest request = new SetGreetingTextRequest(message); FbBotMillNetworkController.postThreadSetting(request); } public static void setGetStartedButton(String payload) { if (payload == null || """".equals(payload)) { return; } Button button = new PostbackButton(null, ButtonType.POSTBACK, payload); List<Button> buttonList = new ArrayList<Button>(); buttonList.add(button); CallToActionsRequest request = new CallToActionsRequest(
				ThreadState.NEW_THREAD, buttonList); FbBotMillNetworkController.postThreadSetting(request); } public static void deleteGetStartedButton() { CallToActionsRequest request = new CallToActionsRequest(
				ThreadState.NEW_THREAD, null); FbBotMillNetworkController.deleteThreadSetting(request); } public static void setPersistentMenu(List<Button> buttons) { if (buttons == null || buttons.isEmpty() || buttons.size() > 5) { return; } CallToActionsRequest request = new CallToActionsRequest(
				ThreadState.EXISTING_THREAD, buttons); FbBotMillNetworkController.postThreadSetting(request); } public static void deletePersistentMenu() { CallToActionsRequest request = new CallToActionsRequest(
				ThreadState.EXISTING_THREAD, null); FbBotMillNetworkController.deleteThreadSetting(request); } public static void setWhiteListDomains(List<String> whiteListDomains) { WhitelistDomainRequest request = new WhitelistDomainRequest(
				whiteListDomains, DomainActionType.ADD); FbBotMillNetworkController.postThreadSetting(request); } public static void addWhiteListDomain(String domain) { WhitelistDomainRequest request = new WhitelistDomainRequest(); request.addWhiteListedDomain(domain); request.setDomainActionType(DomainActionType.ADD); FbBotMillNetworkController.postThreadSetting(request); } public static void deleteWhiteListDomain(String domain) { WhitelistDomainRequest request = new WhitelistDomainRequest(); request.addWhiteListedDomain(domain); request.setDomainActionType(DomainActionType.REMOVE); FbBotMillNetworkController.postThreadSetting(request); } public static void deleteWhiteListDomains(List<String> whiteListDomains) { WhitelistDomainRequest request = new WhitelistDomainRequest(
				whiteListDomains, DomainActionType.REMOVE); FbBotMillNetworkController.postThreadSetting(request); } public static void addPaymentsTesters(List<String> paymentTestersIds) { PaymentSettings request = new PaymentSettings(); request.setPaymentTesters(paymentTestersIds); request.setPaymentDevModeAction(PaymentDevModeAction.ADD); FbBotMillNetworkController.postThreadSetting(request); } public static void addPaymentsTester(String paymentTesterId) { PaymentSettings request = new PaymentSettings(); List<String> paymentTestersIds = new ArrayList<String>(); request.setPaymentTesters(paymentTestersIds); request.setPaymentDevModeAction(PaymentDevModeAction.ADD); FbBotMillNetworkController.postThreadSetting(request); } public static void removePaymentsTester(String paymentTesterId) { PaymentSettings request = new PaymentSettings(); List<String> paymentTestersIds = new ArrayList<String>(); request.setPaymentTesters(paymentTestersIds); request.setPaymentDevModeAction(PaymentDevModeAction.REMOVE); FbBotMillNetworkController.postThreadSetting(request); } public static void removePaymentsTesters(List<String> paymentTestersIds) { PaymentSettings request = new PaymentSettings(); request.setPaymentTesters(paymentTestersIds); request.setPaymentDevModeAction(PaymentDevModeAction.REMOVE); FbBotMillNetworkController.postThreadSetting(request); } public static void setPaymentsPublicKey(String publicKey) { PaymentSettings request = new PaymentSettings(); request.setPrivacyUrl(publicKey); FbBotMillNetworkController.postThreadSetting(request); } public static void setPaymentsPrivacyUrl(String privacyUrl) { PaymentSettings request = new PaymentSettings(); request.setPrivacyUrl(privacyUrl); FbBotMillNetworkController.postThreadSetting(request); } @Override
	public String toString() { return ""FbBotMillThreadSettingsConfiguration []""; } }",0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.api; @Deprecated
public class ThreadSettingsApi { private static final Logger logger = LoggerFactory
			.getLogger(ThreadSettingsApi.class); private ThreadSettingsApi() { } public static void addPaymentSettings(PaymentSettings paymentSettings) { if (paymentSettings == null) { <FILL_ME> return; } FbBotMillNetworkController.postThreadSetting(paymentSettings); } public static void setGreetingMessage(String message) { if (message == null || """".equals(message)) { <FILL_ME> return; } SetGreetingTextRequest request = new SetGreetingTextRequest(message); FbBotMillNetworkController.postThreadSetting(request); } public static void setGetStartedButton(String payload) { if (payload == null || """".equals(payload)) { <FILL_ME> return; } Button button = new PostbackButton(null, ButtonType.POSTBACK, payload); List<Button> buttonList = new ArrayList<Button>(); buttonList.add(button); CallToActionsRequest request = new CallToActionsRequest(
				ThreadState.NEW_THREAD, buttonList); FbBotMillNetworkController.postThreadSetting(request); } public static void deleteGetStartedButton() { CallToActionsRequest request = new CallToActionsRequest(
				ThreadState.NEW_THREAD, null); FbBotMillNetworkController.deleteThreadSetting(request); } public static void setPersistentMenu(List<Button> buttons) { if (buttons == null || buttons.isEmpty() || buttons.size() > 5) { <FILL_ME> return; } CallToActionsRequest request = new CallToActionsRequest(
				ThreadState.EXISTING_THREAD, buttons); FbBotMillNetworkController.postThreadSetting(request); } public static void deletePersistentMenu() { CallToActionsRequest request = new CallToActionsRequest(
				ThreadState.EXISTING_THREAD, null); FbBotMillNetworkController.deleteThreadSetting(request); } public static void setWhiteListDomains(List<String> whiteListDomains) { WhitelistDomainRequest request = new WhitelistDomainRequest(
				whiteListDomains, DomainActionType.ADD); FbBotMillNetworkController.postThreadSetting(request); } public static void addWhiteListDomain(String domain) { WhitelistDomainRequest request = new WhitelistDomainRequest(); request.addWhiteListedDomain(domain); request.setDomainActionType(DomainActionType.ADD); FbBotMillNetworkController.postThreadSetting(request); } public static void deleteWhiteListDomain(String domain) { WhitelistDomainRequest request = new WhitelistDomainRequest(); request.addWhiteListedDomain(domain); request.setDomainActionType(DomainActionType.REMOVE); FbBotMillNetworkController.postThreadSetting(request); } public static void deleteWhiteListDomains(List<String> whiteListDomains) { WhitelistDomainRequest request = new WhitelistDomainRequest(
				whiteListDomains, DomainActionType.REMOVE); FbBotMillNetworkController.postThreadSetting(request); } public static void addPaymentsTesters(List<String> paymentTestersIds) { PaymentSettings request = new PaymentSettings(); request.setPaymentTesters(paymentTestersIds); request.setPaymentDevModeAction(PaymentDevModeAction.ADD); FbBotMillNetworkController.postThreadSetting(request); } public static void addPaymentsTester(String paymentTesterId) { PaymentSettings request = new PaymentSettings(); List<String> paymentTestersIds = new ArrayList<String>(); request.setPaymentTesters(paymentTestersIds); request.setPaymentDevModeAction(PaymentDevModeAction.ADD); FbBotMillNetworkController.postThreadSetting(request); } public static void removePaymentsTester(String paymentTesterId) { PaymentSettings request = new PaymentSettings(); List<String> paymentTestersIds = new ArrayList<String>(); request.setPaymentTesters(paymentTestersIds); request.setPaymentDevModeAction(PaymentDevModeAction.REMOVE); FbBotMillNetworkController.postThreadSetting(request); } public static void removePaymentsTesters(List<String> paymentTestersIds) { PaymentSettings request = new PaymentSettings(); request.setPaymentTesters(paymentTestersIds); request.setPaymentDevModeAction(PaymentDevModeAction.REMOVE); FbBotMillNetworkController.postThreadSetting(request); } public static void setPaymentsPublicKey(String publicKey) { PaymentSettings request = new PaymentSettings(); request.setPrivacyUrl(publicKey); FbBotMillNetworkController.postThreadSetting(request); } public static void setPaymentsPrivacyUrl(String privacyUrl) { PaymentSettings request = new PaymentSettings(); request.setPrivacyUrl(privacyUrl); FbBotMillNetworkController.postThreadSetting(request); } @Override
	public String toString() { return ""FbBotMillThreadSettingsConfiguration []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.api; 
import java.util.ArrayList; import java.util.List; 
import org.slf4j.Logger; import org.slf4j.LoggerFactory; 
import co.aurasphere.botmill.core.BotDefinition; import co.aurasphere.botmill.fb.internal.util.network.FbBotMillNetworkController; import co.aurasphere.botmill.fb.model.api.threadsettings.CallToActionsRequest; import co.aurasphere.botmill.fb.model.api.threadsettings.DomainActionType; import co.aurasphere.botmill.fb.model.api.threadsettings.ThreadState; import co.aurasphere.botmill.fb.model.api.threadsettings.WhitelistDomainRequest; import co.aurasphere.botmill.fb.model.api.threadsettings.greeting.SetGreetingTextRequest; import co.aurasphere.botmill.fb.model.api.threadsettings.payment.PaymentDevModeAction; import co.aurasphere.botmill.fb.model.api.threadsettings.payment.PaymentSettings; import co.aurasphere.botmill.fb.model.outcoming.template.button.Button; import co.aurasphere.botmill.fb.model.outcoming.template.button.ButtonType; import co.aurasphere.botmill.fb.model.outcoming.template.button.BuyButton; import co.aurasphere.botmill.fb.model.outcoming.template.button.PaymentSummary; import co.aurasphere.botmill.fb.model.outcoming.template.button.PostbackButton; import co.aurasphere.botmill.fb.model.outcoming.template.button.WebUrlButton;  /**
 * Class which handles the configuration of the Facebook Messenger Platform
 * Thread Settings (for more informations, see the link below). The methods of
 * this class needs to be called only once and thus shouldn't be put on the
 * class that implements {@link BotDefinition}. The best way of handling the
 * configuration would be defining your own class with a main method and put the
 * call on it.
 *
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings""
 *      >Facebook's Thread Settings Documentation</a>
 * @deprecated Use {@link MessengerProfileApi} instead.
 */ @Deprecated
public class ThreadSettingsApi {  /**
	 * The logger.
	 */ private static final Logger logger = LoggerFactory
			.getLogger(ThreadSettingsApi.class);  /**
	 * Instantiates a new ThreadSettingsApi.
	 */ private ThreadSettingsApi() { }  /**
	 * This method is used to add any payment settings needed.
	 * 
	 * @param paymentSettings
	 *            the payment settings object.
	 * @see <a
	 *      href=""https://developers.facebook.com/docs/messenger-platform/thread-settings/payment""
	 *      >Payments settings</a>
	 */ public static void addPaymentSettings(PaymentSettings paymentSettings) { if (paymentSettings == null) { <FILL_ME> return; } FbBotMillNetworkController.postThreadSetting(paymentSettings); }  /**
	 * Sets the greeting message for the bot. The Greeting Text is only rendered
	 * the first time the user interacts with a the Page on Messenger.
	 *
	 * @param message
	 *            the greeting message to show.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/greeting-text""
	 *      >Facebook's Greeting Text Documentation</a>
	 */ public static void setGreetingMessage(String message) { if (message == null || """".equals(message)) { <FILL_ME> return; } SetGreetingTextRequest request = new SetGreetingTextRequest(message); FbBotMillNetworkController.postThreadSetting(request); }  /**
	 * Sets the Get Started Button for the bot. The Get Started button is only
	 * rendered the first time the user interacts with a the Page on Messenger.
	 * When this button is tapped, the defined payload will be sent back with a
	 * postback received callback.
	 *
	 * @param payload
	 *            the payload to return when the button is tapped.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/get-started-button""
	 *      >Facebook's Get Started Button Documentation</a>
	 */ public static void setGetStartedButton(String payload) { if (payload == null || """".equals(payload)) { <FILL_ME> return; } Button button = new PostbackButton(null, ButtonType.POSTBACK, payload); List<Button> buttonList = new ArrayList<Button>(); buttonList.add(button); CallToActionsRequest request = new CallToActionsRequest(
				ThreadState.NEW_THREAD, buttonList); FbBotMillNetworkController.postThreadSetting(request); }  /**
	 * Removes the current Get Started Button.
	 * 
	 * @see #setGetStartedButton(String)
	 */ public static void deleteGetStartedButton() { CallToActionsRequest request = new CallToActionsRequest(
				ThreadState.NEW_THREAD, null); FbBotMillNetworkController.deleteThreadSetting(request); }  /**
	 * Sets a Persistent Menu of buttons which is always available to the user.
	 * This menu should contain top-level actions that users can enact at any
	 * point. Having a persistent menu easily communicates the basic
	 * capabilities of your bot for first-time and returning users. The menu can
	 * be invoked by a user, by tapping on the 3-caret icon on the left of the
	 * composer.
	 *
	 * @param buttons
	 *            a list of {@link Button} (max 5 elements) to use as menu. The
	 *            buttons can only be {@link PostbackButton} or
	 *            {@link WebUrlButton}. Phone buttons are not supported.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/persistent-menu""
	 *      >Facebook's Persistent Menu Documentation</a>
	 */ public static void setPersistentMenu(List<Button> buttons) { if (buttons == null || buttons.isEmpty() || buttons.size() > 5) { <FILL_ME> return; } CallToActionsRequest request = new CallToActionsRequest(
				ThreadState.EXISTING_THREAD, buttons); FbBotMillNetworkController.postThreadSetting(request); }  /**
	 * Removes the current Persistent Menu.
	 * 
	 * @see #setPersistentMenu(List)
	 */ public static void deletePersistentMenu() { CallToActionsRequest request = new CallToActionsRequest(
				ThreadState.EXISTING_THREAD, null); FbBotMillNetworkController.deleteThreadSetting(request); }  /**
	 * Adds a list of domains that needs to be ""white listed"".
	 *
	 * @param whiteListDomains
	 *            the list of domains in String.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/domain-whitelisting""
	 *      >Facebook's Messenger Platform Domain Whitelisting Thread Settings
	 *      Documentation</a>
	 */ public static void setWhiteListDomains(List<String> whiteListDomains) { WhitelistDomainRequest request = new WhitelistDomainRequest(
				whiteListDomains, DomainActionType.ADD); FbBotMillNetworkController.postThreadSetting(request); }  /**
	 * Adds a single domain on the list of domains that needs to be
	 * ""white listed"".
	 *
	 * @param domain
	 *            the domain that needs to be ""white listed"".
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/domain-whitelisting""
	 *      >Facebook's Messenger Platform Domain Whitelisting Thread Settings
	 *      Documentation</a>
	 */ public static void addWhiteListDomain(String domain) { WhitelistDomainRequest request = new WhitelistDomainRequest(); request.addWhiteListedDomain(domain); request.setDomainActionType(DomainActionType.ADD); FbBotMillNetworkController.postThreadSetting(request); }  /**
	 * Removes a single domain on the list of domains that needs to be
	 * ""white listed"".
	 *
	 * @param domain
	 *            the domain that needs to be removed.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/domain-whitelisting""
	 *      >Facebook's Messenger Platform Domain Whitelisting Thread Settings
	 *      Documentation</a>
	 */ public static void deleteWhiteListDomain(String domain) { WhitelistDomainRequest request = new WhitelistDomainRequest(); request.addWhiteListedDomain(domain); request.setDomainActionType(DomainActionType.REMOVE); FbBotMillNetworkController.postThreadSetting(request); }  /**
	 * Removes a list of domains that are currently ""white listed"".
	 *
	 * @param whiteListDomains
	 *            the list of domains that needs to be removed.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/domain-whitelisting""
	 *      >Facebook's Messenger Platform Domain Whitelisting Thread Settings
	 *      Documentation</a>
	 */ public static void deleteWhiteListDomains(List<String> whiteListDomains) { WhitelistDomainRequest request = new WhitelistDomainRequest(
				whiteListDomains, DomainActionType.REMOVE); FbBotMillNetworkController.postThreadSetting(request); }  /**
	 * Adds a list of testers for payments. You can add payment test users so
	 * that their credit card won't be charged during your development. Once
	 * added, it will impact both Buy Button and Webview Extension integrations,
	 * any payment send to these users will be a dummy charge. If you are only
	 * testing {@link BuyButton}, consider using the
	 * {@link PaymentSummary#setTestPayment(boolean)} flag which is simpler for
	 * testing.
	 *
	 * @param paymentTestersIds
	 *            the testers app-scoped IDs to add to the testers list.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/payment""
	 *      >Facebook's Messenger Platform Payments Thread Settings
	 *      Documentation</a>
	 * @since 1.2.0
	 */ public static void addPaymentsTesters(List<String> paymentTestersIds) { PaymentSettings request = new PaymentSettings(); request.setPaymentTesters(paymentTestersIds); request.setPaymentDevModeAction(PaymentDevModeAction.ADD); FbBotMillNetworkController.postThreadSetting(request); }  /**
	 * Adds a single tester for payments. You can add payment test users so that
	 * their credit card won't be charged during your development. Once added,
	 * it will impact both Buy Button and Webview Extension integrations, any
	 * payment send to these users will be a dummy charge. If you are only
	 * testing {@link BuyButton}, consider using the
	 * {@link PaymentSummary#setTestPayment(boolean)} flag which is simpler for
	 * testing.
	 *
	 * @param paymentTesterId
	 *            the tester app-scoped ID to add to the testers list.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/payment""
	 *      >Facebook's Messenger Platform Payments Thread Settings
	 *      Documentation</a>
	 * @since 1.2.0
	 */ public static void addPaymentsTester(String paymentTesterId) { PaymentSettings request = new PaymentSettings(); List<String> paymentTestersIds = new ArrayList<String>(); request.setPaymentTesters(paymentTestersIds); request.setPaymentDevModeAction(PaymentDevModeAction.ADD); FbBotMillNetworkController.postThreadSetting(request); }  /**
	 * Removes a single tester for payments. You can add payment test users so
	 * that their credit card won't be charged during your development. Once
	 * added, it will impact both Buy Button and Webview Extension integrations,
	 * any payment send to these users will be a dummy charge. If you are only
	 * testing {@link BuyButton}, consider using the
	 * {@link PaymentSummary#setTestPayment(boolean)} flag which is simpler for
	 * testing.
	 *
	 * @param paymentTesterId
	 *            the tester app-scoped ID to remove from the testers list.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/payment""
	 *      >Facebook's Messenger Platform Payments Thread Settings
	 *      Documentation</a>
	 * @since 1.2.0
	 */ public static void removePaymentsTester(String paymentTesterId) { PaymentSettings request = new PaymentSettings(); List<String> paymentTestersIds = new ArrayList<String>(); request.setPaymentTesters(paymentTestersIds); request.setPaymentDevModeAction(PaymentDevModeAction.REMOVE); FbBotMillNetworkController.postThreadSetting(request); }  /**
	 * Removes a list of testers for payments. You can add payment test users so
	 * that their credit card won't be charged during your development. Once
	 * added, it will impact both Buy Button and Webview Extension integrations,
	 * any payment send to these users will be a dummy charge. If you are only
	 * testing {@link BuyButton}, consider using the
	 * {@link PaymentSummary#setTestPayment(boolean)} flag which is simpler for
	 * testing.
	 *
	 * @param paymentTestersIds
	 *            the testers app-scoped IDs to remove from the testers list.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/payment""
	 *      >Facebook's Messenger Platform Payments Thread Settings
	 *      Documentation</a>
	 * @since 1.2.0
	 */ public static void removePaymentsTesters(List<String> paymentTestersIds) { PaymentSettings request = new PaymentSettings(); request.setPaymentTesters(paymentTestersIds); request.setPaymentDevModeAction(PaymentDevModeAction.REMOVE); FbBotMillNetworkController.postThreadSetting(request); }  /**
	 * Sets the payment public key. The payment_public_key is used to encrypt
	 * sensitive payment data sent to you.
	 *
	 * @param publicKey
	 *            the public key to set.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/payment""
	 *      >Facebook's Messenger Platform Payments Thread Settings
	 *      Documentation</a>
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/payments-reference#encryption_key""
	 *      >Facebook's Messenger Platform Creating Encryption Documentation</a>
	 * @since 1.2.0
	 */ public static void setPaymentsPublicKey(String publicKey) { PaymentSettings request = new PaymentSettings(); request.setPrivacyUrl(publicKey); FbBotMillNetworkController.postThreadSetting(request); }  /**
	 * Sets the payment privacy Url. The payment_privacy_url will appear in
	 * Facebook's payment dialogs and people will be able to view these terms.
	 *
	 * @param privacyUrl
	 *            the privacy Url to set.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/payment""
	 *      >Facebook's Messenger Platform Payments Thread Settings
	 *      Documentation</a>
	 * @since 1.2.0
	 */ public static void setPaymentsPrivacyUrl(String privacyUrl) { PaymentSettings request = new PaymentSettings(); request.setPrivacyUrl(privacyUrl); FbBotMillNetworkController.postThreadSetting(request); }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ @Override
	public String toString() { return ""FbBotMillThreadSettingsConfiguration []""; }  }  "
src/main/java/co/aurasphere/botmill/fb/api/UploadApi.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.api;

import co.aurasphere.botmill.fb.internal.util.network.FbBotMillNetworkController;
import co.aurasphere.botmill.fb.model.api.upload.UploadAttachmentResponse;
import co.aurasphere.botmill.fb.model.base.Attachment;
import co.aurasphere.botmill.fb.model.base.AttachmentType;
import co.aurasphere.botmill.fb.model.outcoming.message.AttachmentMessage;
import co.aurasphere.botmill.fb.model.outcoming.message.FbBotMillMessageResponse;
import co.aurasphere.botmill.fb.model.outcoming.payload.AttachmentPayload;


/**
 * Class for handling the Facebook's Messenger Upload API.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */
public class UploadApi {

	/**
	 * Instantiates a new UploadApi.
	 */
	private UploadApi() {
	}

	/**
	 * Method to upload an attachment to Facebook's server in order to use it
	 * later. Requires the pages_messaging permission.
	 * 
	 * @param attachmentType
	 *            the type of attachment to upload to Facebook. Please notice
	 *            that currently Facebook supports only image, audio, video and
	 *            file attachments.
	 * @param attachmentUrl
	 *            the URL of the attachment to upload to Facebook.
	 * @return nonexpiring ID for the attachment.
	 */
	public static UploadAttachmentResponse uploadAttachment(
			AttachmentType attachmentType, String attachmentUrl) {
		AttachmentPayload payload = new AttachmentPayload(attachmentUrl, true);
		Attachment attachment = new Attachment(attachmentType, payload);
		AttachmentMessage message = new AttachmentMessage(attachment);
		FbBotMillMessageResponse toSend = new FbBotMillMessageResponse(null, message);
		return FbBotMillNetworkController.postUploadAttachment(toSend);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""FbBotMillUploadApi []"";
	}

}
","package co.aurasphere.botmill.fb.api; public class UploadApi { private UploadApi() { } public static UploadAttachmentResponse uploadAttachment(
			AttachmentType attachmentType, String attachmentUrl) { AttachmentPayload payload = new AttachmentPayload(attachmentUrl, true); Attachment attachment = new Attachment(attachmentType, payload); AttachmentMessage message = new AttachmentMessage(attachment); FbBotMillMessageResponse toSend = new FbBotMillMessageResponse(null, message); return FbBotMillNetworkController.postUploadAttachment(toSend); } @Override
	public String toString() { return ""FbBotMillUploadApi []""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.api; public class UploadApi { private UploadApi() { } public static UploadAttachmentResponse uploadAttachment(
			AttachmentType attachmentType, String attachmentUrl) { AttachmentPayload payload = new AttachmentPayload(attachmentUrl, true); Attachment attachment = new Attachment(attachmentType, payload); AttachmentMessage message = new AttachmentMessage(attachment); FbBotMillMessageResponse toSend = new FbBotMillMessageResponse(null, message); return FbBotMillNetworkController.postUploadAttachment(toSend); } @Override
	public String toString() { return ""FbBotMillUploadApi []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.api; 
import co.aurasphere.botmill.fb.internal.util.network.FbBotMillNetworkController; import co.aurasphere.botmill.fb.model.api.upload.UploadAttachmentResponse; import co.aurasphere.botmill.fb.model.base.Attachment; import co.aurasphere.botmill.fb.model.base.AttachmentType; import co.aurasphere.botmill.fb.model.outcoming.message.AttachmentMessage; import co.aurasphere.botmill.fb.model.outcoming.message.FbBotMillMessageResponse; import co.aurasphere.botmill.fb.model.outcoming.payload.AttachmentPayload; 
  public class UploadApi { /**
 * Class for handling the Facebook's Messenger Upload API.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */  private UploadApi() { } /**
	 * Instantiates a new UploadApi.
	 */  public static UploadAttachmentResponse uploadAttachment(
			AttachmentType attachmentType, String attachmentUrl) { AttachmentPayload payload = new AttachmentPayload(attachmentUrl, true); Attachment attachment = new Attachment(attachmentType, payload); AttachmentMessage message = new AttachmentMessage(attachment); FbBotMillMessageResponse toSend = new FbBotMillMessageResponse(null, message); return FbBotMillNetworkController.postUploadAttachment(toSend); } /**
	 * Method to upload an attachment to Facebook's server in order to use it
	 * later. Requires the pages_messaging permission.
	 * 
	 * @param attachmentType
	 *            the type of attachment to upload to Facebook. Please notice
	 *            that currently Facebook supports only image, audio, video and
	 *            file attachments.
	 * @param attachmentUrl
	 *            the URL of the attachment to upload to Facebook.
	 * @return nonexpiring ID for the attachment.
	 */  @Override
	public String toString() { return ""FbBotMillUploadApi []""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/api/UserProfileApi.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.api;

import co.aurasphere.botmill.fb.internal.util.network.FbBotMillNetworkController;
import co.aurasphere.botmill.fb.model.api.userprofile.FacebookUserProfile;


/**
 * Class for handling the retrieval of Facebook user info.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */
public class UserProfileApi {

	/**
	 * Instantiates a new UserProfileApi.
	 */
	private UserProfileApi() {
	}

	/**
	 * Retrieves a {@link FacebookUserProfile} object containing the info for
	 * the user with the ID passed.
	 * 
	 * @param userId
	 *            the id of the user whose profile to retrieve.
	 * @return the user profile.
	 */
	public static FacebookUserProfile getUser(String userId) {
		return FbBotMillNetworkController.getUserProfile(userId);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""FbBotMillUserProfileRetriever []"";
	}

}
","package co.aurasphere.botmill.fb.api; public class UserProfileApi { private UserProfileApi() { } public static FacebookUserProfile getUser(String userId) { return FbBotMillNetworkController.getUserProfile(userId); } @Override
	public String toString() { return ""FbBotMillUserProfileRetriever []""; } }",0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.api; public class UserProfileApi { private UserProfileApi() { } public static FacebookUserProfile getUser(String userId) { return FbBotMillNetworkController.getUserProfile(userId); } @Override
	public String toString() { return ""FbBotMillUserProfileRetriever []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.api; 
import co.aurasphere.botmill.fb.internal.util.network.FbBotMillNetworkController; import co.aurasphere.botmill.fb.model.api.userprofile.FacebookUserProfile; 
  public class UserProfileApi { /**
 * Class for handling the retrieval of Facebook user info.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */  private UserProfileApi() { } /**
	 * Instantiates a new UserProfileApi.
	 */  public static FacebookUserProfile getUser(String userId) { return FbBotMillNetworkController.getUserProfile(userId); } /**
	 * Retrieves a {@link FacebookUserProfile} object containing the info for
	 * the user with the ID passed.
	 * 
	 * @param userId
	 *            the id of the user whose profile to retrieve.
	 * @return the user profile.
	 */  @Override
	public String toString() { return ""FbBotMillUserProfileRetriever []""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/autoreply/ActionAutoReply.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.autoreply;

import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;
import co.aurasphere.botmill.fb.model.outcoming.action.TypingAction;
import co.aurasphere.botmill.fb.model.outcoming.factory.ReplyFactory;


/**
 * An {@link AutoReply} that replies with a {@link TypingAction}.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 */
public class ActionAutoReply extends AutoReply {

	/**
	 * The {@link TypingAction} to perform.
	 */
	private TypingAction typingAction;

	/**
	 * Instantiates a new action auto reply.
	 *
	 * @param typingAction
	 *            the {@link #typingAction}.
	 */
	public ActionAutoReply(TypingAction typingAction) {
		this.typingAction = typingAction;
	}

	/**
	 * {@inheritDoc} Replies with a {@link TypingAction}.
	 */
	@Override
	public FbBotMillResponse createResponse(MessageEnvelope envelope) {
		return ReplyFactory.addTypingAction(this.typingAction).build(envelope);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((typingAction == null) ? 0 : typingAction.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ActionAutoReply other = (ActionAutoReply) obj;
		if (typingAction != other.typingAction)
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""ActionAutoReply [action="" + typingAction + ""]"";
	}

}
","package co.aurasphere.botmill.fb.autoreply; public class ActionAutoReply extends AutoReply { private TypingAction typingAction; public ActionAutoReply(TypingAction typingAction) { this.typingAction = typingAction; } @Override
	public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.addTypingAction(this.typingAction).build(envelope); } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((typingAction == null) ? 0 : typingAction.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ActionAutoReply other = (ActionAutoReply) obj; if (typingAction != other.typingAction)
			return false; return true; } @Override
	public String toString() { return ""ActionAutoReply [action="" + typingAction + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.autoreply; public class ActionAutoReply extends AutoReply { private TypingAction typingAction; public ActionAutoReply(TypingAction typingAction) { this.typingAction = typingAction; } @Override
	public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.addTypingAction(this.typingAction).build(envelope); } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((typingAction == null) ? 0 : typingAction.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ActionAutoReply other = (ActionAutoReply) obj; if (typingAction != other.typingAction)
			return false; return true; } @Override
	public String toString() { return ""ActionAutoReply [action="" + typingAction + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.autoreply; 
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; import co.aurasphere.botmill.fb.model.outcoming.action.TypingAction; import co.aurasphere.botmill.fb.model.outcoming.factory.ReplyFactory; 
  public class ActionAutoReply extends AutoReply { /**
 * An {@link AutoReply} that replies with a {@link TypingAction}.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 */  private TypingAction typingAction; /**
	 * The {@link TypingAction} to perform.
	 */  public ActionAutoReply(TypingAction typingAction) { this.typingAction = typingAction; } /**
	 * Instantiates a new action auto reply.
	 *
	 * @param typingAction
	 *            the {@link #typingAction}.
	 */  @Override
	public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.addTypingAction(this.typingAction).build(envelope); } /**
	 * {@inheritDoc} Replies with a {@link TypingAction}.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((typingAction == null) ? 0 : typingAction.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ActionAutoReply other = (ActionAutoReply) obj; if (typingAction != other.typingAction)
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""ActionAutoReply [action="" + typingAction + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/autoreply/AttachmentAutoReply.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.autoreply;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import co.aurasphere.botmill.core.internal.exception.BotMillIllegalAttachmentException;
import co.aurasphere.botmill.fb.model.base.AttachmentType;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;
import co.aurasphere.botmill.fb.model.outcoming.factory.ReplyFactory;


/**
 * An {@link AutoReply} that replies with a file, video, image or audio
 * attachment.
 * 
 * @author Donato Rimenti
 */
public class AttachmentAutoReply extends AutoReply {

	/**
	 * The logger.
	 */
	private static final Logger logger = LoggerFactory.getLogger(AttachmentAutoReply.class);

	/**
	 * The attachment type. This can only be {@link AttachmentType#FILE},
	 * {@link AttachmentType#AUDIO}, {@link AttachmentType#IMAGE} or
	 * {@link AttachmentType#VIDEO}.
	 */
	private AttachmentType attachmentType;

	/**
	 * The URL pointing to the attachment.
	 */
	private String url;

	/**
	 * Instantiates a new attachment auto reply.
	 *
	 * @param attachmentType
	 *            the {@link #attachmentType}.
	 * @param url
	 *            the {@link #url}.
	 */
	public AttachmentAutoReply(AttachmentType attachmentType, String url) {
		this.attachmentType = attachmentType;
		this.url = url;
	}

	/**
	 * {@inheritDoc} Replies with an attachment.
	 */
	@Override
	public FbBotMillResponse createResponse(MessageEnvelope envelope) {
		FbBotMillResponse response = null;

		switch (attachmentType) {
		case FILE:
			response = ReplyFactory.addFileAttachment(url).build(envelope);
			break;
		case IMAGE:
			response = ReplyFactory.addImageAttachment(url).build(envelope);
			break;
		case AUDIO:
			response = ReplyFactory.addAudioAttachment(url).build(envelope);
			break;
		case VIDEO:
			response = ReplyFactory.addVideoAttachment(url).build(envelope);
			break;
		default:
			String message = ""Illegal attachment of type [ "" + attachmentType.name() + "" ] for AttachmentAutoReply"";
			logger.error(message);
			throw new BotMillIllegalAttachmentException(message);
		}
		return response;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((attachmentType == null) ? 0 : attachmentType.hashCode());
		result = prime * result + ((url == null) ? 0 : url.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		AttachmentAutoReply other = (AttachmentAutoReply) obj;
		if (attachmentType != other.attachmentType)
			return false;
		if (url == null) {
			if (other.url != null)
				return false;
		} else if (!url.equals(other.url))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""AttachmentAutoReply [attachmentType="" + attachmentType + "", url="" + url + ""]"";
	}

}
","package co.aurasphere.botmill.fb.autoreply; public class AttachmentAutoReply extends AutoReply { private static final Logger logger = LoggerFactory.getLogger(AttachmentAutoReply.class); private AttachmentType attachmentType; private String url; public AttachmentAutoReply(AttachmentType attachmentType, String url) { this.attachmentType = attachmentType; this.url = url; } @Override
	public FbBotMillResponse createResponse(MessageEnvelope envelope) { FbBotMillResponse response = null; switch (attachmentType) { case FILE:
			response = ReplyFactory.addFileAttachment(url).build(envelope); break; case IMAGE:
			response = ReplyFactory.addImageAttachment(url).build(envelope); break; case AUDIO:
			response = ReplyFactory.addAudioAttachment(url).build(envelope); break; case VIDEO:
			response = ReplyFactory.addVideoAttachment(url).build(envelope); break; default:
			String message = ""Illegal attachment of type [ "" + attachmentType.name() + "" ] for AttachmentAutoReply""; throw new BotMillIllegalAttachmentException(message); } return response; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((attachmentType == null) ? 0 : attachmentType.hashCode()); result = prime * result + ((url == null) ? 0 : url.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; AttachmentAutoReply other = (AttachmentAutoReply) obj; if (attachmentType != other.attachmentType)
			return false; if (url == null) { if (other.url != null)
				return false; } else if (!url.equals(other.url))
			return false; return true; } @Override
	public String toString() { return ""AttachmentAutoReply [attachmentType="" + attachmentType + "", url="" + url + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.autoreply; public class AttachmentAutoReply extends AutoReply { private static final Logger logger = LoggerFactory.getLogger(AttachmentAutoReply.class); private AttachmentType attachmentType; private String url; public AttachmentAutoReply(AttachmentType attachmentType, String url) { this.attachmentType = attachmentType; this.url = url; } @Override
	public FbBotMillResponse createResponse(MessageEnvelope envelope) { FbBotMillResponse response = null; switch (attachmentType) { case FILE:
			response = ReplyFactory.addFileAttachment(url).build(envelope); break; case IMAGE:
			response = ReplyFactory.addImageAttachment(url).build(envelope); break; case AUDIO:
			response = ReplyFactory.addAudioAttachment(url).build(envelope); break; case VIDEO:
			response = ReplyFactory.addVideoAttachment(url).build(envelope); break; default:
			String message = ""Illegal attachment of type [ "" + attachmentType.name() + "" ] for AttachmentAutoReply""; <FILL_ME> throw new BotMillIllegalAttachmentException(message); } return response; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((attachmentType == null) ? 0 : attachmentType.hashCode()); result = prime * result + ((url == null) ? 0 : url.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; AttachmentAutoReply other = (AttachmentAutoReply) obj; if (attachmentType != other.attachmentType)
			return false; if (url == null) { if (other.url != null)
				return false; } else if (!url.equals(other.url))
			return false; return true; } @Override
	public String toString() { return ""AttachmentAutoReply [attachmentType="" + attachmentType + "", url="" + url + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.autoreply; 
import org.slf4j.Logger; import org.slf4j.LoggerFactory; 
import co.aurasphere.botmill.core.internal.exception.BotMillIllegalAttachmentException; import co.aurasphere.botmill.fb.model.base.AttachmentType; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; import co.aurasphere.botmill.fb.model.outcoming.factory.ReplyFactory; 
  public class AttachmentAutoReply extends AutoReply { /**
 * An {@link AutoReply} that replies with a file, video, image or audio
 * attachment.
 * 
 * @author Donato Rimenti
 */  private static final Logger logger = LoggerFactory.getLogger(AttachmentAutoReply.class); /**
	 * The logger.
	 */  private AttachmentType attachmentType; /**
	 * The attachment type. This can only be {@link AttachmentType#FILE},
	 * {@link AttachmentType#AUDIO}, {@link AttachmentType#IMAGE} or
	 * {@link AttachmentType#VIDEO}.
	 */  private String url; /**
	 * The URL pointing to the attachment.
	 */  public AttachmentAutoReply(AttachmentType attachmentType, String url) { this.attachmentType = attachmentType; this.url = url; } /**
	 * Instantiates a new attachment auto reply.
	 *
	 * @param attachmentType
	 *            the {@link #attachmentType}.
	 * @param url
	 *            the {@link #url}.
	 */  @Override
	public FbBotMillResponse createResponse(MessageEnvelope envelope) { FbBotMillResponse response = null; /**
	 * {@inheritDoc} Replies with an attachment.
	 */ switch (attachmentType) { case FILE:
			response = ReplyFactory.addFileAttachment(url).build(envelope); break; case IMAGE:
			response = ReplyFactory.addImageAttachment(url).build(envelope); break; case AUDIO:
			response = ReplyFactory.addAudioAttachment(url).build(envelope); break; case VIDEO:
			response = ReplyFactory.addVideoAttachment(url).build(envelope); break; default:
			String message = ""Illegal attachment of type [ "" + attachmentType.name() + "" ] for AttachmentAutoReply""; <FILL_ME> throw new BotMillIllegalAttachmentException(message); } return response; }   @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((attachmentType == null) ? 0 : attachmentType.hashCode()); result = prime * result + ((url == null) ? 0 : url.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; AttachmentAutoReply other = (AttachmentAutoReply) obj; if (attachmentType != other.attachmentType)
			return false; if (url == null) { if (other.url != null)
				return false; } else if (!url.equals(other.url))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""AttachmentAutoReply [attachmentType="" + attachmentType + "", url="" + url + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/autoreply/AutoReply.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.autoreply;

import co.aurasphere.botmill.fb.bean.FbBotMillBean;
import co.aurasphere.botmill.fb.event.FbBotMillEvent;
import co.aurasphere.botmill.fb.internal.util.network.FbBotMillNetworkController;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;


/**
 * A class that represents an automatic reply to an event. AutoReply are used in
 * conjuction with {@link FbBotMillEvent} in order to handle an Facebook's
 * Messenger Platform callback automatically, using the delegation design
 * pattern.
 * 
 * @author Donato Rimenti
 */
public abstract class AutoReply extends FbBotMillBean implements Reply {

	/**
	 * Method which defines the reply flow.
	 * 
	 * @param envelope
	 *            the current callback message
	 */
	public void reply(MessageEnvelope envelope) {
		FbBotMillResponse response = createResponse(envelope);
		if (response != null) {
			// If the response is valid, replies to it.
			if (validate(response)) {
				FbBotMillNetworkController.postJsonMessage(response);
			}
		}
	}
	
	/* (non-Javadoc)
	 * @see co.aurasphere.botmill.fb.autoreply.Reply#createResponse(co.aurasphere.botmill.fb.model.incoming.MessageEnvelope)
	 */
	public abstract FbBotMillResponse createResponse(MessageEnvelope envelope);

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""AutoReply []"";
	}


}
","package co.aurasphere.botmill.fb.autoreply; public abstract class AutoReply extends FbBotMillBean implements Reply { public void reply(MessageEnvelope envelope) { FbBotMillResponse response = createResponse(envelope); if (response != null) { if (validate(response)) { FbBotMillNetworkController.postJsonMessage(response); } } } public abstract FbBotMillResponse createResponse(MessageEnvelope envelope); @Override
	public String toString() { return ""AutoReply []""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.autoreply; public abstract class AutoReply extends FbBotMillBean implements Reply { public void reply(MessageEnvelope envelope) { FbBotMillResponse response = createResponse(envelope); if (response != null) { if (validate(response)) { FbBotMillNetworkController.postJsonMessage(response); } } } public abstract FbBotMillResponse createResponse(MessageEnvelope envelope); @Override
	public String toString() { return ""AutoReply []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.autoreply; 
import co.aurasphere.botmill.fb.bean.FbBotMillBean; import co.aurasphere.botmill.fb.event.FbBotMillEvent; import co.aurasphere.botmill.fb.internal.util.network.FbBotMillNetworkController; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; 
  public abstract class AutoReply extends FbBotMillBean implements Reply { /**
 * A class that represents an automatic reply to an event. AutoReply are used in
 * conjuction with {@link FbBotMillEvent} in order to handle an Facebook's
 * Messenger Platform callback automatically, using the delegation design
 * pattern.
 * 
 * @author Donato Rimenti
 */  public void reply(MessageEnvelope envelope) { FbBotMillResponse response = createResponse(envelope); if (response != null) { /**
	 * Method which defines the reply flow.
	 * 
	 * @param envelope
	 *            the current callback message
	 */ if (validate(response)) { FbBotMillNetworkController.postJsonMessage(response); } } } // If the response is valid, replies to it. 	 public abstract FbBotMillResponse createResponse(MessageEnvelope envelope); /* (non-Javadoc)
	 * @see co.aurasphere.botmill.fb.autoreply.Reply#createResponse(co.aurasphere.botmill.fb.model.incoming.MessageEnvelope)
	 */  @Override
	public String toString() { return ""AutoReply []""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ } 
 "
src/main/java/co/aurasphere/botmill/fb/autoreply/EchoAutoReply.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.autoreply;

import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;
import co.aurasphere.botmill.fb.model.outcoming.factory.ReplyFactory;


/**
 * An {@link AutoReply} that replies with the last received message. Mostly used
 * for testing and demo purposes.
 * 
 * @author Donato Rimenti
 */
public class EchoAutoReply extends AutoReply {

	/**
	 * {@inheritDoc} It replies with the last received message.
	 */
	public FbBotMillResponse createResponse(MessageEnvelope envelope) {
		String lastMessage = safeGetMessage(envelope);
		return ReplyFactory.addTextMessageOnly(lastMessage).build(envelope);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.autoreply.AutoReply#toString()
	 */
	@Override
	public String toString() {
		return ""EchoAutoReply []"";
	}

}
","package co.aurasphere.botmill.fb.autoreply; public class EchoAutoReply extends AutoReply { public FbBotMillResponse createResponse(MessageEnvelope envelope) { String lastMessage = safeGetMessage(envelope); return ReplyFactory.addTextMessageOnly(lastMessage).build(envelope); } @Override
	public String toString() { return ""EchoAutoReply []""; } }",0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.autoreply; public class EchoAutoReply extends AutoReply { public FbBotMillResponse createResponse(MessageEnvelope envelope) { String lastMessage = safeGetMessage(envelope); return ReplyFactory.addTextMessageOnly(lastMessage).build(envelope); } @Override
	public String toString() { return ""EchoAutoReply []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.autoreply; 
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; import co.aurasphere.botmill.fb.model.outcoming.factory.ReplyFactory; 
  public class EchoAutoReply extends AutoReply { /**
 * An {@link AutoReply} that replies with the last received message. Mostly used
 * for testing and demo purposes.
 * 
 * @author Donato Rimenti
 */  public FbBotMillResponse createResponse(MessageEnvelope envelope) { String lastMessage = safeGetMessage(envelope); return ReplyFactory.addTextMessageOnly(lastMessage).build(envelope); } /**
	 * {@inheritDoc} It replies with the last received message.
	 */  @Override
	public String toString() { return ""EchoAutoReply []""; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.autoreply.AutoReply#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/autoreply/LambdaAutoReply.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.autoreply;

import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;


/**
 * An {@link AutoReply} whose reply is defined by a Java 8 Lambda function.
 * 
 * @author Donato Rimenti
 * @since 1.2.0
 */
public class LambdaAutoReply extends AutoReply {

	/**
	 * A lambda which represents how to reply to this message.
	 */
	private Reply lambda;

	/**
	 * Instantiates a new LambdaAutoReply.
	 *
	 * @param lambda
	 *            the {@link #lambda}.
	 */
	public LambdaAutoReply(Reply lambda) {
		this.lambda = lambda;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.autoreply.AutoReply#createResponse(co.aurasphere
	 * .botmill.fb.model.incoming.MessageEnvelope)
	 */
	@Override
	public FbBotMillResponse createResponse(MessageEnvelope envelope) {
		return lambda.createResponse(envelope);
	}

}
","package co.aurasphere.botmill.fb.autoreply; public class LambdaAutoReply extends AutoReply { private Reply lambda; public LambdaAutoReply(Reply lambda) { this.lambda = lambda; } @Override
	public FbBotMillResponse createResponse(MessageEnvelope envelope) { return lambda.createResponse(envelope); } }",0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.autoreply; public class LambdaAutoReply extends AutoReply { private Reply lambda; public LambdaAutoReply(Reply lambda) { this.lambda = lambda; } @Override
	public FbBotMillResponse createResponse(MessageEnvelope envelope) { return lambda.createResponse(envelope); } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.autoreply; 
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; 
  public class LambdaAutoReply extends AutoReply { /**
 * An {@link AutoReply} whose reply is defined by a Java 8 Lambda function.
 * 
 * @author Donato Rimenti
 * @since 1.2.0
 */  private Reply lambda; /**
	 * A lambda which represents how to reply to this message.
	 */  public LambdaAutoReply(Reply lambda) { this.lambda = lambda; } /**
	 * Instantiates a new LambdaAutoReply.
	 *
	 * @param lambda
	 *            the {@link #lambda}.
	 */  @Override
	public FbBotMillResponse createResponse(MessageEnvelope envelope) { return lambda.createResponse(envelope); } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.autoreply.AutoReply#createResponse(co.aurasphere
	 * .botmill.fb.model.incoming.MessageEnvelope)
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/autoreply/MessageAutoReply.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.autoreply;

import org.hibernate.validator.constraints.NotBlank;

import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;
import co.aurasphere.botmill.fb.model.outcoming.factory.ReplyFactory;


/**
 * An {@link AutoReply} that replies with a specified message.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 */
public class MessageAutoReply extends AutoReply {

	/**
	 * The reply message. It can't be blank.
	 */
	@NotBlank
	private String replyMessage;

	/**
	 * Instantiates a new message auto reply.
	 *
	 * @param replyMessage
	 *            the {@link #replyMessage}.
	 */
	public MessageAutoReply(String replyMessage) {
		this.replyMessage = replyMessage;
	}

	/**
	 * {@inheritDoc} It replies with the message specified in the constructor.
	 */
	public FbBotMillResponse createResponse(MessageEnvelope envelope) {
		return ReplyFactory.addTextMessageOnly(this.replyMessage).build(envelope);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((replyMessage == null) ? 0 : replyMessage.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		MessageAutoReply other = (MessageAutoReply) obj;
		if (replyMessage == null) {
			if (other.replyMessage != null)
				return false;
		} else if (!replyMessage.equals(other.replyMessage))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.autoreply.AutoReply#toString()
	 */
	@Override
	public String toString() {
		return ""MessageAutoReply [replyMessage="" + replyMessage + ""]"";
	}

}
","package co.aurasphere.botmill.fb.autoreply; public class MessageAutoReply extends AutoReply { @NotBlank
	private String replyMessage; public MessageAutoReply(String replyMessage) { this.replyMessage = replyMessage; } public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.addTextMessageOnly(this.replyMessage).build(envelope); } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((replyMessage == null) ? 0 : replyMessage.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; MessageAutoReply other = (MessageAutoReply) obj; if (replyMessage == null) { if (other.replyMessage != null)
				return false; } else if (!replyMessage.equals(other.replyMessage))
			return false; return true; } @Override
	public String toString() { return ""MessageAutoReply [replyMessage="" + replyMessage + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.autoreply; public class MessageAutoReply extends AutoReply { @NotBlank
	private String replyMessage; public MessageAutoReply(String replyMessage) { this.replyMessage = replyMessage; } public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.addTextMessageOnly(this.replyMessage).build(envelope); } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((replyMessage == null) ? 0 : replyMessage.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; MessageAutoReply other = (MessageAutoReply) obj; if (replyMessage == null) { if (other.replyMessage != null)
				return false; } else if (!replyMessage.equals(other.replyMessage))
			return false; return true; } @Override
	public String toString() { return ""MessageAutoReply [replyMessage="" + replyMessage + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.autoreply; 
import org.hibernate.validator.constraints.NotBlank; 
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; import co.aurasphere.botmill.fb.model.outcoming.factory.ReplyFactory; 
  public class MessageAutoReply extends AutoReply { /**
 * An {@link AutoReply} that replies with a specified message.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 */  @NotBlank
	private String replyMessage; /**
	 * The reply message. It can't be blank.
	 */  public MessageAutoReply(String replyMessage) { this.replyMessage = replyMessage; } /**
	 * Instantiates a new message auto reply.
	 *
	 * @param replyMessage
	 *            the {@link #replyMessage}.
	 */  public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.addTextMessageOnly(this.replyMessage).build(envelope); } /**
	 * {@inheritDoc} It replies with the message specified in the constructor.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((replyMessage == null) ? 0 : replyMessage.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; MessageAutoReply other = (MessageAutoReply) obj; if (replyMessage == null) { if (other.replyMessage != null)
				return false; } else if (!replyMessage.equals(other.replyMessage))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""MessageAutoReply [replyMessage="" + replyMessage + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.autoreply.AutoReply#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/autoreply/Reply.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.autoreply;

import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;


/**
 * Interface which represents every reply from the bot.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 * @since 1.2.0
 */
public interface Reply {

	/**
	 * Method which defines the response to send back as a response to the
	 * current message.
	 * 
	 * @param envelope
	 *            the current message.
	 * @return a {@link FbBotMillResponse} which contains the response to the
	 *         current message.
	 */
	public FbBotMillResponse createResponse(MessageEnvelope envelope);

}
",package co.aurasphere.botmill.fb.autoreply; public interface Reply { public FbBotMillResponse createResponse(MessageEnvelope envelope); },0 0 0 0 0,package co.aurasphere.botmill.fb.autoreply; public interface Reply { public FbBotMillResponse createResponse(MessageEnvelope envelope); } ,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.autoreply; 
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; 
  public interface Reply { /**
 * Interface which represents every reply from the bot.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 * @since 1.2.0
 */  public FbBotMillResponse createResponse(MessageEnvelope envelope); /**
	 * Method which defines the response to send back as a response to the
	 * current message.
	 * 
	 * @param envelope
	 *            the current message.
	 * @return a {@link FbBotMillResponse} which contains the response to the
	 *         current message.
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/bean/FbBotMillBean.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.bean;

import java.util.List;
import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import co.aurasphere.botmill.fb.FbBotMillContext;
import co.aurasphere.botmill.fb.event.FbBotMillEventType;
import co.aurasphere.botmill.fb.model.base.Attachment;
import co.aurasphere.botmill.fb.model.base.AttachmentType;
import co.aurasphere.botmill.fb.model.base.QuickReplyLocationPayload;
import co.aurasphere.botmill.fb.model.base.User;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.incoming.callback.EchoMessage;
import co.aurasphere.botmill.fb.model.incoming.callback.IncomingMessage;
import co.aurasphere.botmill.fb.model.incoming.callback.LocationCoordinates;
import co.aurasphere.botmill.fb.model.incoming.callback.ReceivedMessage;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;
import co.aurasphere.botmill.fb.support.FbBotMillMonitor;


/**
 * Base FbBot bean which contains utility methods for handling an envelope.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */
public class FbBotMillBean {

	/**
	 * The logger.
	 */
	private final static Logger logger = LoggerFactory
			.getLogger(FbBotMillBean.class);

	/**
	 * Retrieves a text message from an envelope. It never returns null.
	 * 
	 * @param envelope
	 *            the message envelope.
	 * @return the text message if found or an empty String otherwise. It never
	 *         returns null.
	 */
	protected String safeGetMessage(MessageEnvelope envelope) {
		if (envelope != null && envelope.getMessage() != null
				&& envelope.getMessage().getText() != null
				&& envelope.getMessage().getQuickReply() == null) {
			return envelope.getMessage().getText();
		}
		return """";
	}

	/**
	 * Retrieves a quick reply payload from an envelope. It never returns null.
	 * 
	 * @param envelope
	 *            the message envelope.
	 * @return the text message if found or an empty String otherwise. It never
	 *         returns null.
	 */
	protected String safeGetQuickReplyPayload(MessageEnvelope envelope) {
		if (envelope != null && envelope.getMessage() != null
				&& envelope.getMessage().getQuickReply() != null
				&& envelope.getMessage().getQuickReply().getPayload() != null) {
			return envelope.getMessage().getQuickReply().getPayload();
		}

		return """";
	}

	/**
	 * Retrieves a text message from an envelope. It never returns null.
	 * 
	 * @param envelope
	 *            the message envelope.
	 * @return the message envelope if found or an empty String otherwise. It
	 *         never returns null.
	 */
	protected String safeGetPostbackPayload(MessageEnvelope envelope) {
		if (envelope != null && envelope.getPostback() != null
				&& envelope.getPostback().getPayload() != null) {
			return envelope.getPostback().getPayload();
		}
		return """";
	}

	/**
	 * Retrieves the recipient ID from an envelope. It never returns null.
	 * 
	 * @param envelope
	 *            the message envelope.
	 * @return the recipient ID if found or an empty String otherwise. It never
	 *         returns null.
	 */
	protected String safeGetRecipientId(MessageEnvelope envelope) {
		if (envelope != null && envelope.getRecipient() != null
				&& envelope.getRecipient().getId() != null) {
			return envelope.getRecipient().getId();
		}
		return """";
	}

	/**
	 * Retrieves the sender ID from an envelope. It never returns null.
	 * 
	 * @param envelope
	 *            the message envelope.
	 * @return the sender ID if found or an empty String otherwise. It never
	 *         returns null.
	 */
	protected String safeGetSenderId(MessageEnvelope envelope) {
		if (envelope != null && envelope.getSender() != null
				&& envelope.getSender().getId() != null) {
			return envelope.getSender().getId();
		}
		return """";
	}

	/**
	 * Retrieves the recipient from an envelope. It never returns null.
	 * 
	 * @param envelope
	 *            the message envelope.
	 * @return a {@link User} containing the recipient if found, empty
	 *         otherwise. It never returns null.
	 */
	protected User safeGetRecipient(MessageEnvelope envelope) {
		if (envelope != null && envelope.getRecipient() != null
				&& envelope.getRecipient().getId() != null) {
			return envelope.getRecipient();
		}
		return new User();
	}

	/**
	 * Retrieves the location from an envelope. It return nulls if none was
	 * retrieved.
	 * 
	 * @param envelope
	 *            the message envelope
	 * @return a {@link LocationCoordinates} containing the coordinates that the
	 *         user sets from the quick reply location payload.
	 */
	protected LocationCoordinates getLocationMessage(MessageEnvelope envelope) {
		if (envelope != null
				&& envelope.getMessage() != null
				&& envelope.getMessage().getAttachments() != null
				&& envelope.getMessage().getAttachments().get(0) != null
				&& envelope.getMessage().getAttachments().get(0).getPayload() != null
				&& envelope.getMessage().getAttachments().get(0).getPayload() instanceof QuickReplyLocationPayload) {

			QuickReplyLocationPayload payload = (QuickReplyLocationPayload) envelope
					.getMessage().getAttachments().get(0).getPayload();

			return payload.getCoordinates();
		}
		return null;
	}
	
	/**
	 * Gets the image message.
	 *
	 * @param envelope the envelope
	 * @return the image message
	 */
	protected Attachment getImageMessage(MessageEnvelope envelope) {
		if (envelope != null
				&& envelope.getMessage() != null
				&& envelope.getMessage().getAttachments() != null
				&& envelope.getMessage().getAttachments().get(0) != null
				&& envelope.getMessage().getAttachments().get(0).getType() == AttachmentType.IMAGE) {
			
		
			return envelope.getMessage().getAttachments().get(0);
		}
		return null;
	}
	
	/**
	 * Gets the audio message.
	 *
	 * @param envelope the envelope
	 * @return the audio message
	 */
	protected Attachment getAudioMessage(MessageEnvelope envelope) {
		if (envelope != null
				&& envelope.getMessage() != null
				&& envelope.getMessage().getAttachments() != null
				&& envelope.getMessage().getAttachments().get(0) != null
				&& envelope.getMessage().getAttachments().get(0).getType() == AttachmentType.AUDIO) {
			
		
			return envelope.getMessage().getAttachments().get(0);
		}
		return null;
	}
	
	/**
	 * Gets the video message.
	 *
	 * @param envelope the envelope
	 * @return the video message
	 */
	protected Attachment getVideoMessage(MessageEnvelope envelope) {
		if (envelope != null
				&& envelope.getMessage() != null
				&& envelope.getMessage().getAttachments() != null
				&& envelope.getMessage().getAttachments().get(0) != null
				&& envelope.getMessage().getAttachments().get(0).getType() == AttachmentType.VIDEO) {
			
		
			return envelope.getMessage().getAttachments().get(0);
		}
		return null;
	}
	
	/**
	 * Gets the file message.
	 *
	 * @param envelope the envelope
	 * @return the file message
	 */
	protected Attachment getFileMessage(MessageEnvelope envelope) {
		if (envelope != null
				&& envelope.getMessage() != null
				&& envelope.getMessage().getAttachments() != null
				&& envelope.getMessage().getAttachments().get(0) != null
				&& envelope.getMessage().getAttachments().get(0).getType() == AttachmentType.FILE) {
			
		
			return envelope.getMessage().getAttachments().get(0);
		}
		return null;
	}

	/**
	 * Retrieves the sender from an envelope. It never returns null.
	 * 
	 * @param envelope
	 *            the message envelope.
	 * @return a {@link User} containing the sender if found, empty otherwise.
	 *         It never returns null.
	 */
	protected User safeGetSender(MessageEnvelope envelope) {
		if (envelope != null && envelope.getSender() != null
				&& envelope.getSender().getId() != null) {
			return envelope.getSender();
		}
		return new User();
	}

	/**
	 * Returns the kind of callback received for the current envelope.
	 * 
	 * @param envelope
	 *            the envelope to inspect.
	 * @return a {@link FbBotMillEventType} representing the current callback
	 *         type.
	 */
	protected FbBotMillEventType eventKind(MessageEnvelope envelope) {
		IncomingMessage message = envelope.getMessage();
		if (message != null) {
			if (message instanceof ReceivedMessage) {
				if (getLocationMessage(envelope) != null) {
					return FbBotMillEventType.LOCATION;
				}
				if(getImageMessage(envelope) != null) {
					return FbBotMillEventType.IMAGE;
				}
				if(getVideoMessage(envelope) != null) {
					return FbBotMillEventType.VIDEO;
				}
				if(getAudioMessage(envelope) != null) {
					return FbBotMillEventType.AUDIO;
				}
				if(getFileMessage(envelope) != null) {
					return FbBotMillEventType.FILE;
				}
				return FbBotMillEventType.MESSAGE;
			}
			if (message instanceof EchoMessage) {
				return FbBotMillEventType.ECHO;
			}
		}
		if (envelope.getPostback() != null) {
			return FbBotMillEventType.POSTBACK;
		}
		if (envelope.getDelivery() != null) {
			return FbBotMillEventType.DELIVERY;
		}
		if (envelope.getRead() != null) {
			return FbBotMillEventType.READ;
		}
		if (envelope.getAccountLinking() != null) {
			return FbBotMillEventType.ACCOUNT_LINKING;
		}
		if (envelope.getOptin() != null) {
			return FbBotMillEventType.AUTHENTICATION;
		}
		if (envelope.getCheckoutUpdate() != null) {
			return FbBotMillEventType.CHECKOUT_UPDATE;
		}
		if (envelope.getReferral() != null) {
			return FbBotMillEventType.REFERRAL;
		}
		if (envelope.getPayment() != null) {
			return FbBotMillEventType.PAYMENT;
		}
		if (envelope.getPreCheckout() != null) {
			return FbBotMillEventType.PRE_CHECKOUT;
		}
		return FbBotMillEventType.ANY;
	}

	/**
	 * Validates the {@link FbBotMillResponse}.
	 *
	 * @param response
	 *            the response
	 * @return true if the response is valid, false otherwise.
	 */
	protected boolean validate(FbBotMillResponse response) {
		// If validations are not enabled, returns true.
		if (!FbBotMillContext.getInstance().isValidationEnabled()) {
			return true;
		}

		boolean valid = true;
		ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
		Validator validator = factory.getValidator();
		Set<ConstraintViolation<FbBotMillResponse>> violations = validator
				.validate(response);
		for (ConstraintViolation<FbBotMillResponse> v : violations) {
			valid = false;
			logger.error(
					""FbBotMillResponse validation error. Message: [{}] Value: [{}], Class: [{}], Field: [{}]"",
					v.getMessage(), v.getInvalidValue(), v.getRootBean(),
					v.getPropertyPath());
		}

		if (valid == false) {
			// Sends the constraint violations through the callback.
			List<FbBotMillMonitor> registeredMonitors = FbBotMillContext
					.getInstance().getRegisteredMonitors();
			for (FbBotMillMonitor monitor : registeredMonitors) {
				monitor.onValidationError(response, violations);
			}
		}

		return valid;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""FbBotMillBean []"";
	}

}
","package co.aurasphere.botmill.fb.bean; public class FbBotMillBean { private final static Logger logger = LoggerFactory
			.getLogger(FbBotMillBean.class); protected String safeGetMessage(MessageEnvelope envelope) { if (envelope != null && envelope.getMessage() != null
				&& envelope.getMessage().getText() != null
				&& envelope.getMessage().getQuickReply() == null) { return envelope.getMessage().getText(); } return """"; } protected String safeGetQuickReplyPayload(MessageEnvelope envelope) { if (envelope != null && envelope.getMessage() != null
				&& envelope.getMessage().getQuickReply() != null
				&& envelope.getMessage().getQuickReply().getPayload() != null) { return envelope.getMessage().getQuickReply().getPayload(); } return """"; } protected String safeGetPostbackPayload(MessageEnvelope envelope) { if (envelope != null && envelope.getPostback() != null
				&& envelope.getPostback().getPayload() != null) { return envelope.getPostback().getPayload(); } return """"; } protected String safeGetRecipientId(MessageEnvelope envelope) { if (envelope != null && envelope.getRecipient() != null
				&& envelope.getRecipient().getId() != null) { return envelope.getRecipient().getId(); } return """"; } protected String safeGetSenderId(MessageEnvelope envelope) { if (envelope != null && envelope.getSender() != null
				&& envelope.getSender().getId() != null) { return envelope.getSender().getId(); } return """"; } protected User safeGetRecipient(MessageEnvelope envelope) { if (envelope != null && envelope.getRecipient() != null
				&& envelope.getRecipient().getId() != null) { return envelope.getRecipient(); } return new User(); } protected LocationCoordinates getLocationMessage(MessageEnvelope envelope) { if (envelope != null
				&& envelope.getMessage() != null
				&& envelope.getMessage().getAttachments() != null
				&& envelope.getMessage().getAttachments().get(0) != null
				&& envelope.getMessage().getAttachments().get(0).getPayload() != null
				&& envelope.getMessage().getAttachments().get(0).getPayload() instanceof QuickReplyLocationPayload) { QuickReplyLocationPayload payload = (QuickReplyLocationPayload) envelope
					.getMessage().getAttachments().get(0).getPayload(); return payload.getCoordinates(); } return null; } protected Attachment getImageMessage(MessageEnvelope envelope) { if (envelope != null
				&& envelope.getMessage() != null
				&& envelope.getMessage().getAttachments() != null
				&& envelope.getMessage().getAttachments().get(0) != null
				&& envelope.getMessage().getAttachments().get(0).getType() == AttachmentType.IMAGE) { return envelope.getMessage().getAttachments().get(0); } return null; } protected Attachment getAudioMessage(MessageEnvelope envelope) { if (envelope != null
				&& envelope.getMessage() != null
				&& envelope.getMessage().getAttachments() != null
				&& envelope.getMessage().getAttachments().get(0) != null
				&& envelope.getMessage().getAttachments().get(0).getType() == AttachmentType.AUDIO) { return envelope.getMessage().getAttachments().get(0); } return null; } protected Attachment getVideoMessage(MessageEnvelope envelope) { if (envelope != null
				&& envelope.getMessage() != null
				&& envelope.getMessage().getAttachments() != null
				&& envelope.getMessage().getAttachments().get(0) != null
				&& envelope.getMessage().getAttachments().get(0).getType() == AttachmentType.VIDEO) { return envelope.getMessage().getAttachments().get(0); } return null; } protected Attachment getFileMessage(MessageEnvelope envelope) { if (envelope != null
				&& envelope.getMessage() != null
				&& envelope.getMessage().getAttachments() != null
				&& envelope.getMessage().getAttachments().get(0) != null
				&& envelope.getMessage().getAttachments().get(0).getType() == AttachmentType.FILE) { return envelope.getMessage().getAttachments().get(0); } return null; } protected User safeGetSender(MessageEnvelope envelope) { if (envelope != null && envelope.getSender() != null
				&& envelope.getSender().getId() != null) { return envelope.getSender(); } return new User(); } protected FbBotMillEventType eventKind(MessageEnvelope envelope) { IncomingMessage message = envelope.getMessage(); if (message != null) { if (message instanceof ReceivedMessage) { if (getLocationMessage(envelope) != null) { return FbBotMillEventType.LOCATION; } if(getImageMessage(envelope) != null) { return FbBotMillEventType.IMAGE; } if(getVideoMessage(envelope) != null) { return FbBotMillEventType.VIDEO; } if(getAudioMessage(envelope) != null) { return FbBotMillEventType.AUDIO; } if(getFileMessage(envelope) != null) { return FbBotMillEventType.FILE; } return FbBotMillEventType.MESSAGE; } if (message instanceof EchoMessage) { return FbBotMillEventType.ECHO; } } if (envelope.getPostback() != null) { return FbBotMillEventType.POSTBACK; } if (envelope.getDelivery() != null) { return FbBotMillEventType.DELIVERY; } if (envelope.getRead() != null) { return FbBotMillEventType.READ; } if (envelope.getAccountLinking() != null) { return FbBotMillEventType.ACCOUNT_LINKING; } if (envelope.getOptin() != null) { return FbBotMillEventType.AUTHENTICATION; } if (envelope.getCheckoutUpdate() != null) { return FbBotMillEventType.CHECKOUT_UPDATE; } if (envelope.getReferral() != null) { return FbBotMillEventType.REFERRAL; } if (envelope.getPayment() != null) { return FbBotMillEventType.PAYMENT; } if (envelope.getPreCheckout() != null) { return FbBotMillEventType.PRE_CHECKOUT; } return FbBotMillEventType.ANY; } protected boolean validate(FbBotMillResponse response) { if (!FbBotMillContext.getInstance().isValidationEnabled()) { return true; } boolean valid = true; ValidatorFactory factory = Validation.buildDefaultValidatorFactory(); Validator validator = factory.getValidator(); Set<ConstraintViolation<FbBotMillResponse>> violations = validator
				.validate(response); for (ConstraintViolation<FbBotMillResponse> v : violations) { valid = false; logger.error(
					""FbBotMillResponse validation error. Message: [{ } ] Value: [{ } ], Class: [{ } ], Field: [{ } ]"",
					v.getMessage(), v.getInvalidValue(), v.getRootBean(),
					v.getPropertyPath()); } if (valid == false) { List<FbBotMillMonitor> registeredMonitors = FbBotMillContext
					.getInstance().getRegisteredMonitors(); for (FbBotMillMonitor monitor : registeredMonitors) { monitor.onValidationError(response, violations); } } return valid; } @Override
	public String toString() { return ""FbBotMillBean []""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.bean; public class FbBotMillBean { private final static Logger logger = LoggerFactory
			.getLogger(FbBotMillBean.class); protected String safeGetMessage(MessageEnvelope envelope) { if (envelope != null && envelope.getMessage() != null
				&& envelope.getMessage().getText() != null
				&& envelope.getMessage().getQuickReply() == null) { return envelope.getMessage().getText(); } return """"; } protected String safeGetQuickReplyPayload(MessageEnvelope envelope) { if (envelope != null && envelope.getMessage() != null
				&& envelope.getMessage().getQuickReply() != null
				&& envelope.getMessage().getQuickReply().getPayload() != null) { return envelope.getMessage().getQuickReply().getPayload(); } return """"; } protected String safeGetPostbackPayload(MessageEnvelope envelope) { if (envelope != null && envelope.getPostback() != null
				&& envelope.getPostback().getPayload() != null) { return envelope.getPostback().getPayload(); } return """"; } protected String safeGetRecipientId(MessageEnvelope envelope) { if (envelope != null && envelope.getRecipient() != null
				&& envelope.getRecipient().getId() != null) { return envelope.getRecipient().getId(); } return """"; } protected String safeGetSenderId(MessageEnvelope envelope) { if (envelope != null && envelope.getSender() != null
				&& envelope.getSender().getId() != null) { return envelope.getSender().getId(); } return """"; } protected User safeGetRecipient(MessageEnvelope envelope) { if (envelope != null && envelope.getRecipient() != null
				&& envelope.getRecipient().getId() != null) { return envelope.getRecipient(); } return new User(); } protected LocationCoordinates getLocationMessage(MessageEnvelope envelope) { if (envelope != null
				&& envelope.getMessage() != null
				&& envelope.getMessage().getAttachments() != null
				&& envelope.getMessage().getAttachments().get(0) != null
				&& envelope.getMessage().getAttachments().get(0).getPayload() != null
				&& envelope.getMessage().getAttachments().get(0).getPayload() instanceof QuickReplyLocationPayload) { QuickReplyLocationPayload payload = (QuickReplyLocationPayload) envelope
					.getMessage().getAttachments().get(0).getPayload(); return payload.getCoordinates(); } return null; } protected Attachment getImageMessage(MessageEnvelope envelope) { if (envelope != null
				&& envelope.getMessage() != null
				&& envelope.getMessage().getAttachments() != null
				&& envelope.getMessage().getAttachments().get(0) != null
				&& envelope.getMessage().getAttachments().get(0).getType() == AttachmentType.IMAGE) { return envelope.getMessage().getAttachments().get(0); } return null; } protected Attachment getAudioMessage(MessageEnvelope envelope) { if (envelope != null
				&& envelope.getMessage() != null
				&& envelope.getMessage().getAttachments() != null
				&& envelope.getMessage().getAttachments().get(0) != null
				&& envelope.getMessage().getAttachments().get(0).getType() == AttachmentType.AUDIO) { return envelope.getMessage().getAttachments().get(0); } return null; } protected Attachment getVideoMessage(MessageEnvelope envelope) { if (envelope != null
				&& envelope.getMessage() != null
				&& envelope.getMessage().getAttachments() != null
				&& envelope.getMessage().getAttachments().get(0) != null
				&& envelope.getMessage().getAttachments().get(0).getType() == AttachmentType.VIDEO) { return envelope.getMessage().getAttachments().get(0); } return null; } protected Attachment getFileMessage(MessageEnvelope envelope) { if (envelope != null
				&& envelope.getMessage() != null
				&& envelope.getMessage().getAttachments() != null
				&& envelope.getMessage().getAttachments().get(0) != null
				&& envelope.getMessage().getAttachments().get(0).getType() == AttachmentType.FILE) { return envelope.getMessage().getAttachments().get(0); } return null; } protected User safeGetSender(MessageEnvelope envelope) { if (envelope != null && envelope.getSender() != null
				&& envelope.getSender().getId() != null) { return envelope.getSender(); } return new User(); } protected FbBotMillEventType eventKind(MessageEnvelope envelope) { IncomingMessage message = envelope.getMessage(); if (message != null) { if (message instanceof ReceivedMessage) { if (getLocationMessage(envelope) != null) { return FbBotMillEventType.LOCATION; } if(getImageMessage(envelope) != null) { return FbBotMillEventType.IMAGE; } if(getVideoMessage(envelope) != null) { return FbBotMillEventType.VIDEO; } if(getAudioMessage(envelope) != null) { return FbBotMillEventType.AUDIO; } if(getFileMessage(envelope) != null) { return FbBotMillEventType.FILE; } return FbBotMillEventType.MESSAGE; } if (message instanceof EchoMessage) { return FbBotMillEventType.ECHO; } } if (envelope.getPostback() != null) { return FbBotMillEventType.POSTBACK; } if (envelope.getDelivery() != null) { return FbBotMillEventType.DELIVERY; } if (envelope.getRead() != null) { return FbBotMillEventType.READ; } if (envelope.getAccountLinking() != null) { return FbBotMillEventType.ACCOUNT_LINKING; } if (envelope.getOptin() != null) { return FbBotMillEventType.AUTHENTICATION; } if (envelope.getCheckoutUpdate() != null) { return FbBotMillEventType.CHECKOUT_UPDATE; } if (envelope.getReferral() != null) { return FbBotMillEventType.REFERRAL; } if (envelope.getPayment() != null) { return FbBotMillEventType.PAYMENT; } if (envelope.getPreCheckout() != null) { return FbBotMillEventType.PRE_CHECKOUT; } return FbBotMillEventType.ANY; } protected boolean validate(FbBotMillResponse response) { if (!FbBotMillContext.getInstance().isValidationEnabled()) { return true; } boolean valid = true; ValidatorFactory factory = Validation.buildDefaultValidatorFactory(); Validator validator = factory.getValidator(); Set<ConstraintViolation<FbBotMillResponse>> violations = validator
				.validate(response); for (ConstraintViolation<FbBotMillResponse> v : violations) { valid = false; logger.error(
					""FbBotMillResponse validation error. Message: [{ } ] Value: [{ } ], Class: [{ } ], Field: [{ } ]"",
					v.getMessage(), v.getInvalidValue(), v.getRootBean(),
					v.getPropertyPath()); } if (valid == false) { List<FbBotMillMonitor> registeredMonitors = FbBotMillContext
					.getInstance().getRegisteredMonitors(); for (FbBotMillMonitor monitor : registeredMonitors) { monitor.onValidationError(response, violations); } } return valid; } @Override
	public String toString() { return ""FbBotMillBean []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.bean; 
import java.util.List; import java.util.Set; 
import javax.validation.ConstraintViolation; import javax.validation.Validation; import javax.validation.Validator; import javax.validation.ValidatorFactory; 
import org.slf4j.Logger; import org.slf4j.LoggerFactory; 
import co.aurasphere.botmill.fb.FbBotMillContext; import co.aurasphere.botmill.fb.event.FbBotMillEventType; import co.aurasphere.botmill.fb.model.base.Attachment; import co.aurasphere.botmill.fb.model.base.AttachmentType; import co.aurasphere.botmill.fb.model.base.QuickReplyLocationPayload; import co.aurasphere.botmill.fb.model.base.User; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.incoming.callback.EchoMessage; import co.aurasphere.botmill.fb.model.incoming.callback.IncomingMessage; import co.aurasphere.botmill.fb.model.incoming.callback.LocationCoordinates; import co.aurasphere.botmill.fb.model.incoming.callback.ReceivedMessage; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; import co.aurasphere.botmill.fb.support.FbBotMillMonitor; 
  public class FbBotMillBean { /**
 * Base FbBot bean which contains utility methods for handling an envelope.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */  private final static Logger logger = LoggerFactory
			.getLogger(FbBotMillBean.class); /**
	 * The logger.
	 */  protected String safeGetMessage(MessageEnvelope envelope) { if (envelope != null && envelope.getMessage() != null
				&& envelope.getMessage().getText() != null
				&& envelope.getMessage().getQuickReply() == null) { return envelope.getMessage().getText(); } return """"; } /**
	 * Retrieves a text message from an envelope. It never returns null.
	 * 
	 * @param envelope
	 *            the message envelope.
	 * @return the text message if found or an empty String otherwise. It never
	 *         returns null.
	 */  protected String safeGetQuickReplyPayload(MessageEnvelope envelope) { if (envelope != null && envelope.getMessage() != null
				&& envelope.getMessage().getQuickReply() != null
				&& envelope.getMessage().getQuickReply().getPayload() != null) { return envelope.getMessage().getQuickReply().getPayload(); } /**
	 * Retrieves a quick reply payload from an envelope. It never returns null.
	 * 
	 * @param envelope
	 *            the message envelope.
	 * @return the text message if found or an empty String otherwise. It never
	 *         returns null.
	 */ return """"; }   protected String safeGetPostbackPayload(MessageEnvelope envelope) { if (envelope != null && envelope.getPostback() != null
				&& envelope.getPostback().getPayload() != null) { return envelope.getPostback().getPayload(); } return """"; } /**
	 * Retrieves a text message from an envelope. It never returns null.
	 * 
	 * @param envelope
	 *            the message envelope.
	 * @return the message envelope if found or an empty String otherwise. It
	 *         never returns null.
	 */  protected String safeGetRecipientId(MessageEnvelope envelope) { if (envelope != null && envelope.getRecipient() != null
				&& envelope.getRecipient().getId() != null) { return envelope.getRecipient().getId(); } return """"; } /**
	 * Retrieves the recipient ID from an envelope. It never returns null.
	 * 
	 * @param envelope
	 *            the message envelope.
	 * @return the recipient ID if found or an empty String otherwise. It never
	 *         returns null.
	 */  protected String safeGetSenderId(MessageEnvelope envelope) { if (envelope != null && envelope.getSender() != null
				&& envelope.getSender().getId() != null) { return envelope.getSender().getId(); } return """"; } /**
	 * Retrieves the sender ID from an envelope. It never returns null.
	 * 
	 * @param envelope
	 *            the message envelope.
	 * @return the sender ID if found or an empty String otherwise. It never
	 *         returns null.
	 */  protected User safeGetRecipient(MessageEnvelope envelope) { if (envelope != null && envelope.getRecipient() != null
				&& envelope.getRecipient().getId() != null) { return envelope.getRecipient(); } return new User(); } /**
	 * Retrieves the recipient from an envelope. It never returns null.
	 * 
	 * @param envelope
	 *            the message envelope.
	 * @return a {@link User} containing the recipient if found, empty
	 *         otherwise. It never returns null.
	 */  protected LocationCoordinates getLocationMessage(MessageEnvelope envelope) { if (envelope != null
				&& envelope.getMessage() != null
				&& envelope.getMessage().getAttachments() != null
				&& envelope.getMessage().getAttachments().get(0) != null
				&& envelope.getMessage().getAttachments().get(0).getPayload() != null
				&& envelope.getMessage().getAttachments().get(0).getPayload() instanceof QuickReplyLocationPayload) { /**
	 * Retrieves the location from an envelope. It return nulls if none was
	 * retrieved.
	 * 
	 * @param envelope
	 *            the message envelope
	 * @return a {@link LocationCoordinates} containing the coordinates that the
	 *         user sets from the quick reply location payload.
	 */ QuickReplyLocationPayload payload = (QuickReplyLocationPayload) envelope
					.getMessage().getAttachments().get(0).getPayload();  return payload.getCoordinates(); } return null; }  	 protected Attachment getImageMessage(MessageEnvelope envelope) { if (envelope != null
				&& envelope.getMessage() != null
				&& envelope.getMessage().getAttachments() != null
				&& envelope.getMessage().getAttachments().get(0) != null
				&& envelope.getMessage().getAttachments().get(0).getType() == AttachmentType.IMAGE) { /**
	 * Gets the image message.
	 *
	 * @param envelope the envelope
	 * @return the image message
	 */ return envelope.getMessage().getAttachments().get(0); } return null; } 			
		 	 protected Attachment getAudioMessage(MessageEnvelope envelope) { if (envelope != null
				&& envelope.getMessage() != null
				&& envelope.getMessage().getAttachments() != null
				&& envelope.getMessage().getAttachments().get(0) != null
				&& envelope.getMessage().getAttachments().get(0).getType() == AttachmentType.AUDIO) { /**
	 * Gets the audio message.
	 *
	 * @param envelope the envelope
	 * @return the audio message
	 */ return envelope.getMessage().getAttachments().get(0); } return null; } 			
		 	 protected Attachment getVideoMessage(MessageEnvelope envelope) { if (envelope != null
				&& envelope.getMessage() != null
				&& envelope.getMessage().getAttachments() != null
				&& envelope.getMessage().getAttachments().get(0) != null
				&& envelope.getMessage().getAttachments().get(0).getType() == AttachmentType.VIDEO) { /**
	 * Gets the video message.
	 *
	 * @param envelope the envelope
	 * @return the video message
	 */ return envelope.getMessage().getAttachments().get(0); } return null; } 			
		 	 protected Attachment getFileMessage(MessageEnvelope envelope) { if (envelope != null
				&& envelope.getMessage() != null
				&& envelope.getMessage().getAttachments() != null
				&& envelope.getMessage().getAttachments().get(0) != null
				&& envelope.getMessage().getAttachments().get(0).getType() == AttachmentType.FILE) { /**
	 * Gets the file message.
	 *
	 * @param envelope the envelope
	 * @return the file message
	 */ return envelope.getMessage().getAttachments().get(0); } return null; } 			
		  protected User safeGetSender(MessageEnvelope envelope) { if (envelope != null && envelope.getSender() != null
				&& envelope.getSender().getId() != null) { return envelope.getSender(); } return new User(); } /**
	 * Retrieves the sender from an envelope. It never returns null.
	 * 
	 * @param envelope
	 *            the message envelope.
	 * @return a {@link User} containing the sender if found, empty otherwise.
	 *         It never returns null.
	 */  protected FbBotMillEventType eventKind(MessageEnvelope envelope) { IncomingMessage message = envelope.getMessage(); if (message != null) { if (message instanceof ReceivedMessage) { if (getLocationMessage(envelope) != null) { return FbBotMillEventType.LOCATION; } if(getImageMessage(envelope) != null) { return FbBotMillEventType.IMAGE; } if(getVideoMessage(envelope) != null) { return FbBotMillEventType.VIDEO; } if(getAudioMessage(envelope) != null) { return FbBotMillEventType.AUDIO; } if(getFileMessage(envelope) != null) { return FbBotMillEventType.FILE; } return FbBotMillEventType.MESSAGE; } if (message instanceof EchoMessage) { return FbBotMillEventType.ECHO; } } if (envelope.getPostback() != null) { return FbBotMillEventType.POSTBACK; } if (envelope.getDelivery() != null) { return FbBotMillEventType.DELIVERY; } if (envelope.getRead() != null) { return FbBotMillEventType.READ; } if (envelope.getAccountLinking() != null) { return FbBotMillEventType.ACCOUNT_LINKING; } if (envelope.getOptin() != null) { return FbBotMillEventType.AUTHENTICATION; } if (envelope.getCheckoutUpdate() != null) { return FbBotMillEventType.CHECKOUT_UPDATE; } if (envelope.getReferral() != null) { return FbBotMillEventType.REFERRAL; } if (envelope.getPayment() != null) { return FbBotMillEventType.PAYMENT; } if (envelope.getPreCheckout() != null) { return FbBotMillEventType.PRE_CHECKOUT; } return FbBotMillEventType.ANY; } /**
	 * Returns the kind of callback received for the current envelope.
	 * 
	 * @param envelope
	 *            the envelope to inspect.
	 * @return a {@link FbBotMillEventType} representing the current callback
	 *         type.
	 */  protected boolean validate(FbBotMillResponse response) { /**
	 * Validates the {@link FbBotMillResponse}.
	 *
	 * @param response
	 *            the response
	 * @return true if the response is valid, false otherwise.
	 */ if (!FbBotMillContext.getInstance().isValidationEnabled()) { return true; } // If validations are not enabled, returns true. boolean valid = true; ValidatorFactory factory = Validation.buildDefaultValidatorFactory(); Validator validator = factory.getValidator(); Set<ConstraintViolation<FbBotMillResponse>> violations = validator
				.validate(response); for (ConstraintViolation<FbBotMillResponse> v : violations) { valid = false; logger.error(
					""FbBotMillResponse validation error. Message: [{ } ] Value: [{ } ], Class: [{ } ], Field: [{ } ]"",
					v.getMessage(), v.getInvalidValue(), v.getRootBean(),
					v.getPropertyPath()); }  if (valid == false) {  List<FbBotMillMonitor> registeredMonitors = FbBotMillContext
					.getInstance().getRegisteredMonitors(); for (FbBotMillMonitor monitor : registeredMonitors) { monitor.onValidationError(response, violations); } } // Sends the constraint violations through the callback. return valid; }   @Override
	public String toString() { return ""FbBotMillBean []""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/event/AnyEvent.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.event;

import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;


/**
 * An {@link FbBotMillEvent} that processes all the incoming callbacks from
 * Facebook Messenger Platform.
 * 
 * @author Donato Rimenti
 * 
 */
public class AnyEvent implements FbBotMillEvent {

	/**
	 * Verify event condition.
	 *
	 * @param envelope
	 *            the envelope
	 * @return always true, in order to process any incoming callback.
	 */
	public boolean verifyEventCondition(MessageEnvelope envelope) {
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""AnyEvent []"";
	}

}
","package co.aurasphere.botmill.fb.event; public class AnyEvent implements FbBotMillEvent { public boolean verifyEventCondition(MessageEnvelope envelope) { return true; } @Override
	public String toString() { return ""AnyEvent []""; } }",0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.event; public class AnyEvent implements FbBotMillEvent { public boolean verifyEventCondition(MessageEnvelope envelope) { return true; } @Override
	public String toString() { return ""AnyEvent []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.event; 
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; 
  public class AnyEvent implements FbBotMillEvent { /**
 * An {@link FbBotMillEvent} that processes all the incoming callbacks from
 * Facebook Messenger Platform.
 * 
 * @author Donato Rimenti
 * 
 */  public boolean verifyEventCondition(MessageEnvelope envelope) { return true; } /**
	 * Verify event condition.
	 *
	 * @param envelope
	 *            the envelope
	 * @return always true, in order to process any incoming callback.
	 */  @Override
	public String toString() { return ""AnyEvent []""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/event/FbBotMillEvent.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.event;

import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;


/**
 * An interface that defines an event from Facebook Messenger Platform callback.
 * 
 * @author Donato Rimenti
 * 
 */
public interface FbBotMillEvent {

	/**
	 * A method which evaluates whether the event is verified or not.
	 * 
	 * @param envelope
	 *            the callback message.
	 * @return true if the event is verified, false otherwise.
	 */
	public boolean verifyEventCondition(MessageEnvelope envelope);

}
",package co.aurasphere.botmill.fb.event; public interface FbBotMillEvent { public boolean verifyEventCondition(MessageEnvelope envelope); },0 0 0 0 0,package co.aurasphere.botmill.fb.event; public interface FbBotMillEvent { public boolean verifyEventCondition(MessageEnvelope envelope); } ,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.event; 
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; 
  public interface FbBotMillEvent { /**
 * An interface that defines an event from Facebook Messenger Platform callback.
 * 
 * @author Donato Rimenti
 * 
 */  public boolean verifyEventCondition(MessageEnvelope envelope); /**
	 * A method which evaluates whether the event is verified or not.
	 * 
	 * @param envelope
	 *            the callback message.
	 * @return true if the event is verified, false otherwise.
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/event/FbBotMillEventType.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.event;


// TODO: Auto-generated Javadoc
/**
 * Enum that represents all the possible callbacks from Facebook's Messenger
 * Platform.
 *
 * @author Donato Rimenti
 * @author Alvin Reyes
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 *      >Facebook's Messenger Platform Callbacks Documentation</a>
 * 
 */
public enum FbBotMillEventType {
	
	/** The file. */
	FILE,
	
	/** The video. */
	VIDEO,
	
	/** The audio. */
	AUDIO,
	
	/** The image. */
	IMAGE,

	/**
	 * Represents message callback.
	 */
	MESSAGE,

	/**
	 * The message pattern.
	 */
	MESSAGE_PATTERN,

	/**
	 * The quick reply message.
	 */
	QUICK_REPLY_MESSAGE,

	/**
	 * The quick reply message pattern.
	 */
	QUICK_REPLY_MESSAGE_PATTERN,

	/**
	 * Represents messaging_postback callback.
	 */
	POSTBACK,

	/**
	 * The postback pattern.
	 */
	POSTBACK_PATTERN,

	/**
	 * Represents messaging_optins callback.
	 */
	AUTHENTICATION,

	/**
	 * Represents an account linking callback. There's no defined event for this
	 * on Messenger Platform.
	 */
	ACCOUNT_LINKING,

	/**
	 * Represents message_deliveries callback.
	 */
	DELIVERY,

	/**
	 * Represents message_reads callback.
	 */
	READ,

	/**
	 * Represents message_echoes callback.
	 */
	ECHO,

	/**
	 * Represents messaging_checkout_updates callback.
	 */
	CHECKOUT_UPDATE,

	/**
	 * Represents messaging_referral callback.
	 */
	REFERRAL,

	/**
	 * Represents messaging_payments callback.
	 */
	PAYMENT,

	/**
	 * Represents a Quick Reply location callback.
	 */
	LOCATION,

	/**
	 * Represents messaging_pre_checkouts callback.
	 */
	PRE_CHECKOUT,

	/**
	 * Represents any of the previous callbacks. Used as utility event.
	 */
	ANY;

}
",package co.aurasphere.botmill.fb.event; public enum FbBotMillEventType { ANY; },0 0 0 0 0,package co.aurasphere.botmill.fb.event; public enum FbBotMillEventType { ANY; } ,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.event; 
  // TODO: Auto-generated Javadoc public enum FbBotMillEventType { /**
 * Enum that represents all the possible callbacks from Facebook's Messenger
 * Platform.
 *
 * @author Donato Rimenti
 * @author Alvin Reyes
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 *      >Facebook's Messenger Platform Callbacks Documentation</a>
 * 
 */ 	 /** The file. */ 	 /** The video. */ 	 /** The audio. */ 	 /** The image. */  /**
	 * Represents message callback.
	 */  /**
	 * The message pattern.
	 */  /**
	 * The quick reply message.
	 */  /**
	 * The quick reply message pattern.
	 */  /**
	 * Represents messaging_postback callback.
	 */  /**
	 * The postback pattern.
	 */  /**
	 * Represents messaging_optins callback.
	 */  /**
	 * Represents an account linking callback. There's no defined event for this
	 * on Messenger Platform.
	 */  /**
	 * Represents message_deliveries callback.
	 */  /**
	 * Represents message_reads callback.
	 */  /**
	 * Represents message_echoes callback.
	 */  /**
	 * Represents messaging_checkout_updates callback.
	 */  /**
	 * Represents messaging_referral callback.
	 */  /**
	 * Represents messaging_payments callback.
	 */  /**
	 * Represents a Quick Reply location callback.
	 */  /**
	 * Represents messaging_pre_checkouts callback.
	 */  ANY; /**
	 * Represents any of the previous callbacks. Used as utility event.
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/support/FbBotMillMockMediator.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.support;

import java.util.List;
import java.util.Scanner;

import co.aurasphere.botmill.core.BotDefinition;
import co.aurasphere.botmill.fb.FbBot;
import co.aurasphere.botmill.fb.FbBotMillContext;
import co.aurasphere.botmill.fb.model.base.User;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.incoming.callback.Postback;
import co.aurasphere.botmill.fb.model.incoming.callback.ReceivedMessage;
import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply;


/**
 * Testing facility for FbBotMill framework. Since this object is intended only
 * for testing, it is NOT Thread safe.
 * 
 * @author Donato Rimenti
 */
public class FbBotMillMockMediator {

	/**
	 * The mocked page-scoped user ID used as recipient. For more informations
	 * on how to find yours, read on the <a href
	 * =""https://github.com/BotMill/fb-botmill/wiki/Unit-Testing""> official
	 * GitHub wiki</a>.
	 */
	private String facebookMockId;

	/**
	 * The string that should be matched at the beginning of an input in order
	 * to send a payload during {@link #interactiveTest()}.
	 */
	private static final String PAYLOAD_MARKER = ""payload:"";

	/**
	 * The string that should be matched at the beginning of an input in order
	 * to send a quickreply during {@link #interactiveTest()}.
	 */
	private static final String QUICK_REPLY_MARKER = ""quickreply:"";

	/**
	 * The string that should be matched at the beginning of an input in order
	 * to stop during {@link #interactiveTest()}.
	 */
	private static final String STOP_MARKER = ""stop"";

	/**
	 * Constructor that registers a mocked page-scoped user ID as a recipient
	 * and a list of {@link BotDefinition}.
	 *
	 * @param facebookMockId
	 *            the {@link #facebookMockId}.
	 * @param botDefinitions
	 *            a list of {@link BotDefinition} to register.
	 */
	public FbBotMillMockMediator(String facebookMockId,
			BotDefinition... botDefinitions) {
		this.facebookMockId = facebookMockId;

		if (botDefinitions != null) {
			for (BotDefinition f : botDefinitions) {
				f.defineBehaviour();
			}
		}
	}

	/**
	 * Constructor that registers a mocked page-scoped user ID as a recipient
	 * and instantiates and registers a list of {@link BotDefinition} classes.
	 *
	 * @param facebookMockId
	 *            the {@link #facebookMockId}.
	 * @param botDefinitions
	 *            a list of classes implementing {@link BotDefinition}.
	 */
	public FbBotMillMockMediator(String facebookMockId,
			Class<? extends BotDefinition>... botDefinitions) {
		this.facebookMockId = facebookMockId;

		if (botDefinitions != null) {
			for (Class<? extends BotDefinition> f : botDefinitions) {
				BotDefinition definition = instantiateClass(f);
				definition.defineBehaviour();
			}
		}
	}

	/**
	 * Utility method that instantiates a {@link BotDefinition} class.
	 * 
	 * @param klass
	 *            the class to instantiate.
	 * @return a {@link BotDefinition}.
	 */
	private static BotDefinition instantiateClass(
			Class<? extends BotDefinition> klass) {
		BotDefinition definition = null;
		try {
			definition = klass.newInstance();
		} catch (InstantiationException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		}
		return definition;
	}

	/**
	 * Sends a text message to all the registered bots. Used to simulate a user
	 * typing in chat with your bot.
	 * 
	 * @param message
	 *            the message to send.
	 */
	public void sendTextMessage(String message) {
		MessageEnvelope envelope = new MessageEnvelope();
		ReceivedMessage body = new ReceivedMessage();

		body.setText(message);
		envelope.setMessage(body);
		envelope.setSender(new User(facebookMockId));

		System.out.println(""Sending message: ["" + message + ""] as user : [""
				+ facebookMockId + ""]."");
		forward(envelope);
		System.out.println(""Sent!"");
	}

	/**
	 * Sends a payload to all the registered bots. Used to simulate a user
	 * interacting with buttons.
	 * 
	 * @param payload
	 *            the payload to send.
	 */
	public void sendPayload(String payload) {
		MessageEnvelope envelope = new MessageEnvelope();
		Postback postback = new Postback();

		postback.setPayload(payload);
		envelope.setPostback(postback);
		envelope.setSender(new User(facebookMockId));

		System.out.println(""Sending payload: ["" + payload + ""] as user : [""
				+ facebookMockId + ""]."");
		forward(envelope);
		System.out.println(""Sent!"");
	}

	/**
	 * Sends a quickreply to all the registered bots. Used to simulate a user
	 * interacting with buttons.
	 * 
	 * @param payload
	 *            the payload to send.
	 */
	public void sendQuickReplyPayload(String payload) {
		MessageEnvelope envelope = new MessageEnvelope();
		QuickReply quickReply = new QuickReply(""Sample"", payload);

		ReceivedMessage message = new ReceivedMessage();
		message.setQuickReply(quickReply);
		envelope.setMessage(message);
		envelope.setSender(new User(facebookMockId));

		System.out.println(""Sending quick reply: ["" + message + ""] as user : [""
				+ facebookMockId + ""]."");
		forward(envelope);
		System.out.println(""Sent!"");
	}

	/**
	 * Forwards an envelope to the registered bots.
	 * 
	 * @param envelope
	 *            the envelope to forward.
	 */
	public void forward(MessageEnvelope envelope) {
		List<FbBot> bots = FbBotMillContext.getInstance().getRegisteredBots();
		for (FbBot b : bots) {
			b.processMessage(envelope);
		}
	}

	/**
	 * Starts an interactive test that simulates the behavior of the bot
	 * according to the chat inputs. You can send messages to the registered
	 * bots typing in your IDE console. To send a message, just type it. To send
	 * a payload, type {@value #PAYLOAD_MARKER} followed by your payload. To end
	 * the test, type {@value #STOP_MARKER}.
	 */
	public void interactiveTest() {
		// Prints instructions.
		System.out.println(""Starting interactive test..."");
		System.out
				.printf(""Type your message or '%s<YOUR_PAYLOAD>' to send a message or a payload to the bot. Type '%s' to stop the interactive test.\n"",
						PAYLOAD_MARKER, STOP_MARKER);
		Scanner scanner = new Scanner(System.in);
		while (true) {
			System.out.print(""Your input: "");
			String line = scanner.nextLine();

			// If line starts with STOP_MARKER stops the interactive test.
			if (line.startsWith(STOP_MARKER)) {
				break;
			}
			// If line starts with PAYLOAD_MARKER sends a payload, otherwise
			// sends a message.
			if (line.startsWith(PAYLOAD_MARKER)) {
				line = line.replaceFirst(PAYLOAD_MARKER, """");
				sendPayload(line);
			} else if (line.startsWith(QUICK_REPLY_MARKER)) {
				line = line.replaceFirst(QUICK_REPLY_MARKER, """");
				sendQuickReplyPayload(line);
			} else {
				sendTextMessage(line);
			}
		}
		// Ends the test.
		System.out.println(""Stopping interactive test..."");
		scanner.close();
		System.out.println(""Done!"");
	}

	/**
	 * Gets the {@link #facebookMockId}.
	 *
	 * @return the {@link #facebookMockId}.
	 */
	public String getFacebookMockId() {
		return facebookMockId;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((facebookMockId == null) ? 0 : facebookMockId.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		FbBotMillMockMediator other = (FbBotMillMockMediator) obj;
		if (facebookMockId == null) {
			if (other.facebookMockId != null)
				return false;
		} else if (!facebookMockId.equals(other.facebookMockId))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""FbBotMillMockMediator [facebookMockId="" + facebookMockId + ""]"";
	}

}
","package co.aurasphere.botmill.fb.support; public class FbBotMillMockMediator { private String facebookMockId; private static final String PAYLOAD_MARKER = ""payload:""; private static final String QUICK_REPLY_MARKER = ""quickreply:""; private static final String STOP_MARKER = ""stop""; public FbBotMillMockMediator(String facebookMockId,
			BotDefinition... botDefinitions) { this.facebookMockId = facebookMockId; if (botDefinitions != null) { for (BotDefinition f : botDefinitions) { f.defineBehaviour(); } } } public FbBotMillMockMediator(String facebookMockId,
			Class<? extends BotDefinition>... botDefinitions) { this.facebookMockId = facebookMockId; if (botDefinitions != null) { for (Class<? extends BotDefinition> f : botDefinitions) { BotDefinition definition = instantiateClass(f); definition.defineBehaviour(); } } } private static BotDefinition instantiateClass(
			Class<? extends BotDefinition> klass) { BotDefinition definition = null; try { definition = klass.newInstance(); } catch (InstantiationException e) { e.printStackTrace(); } catch (IllegalAccessException e) { e.printStackTrace(); } return definition; } public void sendTextMessage(String message) { MessageEnvelope envelope = new MessageEnvelope(); ReceivedMessage body = new ReceivedMessage(); body.setText(message); envelope.setMessage(body); envelope.setSender(new User(facebookMockId)); System.out.println(""Sending message: ["" + message + ""] as user : [""
				+ facebookMockId + ""].""); forward(envelope); System.out.println(""Sent!""); } public void sendPayload(String payload) { MessageEnvelope envelope = new MessageEnvelope(); Postback postback = new Postback(); postback.setPayload(payload); envelope.setPostback(postback); envelope.setSender(new User(facebookMockId)); System.out.println(""Sending payload: ["" + payload + ""] as user : [""
				+ facebookMockId + ""].""); forward(envelope); System.out.println(""Sent!""); } public void sendQuickReplyPayload(String payload) { MessageEnvelope envelope = new MessageEnvelope(); QuickReply quickReply = new QuickReply(""Sample"", payload); ReceivedMessage message = new ReceivedMessage(); message.setQuickReply(quickReply); envelope.setMessage(message); envelope.setSender(new User(facebookMockId)); System.out.println(""Sending quick reply: ["" + message + ""] as user : [""
				+ facebookMockId + ""].""); forward(envelope); System.out.println(""Sent!""); } public void forward(MessageEnvelope envelope) { List<FbBot> bots = FbBotMillContext.getInstance().getRegisteredBots(); for (FbBot b : bots) { b.processMessage(envelope); } } public void interactiveTest() { System.out.println(""Starting interactive test...""); System.out
				.printf(""Type your message or '%s<YOUR_PAYLOAD>' to send a message or a payload to the bot. Type '%s' to stop the interactive test.\n"",
						PAYLOAD_MARKER, STOP_MARKER); Scanner scanner = new Scanner(System.in); while (true) { System.out.print(""Your input: ""); String line = scanner.nextLine(); if (line.startsWith(STOP_MARKER)) { break; } if (line.startsWith(PAYLOAD_MARKER)) { line = line.replaceFirst(PAYLOAD_MARKER, """"); sendPayload(line); } else if (line.startsWith(QUICK_REPLY_MARKER)) { line = line.replaceFirst(QUICK_REPLY_MARKER, """"); sendQuickReplyPayload(line); } else { sendTextMessage(line); } } System.out.println(""Stopping interactive test...""); scanner.close(); System.out.println(""Done!""); } public String getFacebookMockId() { return facebookMockId; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((facebookMockId == null) ? 0 : facebookMockId.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FbBotMillMockMediator other = (FbBotMillMockMediator) obj; if (facebookMockId == null) { if (other.facebookMockId != null)
				return false; } else if (!facebookMockId.equals(other.facebookMockId))
			return false; return true; } @Override
	public String toString() { return ""FbBotMillMockMediator [facebookMockId="" + facebookMockId + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.support; public class FbBotMillMockMediator { private String facebookMockId; private static final String PAYLOAD_MARKER = ""payload:""; private static final String QUICK_REPLY_MARKER = ""quickreply:""; private static final String STOP_MARKER = ""stop""; public FbBotMillMockMediator(String facebookMockId,
			BotDefinition... botDefinitions) { this.facebookMockId = facebookMockId; if (botDefinitions != null) { for (BotDefinition f : botDefinitions) { f.defineBehaviour(); } } } public FbBotMillMockMediator(String facebookMockId,
			Class<? extends BotDefinition>... botDefinitions) { this.facebookMockId = facebookMockId; if (botDefinitions != null) { for (Class<? extends BotDefinition> f : botDefinitions) { BotDefinition definition = instantiateClass(f); definition.defineBehaviour(); } } } private static BotDefinition instantiateClass(
			Class<? extends BotDefinition> klass) { BotDefinition definition = null; try { definition = klass.newInstance(); } catch (InstantiationException e) { e.printStackTrace(); } catch (IllegalAccessException e) { e.printStackTrace(); } return definition; } public void sendTextMessage(String message) { MessageEnvelope envelope = new MessageEnvelope(); ReceivedMessage body = new ReceivedMessage(); body.setText(message); envelope.setMessage(body); envelope.setSender(new User(facebookMockId)); System.out.println(""Sending message: ["" + message + ""] as user : [""
				+ facebookMockId + ""].""); forward(envelope); System.out.println(""Sent!""); } public void sendPayload(String payload) { MessageEnvelope envelope = new MessageEnvelope(); Postback postback = new Postback(); postback.setPayload(payload); envelope.setPostback(postback); envelope.setSender(new User(facebookMockId)); System.out.println(""Sending payload: ["" + payload + ""] as user : [""
				+ facebookMockId + ""].""); forward(envelope); System.out.println(""Sent!""); } public void sendQuickReplyPayload(String payload) { MessageEnvelope envelope = new MessageEnvelope(); QuickReply quickReply = new QuickReply(""Sample"", payload); ReceivedMessage message = new ReceivedMessage(); message.setQuickReply(quickReply); envelope.setMessage(message); envelope.setSender(new User(facebookMockId)); System.out.println(""Sending quick reply: ["" + message + ""] as user : [""
				+ facebookMockId + ""].""); forward(envelope); System.out.println(""Sent!""); } public void forward(MessageEnvelope envelope) { List<FbBot> bots = FbBotMillContext.getInstance().getRegisteredBots(); for (FbBot b : bots) { b.processMessage(envelope); } } public void interactiveTest() { System.out.println(""Starting interactive test...""); System.out
				.printf(""Type your message or '%s<YOUR_PAYLOAD>' to send a message or a payload to the bot. Type '%s' to stop the interactive test.\n"",
						PAYLOAD_MARKER, STOP_MARKER); Scanner scanner = new Scanner(System.in); while (true) { System.out.print(""Your input: ""); String line = scanner.nextLine(); if (line.startsWith(STOP_MARKER)) { break; } if (line.startsWith(PAYLOAD_MARKER)) { line = line.replaceFirst(PAYLOAD_MARKER, """"); sendPayload(line); } else if (line.startsWith(QUICK_REPLY_MARKER)) { line = line.replaceFirst(QUICK_REPLY_MARKER, """"); sendQuickReplyPayload(line); } else { sendTextMessage(line); } } System.out.println(""Stopping interactive test...""); scanner.close(); System.out.println(""Done!""); } public String getFacebookMockId() { return facebookMockId; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((facebookMockId == null) ? 0 : facebookMockId.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FbBotMillMockMediator other = (FbBotMillMockMediator) obj; if (facebookMockId == null) { if (other.facebookMockId != null)
				return false; } else if (!facebookMockId.equals(other.facebookMockId))
			return false; return true; } @Override
	public String toString() { return ""FbBotMillMockMediator [facebookMockId="" + facebookMockId + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.support; 
import java.util.List; import java.util.Scanner; 
import co.aurasphere.botmill.core.BotDefinition; import co.aurasphere.botmill.fb.FbBot; import co.aurasphere.botmill.fb.FbBotMillContext; import co.aurasphere.botmill.fb.model.base.User; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.incoming.callback.Postback; import co.aurasphere.botmill.fb.model.incoming.callback.ReceivedMessage; import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply; 
  public class FbBotMillMockMediator { /**
 * Testing facility for FbBotMill framework. Since this object is intended only
 * for testing, it is NOT Thread safe.
 * 
 * @author Donato Rimenti
 */  private String facebookMockId; /**
	 * The mocked page-scoped user ID used as recipient. For more informations
	 * on how to find yours, read on the <a href
	 * =""https://github.com/BotMill/fb-botmill/wiki/Unit-Testing""> official
	 * GitHub wiki</a>.
	 */  private static final String PAYLOAD_MARKER = ""payload:""; /**
	 * The string that should be matched at the beginning of an input in order
	 * to send a payload during {@link #interactiveTest()}.
	 */  private static final String QUICK_REPLY_MARKER = ""quickreply:""; /**
	 * The string that should be matched at the beginning of an input in order
	 * to send a quickreply during {@link #interactiveTest()}.
	 */  private static final String STOP_MARKER = ""stop""; /**
	 * The string that should be matched at the beginning of an input in order
	 * to stop during {@link #interactiveTest()}.
	 */  public FbBotMillMockMediator(String facebookMockId,
			BotDefinition... botDefinitions) { this.facebookMockId = facebookMockId; /**
	 * Constructor that registers a mocked page-scoped user ID as a recipient
	 * and a list of {@link BotDefinition}.
	 *
	 * @param facebookMockId
	 *            the {@link #facebookMockId}.
	 * @param botDefinitions
	 *            a list of {@link BotDefinition} to register.
	 */ if (botDefinitions != null) { for (BotDefinition f : botDefinitions) { f.defineBehaviour(); } } }   public FbBotMillMockMediator(String facebookMockId,
			Class<? extends BotDefinition>... botDefinitions) { this.facebookMockId = facebookMockId; /**
	 * Constructor that registers a mocked page-scoped user ID as a recipient
	 * and instantiates and registers a list of {@link BotDefinition} classes.
	 *
	 * @param facebookMockId
	 *            the {@link #facebookMockId}.
	 * @param botDefinitions
	 *            a list of classes implementing {@link BotDefinition}.
	 */ if (botDefinitions != null) { for (Class<? extends BotDefinition> f : botDefinitions) { BotDefinition definition = instantiateClass(f); definition.defineBehaviour(); } } }   private static BotDefinition instantiateClass(
			Class<? extends BotDefinition> klass) { BotDefinition definition = null; try { definition = klass.newInstance(); } catch (InstantiationException e) { e.printStackTrace(); } catch (IllegalAccessException e) { e.printStackTrace(); } return definition; } /**
	 * Utility method that instantiates a {@link BotDefinition} class.
	 * 
	 * @param klass
	 *            the class to instantiate.
	 * @return a {@link BotDefinition}.
	 */  public void sendTextMessage(String message) { MessageEnvelope envelope = new MessageEnvelope(); ReceivedMessage body = new ReceivedMessage(); /**
	 * Sends a text message to all the registered bots. Used to simulate a user
	 * typing in chat with your bot.
	 * 
	 * @param message
	 *            the message to send.
	 */ body.setText(message); envelope.setMessage(body); envelope.setSender(new User(facebookMockId));  System.out.println(""Sending message: ["" + message + ""] as user : [""
				+ facebookMockId + ""].""); forward(envelope); System.out.println(""Sent!""); }   public void sendPayload(String payload) { MessageEnvelope envelope = new MessageEnvelope(); Postback postback = new Postback(); /**
	 * Sends a payload to all the registered bots. Used to simulate a user
	 * interacting with buttons.
	 * 
	 * @param payload
	 *            the payload to send.
	 */ postback.setPayload(payload); envelope.setPostback(postback); envelope.setSender(new User(facebookMockId));  System.out.println(""Sending payload: ["" + payload + ""] as user : [""
				+ facebookMockId + ""].""); forward(envelope); System.out.println(""Sent!""); }   public void sendQuickReplyPayload(String payload) { MessageEnvelope envelope = new MessageEnvelope(); QuickReply quickReply = new QuickReply(""Sample"", payload); /**
	 * Sends a quickreply to all the registered bots. Used to simulate a user
	 * interacting with buttons.
	 * 
	 * @param payload
	 *            the payload to send.
	 */ ReceivedMessage message = new ReceivedMessage(); message.setQuickReply(quickReply); envelope.setMessage(message); envelope.setSender(new User(facebookMockId));  System.out.println(""Sending quick reply: ["" + message + ""] as user : [""
				+ facebookMockId + ""].""); forward(envelope); System.out.println(""Sent!""); }   public void forward(MessageEnvelope envelope) { List<FbBot> bots = FbBotMillContext.getInstance().getRegisteredBots(); for (FbBot b : bots) { b.processMessage(envelope); } } /**
	 * Forwards an envelope to the registered bots.
	 * 
	 * @param envelope
	 *            the envelope to forward.
	 */  public void interactiveTest() { /**
	 * Starts an interactive test that simulates the behavior of the bot
	 * according to the chat inputs. You can send messages to the registered
	 * bots typing in your IDE console. To send a message, just type it. To send
	 * a payload, type {@value #PAYLOAD_MARKER} followed by your payload. To end
	 * the test, type {@value #STOP_MARKER}.
	 */ System.out.println(""Starting interactive test...""); System.out
				.printf(""Type your message or '%s<YOUR_PAYLOAD>' to send a message or a payload to the bot. Type '%s' to stop the interactive test.\n"",
						PAYLOAD_MARKER, STOP_MARKER); Scanner scanner = new Scanner(System.in); while (true) { System.out.print(""Your input: ""); String line = scanner.nextLine(); // Prints instructions.  if (line.startsWith(STOP_MARKER)) { break; } // If line starts with STOP_MARKER stops the interactive test. // If line starts with PAYLOAD_MARKER sends a payload, otherwise if (line.startsWith(PAYLOAD_MARKER)) { line = line.replaceFirst(PAYLOAD_MARKER, """"); sendPayload(line); } else if (line.startsWith(QUICK_REPLY_MARKER)) { line = line.replaceFirst(QUICK_REPLY_MARKER, """"); sendQuickReplyPayload(line); } else { sendTextMessage(line); } } // sends a message. System.out.println(""Stopping interactive test...""); scanner.close(); System.out.println(""Done!""); } // Ends the test.  public String getFacebookMockId() { return facebookMockId; } /**
	 * Gets the {@link #facebookMockId}.
	 *
	 * @return the {@link #facebookMockId}.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((facebookMockId == null) ? 0 : facebookMockId.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FbBotMillMockMediator other = (FbBotMillMockMediator) obj; if (facebookMockId == null) { if (other.facebookMockId != null)
				return false; } else if (!facebookMockId.equals(other.facebookMockId))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""FbBotMillMockMediator [facebookMockId="" + facebookMockId + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/support/FbBotMillMonitor.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.support;

import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.validation.ConstraintViolation;

import co.aurasphere.botmill.fb.FbBotMillContext;
import co.aurasphere.botmill.fb.FbBotMillServlet;
import co.aurasphere.botmill.fb.model.incoming.FacebookErrorMessage;
import co.aurasphere.botmill.fb.model.incoming.MessengerCallback;
import co.aurasphere.botmill.fb.model.incoming.FacebookConfirmationMessage;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;


/**
 * Base interface for monitoring raw data from BotMill framework and Facebook
 * Messenger Platform. These interface methods will be called as a callback each
 * time the FbBotMill receives data from the network or other similar events
 * occurs. In order to use these callbacks, you will need to implement this
 * interface and register it to the FbBotMillContext using the method
 * {@link FbBotMillContext#registerMonitor(FbBotMillMonitor)}.
 * 
 * @author Donato Rimenti
 * @since 1.1.0
 */
public interface FbBotMillMonitor {

	/**
	 * Callback processed each time the bot sends data and gets a reply back
	 * from the Facebook's server.
	 * 
	 * @param data
	 *            the Facebook response to the last AutoReply the bot sent.
	 */
	public void onConfirmation(FacebookConfirmationMessage data);

	/**
	 * Callback processed each time the bot sends data and gets an error back
	 * from the Facebook's server.
	 * 
	 * @param error
	 *            the Facebook error.
	 */
	public void onError(FacebookErrorMessage error);

	/**
	 * Callback processed each time the {@link FbBotMillServlet} receives an
	 * HTTP POST request. Please, notice that this method will be called
	 * <b>after</b> the bots have processed it. This is because the method's
	 * purpose is data monitoring, analysis and statistics. Since the operations
	 * involved in this process may be heavy, in order to let the bots return a
	 * response to the user quickly, this callback is postponed.
	 * 
	 * @param request
	 *            the incoming raw servlet request.
	 * @param data
	 *            the Facebook incoming data.
	 */
	public void onPostReceived(HttpServletRequest request,
			MessengerCallback data);

	/**
	 * Callback processed each time the {@link FbBotMillServlet} receives an
	 * HTTP GET request. Please, notice that this method will be called
	 * <b>after</b> the bots have processed it. This is because the method's
	 * purpose is data monitoring, analysis and statistics. Since the operations
	 * involved in this process may be heavy, in order to let the bots return a
	 * response to the user quickly, this callback is postponed.
	 * 
	 * @param request
	 *            the incoming raw servlet request.
	 */
	public void onGetReceived(HttpServletRequest request);

	/**
	 * Callback processed each time there is a validation error on the response
	 * produced by the bots.
	 * 
	 * @param response
	 *            the invalid response produced by the bot.
	 * @param constraintViolations
	 *            the constraint violations for the current response.
	 */
	public void onValidationError(FbBotMillResponse response,
			Set<ConstraintViolation<FbBotMillResponse>> constraintViolations);

}
","package co.aurasphere.botmill.fb.support; public interface FbBotMillMonitor { public void onConfirmation(FacebookConfirmationMessage data); public void onError(FacebookErrorMessage error); public void onPostReceived(HttpServletRequest request,
			MessengerCallback data); public void onGetReceived(HttpServletRequest request); public void onValidationError(FbBotMillResponse response,
			Set<ConstraintViolation<FbBotMillResponse>> constraintViolations); }",0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.support; public interface FbBotMillMonitor { public void onConfirmation(FacebookConfirmationMessage data); public void onError(FacebookErrorMessage error); public void onPostReceived(HttpServletRequest request,
			MessengerCallback data); public void onGetReceived(HttpServletRequest request); public void onValidationError(FbBotMillResponse response,
			Set<ConstraintViolation<FbBotMillResponse>> constraintViolations); } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.support; 
import java.util.Set; 
import javax.servlet.http.HttpServletRequest; import javax.validation.ConstraintViolation; 
import co.aurasphere.botmill.fb.FbBotMillContext; import co.aurasphere.botmill.fb.FbBotMillServlet; import co.aurasphere.botmill.fb.model.incoming.FacebookErrorMessage; import co.aurasphere.botmill.fb.model.incoming.MessengerCallback; import co.aurasphere.botmill.fb.model.incoming.FacebookConfirmationMessage; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; 
  public interface FbBotMillMonitor { /**
 * Base interface for monitoring raw data from BotMill framework and Facebook
 * Messenger Platform. These interface methods will be called as a callback each
 * time the FbBotMill receives data from the network or other similar events
 * occurs. In order to use these callbacks, you will need to implement this
 * interface and register it to the FbBotMillContext using the method
 * {@link FbBotMillContext#registerMonitor(FbBotMillMonitor)}.
 * 
 * @author Donato Rimenti
 * @since 1.1.0
 */  public void onConfirmation(FacebookConfirmationMessage data); /**
	 * Callback processed each time the bot sends data and gets a reply back
	 * from the Facebook's server.
	 * 
	 * @param data
	 *            the Facebook response to the last AutoReply the bot sent.
	 */  public void onError(FacebookErrorMessage error); /**
	 * Callback processed each time the bot sends data and gets an error back
	 * from the Facebook's server.
	 * 
	 * @param error
	 *            the Facebook error.
	 */  public void onPostReceived(HttpServletRequest request,
			MessengerCallback data); /**
	 * Callback processed each time the {@link FbBotMillServlet} receives an
	 * HTTP POST request. Please, notice that this method will be called
	 * <b>after</b> the bots have processed it. This is because the method's
	 * purpose is data monitoring, analysis and statistics. Since the operations
	 * involved in this process may be heavy, in order to let the bots return a
	 * response to the user quickly, this callback is postponed.
	 * 
	 * @param request
	 *            the incoming raw servlet request.
	 * @param data
	 *            the Facebook incoming data.
	 */  public void onGetReceived(HttpServletRequest request); /**
	 * Callback processed each time the {@link FbBotMillServlet} receives an
	 * HTTP GET request. Please, notice that this method will be called
	 * <b>after</b> the bots have processed it. This is because the method's
	 * purpose is data monitoring, analysis and statistics. Since the operations
	 * involved in this process may be heavy, in order to let the bots return a
	 * response to the user quickly, this callback is postponed.
	 * 
	 * @param request
	 *            the incoming raw servlet request.
	 */  public void onValidationError(FbBotMillResponse response,
			Set<ConstraintViolation<FbBotMillResponse>> constraintViolations); /**
	 * Callback processed each time there is a validation error on the response
	 * produced by the bots.
	 * 
	 * @param response
	 *            the invalid response produced by the bot.
	 * @param constraintViolations
	 *            the constraint violations for the current response.
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/support/FbBotMillSubscriptionHelper.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.support;

/**
 * Helper class for registering and validating a page against Facebook.
 * 
 * @author Donato Rimenti
 * @since 1.2.0
 */
public class FbBotMillSubscriptionHelper {
	
 // TODO
}
",package co.aurasphere.botmill.fb.support; public class FbBotMillSubscriptionHelper { },0 0 0 0,package co.aurasphere.botmill.fb.support; public class FbBotMillSubscriptionHelper { } ,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.support;  /**
 * Helper class for registering and validating a page against Facebook.
 * 
 * @author Donato Rimenti
 * @since 1.2.0
 */ public class FbBotMillSubscriptionHelper { 	 // TODO }  "
src/test/java/co/aurasphere/botmill/fb/test/AnnotatedTemplateTest.java,"package co.aurasphere.botmill.fb.test;

import static org.junit.Assert.assertNotNull;

import java.util.ArrayList;
import java.util.List;

import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;
import org.junit.Assume;
import org.junit.Before;
import org.junit.Test;
import co.aurasphere.botmill.core.BotDefinition;
import co.aurasphere.botmill.core.internal.util.ConfigurationUtils;
import co.aurasphere.botmill.fb.FbBotMillContext;
import co.aurasphere.botmill.fb.internal.util.json.FbBotMillJsonUtils;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.incoming.handler.IncomingToOutgoingMessageHandler;
import co.aurasphere.botmill.fb.test.autoreply.template.AnnotatedTemplatedBehaviourTest;

/**
 * This is a Test Class to test the Fully Annotated Template
 * @author Alvin Reyes
 *
 */
public class AnnotatedTemplateTest {

	@Before
	public void setup() {
		Assume.assumeTrue(isConfigurationExist());
		FbBotMillContext.getInstance().setup(System.getenv(""fb.page.token""), System.getenv(""fb.validation.token""));
		
		//	Load the Bot manually.
		List<BotDefinition> botDefs = new ArrayList<BotDefinition>();
		botDefs.add(new AnnotatedTemplatedBehaviourTest());
		ConfigurationUtils.setBotDefinitionInstance(botDefs);
	}
	
	@Test
	public void testAnnotatedBot() {
		String json = ""{\""sender\"":{\""id\"":\""1158621824216736\""},\""recipient\"":{\""id\"":\""1226565047419159\""},\""timestamp\"":1490832021661,\""message\"":{\""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""Hi!\""}}"";
		MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class);
		IncomingToOutgoingMessageHandler.getInstance().process(envelope);
		assertNotNull(envelope);
	}
	
	@Test
	public void testImageBot() {
		String json = ""{\""sender\"":{\""id\"":\""1158621824216736\""},\""recipient\"":{\""id\"":\""1226565047419159\""},\""timestamp\"":1491360469304,\""message\"":{\""mid\"":\""mid.$cAACFqTvPOHVhbUgZOFbO_0AFXqVh\"",\""seq\"":854986,\""attachments\"":[{\""type\"":\""image\"",\""payload\"":{\""url\"":\""https:\\/\\/scontent.xx.fbcdn.net\\/v\\/t34.0-12\\/17742285_136721643528794_1945065811_n.gif?_nc_ad=z-m&oh=97198065e4ede9bd09330764a7bfb62f&oe=58E6A075\""}}]}}"";
		MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class);
		IncomingToOutgoingMessageHandler.getInstance().process(envelope);
		assertNotNull(envelope);
	}
	

	@Test
	public void testAnnotatedListTemplateBot() {
		String json = ""{\""sender\"":{\""id\"":\""1158621824216736\""},\""recipient\"":{\""id\"":\""1226565047419159\""},\""timestamp\"":1490832021661,\""message\"":{\""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""list template\""}}"";
		MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class);
		IncomingToOutgoingMessageHandler.getInstance().process(envelope);
		assertNotNull(envelope);
	}
	
	@Test
	public void testAnnotatedButtonTemplateBot() {
		String json = ""{\""sender\"":{\""id\"":\""1158621824216736\""},\""recipient\"":{\""id\"":\""1226565047419159\""},\""timestamp\"":1490832021661,\""message\"":{\""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""button template\""}}"";
		MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class);
		IncomingToOutgoingMessageHandler.getInstance().process(envelope);
		assertNotNull(envelope);
	}
	
	@Test
	public void testAnnotatedQuickReplyTemplateBot() {
		String json = ""{\""sender\"":{\""id\"":\""1158621824216736\""},\""recipient\"":{\""id\"":\""1226565047419159\""},\""timestamp\"":1490832021661,\""message\"":{\""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""quick replies\""}}"";
		MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class);
		IncomingToOutgoingMessageHandler.getInstance().process(envelope);
		assertNotNull(envelope);
	}
	
	@Test
	public void testAnnotatedReusableImage() {
		String json = ""{\""sender\"":{\""id\"":\""1158621824216736\""},\""recipient\"":{\""id\"":\""1226565047419159\""},\""timestamp\"":1490832021661,\""message\"":{\""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""reuse image\""}}"";
		MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class);
		IncomingToOutgoingMessageHandler.getInstance().process(envelope);
		assertNotNull(envelope);
	}
	
	@Test
	public void testAnnotatedReusableVideo() {
		String json = ""{\""sender\"":{\""id\"":\""1158621824216736\""},\""recipient\"":{\""id\"":\""1226565047419159\""},\""timestamp\"":1490832021661,\""message\"":{\""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""reuse video\""}}"";
		MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class);
		IncomingToOutgoingMessageHandler.getInstance().process(envelope);
		assertNotNull(envelope);
	}
	
	@Test
	public void testAnnotatedReceiptTemplateBot() {
		String json = ""{\""sender\"":{\""id\"":\""1158621824216736\""},\""recipient\"":{\""id\"":\""1226565047419159\""},\""timestamp\"":1490832021661,\""message\"":{\""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""receipt template\""}}"";
		MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class);
		IncomingToOutgoingMessageHandler.getInstance().process(envelope);
		assertNotNull(envelope);
	}
	
	@Test
	public void testBuyButton() {
		String json = ""{\""sender\"":{\""id\"":\""1158621824216736\""},\""recipient\"":{\""id\"":\""1226565047419159\""},\""timestamp\"":1490832021661,\""message\"":{\""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""buy button\""}}"";
		MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class);
		IncomingToOutgoingMessageHandler.getInstance().process(envelope);
		assertNotNull(envelope);
	}
	
	private boolean isConfigurationExist() {
		if(System.getenv(""fb.page.token"") != null && System.getenv(""fb.validation.token"") != null) {
			return true;
		}
		return false;
	}

	
	public static void main(String[] args) {
		StandardPBEStringEncryptor enc = new StandardPBEStringEncryptor();
		enc.setPassword(""password""); // can be sourced out
		ConfigurationUtils.loadEncryptedConfigurationFile(enc, ""botmill.properties"");
		
		List<BotDefinition> botDef = new ArrayList<BotDefinition>();
		botDef.add(new AnnotatedTemplatedBehaviourTest());
		ConfigurationUtils.loadBotConfig();
		ConfigurationUtils.setBotDefinitionInstance(botDef);
		
		for(int i=0;i<10;i++) {
			new Thread(new Runnable() {
				String json = ""{\""sender\"":{\""id\"":\""1158621824216736\""},\""recipient\"":{\""id\"":\""1226565047419159\""},\""timestamp\"":1490832021661,\""message\"":{\""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""Hi!\""}}"";
				MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class);
				@Override
				public void run() {
					try {
						IncomingToOutgoingMessageHandler.getInstance().process(envelope);
					}catch(Exception e) {
						e.printStackTrace();
					}
				}
			}).start();
		}
	}
	
	
	
}
","package co.aurasphere.botmill.fb.test; public class AnnotatedTemplateTest { @Before
	public void setup() { Assume.assumeTrue(isConfigurationExist()); FbBotMillContext.getInstance().setup(System.getenv(""fb.page.token""), System.getenv(""fb.validation.token"")); List<BotDefinition> botDefs = new ArrayList<BotDefinition>(); botDefs.add(new AnnotatedTemplatedBehaviourTest()); ConfigurationUtils.setBotDefinitionInstance(botDefs); } @Test
	public void testAnnotatedBot() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""Hi!\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); } @Test
	public void testImageBot() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1491360469304,\""message\"":{ \""mid\"":\""mid.$cAACFqTvPOHVhbUgZOFbO_0AFXqVh\"",\""seq\"":854986,\""attachments\"":[{ \""type\"":\""image\"",\""payload\"":{ \""url\"":\""https:\\/\\/scontent.xx.fbcdn.net\\/v\\/t34.0-12\\/17742285_136721643528794_1945065811_n.gif?_nc_ad=z-m&oh=97198065e4ede9bd09330764a7bfb62f&oe=58E6A075\""} } ]} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); } @Test
	public void testAnnotatedListTemplateBot() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""list template\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); } @Test
	public void testAnnotatedButtonTemplateBot() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""button template\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); } @Test
	public void testAnnotatedQuickReplyTemplateBot() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""quick replies\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); } @Test
	public void testAnnotatedReusableImage() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""reuse image\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); } @Test
	public void testAnnotatedReusableVideo() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""reuse video\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); } @Test
	public void testAnnotatedReceiptTemplateBot() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""receipt template\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); } @Test
	public void testBuyButton() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""buy button\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); } private boolean isConfigurationExist() { if(System.getenv(""fb.page.token"") != null && System.getenv(""fb.validation.token"") != null) { return true; } return false; } public static void main(String[] args) { StandardPBEStringEncryptor enc = new StandardPBEStringEncryptor(); enc.setPassword(""password""); ConfigurationUtils.loadEncryptedConfigurationFile(enc, ""botmill.properties""); List<BotDefinition> botDef = new ArrayList<BotDefinition>(); botDef.add(new AnnotatedTemplatedBehaviourTest()); ConfigurationUtils.loadBotConfig(); ConfigurationUtils.setBotDefinitionInstance(botDef); for(int i=0; i<10; i++) { new Thread(new Runnable() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""Hi!\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); @Override
				public void run() { try { IncomingToOutgoingMessageHandler.getInstance().process(envelope); } catch(Exception e) { e.printStackTrace(); } } } ).start(); } } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.test; public class AnnotatedTemplateTest { @Before
	public void setup() { Assume.assumeTrue(isConfigurationExist()); FbBotMillContext.getInstance().setup(System.getenv(""fb.page.token""), System.getenv(""fb.validation.token"")); List<BotDefinition> botDefs = new ArrayList<BotDefinition>(); botDefs.add(new AnnotatedTemplatedBehaviourTest()); ConfigurationUtils.setBotDefinitionInstance(botDefs); } @Test
	public void testAnnotatedBot() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""Hi!\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); } @Test
	public void testImageBot() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1491360469304,\""message\"":{ \""mid\"":\""mid.$cAACFqTvPOHVhbUgZOFbO_0AFXqVh\"",\""seq\"":854986,\""attachments\"":[{ \""type\"":\""image\"",\""payload\"":{ \""url\"":\""https:\\/\\/scontent.xx.fbcdn.net\\/v\\/t34.0-12\\/17742285_136721643528794_1945065811_n.gif?_nc_ad=z-m&oh=97198065e4ede9bd09330764a7bfb62f&oe=58E6A075\""} } ]} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); } @Test
	public void testAnnotatedListTemplateBot() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""list template\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); } @Test
	public void testAnnotatedButtonTemplateBot() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""button template\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); } @Test
	public void testAnnotatedQuickReplyTemplateBot() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""quick replies\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); } @Test
	public void testAnnotatedReusableImage() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""reuse image\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); } @Test
	public void testAnnotatedReusableVideo() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""reuse video\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); } @Test
	public void testAnnotatedReceiptTemplateBot() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""receipt template\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); } @Test
	public void testBuyButton() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""buy button\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); } private boolean isConfigurationExist() { if(System.getenv(""fb.page.token"") != null && System.getenv(""fb.validation.token"") != null) { return true; } return false; } public static void main(String[] args) { StandardPBEStringEncryptor enc = new StandardPBEStringEncryptor(); enc.setPassword(""password""); ConfigurationUtils.loadEncryptedConfigurationFile(enc, ""botmill.properties""); List<BotDefinition> botDef = new ArrayList<BotDefinition>(); botDef.add(new AnnotatedTemplatedBehaviourTest()); ConfigurationUtils.loadBotConfig(); ConfigurationUtils.setBotDefinitionInstance(botDef); for(int i=0; i<10; i++) { new Thread(new Runnable() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""Hi!\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); @Override
				public void run() { try { IncomingToOutgoingMessageHandler.getInstance().process(envelope); } catch(Exception e) { e.printStackTrace(); } } } ).start(); } } } ","package co.aurasphere.botmill.fb.test; 
import static org.junit.Assert.assertNotNull; 
import java.util.ArrayList; import java.util.List; 
import org.jasypt.encryption.pbe.StandardPBEStringEncryptor; import org.junit.Assume; import org.junit.Before; import org.junit.Test; import co.aurasphere.botmill.core.BotDefinition; import co.aurasphere.botmill.core.internal.util.ConfigurationUtils; import co.aurasphere.botmill.fb.FbBotMillContext; import co.aurasphere.botmill.fb.internal.util.json.FbBotMillJsonUtils; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.incoming.handler.IncomingToOutgoingMessageHandler; import co.aurasphere.botmill.fb.test.autoreply.template.AnnotatedTemplatedBehaviourTest;  /**
 * This is a Test Class to test the Fully Annotated Template
 * @author Alvin Reyes
 *
 */ public class AnnotatedTemplateTest {  @Before
	public void setup() { Assume.assumeTrue(isConfigurationExist()); FbBotMillContext.getInstance().setup(System.getenv(""fb.page.token""), System.getenv(""fb.validation.token"")); 		 //	Load the Bot manually. List<BotDefinition> botDefs = new ArrayList<BotDefinition>(); botDefs.add(new AnnotatedTemplatedBehaviourTest()); ConfigurationUtils.setBotDefinitionInstance(botDefs); } 	 @Test
	public void testAnnotatedBot() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""Hi!\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); } 	 @Test
	public void testImageBot() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1491360469304,\""message\"":{ \""mid\"":\""mid.$cAACFqTvPOHVhbUgZOFbO_0AFXqVh\"",\""seq\"":854986,\""attachments\"":[{ \""type\"":\""image\"",\""payload\"":{ \""url\"":\""https:\\/\\/scontent.xx.fbcdn.net\\/v\\/t34.0-12\\/17742285_136721643528794_1945065811_n.gif?_nc_ad=z-m&oh=97198065e4ede9bd09330764a7bfb62f&oe=58E6A075\""} } ]} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); } 	
 @Test
	public void testAnnotatedListTemplateBot() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""list template\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); }  @Test
	public void testAnnotatedButtonTemplateBot() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""button template\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); } 	 @Test
	public void testAnnotatedQuickReplyTemplateBot() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""quick replies\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); } 	 @Test
	public void testAnnotatedReusableImage() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""reuse image\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); } 	 @Test
	public void testAnnotatedReusableVideo() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""reuse video\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); } 	 @Test
	public void testAnnotatedReceiptTemplateBot() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""receipt template\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); } 	 @Test
	public void testBuyButton() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""buy button\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); IncomingToOutgoingMessageHandler.getInstance().process(envelope); assertNotNull(envelope); } 	 private boolean isConfigurationExist() { if(System.getenv(""fb.page.token"") != null && System.getenv(""fb.validation.token"") != null) { return true; } return false; } 	 public static void main(String[] args) { StandardPBEStringEncryptor enc = new StandardPBEStringEncryptor(); enc.setPassword(""password""); 
	 ConfigurationUtils.loadEncryptedConfigurationFile(enc, ""botmill.properties""); // can be sourced out List<BotDefinition> botDef = new ArrayList<BotDefinition>(); botDef.add(new AnnotatedTemplatedBehaviourTest()); ConfigurationUtils.loadBotConfig(); ConfigurationUtils.setBotDefinitionInstance(botDef); 		 for(int i=0; i<10; i++) { new Thread(new Runnable() { String json = ""{ \""sender\"":{ \""id\"":\""1158621824216736\""} ,\""recipient\"":{ \""id\"":\""1226565047419159\""} ,\""timestamp\"":1490832021661,\""message\"":{ \""mid\"":\""mid.$cAAUPCFn4ymdhTcignVbHH3rzpKd_\"",\""seq\"":844819,\""text\"":\""Hi!\""} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); @Override
				public void run() { try { IncomingToOutgoingMessageHandler.getInstance().process(envelope); } catch(Exception e) { e.printStackTrace(); } } } ).start(); } } 		 } 	
	
	 "
src/test/java/co/aurasphere/botmill/fb/test/BaseFbBotMillMessageTest.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.test;

import org.hamcrest.CoreMatchers;
import org.junit.Assert;

import co.aurasphere.botmill.fb.model.incoming.FacebookConfirmationMessage;

/**
 * Base class for testing every FbBotMill component that requires a user to send
 * a message to the bot.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */
public abstract class BaseFbBotMillMessageTest extends BaseFbBotMillNetworkTest {

	/**
	 * Constant used to reply to the test with the message received with this
	 * value at the end.
	 */
	private static final String OK_STRING = ""_OK"";

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.test.BaseFbBotMillTest#testImplementation()
	 */
	protected void testImplementation() throws Exception {
		// Retrieves the expected replies from the bot.
		String[] messagesToSend = getMessagesToSend();

		if (messagesToSend != null) {
			for (String message : messagesToSend) {
				logger.debug(
						""Testing the bot by sending message [{}] in test class [{}]"",
						message, this.getClass().getSimpleName());
				this.mockMediator.sendTextMessage(message);
				Object response = monitor.get();

				Assert.assertNotNull(response);
				Assert.assertThat(response, CoreMatchers
						.instanceOf(FacebookConfirmationMessage.class));
			}
		}
	}

	/**
	 * Methods that returns the messages that needs to be sent to the bot in
	 * order to test it.
	 *
	 * @return an array of messages that needs to be sent to the bot in order to
	 *         test it.
	 */
	protected abstract String[] getMessagesToSend();

	/**
	 * Method used to get the response back from the bot during testing. The
	 * response got back is equal to the message sent to the bot with
	 * {@value #OK_STRING} at the end.
	 * 
	 * @param messageToSend
	 *            the message sent to the bot.
	 * @return the messageToSend, uppercased with a trailing {@value #OK_STRING}
	 *         .
	 */
	protected String getTestOkBotReply(String messageToSend) {
		return messageToSend.toUpperCase().concat(OK_STRING);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.AbstractFbBot#toString()
	 */
	@Override
	public String toString() {
		return ""BaseFbBotMillMessageTest [mockMediator="" + mockMediator
				+ "", monitor="" + monitor + "", mockId="" + mockId
				+ "", pageToken="" + pageToken + "", webhookToken="" + webhookToken + ""]"";
	}
}
","package co.aurasphere.botmill.fb.test; public abstract class BaseFbBotMillMessageTest extends BaseFbBotMillNetworkTest { private static final String OK_STRING = ""_OK""; protected void testImplementation() throws Exception { String[] messagesToSend = getMessagesToSend(); if (messagesToSend != null) { for (String message : messagesToSend) { logger.debug(
						""Testing the bot by sending message [{ } ] in test class [{ } ]"",
						message, this.getClass().getSimpleName()); this.mockMediator.sendTextMessage(message); Object response = monitor.get(); Assert.assertNotNull(response); Assert.assertThat(response, CoreMatchers
						.instanceOf(FacebookConfirmationMessage.class)); } } } protected abstract String[] getMessagesToSend(); protected String getTestOkBotReply(String messageToSend) { return messageToSend.toUpperCase().concat(OK_STRING); } @Override
	public String toString() { return ""BaseFbBotMillMessageTest [mockMediator="" + mockMediator
				+ "", monitor="" + monitor + "", mockId="" + mockId
				+ "", pageToken="" + pageToken + "", webhookToken="" + webhookToken + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.test; public abstract class BaseFbBotMillMessageTest extends BaseFbBotMillNetworkTest { private static final String OK_STRING = ""_OK""; protected void testImplementation() throws Exception { String[] messagesToSend = getMessagesToSend(); if (messagesToSend != null) { for (String message : messagesToSend) { logger.debug(
						""Testing the bot by sending message [{ } ] in test class [{ } ]"",
						message, this.getClass().getSimpleName()); this.mockMediator.sendTextMessage(message); Object response = monitor.get(); Assert.assertNotNull(response); Assert.assertThat(response, CoreMatchers
						.instanceOf(FacebookConfirmationMessage.class)); } } } protected abstract String[] getMessagesToSend(); protected String getTestOkBotReply(String messageToSend) { return messageToSend.toUpperCase().concat(OK_STRING); } @Override
	public String toString() { return ""BaseFbBotMillMessageTest [mockMediator="" + mockMediator
				+ "", monitor="" + monitor + "", mockId="" + mockId
				+ "", pageToken="" + pageToken + "", webhookToken="" + webhookToken + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.test; 
import org.hamcrest.CoreMatchers; import org.junit.Assert; 
import co.aurasphere.botmill.fb.model.incoming.FacebookConfirmationMessage;  /**
 * Base class for testing every FbBotMill component that requires a user to send
 * a message to the bot.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */ public abstract class BaseFbBotMillMessageTest extends BaseFbBotMillNetworkTest {  /**
	 * Constant used to reply to the test with the message received with this
	 * value at the end.
	 */ private static final String OK_STRING = ""_OK"";  /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.test.BaseFbBotMillTest#testImplementation()
	 */ protected void testImplementation() throws Exception { // Retrieves the expected replies from the bot. String[] messagesToSend = getMessagesToSend();  if (messagesToSend != null) { for (String message : messagesToSend) { logger.debug(
						""Testing the bot by sending message [{ } ] in test class [{ } ]"",
						message, this.getClass().getSimpleName()); this.mockMediator.sendTextMessage(message); Object response = monitor.get();  Assert.assertNotNull(response); Assert.assertThat(response, CoreMatchers
						.instanceOf(FacebookConfirmationMessage.class)); } } }  /**
	 * Methods that returns the messages that needs to be sent to the bot in
	 * order to test it.
	 *
	 * @return an array of messages that needs to be sent to the bot in order to
	 *         test it.
	 */ protected abstract String[] getMessagesToSend();  /**
	 * Method used to get the response back from the bot during testing. The
	 * response got back is equal to the message sent to the bot with
	 * {@value #OK_STRING} at the end.
	 * 
	 * @param messageToSend
	 *            the message sent to the bot.
	 * @return the messageToSend, uppercased with a trailing {@value #OK_STRING}
	 *         .
	 */ protected String getTestOkBotReply(String messageToSend) { return messageToSend.toUpperCase().concat(OK_STRING); }  /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.AbstractFbBot#toString()
	 */ @Override
	public String toString() { return ""BaseFbBotMillMessageTest [mockMediator="" + mockMediator
				+ "", monitor="" + monitor + "", mockId="" + mockId
				+ "", pageToken="" + pageToken + "", webhookToken="" + webhookToken + ""]""; } }  "
src/test/java/co/aurasphere/botmill/fb/test/BaseFbBotMillNetworkTest.java,"/*
BaseFbBotMillNetworkTest * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.test;

import org.junit.Assume;
import org.junit.Before;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import co.aurasphere.botmill.fb.FbBot;
import co.aurasphere.botmill.fb.FbBotMillContext;
import co.aurasphere.botmill.fb.support.FbBotMillMockMediator;

/**
 * Base class for testing every FbBotMill component that requires Facebook
 * communication.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */
public abstract class BaseFbBotMillNetworkTest extends FbBot {

	/**
	 * The logger.
	 */
	protected static final Logger logger = LoggerFactory
			.getLogger(BaseFbBotMillNetworkTest.class);

	/**
	 * The name of the environment property for the Facebook's app-scoped user
	 * ID used as a recipient for the bot.
	 */
	protected static final String FB_BOTMILL_MOCK_ID_PROPERTY = ""MOCK_FACEBOOK_ID"";

	/**
	 * The name of the environment property for the Facebook's page token.
	 */
	protected static final String FB_BOTMILL_PAGE_TOKEN_PROPERTY = ""PAGE_TOKEN"";

	/**
	 * The name of the environment property for the Facebook's Messenger
	 * Platform Webhook validation token.
	 */
	protected static final String FB_BOTMILL_WEBHOOK_TOKEN_PROPERTY = ""VALIDATION_TOKEN"";

	/**
	 * A global variable used to skip all the tests.
	 */
	protected static boolean skipAllTests = false;

	/**
	 * The mock mediator instance used to send messages.
	 */
	protected FbBotMillMockMediator mockMediator;

	/**
	 * A custom monitor used to check if there was any error in the request.
	 */
	protected FbBotMillTestMonitor monitor;

	/**
	 * An app-scoped Facebook's user ID used as a message recipient for the bot.
	 */
	protected String mockId;

	/**
	 * The Facebook's page token.
	 */
	protected String pageToken;

	/**
	 * The Facebook's Messenger Platform Webhook validation token.
	 */
	protected String webhookToken;

	/**
	 * Method that sets up the testing envirnoment. It gets the Facebook
	 * parameters needed through environment variables with values
	 * {@value #FB_BOTMILL_MOCK_ID_PROPERTY},
	 * {@value #FB_BOTMILL_PAGE_TOKEN_PROPERTY} and
	 * {@value #FB_BOTMILL_WEBHOOK_TOKEN_PROPERTY}. If any of these environment
	 * variables is missing, then all the tests are skipping. This is done in
	 * order to prevent the test failures due to the lack of this variables to
	 * prevent user builds.
	 */
	@Before
	public void setup() {
		// If the tests are already being skipped, no need to check the
		// properties.
		if (skipAllTests) {
			return;
		}

		mockId = System.getenv(FB_BOTMILL_MOCK_ID_PROPERTY);
		pageToken = System.getenv(FB_BOTMILL_PAGE_TOKEN_PROPERTY);
		webhookToken = System.getenv(FB_BOTMILL_WEBHOOK_TOKEN_PROPERTY);

		// If one or more properties are null, the tests will be skipped.
		if (isEmpty(mockId) || isEmpty(pageToken) || isEmpty(webhookToken)) {
			logger.warn(
					""One of the testing environment variables is missing. Tests will be skipped. Variables missing: [{}={}], [{}={}], [{}={}]."",
					FB_BOTMILL_MOCK_ID_PROPERTY, isEmpty(mockId),
					FB_BOTMILL_PAGE_TOKEN_PROPERTY, isEmpty(pageToken),
					FB_BOTMILL_WEBHOOK_TOKEN_PROPERTY, isEmpty(webhookToken));
			skipAllTests = true;
		} else if (this.mockMediator == null) {
			FbBotMillContext.getInstance().setup(pageToken, webhookToken);
			this.mockMediator = new FbBotMillMockMediator(mockId, this);
			monitor = new FbBotMillTestMonitor();
			FbBotMillContext.getInstance().registerMonitor(monitor);
		}
		
	}

	/**
	 * Main test method. It checks whether the tests are being globally or
	 * locally skipped and if not it then delegates the current class
	 * implementation of the method {@link #testImplementation()}.
	 * 
	 * @throws Exception
	 *             a generic exception.
	 */
	@Test
	public void test() throws Exception {
		Assume.assumeFalse(skipAllTests);
		Assume.assumeFalse(skipTest());
		testImplementation();
	}

	/**
	 * Method which defines if this test should be skipped.
	 * 
	 * @return true if this test should be skipped, false otherwise.
	 */
	protected abstract boolean skipTest();

	/**
	 * Method which defines the test logic.
	 * 
	 * @throws Exception
	 *             a generic exception.
	 */
	protected abstract void testImplementation() throws Exception;

	/**
	 * Utility method used to check if a String is null or empty.
	 * 
	 * @param string
	 *            the String to check.
	 * @return true if the String is null or empty, false otherwise.
	 */
	private static boolean isEmpty(String string) {
		return string == null || """".equals(string);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.AbstractFbBot#toString()
	 */
	@Override
	public String toString() {
		return ""BaseFbBotMillNetworkTest [mockMediator="" + mockMediator
				+ "", monitor="" + monitor + "", mockId="" + mockId
				+ "", pageToken="" + pageToken + "", webhookToken="" + webhookToken + ""]"";
	}
}
","package co.aurasphere.botmill.fb.test; public abstract class BaseFbBotMillNetworkTest extends FbBot { protected static final Logger logger = LoggerFactory
			.getLogger(BaseFbBotMillNetworkTest.class); protected static final String FB_BOTMILL_MOCK_ID_PROPERTY = ""MOCK_FACEBOOK_ID""; protected static final String FB_BOTMILL_PAGE_TOKEN_PROPERTY = ""PAGE_TOKEN""; protected static final String FB_BOTMILL_WEBHOOK_TOKEN_PROPERTY = ""VALIDATION_TOKEN""; protected static boolean skipAllTests = false; protected FbBotMillMockMediator mockMediator; protected FbBotMillTestMonitor monitor; protected String mockId; protected String pageToken; protected String webhookToken; @Before
	public void setup() { if (skipAllTests) { return; } mockId = System.getenv(FB_BOTMILL_MOCK_ID_PROPERTY); pageToken = System.getenv(FB_BOTMILL_PAGE_TOKEN_PROPERTY); webhookToken = System.getenv(FB_BOTMILL_WEBHOOK_TOKEN_PROPERTY); if (isEmpty(mockId) || isEmpty(pageToken) || isEmpty(webhookToken)) { logger.warn(
					""One of the testing environment variables is missing. Tests will be skipped. Variables missing: [{ } ={ } ], [{ } ={ } ], [{ } ={ } ]."",
					FB_BOTMILL_MOCK_ID_PROPERTY, isEmpty(mockId),
					FB_BOTMILL_PAGE_TOKEN_PROPERTY, isEmpty(pageToken),
					FB_BOTMILL_WEBHOOK_TOKEN_PROPERTY, isEmpty(webhookToken)); skipAllTests = true; } else if (this.mockMediator == null) { FbBotMillContext.getInstance().setup(pageToken, webhookToken); this.mockMediator = new FbBotMillMockMediator(mockId, this); monitor = new FbBotMillTestMonitor(); FbBotMillContext.getInstance().registerMonitor(monitor); } } @Test
	public void test() throws Exception { Assume.assumeFalse(skipAllTests); Assume.assumeFalse(skipTest()); testImplementation(); } protected abstract boolean skipTest(); protected abstract void testImplementation() throws Exception; private static boolean isEmpty(String string) { return string == null || """".equals(string); } @Override
	public String toString() { return ""BaseFbBotMillNetworkTest [mockMediator="" + mockMediator
				+ "", monitor="" + monitor + "", mockId="" + mockId
				+ "", pageToken="" + pageToken + "", webhookToken="" + webhookToken + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.test; public abstract class BaseFbBotMillNetworkTest extends FbBot { protected static final Logger logger = LoggerFactory
			.getLogger(BaseFbBotMillNetworkTest.class); protected static final String FB_BOTMILL_MOCK_ID_PROPERTY = ""MOCK_FACEBOOK_ID""; protected static final String FB_BOTMILL_PAGE_TOKEN_PROPERTY = ""PAGE_TOKEN""; protected static final String FB_BOTMILL_WEBHOOK_TOKEN_PROPERTY = ""VALIDATION_TOKEN""; protected static boolean skipAllTests = false; protected FbBotMillMockMediator mockMediator; protected FbBotMillTestMonitor monitor; protected String mockId; protected String pageToken; protected String webhookToken; @Before
	public void setup() { if (skipAllTests) { return; } mockId = System.getenv(FB_BOTMILL_MOCK_ID_PROPERTY); pageToken = System.getenv(FB_BOTMILL_PAGE_TOKEN_PROPERTY); webhookToken = System.getenv(FB_BOTMILL_WEBHOOK_TOKEN_PROPERTY); if (isEmpty(mockId) || isEmpty(pageToken) || isEmpty(webhookToken)) { logger.warn(
					""One of the testing environment variables is missing. Tests will be skipped. Variables missing: [{ } ={ } ], [{ } ={ } ], [{ } ={ } ]."",
					FB_BOTMILL_MOCK_ID_PROPERTY, isEmpty(mockId),
					FB_BOTMILL_PAGE_TOKEN_PROPERTY, isEmpty(pageToken),
					FB_BOTMILL_WEBHOOK_TOKEN_PROPERTY, isEmpty(webhookToken)); skipAllTests = true; } else if (this.mockMediator == null) { FbBotMillContext.getInstance().setup(pageToken, webhookToken); this.mockMediator = new FbBotMillMockMediator(mockId, this); monitor = new FbBotMillTestMonitor(); FbBotMillContext.getInstance().registerMonitor(monitor); } } @Test
	public void test() throws Exception { Assume.assumeFalse(skipAllTests); Assume.assumeFalse(skipTest()); testImplementation(); } protected abstract boolean skipTest(); protected abstract void testImplementation() throws Exception; private static boolean isEmpty(String string) { return string == null || """".equals(string); } @Override
	public String toString() { return ""BaseFbBotMillNetworkTest [mockMediator="" + mockMediator
				+ "", monitor="" + monitor + "", mockId="" + mockId
				+ "", pageToken="" + pageToken + "", webhookToken="" + webhookToken + ""]""; } } ","/*
BaseFbBotMillNetworkTest * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.test; 
import org.junit.Assume; import org.junit.Before; import org.junit.Test; import org.slf4j.Logger; import org.slf4j.LoggerFactory; 
import co.aurasphere.botmill.fb.FbBot; import co.aurasphere.botmill.fb.FbBotMillContext; import co.aurasphere.botmill.fb.support.FbBotMillMockMediator;  /**
 * Base class for testing every FbBotMill component that requires Facebook
 * communication.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */ public abstract class BaseFbBotMillNetworkTest extends FbBot {  /**
	 * The logger.
	 */ protected static final Logger logger = LoggerFactory
			.getLogger(BaseFbBotMillNetworkTest.class);  /**
	 * The name of the environment property for the Facebook's app-scoped user
	 * ID used as a recipient for the bot.
	 */ protected static final String FB_BOTMILL_MOCK_ID_PROPERTY = ""MOCK_FACEBOOK_ID"";  /**
	 * The name of the environment property for the Facebook's page token.
	 */ protected static final String FB_BOTMILL_PAGE_TOKEN_PROPERTY = ""PAGE_TOKEN"";  /**
	 * The name of the environment property for the Facebook's Messenger
	 * Platform Webhook validation token.
	 */ protected static final String FB_BOTMILL_WEBHOOK_TOKEN_PROPERTY = ""VALIDATION_TOKEN"";  /**
	 * A global variable used to skip all the tests.
	 */ protected static boolean skipAllTests = false;  /**
	 * The mock mediator instance used to send messages.
	 */ protected FbBotMillMockMediator mockMediator;  /**
	 * A custom monitor used to check if there was any error in the request.
	 */ protected FbBotMillTestMonitor monitor;  /**
	 * An app-scoped Facebook's user ID used as a message recipient for the bot.
	 */ protected String mockId;  /**
	 * The Facebook's page token.
	 */ protected String pageToken;  /**
	 * The Facebook's Messenger Platform Webhook validation token.
	 */ protected String webhookToken;  /**
	 * Method that sets up the testing envirnoment. It gets the Facebook
	 * parameters needed through environment variables with values
	 * {@value #FB_BOTMILL_MOCK_ID_PROPERTY},
	 * {@value #FB_BOTMILL_PAGE_TOKEN_PROPERTY} and
	 * {@value #FB_BOTMILL_WEBHOOK_TOKEN_PROPERTY}. If any of these environment
	 * variables is missing, then all the tests are skipping. This is done in
	 * order to prevent the test failures due to the lack of this variables to
	 * prevent user builds.
	 */ @Before
	public void setup() { // If the tests are already being skipped, no need to check the // properties. if (skipAllTests) { return; }  mockId = System.getenv(FB_BOTMILL_MOCK_ID_PROPERTY); pageToken = System.getenv(FB_BOTMILL_PAGE_TOKEN_PROPERTY); webhookToken = System.getenv(FB_BOTMILL_WEBHOOK_TOKEN_PROPERTY);  // If one or more properties are null, the tests will be skipped. if (isEmpty(mockId) || isEmpty(pageToken) || isEmpty(webhookToken)) { logger.warn(
					""One of the testing environment variables is missing. Tests will be skipped. Variables missing: [{ } ={ } ], [{ } ={ } ], [{ } ={ } ]."",
					FB_BOTMILL_MOCK_ID_PROPERTY, isEmpty(mockId),
					FB_BOTMILL_PAGE_TOKEN_PROPERTY, isEmpty(pageToken),
					FB_BOTMILL_WEBHOOK_TOKEN_PROPERTY, isEmpty(webhookToken)); skipAllTests = true; } else if (this.mockMediator == null) { FbBotMillContext.getInstance().setup(pageToken, webhookToken); this.mockMediator = new FbBotMillMockMediator(mockId, this); monitor = new FbBotMillTestMonitor(); FbBotMillContext.getInstance().registerMonitor(monitor); } 		 }  /**
	 * Main test method. It checks whether the tests are being globally or
	 * locally skipped and if not it then delegates the current class
	 * implementation of the method {@link #testImplementation()}.
	 * 
	 * @throws Exception
	 *             a generic exception.
	 */ @Test
	public void test() throws Exception { Assume.assumeFalse(skipAllTests); Assume.assumeFalse(skipTest()); testImplementation(); }  /**
	 * Method which defines if this test should be skipped.
	 * 
	 * @return true if this test should be skipped, false otherwise.
	 */ protected abstract boolean skipTest();  /**
	 * Method which defines the test logic.
	 * 
	 * @throws Exception
	 *             a generic exception.
	 */ protected abstract void testImplementation() throws Exception;  /**
	 * Utility method used to check if a String is null or empty.
	 * 
	 * @param string
	 *            the String to check.
	 * @return true if the String is null or empty, false otherwise.
	 */ private static boolean isEmpty(String string) { return string == null || """".equals(string); }  /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.AbstractFbBot#toString()
	 */ @Override
	public String toString() { return ""BaseFbBotMillNetworkTest [mockMediator="" + mockMediator
				+ "", monitor="" + monitor + "", mockId="" + mockId
				+ "", pageToken="" + pageToken + "", webhookToken="" + webhookToken + ""]""; } }  "
src/test/java/co/aurasphere/botmill/fb/test/FbBotMillTestMonitor.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.test;

import java.util.Set;
import java.util.concurrent.CountDownLatch;

import javax.servlet.http.HttpServletRequest;
import javax.validation.ConstraintViolation;

import co.aurasphere.botmill.fb.model.incoming.FacebookConfirmationMessage;
import co.aurasphere.botmill.fb.model.incoming.FacebookErrorMessage;
import co.aurasphere.botmill.fb.model.incoming.MessengerCallback;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;
import co.aurasphere.botmill.fb.support.FbBotMillMonitor;


/**
 * A custom monitor implementation used to check if any error happens during
 * tests.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */
public class FbBotMillTestMonitor implements FbBotMillMonitor {

	/**
	 * A latch used to synchronize this monitor with the testing facility.
	 */
	private CountDownLatch latch;

	/**
	 * The result object returned by the monitor.
	 */
	private Object result;

	/**
	 * Instantiates a new FbBotMillTestMonitor.
	 */
	public FbBotMillTestMonitor() {
		reset();
	}

	/**
	 * Resets this monitor.
	 */
	private void reset() {
		result = null;
		latch = new CountDownLatch(1);
	}

	/**
	 * Gets the result of the computation. The main purpose of this method is to
	 * synchronize the underlying asynchronous processor. This is done using a
	 * {@link CountDownLatch}.
	 * 
	 * @return the result of the computation.
	 * @throws Exception
	 *             a generic exception.
	 */
	public Object get() throws Exception {
		latch.await();
		Object result = this.result;
		reset();
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.support.FbBotMillNetworkMonitor#onResponse(co
	 * .aurasphere.botmill.fb.model.incoming.MessengerCallback)
	 */
	public void onConfirmation(FacebookConfirmationMessage data) {
		latch.countDown();
		result = data;

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.support.FbBotMillNetworkMonitor#onError(co.
	 * aurasphere.botmill.fb.model.incoming.FacebookErrorMessage)
	 */
	public void onError(FacebookErrorMessage error) {
		latch.countDown();
		result = error;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.support.FbBotMillNetworkMonitor#onPostReceived
	 * (javax.servlet.http.HttpServletRequest,
	 * co.aurasphere.botmill.fb.model.incoming.MessengerCallback)
	 */
	public void onPostReceived(HttpServletRequest request,
			MessengerCallback data) {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.support.FbBotMillNetworkMonitor#onGetReceived
	 * (javax.servlet.http.HttpServletRequest)
	 */
	public void onGetReceived(HttpServletRequest request) {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.support.FbBotMillMonitor#onValidationError(co
	 * .aurasphere.botmill.fb.model.outcoming.FbBotMillResponse, java.util.Set)
	 */
	public void onValidationError(FbBotMillResponse response,
			Set<ConstraintViolation<FbBotMillResponse>> constraintViolations) {
		latch.countDown();
		result = constraintViolations;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""FbBotMillTestMonitor [latch="" + latch + "", result="" + result
				+ ""]"";
	}

}
","package co.aurasphere.botmill.fb.test; public class FbBotMillTestMonitor implements FbBotMillMonitor { private CountDownLatch latch; private Object result; public FbBotMillTestMonitor() { reset(); } private void reset() { result = null; latch = new CountDownLatch(1); } public Object get() throws Exception { latch.await(); Object result = this.result; reset(); return result; } public void onConfirmation(FacebookConfirmationMessage data) { latch.countDown(); result = data; } public void onError(FacebookErrorMessage error) { latch.countDown(); result = error; } public void onPostReceived(HttpServletRequest request,
			MessengerCallback data) { } public void onGetReceived(HttpServletRequest request) { } public void onValidationError(FbBotMillResponse response,
			Set<ConstraintViolation<FbBotMillResponse>> constraintViolations) { latch.countDown(); result = constraintViolations; } @Override
	public String toString() { return ""FbBotMillTestMonitor [latch="" + latch + "", result="" + result
				+ ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.test; public class FbBotMillTestMonitor implements FbBotMillMonitor { private CountDownLatch latch; private Object result; public FbBotMillTestMonitor() { reset(); } private void reset() { result = null; latch = new CountDownLatch(1); } public Object get() throws Exception { latch.await(); Object result = this.result; reset(); return result; } public void onConfirmation(FacebookConfirmationMessage data) { latch.countDown(); result = data; } public void onError(FacebookErrorMessage error) { latch.countDown(); result = error; } public void onPostReceived(HttpServletRequest request,
			MessengerCallback data) { } public void onGetReceived(HttpServletRequest request) { } public void onValidationError(FbBotMillResponse response,
			Set<ConstraintViolation<FbBotMillResponse>> constraintViolations) { latch.countDown(); result = constraintViolations; } @Override
	public String toString() { return ""FbBotMillTestMonitor [latch="" + latch + "", result="" + result
				+ ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.test; 
import java.util.Set; import java.util.concurrent.CountDownLatch; 
import javax.servlet.http.HttpServletRequest; import javax.validation.ConstraintViolation; 
import co.aurasphere.botmill.fb.model.incoming.FacebookConfirmationMessage; import co.aurasphere.botmill.fb.model.incoming.FacebookErrorMessage; import co.aurasphere.botmill.fb.model.incoming.MessengerCallback; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; import co.aurasphere.botmill.fb.support.FbBotMillMonitor; 
  public class FbBotMillTestMonitor implements FbBotMillMonitor { /**
 * A custom monitor implementation used to check if any error happens during
 * tests.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */  private CountDownLatch latch; /**
	 * A latch used to synchronize this monitor with the testing facility.
	 */  private Object result; /**
	 * The result object returned by the monitor.
	 */  public FbBotMillTestMonitor() { reset(); } /**
	 * Instantiates a new FbBotMillTestMonitor.
	 */  private void reset() { result = null; latch = new CountDownLatch(1); } /**
	 * Resets this monitor.
	 */  public Object get() throws Exception { latch.await(); Object result = this.result; reset(); return result; } /**
	 * Gets the result of the computation. The main purpose of this method is to
	 * synchronize the underlying asynchronous processor. This is done using a
	 * {@link CountDownLatch}.
	 * 
	 * @return the result of the computation.
	 * @throws Exception
	 *             a generic exception.
	 */  public void onConfirmation(FacebookConfirmationMessage data) { latch.countDown(); result = data; /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.support.FbBotMillNetworkMonitor#onResponse(co
	 * .aurasphere.botmill.fb.model.incoming.MessengerCallback)
	 */ }   public void onError(FacebookErrorMessage error) { latch.countDown(); result = error; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.support.FbBotMillNetworkMonitor#onError(co.
	 * aurasphere.botmill.fb.model.incoming.FacebookErrorMessage)
	 */  public void onPostReceived(HttpServletRequest request,
			MessengerCallback data) { } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.support.FbBotMillNetworkMonitor#onPostReceived
	 * (javax.servlet.http.HttpServletRequest,
	 * co.aurasphere.botmill.fb.model.incoming.MessengerCallback)
	 */  public void onGetReceived(HttpServletRequest request) { } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.support.FbBotMillNetworkMonitor#onGetReceived
	 * (javax.servlet.http.HttpServletRequest)
	 */  public void onValidationError(FbBotMillResponse response,
			Set<ConstraintViolation<FbBotMillResponse>> constraintViolations) { latch.countDown(); result = constraintViolations; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.support.FbBotMillMonitor#onValidationError(co
	 * .aurasphere.botmill.fb.model.outcoming.FbBotMillResponse, java.util.Set)
	 */  @Override
	public String toString() { return ""FbBotMillTestMonitor [latch="" + latch + "", result="" + result
				+ ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/test/java/co/aurasphere/botmill/fb/test/TestDeserialization.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.test;

import co.aurasphere.botmill.fb.internal.util.json.FbBotMillJsonUtils;
import co.aurasphere.botmill.fb.model.base.Payload;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.outcoming.payload.UrlPayload;


/**
 * The Class TestDeserialization.
 *
 * @author Donato Rimenti
 */
public class TestDeserialization {

	/**
	 * The main method.
	 *
	 * @param args the arguments
	 */
	public static void main(String[] args) {
		String json = ""{\""sender\"":{\""id\"":\""USER_ID\""},\""recipient\"":{\""id\"":\""PAGE_ID\""},\""timestamp\"":1458692752478,\""message\"":{\""mid\"":\""mid.1458696618141:b4ef9d19ec21086067\"",\""seq\"":51,\""attachments\"":[{\""type\"":\""image\"",\""payload\"":{\""url\"":\""IMAGE_URL\""}}]}}"";
		String json2 = ""{\""sender\"":{\""id\"":\""1152902104831488\""},\""recipient\"":{\""id\"":\""1209810882431614\""},\""timestamp\"":1482953812997,\""message\"":{\""mid\"":\""mid.1482953812997:6c6e910961\"",\""seq\"":778909,\""attachments\"":[{\""title\"":\""Alvin's Location\"",\""url\"":\""https:\\/\\/www.facebook.com\\/l.php?u=https\u00253A\u00252F\u00252Fwww.bing.com\u00252Fmaps\u00252Fdefault.aspx\u00253Fv\u00253D2\u002526pc\u00253DFACEBK\u002526mid\u00253D8100\u002526where1\u00253D43.899746\u0025252C\u00252B-79.269825\u002526FORM\u00253DFBKPL1\u002526mkt\u00253Den-US&h=ATNzUb8qaIa5x61TRftUfE7RxWJE_E-5XeshoVeDOeGprLWnutTFxlENgC7vFhYuD3pB02N6PpzsEgcOiofJShlqT7a-lesSHScIzrLQVGPg-_22e6CETCbNhXeo57KTKsXLQU8&s=1&enc=AZNukLEVHCKFse_g9I7aBKSSgHbB3odYCw_9Do4rhrUXbJvjz_okfOP0gGwjSJ9Cd5PRpkxhT9kiCBrGBbXQCqPejz98NXzD6V6WVIEB4ZaDqA\"",\""type\"":\""location\"",\""payload\"":{\""coordinates\"":{\""lat\"":43.899746,\""long\"":-79.269825}}}]}}"";
		MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class);
		Payload payload = envelope.getMessage().getAttachments().get(0).getPayload();

		UrlPayload actualPayload = (UrlPayload) payload;

		System.out.println(actualPayload.getUrl());
	}

}
","package co.aurasphere.botmill.fb.test; public class TestDeserialization { public static void main(String[] args) { String json = ""{ \""sender\"":{ \""id\"":\""USER_ID\""} ,\""recipient\"":{ \""id\"":\""PAGE_ID\""} ,\""timestamp\"":1458692752478,\""message\"":{ \""mid\"":\""mid.1458696618141:b4ef9d19ec21086067\"",\""seq\"":51,\""attachments\"":[{ \""type\"":\""image\"",\""payload\"":{ \""url\"":\""IMAGE_URL\""} } ]} } ""; String json2 = ""{ \""sender\"":{ \""id\"":\""1152902104831488\""} ,\""recipient\"":{ \""id\"":\""1209810882431614\""} ,\""timestamp\"":1482953812997,\""message\"":{ \""mid\"":\""mid.1482953812997:6c6e910961\"",\""seq\"":778909,\""attachments\"":[{ \""title\"":\""Alvin's Location\"",\""url\"":\""https:\\/\\/www.facebook.com\\/l.php?u=https\u00253A\u00252F\u00252Fwww.bing.com\u00252Fmaps\u00252Fdefault.aspx\u00253Fv\u00253D2\u002526pc\u00253DFACEBK\u002526mid\u00253D8100\u002526where1\u00253D43.899746\u0025252C\u00252B-79.269825\u002526FORM\u00253DFBKPL1\u002526mkt\u00253Den-US&h=ATNzUb8qaIa5x61TRftUfE7RxWJE_E-5XeshoVeDOeGprLWnutTFxlENgC7vFhYuD3pB02N6PpzsEgcOiofJShlqT7a-lesSHScIzrLQVGPg-_22e6CETCbNhXeo57KTKsXLQU8&s=1&enc=AZNukLEVHCKFse_g9I7aBKSSgHbB3odYCw_9Do4rhrUXbJvjz_okfOP0gGwjSJ9Cd5PRpkxhT9kiCBrGBbXQCqPejz98NXzD6V6WVIEB4ZaDqA\"",\""type\"":\""location\"",\""payload\"":{ \""coordinates\"":{ \""lat\"":43.899746,\""long\"":-79.269825} } } ]} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); Payload payload = envelope.getMessage().getAttachments().get(0).getPayload(); UrlPayload actualPayload = (UrlPayload) payload; System.out.println(actualPayload.getUrl()); } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.test; public class TestDeserialization { public static void main(String[] args) { String json = ""{ \""sender\"":{ \""id\"":\""USER_ID\""} ,\""recipient\"":{ \""id\"":\""PAGE_ID\""} ,\""timestamp\"":1458692752478,\""message\"":{ \""mid\"":\""mid.1458696618141:b4ef9d19ec21086067\"",\""seq\"":51,\""attachments\"":[{ \""type\"":\""image\"",\""payload\"":{ \""url\"":\""IMAGE_URL\""} } ]} } ""; String json2 = ""{ \""sender\"":{ \""id\"":\""1152902104831488\""} ,\""recipient\"":{ \""id\"":\""1209810882431614\""} ,\""timestamp\"":1482953812997,\""message\"":{ \""mid\"":\""mid.1482953812997:6c6e910961\"",\""seq\"":778909,\""attachments\"":[{ \""title\"":\""Alvin's Location\"",\""url\"":\""https:\\/\\/www.facebook.com\\/l.php?u=https\u00253A\u00252F\u00252Fwww.bing.com\u00252Fmaps\u00252Fdefault.aspx\u00253Fv\u00253D2\u002526pc\u00253DFACEBK\u002526mid\u00253D8100\u002526where1\u00253D43.899746\u0025252C\u00252B-79.269825\u002526FORM\u00253DFBKPL1\u002526mkt\u00253Den-US&h=ATNzUb8qaIa5x61TRftUfE7RxWJE_E-5XeshoVeDOeGprLWnutTFxlENgC7vFhYuD3pB02N6PpzsEgcOiofJShlqT7a-lesSHScIzrLQVGPg-_22e6CETCbNhXeo57KTKsXLQU8&s=1&enc=AZNukLEVHCKFse_g9I7aBKSSgHbB3odYCw_9Do4rhrUXbJvjz_okfOP0gGwjSJ9Cd5PRpkxhT9kiCBrGBbXQCqPejz98NXzD6V6WVIEB4ZaDqA\"",\""type\"":\""location\"",\""payload\"":{ \""coordinates\"":{ \""lat\"":43.899746,\""long\"":-79.269825} } } ]} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); Payload payload = envelope.getMessage().getAttachments().get(0).getPayload(); UrlPayload actualPayload = (UrlPayload) payload; System.out.println(actualPayload.getUrl()); } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.test; 
import co.aurasphere.botmill.fb.internal.util.json.FbBotMillJsonUtils; import co.aurasphere.botmill.fb.model.base.Payload; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.outcoming.payload.UrlPayload; 
  public class TestDeserialization { /**
 * The Class TestDeserialization.
 *
 * @author Donato Rimenti
 */  public static void main(String[] args) { String json = ""{ \""sender\"":{ \""id\"":\""USER_ID\""} ,\""recipient\"":{ \""id\"":\""PAGE_ID\""} ,\""timestamp\"":1458692752478,\""message\"":{ \""mid\"":\""mid.1458696618141:b4ef9d19ec21086067\"",\""seq\"":51,\""attachments\"":[{ \""type\"":\""image\"",\""payload\"":{ \""url\"":\""IMAGE_URL\""} } ]} } ""; String json2 = ""{ \""sender\"":{ \""id\"":\""1152902104831488\""} ,\""recipient\"":{ \""id\"":\""1209810882431614\""} ,\""timestamp\"":1482953812997,\""message\"":{ \""mid\"":\""mid.1482953812997:6c6e910961\"",\""seq\"":778909,\""attachments\"":[{ \""title\"":\""Alvin's Location\"",\""url\"":\""https:\\/\\/www.facebook.com\\/l.php?u=https\u00253A\u00252F\u00252Fwww.bing.com\u00252Fmaps\u00252Fdefault.aspx\u00253Fv\u00253D2\u002526pc\u00253DFACEBK\u002526mid\u00253D8100\u002526where1\u00253D43.899746\u0025252C\u00252B-79.269825\u002526FORM\u00253DFBKPL1\u002526mkt\u00253Den-US&h=ATNzUb8qaIa5x61TRftUfE7RxWJE_E-5XeshoVeDOeGprLWnutTFxlENgC7vFhYuD3pB02N6PpzsEgcOiofJShlqT7a-lesSHScIzrLQVGPg-_22e6CETCbNhXeo57KTKsXLQU8&s=1&enc=AZNukLEVHCKFse_g9I7aBKSSgHbB3odYCw_9Do4rhrUXbJvjz_okfOP0gGwjSJ9Cd5PRpkxhT9kiCBrGBbXQCqPejz98NXzD6V6WVIEB4ZaDqA\"",\""type\"":\""location\"",\""payload\"":{ \""coordinates\"":{ \""lat\"":43.899746,\""long\"":-79.269825} } } ]} } ""; MessageEnvelope envelope = FbBotMillJsonUtils.fromJson(json, MessageEnvelope.class); Payload payload = envelope.getMessage().getAttachments().get(0).getPayload(); /**
	 * The main method.
	 *
	 * @param args the arguments
	 */ UrlPayload actualPayload = (UrlPayload) payload;  System.out.println(actualPayload.getUrl()); }  }  "
src/main/java/co/aurasphere/botmill/fb/event/account/AccountLinkingEvent.java,"package co.aurasphere.botmill.fb.event.account;

import co.aurasphere.botmill.fb.bean.FbBotMillBean;
import co.aurasphere.botmill.fb.event.FbBotMillEvent;
import co.aurasphere.botmill.fb.event.FbBotMillEventType;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;

public class AccountLinkingEvent extends FbBotMillBean implements FbBotMillEvent {

	/**
	 * Instantiates a new LocationEvent.
	 */
	public AccountLinkingEvent() {
	}

	public final boolean verifyEventCondition(MessageEnvelope envelope) {
		return eventKind(envelope) == FbBotMillEventType.ACCOUNT_LINKING;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.bean.FbBotMillBean#toString()
	 */
	@Override
	public String toString() {
		return ""AccountLinking []"";
	}
}
","package co.aurasphere.botmill.fb.event.account; public class AccountLinkingEvent extends FbBotMillBean implements FbBotMillEvent { public AccountLinkingEvent() { } public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.ACCOUNT_LINKING; } @Override
	public String toString() { return ""AccountLinking []""; } }",0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.event.account; public class AccountLinkingEvent extends FbBotMillBean implements FbBotMillEvent { public AccountLinkingEvent() { } public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.ACCOUNT_LINKING; } @Override
	public String toString() { return ""AccountLinking []""; } } ","package co.aurasphere.botmill.fb.event.account; 
import co.aurasphere.botmill.fb.bean.FbBotMillBean; import co.aurasphere.botmill.fb.event.FbBotMillEvent; import co.aurasphere.botmill.fb.event.FbBotMillEventType; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;  public class AccountLinkingEvent extends FbBotMillBean implements FbBotMillEvent {  /**
	 * Instantiates a new LocationEvent.
	 */ public AccountLinkingEvent() { }  public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.ACCOUNT_LINKING; }  /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.bean.FbBotMillBean#toString()
	 */ @Override
	public String toString() { return ""AccountLinking []""; } }  "
src/main/java/co/aurasphere/botmill/fb/event/account/ReferralEvent.java,"package co.aurasphere.botmill.fb.event.account;

import co.aurasphere.botmill.fb.bean.FbBotMillBean;
import co.aurasphere.botmill.fb.event.FbBotMillEvent;
import co.aurasphere.botmill.fb.event.FbBotMillEventType;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;

public class ReferralEvent extends FbBotMillBean implements FbBotMillEvent {

	/**
	 * Instantiates a new LocationEvent.
	 */
	public ReferralEvent() {
	}

	public final boolean verifyEventCondition(MessageEnvelope envelope) {
		return eventKind(envelope) == FbBotMillEventType.REFERRAL;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.bean.FbBotMillBean#toString()
	 */
	@Override
	public String toString() {
		return ""ReferralEvent []"";
	}
}
","package co.aurasphere.botmill.fb.event.account; public class ReferralEvent extends FbBotMillBean implements FbBotMillEvent { public ReferralEvent() { } public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.REFERRAL; } @Override
	public String toString() { return ""ReferralEvent []""; } }",0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.event.account; public class ReferralEvent extends FbBotMillBean implements FbBotMillEvent { public ReferralEvent() { } public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.REFERRAL; } @Override
	public String toString() { return ""ReferralEvent []""; } } ","package co.aurasphere.botmill.fb.event.account; 
import co.aurasphere.botmill.fb.bean.FbBotMillBean; import co.aurasphere.botmill.fb.event.FbBotMillEvent; import co.aurasphere.botmill.fb.event.FbBotMillEventType; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;  public class ReferralEvent extends FbBotMillBean implements FbBotMillEvent {  /**
	 * Instantiates a new LocationEvent.
	 */ public ReferralEvent() { }  public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.REFERRAL; }  /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.bean.FbBotMillBean#toString()
	 */ @Override
	public String toString() { return ""ReferralEvent []""; } }  "
src/main/java/co/aurasphere/botmill/fb/event/base/BaseMediaEvent.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.event.base;

import co.aurasphere.botmill.fb.bean.FbBotMillBean;
import co.aurasphere.botmill.fb.event.FbBotMillEvent;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;


/**
 * Base class for a {@link FbBotMillEvent} that triggers when an exact text is
 * matched, case sensitive or not.
 * 
 * @author Alvin Reyes
 */
public abstract class BaseMediaEvent extends FbBotMillBean implements
		FbBotMillEvent {

	protected String safeGetImage(MessageEnvelope envelope) {
		if (envelope != null && envelope.getMessage() != null
				&& envelope.getMessage().getText() != null
				&& envelope.getMessage().getQuickReply() == null) {
			return envelope.getMessage().getText();
		}
		return """";
	}
	

}
","package co.aurasphere.botmill.fb.event.base; public abstract class BaseMediaEvent extends FbBotMillBean implements
		FbBotMillEvent { protected String safeGetImage(MessageEnvelope envelope) { if (envelope != null && envelope.getMessage() != null
				&& envelope.getMessage().getText() != null
				&& envelope.getMessage().getQuickReply() == null) { return envelope.getMessage().getText(); } return """"; } }",0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.event.base; public abstract class BaseMediaEvent extends FbBotMillBean implements
		FbBotMillEvent { protected String safeGetImage(MessageEnvelope envelope) { if (envelope != null && envelope.getMessage() != null
				&& envelope.getMessage().getText() != null
				&& envelope.getMessage().getQuickReply() == null) { return envelope.getMessage().getText(); } return """"; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.event.base; 
import co.aurasphere.botmill.fb.bean.FbBotMillBean; import co.aurasphere.botmill.fb.event.FbBotMillEvent; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; 
  public abstract class BaseMediaEvent extends FbBotMillBean implements
		FbBotMillEvent { /**
 * Base class for a {@link FbBotMillEvent} that triggers when an exact text is
 * matched, case sensitive or not.
 * 
 * @author Alvin Reyes
 */ protected String safeGetImage(MessageEnvelope envelope) { if (envelope != null && envelope.getMessage() != null
				&& envelope.getMessage().getText() != null
				&& envelope.getMessage().getQuickReply() == null) { return envelope.getMessage().getText(); } return """"; }  } 	
 "
src/main/java/co/aurasphere/botmill/fb/event/base/BasePatternEvent.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.event.base;

import java.util.regex.Pattern;

import co.aurasphere.botmill.fb.bean.FbBotMillBean;
import co.aurasphere.botmill.fb.event.FbBotMillEvent;


/**
 * Base class for a {@link FbBotMillEvent} that triggers when a pattern is
 * matched.
 * 
 * @author Donato Rimenti
 * 
 */
public abstract class BasePatternEvent extends FbBotMillBean implements
		FbBotMillEvent {

	/**
	 * The expected pattern to match in order to trigger this event.
	 */
	public Pattern expectedPattern;

	/**
	 * Instantiates a new BasePatternEvent.
	 *
	 * @param expectedPattern
	 *            the {@link #expectedPattern}.
	 */
	protected BasePatternEvent(Pattern expectedPattern) {
		this.expectedPattern = expectedPattern;
	}

	/**
	 * Instantiates a new BasePatternEvent.
	 *
	 * @param expectedPattern
	 *            the {@link #expectedPattern}.
	 */
	protected BasePatternEvent(String expectedPattern) {
		this.expectedPattern = Pattern.compile(expectedPattern);
	}

	/**
	 * Verify pattern match.
	 *
	 * @param text
	 *            the string that we match against the {@link #expectedPattern}
	 *            object.
	 * @return true, if successful
	 */
	protected boolean verifyPatternMatch(String text) {
		if (this.expectedPattern == null) {
			return false;
		}
		return this.expectedPattern.matcher(text).matches();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((expectedPattern == null) ? 0 : expectedPattern.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		BasePatternEvent other = (BasePatternEvent) obj;
		if (expectedPattern == null) {
			if (other.expectedPattern != null)
				return false;
		} else if (!expectedPattern.equals(other.expectedPattern))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.bean.FbBotMillBean#toString()
	 */
	@Override
	public String toString() {
		return ""BasePatternEvent [expectedPattern="" + expectedPattern + ""]"";
	}

}
","package co.aurasphere.botmill.fb.event.base; public abstract class BasePatternEvent extends FbBotMillBean implements
		FbBotMillEvent { public Pattern expectedPattern; protected BasePatternEvent(Pattern expectedPattern) { this.expectedPattern = expectedPattern; } protected BasePatternEvent(String expectedPattern) { this.expectedPattern = Pattern.compile(expectedPattern); } protected boolean verifyPatternMatch(String text) { if (this.expectedPattern == null) { return false; } return this.expectedPattern.matcher(text).matches(); } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((expectedPattern == null) ? 0 : expectedPattern.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; BasePatternEvent other = (BasePatternEvent) obj; if (expectedPattern == null) { if (other.expectedPattern != null)
				return false; } else if (!expectedPattern.equals(other.expectedPattern))
			return false; return true; } @Override
	public String toString() { return ""BasePatternEvent [expectedPattern="" + expectedPattern + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.event.base; public abstract class BasePatternEvent extends FbBotMillBean implements
		FbBotMillEvent { public Pattern expectedPattern; protected BasePatternEvent(Pattern expectedPattern) { this.expectedPattern = expectedPattern; } protected BasePatternEvent(String expectedPattern) { this.expectedPattern = Pattern.compile(expectedPattern); } protected boolean verifyPatternMatch(String text) { if (this.expectedPattern == null) { return false; } return this.expectedPattern.matcher(text).matches(); } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((expectedPattern == null) ? 0 : expectedPattern.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; BasePatternEvent other = (BasePatternEvent) obj; if (expectedPattern == null) { if (other.expectedPattern != null)
				return false; } else if (!expectedPattern.equals(other.expectedPattern))
			return false; return true; } @Override
	public String toString() { return ""BasePatternEvent [expectedPattern="" + expectedPattern + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.event.base; 
import java.util.regex.Pattern; 
import co.aurasphere.botmill.fb.bean.FbBotMillBean; import co.aurasphere.botmill.fb.event.FbBotMillEvent; 
  public abstract class BasePatternEvent extends FbBotMillBean implements
		FbBotMillEvent { /**
 * Base class for a {@link FbBotMillEvent} that triggers when a pattern is
 * matched.
 * 
 * @author Donato Rimenti
 * 
 */  public Pattern expectedPattern; /**
	 * The expected pattern to match in order to trigger this event.
	 */  protected BasePatternEvent(Pattern expectedPattern) { this.expectedPattern = expectedPattern; } /**
	 * Instantiates a new BasePatternEvent.
	 *
	 * @param expectedPattern
	 *            the {@link #expectedPattern}.
	 */  protected BasePatternEvent(String expectedPattern) { this.expectedPattern = Pattern.compile(expectedPattern); } /**
	 * Instantiates a new BasePatternEvent.
	 *
	 * @param expectedPattern
	 *            the {@link #expectedPattern}.
	 */  protected boolean verifyPatternMatch(String text) { if (this.expectedPattern == null) { return false; } return this.expectedPattern.matcher(text).matches(); } /**
	 * Verify pattern match.
	 *
	 * @param text
	 *            the string that we match against the {@link #expectedPattern}
	 *            object.
	 * @return true, if successful
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((expectedPattern == null) ? 0 : expectedPattern.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; BasePatternEvent other = (BasePatternEvent) obj; if (expectedPattern == null) { if (other.expectedPattern != null)
				return false; } else if (!expectedPattern.equals(other.expectedPattern))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""BasePatternEvent [expectedPattern="" + expectedPattern + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.bean.FbBotMillBean#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/event/base/BaseStringEvent.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.event.base;

import co.aurasphere.botmill.fb.bean.FbBotMillBean;
import co.aurasphere.botmill.fb.event.FbBotMillEvent;


/**
 * Base class for a {@link FbBotMillEvent} that triggers when an exact text is
 * matched, case sensitive or not.
 * 
 * @author Donato Rimenti
 */
public abstract class BaseStringEvent extends FbBotMillBean implements
		FbBotMillEvent {

	/**
	 * The text to be matched in order to trigger this event.
	 */
	protected String expectedString;

	/**
	 * Whether the match should be case sensitive or not.
	 */
	protected boolean caseSensitive;

	/**
	 * Instantiates a new BaseStringEvent.
	 *
	 * @param expectedString
	 *            the {@link #expectedString}.
	 * @param caseSensitive
	 *            the {@link #caseSensitive}.
	 */
	public BaseStringEvent(String expectedString, boolean caseSensitive) {
		if (caseSensitive == false && expectedString != null) {
			this.expectedString = expectedString.toLowerCase();
		}else {
			this.expectedString = expectedString;
		}
		this.caseSensitive = caseSensitive;
	}

	/**
	 * Instantiates a new BaseStringEvent.
	 *
	 * @param expectedString
	 *            the {@link #expectedString}.
	 */
	public BaseStringEvent(String expectedString) {
		this.expectedString = expectedString;
		this.caseSensitive = true;
	}

	/**
	 * Verify string match.
	 *
	 * @param text
	 *            the string used to check if it matches the event string.
	 * @return true, if successful
	 */
	protected boolean verifyStringMatch(String text) {
		if (text == null) {
			return false;
		}
		if (!this.caseSensitive) {
			text = text.toLowerCase();
		}
		return text.equals(this.expectedString);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + (caseSensitive ? 1231 : 1237);
		result = prime * result
				+ ((expectedString == null) ? 0 : expectedString.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		BaseStringEvent other = (BaseStringEvent) obj;
		if (caseSensitive != other.caseSensitive)
			return false;
		if (expectedString == null) {
			if (other.expectedString != null)
				return false;
		} else if (!expectedString.equals(other.expectedString))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.bean.FbBotMillBean#toString()
	 */
	@Override
	public String toString() {
		return ""BaseStringEvent [expectedString="" + expectedString
				+ "", caseSensitive="" + caseSensitive + ""]"";
	}
}
","package co.aurasphere.botmill.fb.event.base; public abstract class BaseStringEvent extends FbBotMillBean implements
		FbBotMillEvent { protected String expectedString; protected boolean caseSensitive; public BaseStringEvent(String expectedString, boolean caseSensitive) { if (caseSensitive == false && expectedString != null) { this.expectedString = expectedString.toLowerCase(); } else { this.expectedString = expectedString; } this.caseSensitive = caseSensitive; } public BaseStringEvent(String expectedString) { this.expectedString = expectedString; this.caseSensitive = true; } protected boolean verifyStringMatch(String text) { if (text == null) { return false; } if (!this.caseSensitive) { text = text.toLowerCase(); } return text.equals(this.expectedString); } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + (caseSensitive ? 1231 : 1237); result = prime * result
				+ ((expectedString == null) ? 0 : expectedString.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; BaseStringEvent other = (BaseStringEvent) obj; if (caseSensitive != other.caseSensitive)
			return false; if (expectedString == null) { if (other.expectedString != null)
				return false; } else if (!expectedString.equals(other.expectedString))
			return false; return true; } @Override
	public String toString() { return ""BaseStringEvent [expectedString="" + expectedString
				+ "", caseSensitive="" + caseSensitive + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.event.base; public abstract class BaseStringEvent extends FbBotMillBean implements
		FbBotMillEvent { protected String expectedString; protected boolean caseSensitive; public BaseStringEvent(String expectedString, boolean caseSensitive) { if (caseSensitive == false && expectedString != null) { this.expectedString = expectedString.toLowerCase(); } else { this.expectedString = expectedString; } this.caseSensitive = caseSensitive; } public BaseStringEvent(String expectedString) { this.expectedString = expectedString; this.caseSensitive = true; } protected boolean verifyStringMatch(String text) { if (text == null) { return false; } if (!this.caseSensitive) { text = text.toLowerCase(); } return text.equals(this.expectedString); } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + (caseSensitive ? 1231 : 1237); result = prime * result
				+ ((expectedString == null) ? 0 : expectedString.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; BaseStringEvent other = (BaseStringEvent) obj; if (caseSensitive != other.caseSensitive)
			return false; if (expectedString == null) { if (other.expectedString != null)
				return false; } else if (!expectedString.equals(other.expectedString))
			return false; return true; } @Override
	public String toString() { return ""BaseStringEvent [expectedString="" + expectedString
				+ "", caseSensitive="" + caseSensitive + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.event.base; 
import co.aurasphere.botmill.fb.bean.FbBotMillBean; import co.aurasphere.botmill.fb.event.FbBotMillEvent; 
  public abstract class BaseStringEvent extends FbBotMillBean implements
		FbBotMillEvent { /**
 * Base class for a {@link FbBotMillEvent} that triggers when an exact text is
 * matched, case sensitive or not.
 * 
 * @author Donato Rimenti
 */  protected String expectedString; /**
	 * The text to be matched in order to trigger this event.
	 */  protected boolean caseSensitive; /**
	 * Whether the match should be case sensitive or not.
	 */  public BaseStringEvent(String expectedString, boolean caseSensitive) { if (caseSensitive == false && expectedString != null) { this.expectedString = expectedString.toLowerCase(); } else { this.expectedString = expectedString; } this.caseSensitive = caseSensitive; } /**
	 * Instantiates a new BaseStringEvent.
	 *
	 * @param expectedString
	 *            the {@link #expectedString}.
	 * @param caseSensitive
	 *            the {@link #caseSensitive}.
	 */  public BaseStringEvent(String expectedString) { this.expectedString = expectedString; this.caseSensitive = true; } /**
	 * Instantiates a new BaseStringEvent.
	 *
	 * @param expectedString
	 *            the {@link #expectedString}.
	 */  protected boolean verifyStringMatch(String text) { if (text == null) { return false; } if (!this.caseSensitive) { text = text.toLowerCase(); } return text.equals(this.expectedString); } /**
	 * Verify string match.
	 *
	 * @param text
	 *            the string used to check if it matches the event string.
	 * @return true, if successful
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + (caseSensitive ? 1231 : 1237); result = prime * result
				+ ((expectedString == null) ? 0 : expectedString.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; BaseStringEvent other = (BaseStringEvent) obj; if (caseSensitive != other.caseSensitive)
			return false; if (expectedString == null) { if (other.expectedString != null)
				return false; } else if (!expectedString.equals(other.expectedString))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""BaseStringEvent [expectedString="" + expectedString
				+ "", caseSensitive="" + caseSensitive + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.bean.FbBotMillBean#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/event/media/AudioEvent.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.event.media;

import co.aurasphere.botmill.fb.event.FbBotMillEvent;
import co.aurasphere.botmill.fb.event.FbBotMillEventType;
import co.aurasphere.botmill.fb.event.base.BaseMediaEvent;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;


/**
 * An {@link FbBotMillEvent} that triggers whenever the users sends a text
 * message that matches an exact String.
 * 
 * @author Alvin Reyes
 */
public class AudioEvent extends BaseMediaEvent {
	
	/**
	 * This method is called to verify that the message envelope contains the
	 * payload to verify that we are processing a location input.
	 * 
	 * @param envelope
	 *            the message envelope that contains the location payload.
	 * @return true if the text message received from the callback is a
	 *         location.
	 */
	public final boolean verifyEventCondition(MessageEnvelope envelope) {
		return eventKind(envelope) == FbBotMillEventType.AUDIO;
	}


}
",package co.aurasphere.botmill.fb.event.media; public class AudioEvent extends BaseMediaEvent { public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.AUDIO; } },0 0 0 0 0 0 0,package co.aurasphere.botmill.fb.event.media; public class AudioEvent extends BaseMediaEvent { public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.AUDIO; } } ,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.event.media; 
import co.aurasphere.botmill.fb.event.FbBotMillEvent; import co.aurasphere.botmill.fb.event.FbBotMillEventType; import co.aurasphere.botmill.fb.event.base.BaseMediaEvent; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; 
  public class AudioEvent extends BaseMediaEvent { /**
 * An {@link FbBotMillEvent} that triggers whenever the users sends a text
 * message that matches an exact String.
 * 
 * @author Alvin Reyes
 */ 	 public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.AUDIO; } /**
	 * This method is called to verify that the message envelope contains the
	 * payload to verify that we are processing a location input.
	 * 
	 * @param envelope
	 *            the message envelope that contains the location payload.
	 * @return true if the text message received from the callback is a
	 *         location.
	 */ } 
 "
src/main/java/co/aurasphere/botmill/fb/event/media/FileEvent.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.event.media;

import co.aurasphere.botmill.fb.event.FbBotMillEvent;
import co.aurasphere.botmill.fb.event.FbBotMillEventType;
import co.aurasphere.botmill.fb.event.base.BaseMediaEvent;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;


/**
 * An {@link FbBotMillEvent} that triggers whenever the users sends a text
 * message that matches an exact String.
 * 
 * @author Alvin Reyes
 */
public class FileEvent extends BaseMediaEvent {
	
	/**
	 * This method is called to verify that the message envelope contains the
	 * payload to verify that we are processing a location input.
	 * 
	 * @param envelope
	 *            the message envelope that contains the location payload.
	 * @return true if the text message received from the callback is a
	 *         location.
	 */
	public final boolean verifyEventCondition(MessageEnvelope envelope) {
		return eventKind(envelope) == FbBotMillEventType.FILE;
	}


}
",package co.aurasphere.botmill.fb.event.media; public class FileEvent extends BaseMediaEvent { public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.FILE; } },0 0 0 0 0 0 0,package co.aurasphere.botmill.fb.event.media; public class FileEvent extends BaseMediaEvent { public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.FILE; } } ,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.event.media; 
import co.aurasphere.botmill.fb.event.FbBotMillEvent; import co.aurasphere.botmill.fb.event.FbBotMillEventType; import co.aurasphere.botmill.fb.event.base.BaseMediaEvent; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; 
  public class FileEvent extends BaseMediaEvent { /**
 * An {@link FbBotMillEvent} that triggers whenever the users sends a text
 * message that matches an exact String.
 * 
 * @author Alvin Reyes
 */ 	 public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.FILE; } /**
	 * This method is called to verify that the message envelope contains the
	 * payload to verify that we are processing a location input.
	 * 
	 * @param envelope
	 *            the message envelope that contains the location payload.
	 * @return true if the text message received from the callback is a
	 *         location.
	 */ } 
 "
src/main/java/co/aurasphere/botmill/fb/event/media/ImageEvent.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.event.media;

import co.aurasphere.botmill.fb.event.FbBotMillEvent;
import co.aurasphere.botmill.fb.event.FbBotMillEventType;
import co.aurasphere.botmill.fb.event.base.BaseMediaEvent;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;


/**
 * An {@link FbBotMillEvent} that triggers whenever the users sends a text
 * message that matches an exact String.
 * 
 * @author Alvin Reyes
 */
public class ImageEvent extends BaseMediaEvent {
	
	/**
	 * This method is called to verify that the message envelope contains the
	 * payload to verify that we are processing a location input.
	 * 
	 * @param envelope
	 *            the message envelope that contains the location payload.
	 * @return true if the text message received from the callback is a
	 *         location.
	 */
	public final boolean verifyEventCondition(MessageEnvelope envelope) {
		return eventKind(envelope) == FbBotMillEventType.IMAGE;
	}


}
",package co.aurasphere.botmill.fb.event.media; public class ImageEvent extends BaseMediaEvent { public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.IMAGE; } },0 0 0 0 0 0 0,package co.aurasphere.botmill.fb.event.media; public class ImageEvent extends BaseMediaEvent { public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.IMAGE; } } ,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.event.media; 
import co.aurasphere.botmill.fb.event.FbBotMillEvent; import co.aurasphere.botmill.fb.event.FbBotMillEventType; import co.aurasphere.botmill.fb.event.base.BaseMediaEvent; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; 
  public class ImageEvent extends BaseMediaEvent { /**
 * An {@link FbBotMillEvent} that triggers whenever the users sends a text
 * message that matches an exact String.
 * 
 * @author Alvin Reyes
 */ 	 public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.IMAGE; } /**
	 * This method is called to verify that the message envelope contains the
	 * payload to verify that we are processing a location input.
	 * 
	 * @param envelope
	 *            the message envelope that contains the location payload.
	 * @return true if the text message received from the callback is a
	 *         location.
	 */ } 
 "
src/main/java/co/aurasphere/botmill/fb/event/media/VideoEvent.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.event.media;

import co.aurasphere.botmill.fb.event.FbBotMillEvent;
import co.aurasphere.botmill.fb.event.FbBotMillEventType;
import co.aurasphere.botmill.fb.event.base.BaseMediaEvent;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;


/**
 * An {@link FbBotMillEvent} that triggers whenever the users sends a text
 * message that matches an exact String.
 * 
 * @author Alvin Reyes
 */
public class VideoEvent extends BaseMediaEvent {
	
	/**
	 * This method is called to verify that the message envelope contains the
	 * payload to verify that we are processing a location input.
	 * 
	 * @param envelope
	 *            the message envelope that contains the location payload.
	 * @return true if the text message received from the callback is a
	 *         location.
	 */
	public final boolean verifyEventCondition(MessageEnvelope envelope) {
		return eventKind(envelope) == FbBotMillEventType.VIDEO;
	}


}
",package co.aurasphere.botmill.fb.event.media; public class VideoEvent extends BaseMediaEvent { public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.VIDEO; } },0 0 0 0 0 0 0,package co.aurasphere.botmill.fb.event.media; public class VideoEvent extends BaseMediaEvent { public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.VIDEO; } } ,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.event.media; 
import co.aurasphere.botmill.fb.event.FbBotMillEvent; import co.aurasphere.botmill.fb.event.FbBotMillEventType; import co.aurasphere.botmill.fb.event.base.BaseMediaEvent; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; 
  public class VideoEvent extends BaseMediaEvent { /**
 * An {@link FbBotMillEvent} that triggers whenever the users sends a text
 * message that matches an exact String.
 * 
 * @author Alvin Reyes
 */ 	 public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.VIDEO; } /**
	 * This method is called to verify that the message envelope contains the
	 * payload to verify that we are processing a location input.
	 * 
	 * @param envelope
	 *            the message envelope that contains the location payload.
	 * @return true if the text message received from the callback is a
	 *         location.
	 */ } 
 "
src/main/java/co/aurasphere/botmill/fb/event/message/AnyMessageEvent.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.event.message;

import co.aurasphere.botmill.fb.bean.FbBotMillBean;
import co.aurasphere.botmill.fb.event.FbBotMillEvent;
import co.aurasphere.botmill.fb.event.FbBotMillEventType;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;


/**
 * A {@link FbBotMillEvent} that triggers whenever the users sends a text
 * message.
 * 
 * @author Donato Rimenti
 * 
 */
public class AnyMessageEvent extends FbBotMillBean implements FbBotMillEvent {

	/**
	 * Verify event condition.
	 *
	 * @param envelope
	 *            the envelope
	 * @return true if the incoming callback contains a non-empty, non-null text
	 *         message, false otherwise.
	 */
	public final boolean verifyEventCondition(MessageEnvelope envelope) {
		return eventKind(envelope) == FbBotMillEventType.MESSAGE;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.bean.FbBotMillBean#toString()
	 */
	@Override
	public String toString() {
		return ""AnyMessageEvent []"";
	}

}
","package co.aurasphere.botmill.fb.event.message; public class AnyMessageEvent extends FbBotMillBean implements FbBotMillEvent { public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.MESSAGE; } @Override
	public String toString() { return ""AnyMessageEvent []""; } }",0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.event.message; public class AnyMessageEvent extends FbBotMillBean implements FbBotMillEvent { public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.MESSAGE; } @Override
	public String toString() { return ""AnyMessageEvent []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.event.message; 
import co.aurasphere.botmill.fb.bean.FbBotMillBean; import co.aurasphere.botmill.fb.event.FbBotMillEvent; import co.aurasphere.botmill.fb.event.FbBotMillEventType; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; 
  public class AnyMessageEvent extends FbBotMillBean implements FbBotMillEvent { /**
 * A {@link FbBotMillEvent} that triggers whenever the users sends a text
 * message.
 * 
 * @author Donato Rimenti
 * 
 */  public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.MESSAGE; } /**
	 * Verify event condition.
	 *
	 * @param envelope
	 *            the envelope
	 * @return true if the incoming callback contains a non-empty, non-null text
	 *         message, false otherwise.
	 */  @Override
	public String toString() { return ""AnyMessageEvent []""; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.bean.FbBotMillBean#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/event/message/LocationEvent.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.event.message;

import co.aurasphere.botmill.fb.bean.FbBotMillBean;
import co.aurasphere.botmill.fb.event.FbBotMillEvent;
import co.aurasphere.botmill.fb.event.FbBotMillEventType;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply;


/**
 * An {@link FbBotMillEvent} that triggers whenever the users sends a location
 * using a {@link QuickReply} button.
 * 
 * @author Alvin Reyes
 * 
 */
public class LocationEvent extends FbBotMillBean implements FbBotMillEvent {

	/**
	 * Instantiates a new LocationEvent.
	 */
	public LocationEvent() {
	}

	/**
	 * This method is called to verify that the message envelope contains the
	 * payload to verify that we are processing a location input.
	 * 
	 * @param envelope
	 *            the message envelope that contains the location payload.
	 * @return true if the text message received from the callback is a
	 *         location.
	 */
	public final boolean verifyEventCondition(MessageEnvelope envelope) {
		return eventKind(envelope) == FbBotMillEventType.LOCATION;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.bean.FbBotMillBean#toString()
	 */
	@Override
	public String toString() {
		return ""LocationEvent []"";
	}
}
","package co.aurasphere.botmill.fb.event.message; public class LocationEvent extends FbBotMillBean implements FbBotMillEvent { public LocationEvent() { } public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.LOCATION; } @Override
	public String toString() { return ""LocationEvent []""; } }",0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.event.message; public class LocationEvent extends FbBotMillBean implements FbBotMillEvent { public LocationEvent() { } public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.LOCATION; } @Override
	public String toString() { return ""LocationEvent []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.event.message; 
import co.aurasphere.botmill.fb.bean.FbBotMillBean; import co.aurasphere.botmill.fb.event.FbBotMillEvent; import co.aurasphere.botmill.fb.event.FbBotMillEventType; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply; 
  public class LocationEvent extends FbBotMillBean implements FbBotMillEvent { /**
 * An {@link FbBotMillEvent} that triggers whenever the users sends a location
 * using a {@link QuickReply} button.
 * 
 * @author Alvin Reyes
 * 
 */  public LocationEvent() { } /**
	 * Instantiates a new LocationEvent.
	 */  public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.LOCATION; } /**
	 * This method is called to verify that the message envelope contains the
	 * payload to verify that we are processing a location input.
	 * 
	 * @param envelope
	 *            the message envelope that contains the location payload.
	 * @return true if the text message received from the callback is a
	 *         location.
	 */  @Override
	public String toString() { return ""LocationEvent []""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.bean.FbBotMillBean#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/event/message/MessageEvent.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.event.message;

import co.aurasphere.botmill.fb.event.FbBotMillEvent;
import co.aurasphere.botmill.fb.event.base.BaseStringEvent;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;


/**
 * An {@link FbBotMillEvent} that triggers whenever the users sends a text
 * message that matches an exact String.
 * 
 * @author Donato Rimenti
 */
public class MessageEvent extends BaseStringEvent {

	/**
	 * Instantiates a new MessageEvent.
	 *
	 * @param expectedMessage
	 *            the {@link BaseStringEvent#expectedString}.
	 * @param caseSensitive
	 *            the {@link BaseStringEvent#caseSensitive}.
	 */
	public MessageEvent(String expectedMessage, boolean caseSensitive) {
		super(expectedMessage, caseSensitive);
	}

	/**
	 * Instantiates a new MessageEvent.
	 *
	 * @param expectedMessage
	 *            the {@link BaseStringEvent#expectedString}.
	 */
	public MessageEvent(String expectedMessage) {
		super(expectedMessage);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.event.FbBotMillEvent#verifyEventCondition(co.
	 * aurasphere.botmill.fb.model.incoming.MessageEnvelope)
	 */
	public final boolean verifyEventCondition(MessageEnvelope envelope) {
		String message = safeGetMessage(envelope);
		return verifyStringMatch(message);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.event.base.BaseStringEvent#toString()
	 */
	@Override
	public String toString() {
		return ""MessageEvent [expectedString="" + expectedString
				+ "", caseSensitive="" + caseSensitive + ""]"";
	}

}
","package co.aurasphere.botmill.fb.event.message; public class MessageEvent extends BaseStringEvent { public MessageEvent(String expectedMessage, boolean caseSensitive) { super(expectedMessage, caseSensitive); } public MessageEvent(String expectedMessage) { super(expectedMessage); } public final boolean verifyEventCondition(MessageEnvelope envelope) { String message = safeGetMessage(envelope); return verifyStringMatch(message); } @Override
	public String toString() { return ""MessageEvent [expectedString="" + expectedString
				+ "", caseSensitive="" + caseSensitive + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.event.message; public class MessageEvent extends BaseStringEvent { public MessageEvent(String expectedMessage, boolean caseSensitive) { super(expectedMessage, caseSensitive); } public MessageEvent(String expectedMessage) { super(expectedMessage); } public final boolean verifyEventCondition(MessageEnvelope envelope) { String message = safeGetMessage(envelope); return verifyStringMatch(message); } @Override
	public String toString() { return ""MessageEvent [expectedString="" + expectedString
				+ "", caseSensitive="" + caseSensitive + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.event.message; 
import co.aurasphere.botmill.fb.event.FbBotMillEvent; import co.aurasphere.botmill.fb.event.base.BaseStringEvent; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; 
  public class MessageEvent extends BaseStringEvent { /**
 * An {@link FbBotMillEvent} that triggers whenever the users sends a text
 * message that matches an exact String.
 * 
 * @author Donato Rimenti
 */  public MessageEvent(String expectedMessage, boolean caseSensitive) { super(expectedMessage, caseSensitive); } /**
	 * Instantiates a new MessageEvent.
	 *
	 * @param expectedMessage
	 *            the {@link BaseStringEvent#expectedString}.
	 * @param caseSensitive
	 *            the {@link BaseStringEvent#caseSensitive}.
	 */  public MessageEvent(String expectedMessage) { super(expectedMessage); } /**
	 * Instantiates a new MessageEvent.
	 *
	 * @param expectedMessage
	 *            the {@link BaseStringEvent#expectedString}.
	 */  public final boolean verifyEventCondition(MessageEnvelope envelope) { String message = safeGetMessage(envelope); return verifyStringMatch(message); } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.event.FbBotMillEvent#verifyEventCondition(co.
	 * aurasphere.botmill.fb.model.incoming.MessageEnvelope)
	 */  @Override
	public String toString() { return ""MessageEvent [expectedString="" + expectedString
				+ "", caseSensitive="" + caseSensitive + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.event.base.BaseStringEvent#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/event/message/MessagePatternEvent.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.event.message;

import java.util.regex.Pattern;

import co.aurasphere.botmill.fb.event.FbBotMillEvent;
import co.aurasphere.botmill.fb.event.base.BasePatternEvent;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;


/**
 * An {@link FbBotMillEvent} that triggers whenever the users sends a text
 * message that matches a {@link Pattern}.
 * 
 * @author Donato Rimenti
 * 
 */
public class MessagePatternEvent extends BasePatternEvent {

	/**
	 * Instantiates a new MessagePatternEvent.
	 *
	 * @param expectedPattern
	 *            the {@link BasePatternEvent#expectedPattern}.
	 */
	public MessagePatternEvent(Pattern expectedPattern) {
		super(expectedPattern);
	}

	/**
	 * Instantiates a new MessagePatternEvent.
	 *
	 * @param expectedPattern
	 *            the {@link BasePatternEvent#expectedPattern}.
	 */
	public MessagePatternEvent(String expectedPattern) {
		super(expectedPattern);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.event.FbBotMillEvent#verifyEventCondition(co.
	 * aurasphere.botmill.fb.model.incoming.MessageEnvelope)
	 */
	public final boolean verifyEventCondition(MessageEnvelope envelope) {
		String message = safeGetMessage(envelope);
		return verifyPatternMatch(message);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.event.base.BasePatternEvent#toString()
	 */
	@Override
	public String toString() {
		return ""MessagePatternEvent [expectedPattern="" + expectedPattern + ""]"";
	}
}
","package co.aurasphere.botmill.fb.event.message; public class MessagePatternEvent extends BasePatternEvent { public MessagePatternEvent(Pattern expectedPattern) { super(expectedPattern); } public MessagePatternEvent(String expectedPattern) { super(expectedPattern); } public final boolean verifyEventCondition(MessageEnvelope envelope) { String message = safeGetMessage(envelope); return verifyPatternMatch(message); } @Override
	public String toString() { return ""MessagePatternEvent [expectedPattern="" + expectedPattern + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.event.message; public class MessagePatternEvent extends BasePatternEvent { public MessagePatternEvent(Pattern expectedPattern) { super(expectedPattern); } public MessagePatternEvent(String expectedPattern) { super(expectedPattern); } public final boolean verifyEventCondition(MessageEnvelope envelope) { String message = safeGetMessage(envelope); return verifyPatternMatch(message); } @Override
	public String toString() { return ""MessagePatternEvent [expectedPattern="" + expectedPattern + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.event.message; 
import java.util.regex.Pattern; 
import co.aurasphere.botmill.fb.event.FbBotMillEvent; import co.aurasphere.botmill.fb.event.base.BasePatternEvent; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; 
  public class MessagePatternEvent extends BasePatternEvent { /**
 * An {@link FbBotMillEvent} that triggers whenever the users sends a text
 * message that matches a {@link Pattern}.
 * 
 * @author Donato Rimenti
 * 
 */  public MessagePatternEvent(Pattern expectedPattern) { super(expectedPattern); } /**
	 * Instantiates a new MessagePatternEvent.
	 *
	 * @param expectedPattern
	 *            the {@link BasePatternEvent#expectedPattern}.
	 */  public MessagePatternEvent(String expectedPattern) { super(expectedPattern); } /**
	 * Instantiates a new MessagePatternEvent.
	 *
	 * @param expectedPattern
	 *            the {@link BasePatternEvent#expectedPattern}.
	 */  public final boolean verifyEventCondition(MessageEnvelope envelope) { String message = safeGetMessage(envelope); return verifyPatternMatch(message); } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.event.FbBotMillEvent#verifyEventCondition(co.
	 * aurasphere.botmill.fb.model.incoming.MessageEnvelope)
	 */  @Override
	public String toString() { return ""MessagePatternEvent [expectedPattern="" + expectedPattern + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.event.base.BasePatternEvent#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/event/message/QuickReplyMessageEvent.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.event.message;

import co.aurasphere.botmill.fb.event.FbBotMillEvent;
import co.aurasphere.botmill.fb.event.base.BaseStringEvent;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;


/**
 * An {@link FbBotMillEvent} that processes all the incoming callbacks that
 * contains a specific text message from Facebook's Messenger Platform.
 * 
 * @author Alvin Reyes
 */
public class QuickReplyMessageEvent extends BaseStringEvent {

	/**
	 * Instantiates a new quick reply message event.
	 *
	 * @param expectedPayload
	 *            the expected payload
	 * @param caseSensitive
	 *            the case sensitive
	 */
	public QuickReplyMessageEvent(String expectedPayload, boolean caseSensitive) {
		super(expectedPayload, caseSensitive);
	}

	/**
	 * Instantiates a new quick reply message event.
	 *
	 * @param expectedPayload
	 *            the expected payload
	 */
	public QuickReplyMessageEvent(String expectedPayload) {
		super(expectedPayload);
	}

	/**
	 * Verify event condition.
	 *
	 * @param envelope
	 *            the envelope
	 * @return true if the text message received by the callback equals the
	 *         expected message, false otherwise.
	 */
	public final boolean verifyEventCondition(MessageEnvelope envelope) {
		String message = safeGetQuickReplyPayload(envelope);
		if (caseSensitive) {
			expectedString = expectedString.toLowerCase();
			message = message.toLowerCase();
		}
		return message.equals(expectedString);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.event.base.BaseStringEvent#toString()
	 */
	@Override
	public String toString() {
		return ""QuickReplyMessageEvent [expectedString="" + expectedString + ""]"";
	}

}
","package co.aurasphere.botmill.fb.event.message; public class QuickReplyMessageEvent extends BaseStringEvent { public QuickReplyMessageEvent(String expectedPayload, boolean caseSensitive) { super(expectedPayload, caseSensitive); } public QuickReplyMessageEvent(String expectedPayload) { super(expectedPayload); } public final boolean verifyEventCondition(MessageEnvelope envelope) { String message = safeGetQuickReplyPayload(envelope); if (caseSensitive) { expectedString = expectedString.toLowerCase(); message = message.toLowerCase(); } return message.equals(expectedString); } @Override
	public String toString() { return ""QuickReplyMessageEvent [expectedString="" + expectedString + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.event.message; public class QuickReplyMessageEvent extends BaseStringEvent { public QuickReplyMessageEvent(String expectedPayload, boolean caseSensitive) { super(expectedPayload, caseSensitive); } public QuickReplyMessageEvent(String expectedPayload) { super(expectedPayload); } public final boolean verifyEventCondition(MessageEnvelope envelope) { String message = safeGetQuickReplyPayload(envelope); if (caseSensitive) { expectedString = expectedString.toLowerCase(); message = message.toLowerCase(); } return message.equals(expectedString); } @Override
	public String toString() { return ""QuickReplyMessageEvent [expectedString="" + expectedString + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.event.message; 
import co.aurasphere.botmill.fb.event.FbBotMillEvent; import co.aurasphere.botmill.fb.event.base.BaseStringEvent; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; 
  public class QuickReplyMessageEvent extends BaseStringEvent { /**
 * An {@link FbBotMillEvent} that processes all the incoming callbacks that
 * contains a specific text message from Facebook's Messenger Platform.
 * 
 * @author Alvin Reyes
 */  public QuickReplyMessageEvent(String expectedPayload, boolean caseSensitive) { super(expectedPayload, caseSensitive); } /**
	 * Instantiates a new quick reply message event.
	 *
	 * @param expectedPayload
	 *            the expected payload
	 * @param caseSensitive
	 *            the case sensitive
	 */  public QuickReplyMessageEvent(String expectedPayload) { super(expectedPayload); } /**
	 * Instantiates a new quick reply message event.
	 *
	 * @param expectedPayload
	 *            the expected payload
	 */  public final boolean verifyEventCondition(MessageEnvelope envelope) { String message = safeGetQuickReplyPayload(envelope); if (caseSensitive) { expectedString = expectedString.toLowerCase(); message = message.toLowerCase(); } return message.equals(expectedString); } /**
	 * Verify event condition.
	 *
	 * @param envelope
	 *            the envelope
	 * @return true if the text message received by the callback equals the
	 *         expected message, false otherwise.
	 */  @Override
	public String toString() { return ""QuickReplyMessageEvent [expectedString="" + expectedString + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.event.base.BaseStringEvent#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/event/message/QuickReplyMessagePatternEvent.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.event.message;

import java.util.regex.Pattern;

import co.aurasphere.botmill.fb.event.FbBotMillEvent;
import co.aurasphere.botmill.fb.event.base.BasePatternEvent;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;


/**
 * An {@link FbBotMillEvent} that processes all the incoming callbacks that
 * contains a text message which matches against a defined pattern from
 * Facebook's Messenger Platform.
 * 
 * @author Alvin Reyes
 */
public class QuickReplyMessagePatternEvent extends BasePatternEvent {

	/**
	 * Instantiates a new quick reply message event pattern.
	 *
	 * @param expectedPattern
	 *            the expected pattern
	 * @see BasePatternEvent#BasePatternEvent(Pattern)
	 */
	public QuickReplyMessagePatternEvent(Pattern expectedPattern) {
		super(expectedPattern);
	}

	/**
	 * Instantiates a new quick reply message event pattern.
	 *
	 * @param expectedPattern
	 *            the expected pattern
	 * @see BasePatternEvent#BasePatternEvent(String)
	 */
	public QuickReplyMessagePatternEvent(String expectedPattern) {
		super(expectedPattern);
	}

	/**
	 * Verify event condition.
	 *
	 * @param envelope
	 *            the envelope
	 * @return true if the text message received from the callback matches the
	 *         expected pattern, false otherwise.
	 */
	public final boolean verifyEventCondition(MessageEnvelope envelope) {
		String message = safeGetQuickReplyPayload(envelope);
		return expectedPattern.matcher(message).matches();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.event.base.BasePatternEvent#toString()
	 */
	@Override
	public String toString() {
		return ""QuickReplyMessagePatternEvent [expectedPattern=""
				+ expectedPattern + ""]"";
	}
}
","package co.aurasphere.botmill.fb.event.message; public class QuickReplyMessagePatternEvent extends BasePatternEvent { public QuickReplyMessagePatternEvent(Pattern expectedPattern) { super(expectedPattern); } public QuickReplyMessagePatternEvent(String expectedPattern) { super(expectedPattern); } public final boolean verifyEventCondition(MessageEnvelope envelope) { String message = safeGetQuickReplyPayload(envelope); return expectedPattern.matcher(message).matches(); } @Override
	public String toString() { return ""QuickReplyMessagePatternEvent [expectedPattern=""
				+ expectedPattern + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.event.message; public class QuickReplyMessagePatternEvent extends BasePatternEvent { public QuickReplyMessagePatternEvent(Pattern expectedPattern) { super(expectedPattern); } public QuickReplyMessagePatternEvent(String expectedPattern) { super(expectedPattern); } public final boolean verifyEventCondition(MessageEnvelope envelope) { String message = safeGetQuickReplyPayload(envelope); return expectedPattern.matcher(message).matches(); } @Override
	public String toString() { return ""QuickReplyMessagePatternEvent [expectedPattern=""
				+ expectedPattern + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.event.message; 
import java.util.regex.Pattern; 
import co.aurasphere.botmill.fb.event.FbBotMillEvent; import co.aurasphere.botmill.fb.event.base.BasePatternEvent; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; 
  public class QuickReplyMessagePatternEvent extends BasePatternEvent { /**
 * An {@link FbBotMillEvent} that processes all the incoming callbacks that
 * contains a text message which matches against a defined pattern from
 * Facebook's Messenger Platform.
 * 
 * @author Alvin Reyes
 */  public QuickReplyMessagePatternEvent(Pattern expectedPattern) { super(expectedPattern); } /**
	 * Instantiates a new quick reply message event pattern.
	 *
	 * @param expectedPattern
	 *            the expected pattern
	 * @see BasePatternEvent#BasePatternEvent(Pattern)
	 */  public QuickReplyMessagePatternEvent(String expectedPattern) { super(expectedPattern); } /**
	 * Instantiates a new quick reply message event pattern.
	 *
	 * @param expectedPattern
	 *            the expected pattern
	 * @see BasePatternEvent#BasePatternEvent(String)
	 */  public final boolean verifyEventCondition(MessageEnvelope envelope) { String message = safeGetQuickReplyPayload(envelope); return expectedPattern.matcher(message).matches(); } /**
	 * Verify event condition.
	 *
	 * @param envelope
	 *            the envelope
	 * @return true if the text message received from the callback matches the
	 *         expected pattern, false otherwise.
	 */  @Override
	public String toString() { return ""QuickReplyMessagePatternEvent [expectedPattern=""
				+ expectedPattern + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.event.base.BasePatternEvent#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/event/postback/AnyPostbackEvent.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.event.postback;

import co.aurasphere.botmill.fb.bean.FbBotMillBean;
import co.aurasphere.botmill.fb.event.FbBotMillEvent;
import co.aurasphere.botmill.fb.event.FbBotMillEventType;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;


/**
 * A {@link FbBotMillEvent} that triggers whenever the users sends a payload
 * back by pressing a button or similar.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */
public class AnyPostbackEvent extends FbBotMillBean implements FbBotMillEvent {

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.event.FbBotMillEvent#verifyEventCondition(co.
	 * aurasphere.botmill.fb.model.incoming.MessageEnvelope)
	 */
	public final boolean verifyEventCondition(MessageEnvelope envelope) {
		return eventKind(envelope) == FbBotMillEventType.POSTBACK;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.bean.FbBotMillBean#toString()
	 */
	@Override
	public String toString() {
		return ""AnyPostbackEvent []"";
	}

}
","package co.aurasphere.botmill.fb.event.postback; public class AnyPostbackEvent extends FbBotMillBean implements FbBotMillEvent { public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.POSTBACK; } @Override
	public String toString() { return ""AnyPostbackEvent []""; } }",0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.event.postback; public class AnyPostbackEvent extends FbBotMillBean implements FbBotMillEvent { public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.POSTBACK; } @Override
	public String toString() { return ""AnyPostbackEvent []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.event.postback; 
import co.aurasphere.botmill.fb.bean.FbBotMillBean; import co.aurasphere.botmill.fb.event.FbBotMillEvent; import co.aurasphere.botmill.fb.event.FbBotMillEventType; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; 
  public class AnyPostbackEvent extends FbBotMillBean implements FbBotMillEvent { /**
 * A {@link FbBotMillEvent} that triggers whenever the users sends a payload
 * back by pressing a button or similar.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */  public final boolean verifyEventCondition(MessageEnvelope envelope) { return eventKind(envelope) == FbBotMillEventType.POSTBACK; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.event.FbBotMillEvent#verifyEventCondition(co.
	 * aurasphere.botmill.fb.model.incoming.MessageEnvelope)
	 */  @Override
	public String toString() { return ""AnyPostbackEvent []""; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.bean.FbBotMillBean#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/event/postback/PostbackEvent.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.event.postback;

import co.aurasphere.botmill.fb.event.FbBotMillEvent;
import co.aurasphere.botmill.fb.event.base.BaseStringEvent;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;


/**
 * An {@link FbBotMillEvent} that triggers whenever the users sends a a payload
 * back by pressing a button or similar that matches an exact String.
 * 
 * @author Donato Rimenti
 * 
 */
public class PostbackEvent extends BaseStringEvent {

	/**
	 * Instantiates a new PostbackEvent.
	 *
	 * @param expectedPayload
	 *            the {@link BaseStringEvent#expectedString}.
	 * @param caseSensitive
	 *            the {@link BaseStringEvent#caseSensitive}.
	 */
	public PostbackEvent(String expectedPayload, boolean caseSensitive) {
		super(expectedPayload, caseSensitive);
	}

	/**
	 * Instantiates a new PostbackEvent.
	 *
	 * @param expectedPayload
	 *            the {@link BaseStringEvent#expectedString}.
	 */
	public PostbackEvent(String expectedPayload) {
		super(expectedPayload);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.event.FbBotMillEvent#verifyEventCondition(co.
	 * aurasphere.botmill.fb.model.incoming.MessageEnvelope)
	 */
	public final boolean verifyEventCondition(MessageEnvelope envelope) {
		String payload = safeGetPostbackPayload(envelope);
		return verifyStringMatch(payload);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.event.base.BaseStringEvent#toString()
	 */
	@Override
	public String toString() {
		return ""PostbackEvent [expectedString="" + expectedString
				+ "", caseSensitive="" + caseSensitive + ""]"";
	}

}
","package co.aurasphere.botmill.fb.event.postback; public class PostbackEvent extends BaseStringEvent { public PostbackEvent(String expectedPayload, boolean caseSensitive) { super(expectedPayload, caseSensitive); } public PostbackEvent(String expectedPayload) { super(expectedPayload); } public final boolean verifyEventCondition(MessageEnvelope envelope) { String payload = safeGetPostbackPayload(envelope); return verifyStringMatch(payload); } @Override
	public String toString() { return ""PostbackEvent [expectedString="" + expectedString
				+ "", caseSensitive="" + caseSensitive + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.event.postback; public class PostbackEvent extends BaseStringEvent { public PostbackEvent(String expectedPayload, boolean caseSensitive) { super(expectedPayload, caseSensitive); } public PostbackEvent(String expectedPayload) { super(expectedPayload); } public final boolean verifyEventCondition(MessageEnvelope envelope) { String payload = safeGetPostbackPayload(envelope); return verifyStringMatch(payload); } @Override
	public String toString() { return ""PostbackEvent [expectedString="" + expectedString
				+ "", caseSensitive="" + caseSensitive + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.event.postback; 
import co.aurasphere.botmill.fb.event.FbBotMillEvent; import co.aurasphere.botmill.fb.event.base.BaseStringEvent; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; 
  public class PostbackEvent extends BaseStringEvent { /**
 * An {@link FbBotMillEvent} that triggers whenever the users sends a a payload
 * back by pressing a button or similar that matches an exact String.
 * 
 * @author Donato Rimenti
 * 
 */  public PostbackEvent(String expectedPayload, boolean caseSensitive) { super(expectedPayload, caseSensitive); } /**
	 * Instantiates a new PostbackEvent.
	 *
	 * @param expectedPayload
	 *            the {@link BaseStringEvent#expectedString}.
	 * @param caseSensitive
	 *            the {@link BaseStringEvent#caseSensitive}.
	 */  public PostbackEvent(String expectedPayload) { super(expectedPayload); } /**
	 * Instantiates a new PostbackEvent.
	 *
	 * @param expectedPayload
	 *            the {@link BaseStringEvent#expectedString}.
	 */  public final boolean verifyEventCondition(MessageEnvelope envelope) { String payload = safeGetPostbackPayload(envelope); return verifyStringMatch(payload); } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.event.FbBotMillEvent#verifyEventCondition(co.
	 * aurasphere.botmill.fb.model.incoming.MessageEnvelope)
	 */  @Override
	public String toString() { return ""PostbackEvent [expectedString="" + expectedString
				+ "", caseSensitive="" + caseSensitive + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.event.base.BaseStringEvent#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/event/postback/PostbackPatternEvent.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.event.postback;

import java.util.regex.Pattern;

import co.aurasphere.botmill.fb.event.FbBotMillEvent;
import co.aurasphere.botmill.fb.event.base.BasePatternEvent;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;


/**
 * An {@link FbBotMillEvent} that triggers whenever the users sends a a payload
 * back by pressing a button or similar that matches a {@link Pattern}.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 */
public class PostbackPatternEvent extends BasePatternEvent {

	/**
	 * Instantiates a new PostbackPatternEvent.
	 *
	 * @param expectedPattern
	 *            the {@link BasePatternEvent#expectedPattern}.
	 */
	public PostbackPatternEvent(Pattern expectedPattern) {
		super(expectedPattern);
	}

	/**
	 * Instantiates a new PostbackPatternEvent.
	 *
	 * @param expectedPattern
	 *            the {@link BasePatternEvent#expectedPattern}.
	 */
	public PostbackPatternEvent(String expectedPattern) {
		super(expectedPattern);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.event.FbBotMillEvent#verifyEventCondition(co.
	 * aurasphere.botmill.fb.model.incoming.MessageEnvelope)
	 */
	public final boolean verifyEventCondition(MessageEnvelope envelope) {
		String payload = safeGetPostbackPayload(envelope);
		return verifyPatternMatch(payload);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.event.base.BasePatternEvent#toString()
	 */
	@Override
	public String toString() {
		return ""PostbackPatternEvent [expectedPattern="" + expectedPattern + ""]"";
	}
}
","package co.aurasphere.botmill.fb.event.postback; public class PostbackPatternEvent extends BasePatternEvent { public PostbackPatternEvent(Pattern expectedPattern) { super(expectedPattern); } public PostbackPatternEvent(String expectedPattern) { super(expectedPattern); } public final boolean verifyEventCondition(MessageEnvelope envelope) { String payload = safeGetPostbackPayload(envelope); return verifyPatternMatch(payload); } @Override
	public String toString() { return ""PostbackPatternEvent [expectedPattern="" + expectedPattern + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.event.postback; public class PostbackPatternEvent extends BasePatternEvent { public PostbackPatternEvent(Pattern expectedPattern) { super(expectedPattern); } public PostbackPatternEvent(String expectedPattern) { super(expectedPattern); } public final boolean verifyEventCondition(MessageEnvelope envelope) { String payload = safeGetPostbackPayload(envelope); return verifyPatternMatch(payload); } @Override
	public String toString() { return ""PostbackPatternEvent [expectedPattern="" + expectedPattern + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.event.postback; 
import java.util.regex.Pattern; 
import co.aurasphere.botmill.fb.event.FbBotMillEvent; import co.aurasphere.botmill.fb.event.base.BasePatternEvent; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; 
  public class PostbackPatternEvent extends BasePatternEvent { /**
 * An {@link FbBotMillEvent} that triggers whenever the users sends a a payload
 * back by pressing a button or similar that matches a {@link Pattern}.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 */  public PostbackPatternEvent(Pattern expectedPattern) { super(expectedPattern); } /**
	 * Instantiates a new PostbackPatternEvent.
	 *
	 * @param expectedPattern
	 *            the {@link BasePatternEvent#expectedPattern}.
	 */  public PostbackPatternEvent(String expectedPattern) { super(expectedPattern); } /**
	 * Instantiates a new PostbackPatternEvent.
	 *
	 * @param expectedPattern
	 *            the {@link BasePatternEvent#expectedPattern}.
	 */  public final boolean verifyEventCondition(MessageEnvelope envelope) { String payload = safeGetPostbackPayload(envelope); return verifyPatternMatch(payload); } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.event.FbBotMillEvent#verifyEventCondition(co.
	 * aurasphere.botmill.fb.model.incoming.MessageEnvelope)
	 */  @Override
	public String toString() { return ""PostbackPatternEvent [expectedPattern="" + expectedPattern + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.event.base.BasePatternEvent#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/annotation/FbBotMillController.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.annotation;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Inherited;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import co.aurasphere.botmill.fb.event.FbBotMillEventType;


/**
 * The Interface FbBotMillController.
 * 
 * @author Alvin P. Reyes
 */
@Documented
@Target(ElementType.METHOD)
@Inherited
@Retention(RetentionPolicy.RUNTIME)
public @interface FbBotMillController {
	
	/**
	 * Event type.
	 *
	 * @return the fb bot mill event type
	 */
	FbBotMillEventType eventType() default FbBotMillEventType.MESSAGE;
	
	/**
	 * Text.
	 *
	 * @return the string
	 */
	String text() default """";
	
	/**
	 * Pattern.
	 *
	 * @return the string
	 */
	String pattern() default """";
	
	/**
	 * Payload.
	 *
	 * @return the string
	 */
	String payload() default """";
	
	/**
	 * Quick reply payload.
	 *
	 * @return the string
	 */
	String quickReplyPayload() default """";
	
	/**
	 * Quick replt payload pattern.
	 *
	 * @return the string
	 */
	String quickReplyPayloadPattern() default """";
	
	/**
	 * Postback.
	 *
	 * @return the string
	 */
	String postback() default """";
	
	/**
	 * Postback pattern.
	 *
	 * @return the string
	 */
	String postbackPattern() default """";
	
	/**
	 * Case sensitive.
	 *
	 * @return true, if successful
	 */
	boolean caseSensitive() default false;

	/**
	 * Meta.
	 *
	 * @return the string
	 */
	String meta() default """"; // random text to indicate the purpose.
	
	
	boolean skipAuthorization() default false;

}
","package co.aurasphere.botmill.fb.model.annotation; @Documented
@Target(ElementType.METHOD)
@Inherited
@Retention(RetentionPolicy.RUNTIME)
public @interface FbBotMillController { FbBotMillEventType eventType() default FbBotMillEventType.MESSAGE; String text() default """"; String pattern() default """"; String payload() default """"; String quickReplyPayload() default """"; String quickReplyPayloadPattern() default """"; String postback() default """"; String postbackPattern() default """"; boolean caseSensitive() default false; String meta() default """"; boolean skipAuthorization() default false; }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.annotation; @Documented
@Target(ElementType.METHOD)
@Inherited
@Retention(RetentionPolicy.RUNTIME)
public @interface FbBotMillController { FbBotMillEventType eventType() default FbBotMillEventType.MESSAGE; String text() default """"; String pattern() default """"; String payload() default """"; String quickReplyPayload() default """"; String quickReplyPayloadPattern() default """"; String postback() default """"; String postbackPattern() default """"; boolean caseSensitive() default false; String meta() default """"; boolean skipAuthorization() default false; } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.annotation; 
import java.lang.annotation.Documented; import java.lang.annotation.ElementType; import java.lang.annotation.Inherited; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; 
import co.aurasphere.botmill.fb.event.FbBotMillEventType; 
  @Documented
@Target(ElementType.METHOD)
@Inherited
@Retention(RetentionPolicy.RUNTIME)
public @interface FbBotMillController { /**
 * The Interface FbBotMillController.
 * 
 * @author Alvin P. Reyes
 */ 	 FbBotMillEventType eventType() default FbBotMillEventType.MESSAGE; /**
	 * Event type.
	 *
	 * @return the fb bot mill event type
	 */ 	 String text() default """"; /**
	 * Text.
	 *
	 * @return the string
	 */ 	 String pattern() default """"; /**
	 * Pattern.
	 *
	 * @return the string
	 */ 	 String payload() default """"; /**
	 * Payload.
	 *
	 * @return the string
	 */ 	 String quickReplyPayload() default """"; /**
	 * Quick reply payload.
	 *
	 * @return the string
	 */ 	 String quickReplyPayloadPattern() default """"; /**
	 * Quick replt payload pattern.
	 *
	 * @return the string
	 */ 	 String postback() default """"; /**
	 * Postback.
	 *
	 * @return the string
	 */ 	 String postbackPattern() default """"; /**
	 * Postback pattern.
	 *
	 * @return the string
	 */ 	 boolean caseSensitive() default false; /**
	 * Case sensitive.
	 *
	 * @return true, if successful
	 */  String meta() default """"; /**
	 * Meta.
	 *
	 * @return the string
	 */ // random text to indicate the purpose. boolean skipAuthorization() default false; 	
	 }  "
src/main/java/co/aurasphere/botmill/fb/model/annotation/FbBotMillInit.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.annotation;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Inherited;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;


/**
 * The Interface FbBotMillInit.
 * 
 * @author Alvin P. Reyes
 */
@Documented
@Target(ElementType.METHOD)
@Inherited
@Retention(RetentionPolicy.RUNTIME)
public @interface FbBotMillInit {
	
	/**
	 * Meta.
	 *
	 * @return the string
	 */
	String meta() default """"; // random text to indicate the purpose.
}
","package co.aurasphere.botmill.fb.model.annotation; @Documented
@Target(ElementType.METHOD)
@Inherited
@Retention(RetentionPolicy.RUNTIME)
public @interface FbBotMillInit { String meta() default """"; }",0 0 0 0 0,"package co.aurasphere.botmill.fb.model.annotation; @Documented
@Target(ElementType.METHOD)
@Inherited
@Retention(RetentionPolicy.RUNTIME)
public @interface FbBotMillInit { String meta() default """"; } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.annotation; 
import java.lang.annotation.Documented; import java.lang.annotation.ElementType; import java.lang.annotation.Inherited; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; 
  @Documented
@Target(ElementType.METHOD)
@Inherited
@Retention(RetentionPolicy.RUNTIME)
public @interface FbBotMillInit { /**
 * The Interface FbBotMillInit.
 * 
 * @author Alvin P. Reyes
 */ 	 String meta() default """"; /**
	 * Meta.
	 *
	 * @return the string
	 */ } // random text to indicate the purpose. "
src/main/java/co/aurasphere/botmill/fb/model/base/Attachment.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.base;

import java.io.Serializable;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import co.aurasphere.botmill.core.internal.util.json.SkipDeserialization;


/**
 * Represents a Facebook Messenger Platform attachment. It may be a file or a
 * template.
 * 
 * @author Donato Rimenti
 * 
 */
public class Attachment implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The title.
	 */
	private String title;

	/**
	 * The url.
	 */
	private String url;

	/**
	 * The attachment type.
	 */
	@NotNull
	private AttachmentType type;

	/**
	 * The payload of the attachment.
	 */
	@Valid
	@NotNull
	@SkipDeserialization
	private Payload payload;

	/**
	 * Instantiates a new attachment.
	 */
	public Attachment() {
	}

	/**
	 * Instantiates a new attachment.
	 *
	 * @param type
	 *            the {@link #type}.
	 * @param payload
	 *            the {@link #payload}.
	 */
	public Attachment(AttachmentType type, Payload payload) {
		this.type = type;
		this.payload = payload;
	}

	/**
	 * Gets the {@link #type}.
	 *
	 * @return the {@link #type}.
	 */
	public AttachmentType getType() {
		return type;
	}

	/**
	 * Sets the {@link #type}.
	 *
	 * @param type
	 *            the {@link #type} to set.
	 */
	public void setType(AttachmentType type) {
		this.type = type;
	}

	/**
	 * Gets the {@link #payload}.
	 *
	 * @return the {@link #payload}.
	 */
	public Payload getPayload() {
		return payload;
	}

	/**
	 * Sets the {@link #payload}.
	 *
	 * @param payload
	 *            the {@link #payload} to set.
	 */
	public void setPayload(Payload payload) {
		this.payload = payload;
	}

	/**
	 * Gets the {@link #title}.
	 *
	 * @return the {@link #title}.
	 */
	public String getTitle() {
		return title;
	}

	/**
	 * Sets the {@link #title}.
	 *
	 * @param title
	 *            the {@link #title} to set.
	 */
	public void setTitle(String title) {
		this.title = title;
	}

	/**
	 * Gets the {@link #url}.
	 *
	 * @return the {@link #url}.
	 */
	public String getUrl() {
		return url;
	}

	/**
	 * Sets the {@link #url}.
	 *
	 * @param url
	 *            the {@link #url} to set.
	 */
	public void setUrl(String url) {
		this.url = url;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((payload == null) ? 0 : payload.hashCode());
		result = prime * result + ((title == null) ? 0 : title.hashCode());
		result = prime * result + ((type == null) ? 0 : type.hashCode());
		result = prime * result + ((url == null) ? 0 : url.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Attachment other = (Attachment) obj;
		if (payload == null) {
			if (other.payload != null)
				return false;
		} else if (!payload.equals(other.payload))
			return false;
		if (title == null) {
			if (other.title != null)
				return false;
		} else if (!title.equals(other.title))
			return false;
		if (type != other.type)
			return false;
		if (url == null) {
			if (other.url != null)
				return false;
		} else if (!url.equals(other.url))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""Attachment [title="" + title + "", url="" + url + "", type="" + type
				+ "", payload="" + payload + ""]"";
	}

}","package co.aurasphere.botmill.fb.model.base; public class Attachment implements Serializable { private static final long serialVersionUID = 1L; private String title; private String url; @NotNull
	private AttachmentType type; @Valid
	@NotNull
	@SkipDeserialization
	private Payload payload; public Attachment() { } public Attachment(AttachmentType type, Payload payload) { this.type = type; this.payload = payload; } public AttachmentType getType() { return type; } public void setType(AttachmentType type) { this.type = type; } public Payload getPayload() { return payload; } public void setPayload(Payload payload) { this.payload = payload; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public String getUrl() { return url; } public void setUrl(String url) { this.url = url; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((payload == null) ? 0 : payload.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); result = prime * result + ((type == null) ? 0 : type.hashCode()); result = prime * result + ((url == null) ? 0 : url.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Attachment other = (Attachment) obj; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; if (type != other.type)
			return false; if (url == null) { if (other.url != null)
				return false; } else if (!url.equals(other.url))
			return false; return true; } @Override
	public String toString() { return ""Attachment [title="" + title + "", url="" + url + "", type="" + type
				+ "", payload="" + payload + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.base; public class Attachment implements Serializable { private static final long serialVersionUID = 1L; private String title; private String url; @NotNull
	private AttachmentType type; @Valid
	@NotNull
	@SkipDeserialization
	private Payload payload; public Attachment() { } public Attachment(AttachmentType type, Payload payload) { this.type = type; this.payload = payload; } public AttachmentType getType() { return type; } public void setType(AttachmentType type) { this.type = type; } public Payload getPayload() { return payload; } public void setPayload(Payload payload) { this.payload = payload; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public String getUrl() { return url; } public void setUrl(String url) { this.url = url; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((payload == null) ? 0 : payload.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); result = prime * result + ((type == null) ? 0 : type.hashCode()); result = prime * result + ((url == null) ? 0 : url.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Attachment other = (Attachment) obj; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; if (type != other.type)
			return false; if (url == null) { if (other.url != null)
				return false; } else if (!url.equals(other.url))
			return false; return true; } @Override
	public String toString() { return ""Attachment [title="" + title + "", url="" + url + "", type="" + type
				+ "", payload="" + payload + ""]""; } }","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.base; 
import java.io.Serializable; 
import javax.validation.Valid; import javax.validation.constraints.NotNull; 
import co.aurasphere.botmill.core.internal.util.json.SkipDeserialization; 
  public class Attachment implements Serializable { /**
 * Represents a Facebook Messenger Platform attachment. It may be a file or a
 * template.
 * 
 * @author Donato Rimenti
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  private String title; /**
	 * The title.
	 */  private String url; /**
	 * The url.
	 */  @NotNull
	private AttachmentType type; /**
	 * The attachment type.
	 */  @Valid
	@NotNull
	@SkipDeserialization
	private Payload payload; /**
	 * The payload of the attachment.
	 */  public Attachment() { } /**
	 * Instantiates a new attachment.
	 */  public Attachment(AttachmentType type, Payload payload) { this.type = type; this.payload = payload; } /**
	 * Instantiates a new attachment.
	 *
	 * @param type
	 *            the {@link #type}.
	 * @param payload
	 *            the {@link #payload}.
	 */  public AttachmentType getType() { return type; } /**
	 * Gets the {@link #type}.
	 *
	 * @return the {@link #type}.
	 */  public void setType(AttachmentType type) { this.type = type; } /**
	 * Sets the {@link #type}.
	 *
	 * @param type
	 *            the {@link #type} to set.
	 */  public Payload getPayload() { return payload; } /**
	 * Gets the {@link #payload}.
	 *
	 * @return the {@link #payload}.
	 */  public void setPayload(Payload payload) { this.payload = payload; } /**
	 * Sets the {@link #payload}.
	 *
	 * @param payload
	 *            the {@link #payload} to set.
	 */  public String getTitle() { return title; } /**
	 * Gets the {@link #title}.
	 *
	 * @return the {@link #title}.
	 */  public void setTitle(String title) { this.title = title; } /**
	 * Sets the {@link #title}.
	 *
	 * @param title
	 *            the {@link #title} to set.
	 */  public String getUrl() { return url; } /**
	 * Gets the {@link #url}.
	 *
	 * @return the {@link #url}.
	 */  public void setUrl(String url) { this.url = url; } /**
	 * Sets the {@link #url}.
	 *
	 * @param url
	 *            the {@link #url} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((payload == null) ? 0 : payload.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); result = prime * result + ((type == null) ? 0 : type.hashCode()); result = prime * result + ((url == null) ? 0 : url.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Attachment other = (Attachment) obj; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; if (type != other.type)
			return false; if (url == null) { if (other.url != null)
				return false; } else if (!url.equals(other.url))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""Attachment [title="" + title + "", url="" + url + "", type="" + type
				+ "", payload="" + payload + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }"
src/main/java/co/aurasphere/botmill/fb/model/base/AttachmentType.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.base;

import java.io.Serializable;

import com.google.gson.annotations.SerializedName;


/**
 * Enum for attachment types.
 * 
 * @author Donato Rimenti
 * 
 */
public enum AttachmentType implements Serializable {

	/**
	 * Image file attachment.
	 */
	@SerializedName(""image"") IMAGE,

	/**
	 * Audio file attachment.
	 */
	@SerializedName(""audio"") AUDIO,

	/**
	 * Video file attachment.
	 */
	@SerializedName(""video"") VIDEO,

	/**
	 * Generic file attachment.
	 */
	@SerializedName(""file"") FILE,

	/**
	 * Location object attachment.
	 */
	@SerializedName(""location"") LOCATION,

	/**
	 * Template attachment. Only used in replies.
	 */
	@SerializedName(""template"") TEMPLATE,

	/**
	 * Legacy attachment. This attachment type should not be used. Only used in
	 * incoming messages.
	 */
	@SerializedName(""fallback"") FALLBACK;
}
","package co.aurasphere.botmill.fb.model.base; public enum AttachmentType implements Serializable { @SerializedName(""fallback"") FALLBACK; }",0 0 0 0 0,"package co.aurasphere.botmill.fb.model.base; public enum AttachmentType implements Serializable { @SerializedName(""fallback"") FALLBACK; } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.base; 
import java.io.Serializable; 
import com.google.gson.annotations.SerializedName; 
  public enum AttachmentType implements Serializable { /**
 * Enum for attachment types.
 * 
 * @author Donato Rimenti
 * 
 */  /**
	 * Image file attachment.
	 */  /**
	 * Audio file attachment.
	 */  /**
	 * Video file attachment.
	 */  /**
	 * Generic file attachment.
	 */  /**
	 * Location object attachment.
	 */  /**
	 * Template attachment. Only used in replies.
	 */  @SerializedName(""fallback"") FALLBACK; } /**
	 * Legacy attachment. This attachment type should not be used. Only used in
	 * incoming messages.
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/base/Payload.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.base;

import java.io.Serializable;

import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;

/**
 * Interface which represents a {@link FbBotMillResponse} payload.
 * 
 * @author Donato Rimenti
 * 
 */
public interface Payload extends Serializable {
}
",package co.aurasphere.botmill.fb.model.base; public interface Payload extends Serializable { },0 0 0 0,package co.aurasphere.botmill.fb.model.base; public interface Payload extends Serializable { } ,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.base; 
import java.io.Serializable; 
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;  /**
 * Interface which represents a {@link FbBotMillResponse} payload.
 * 
 * @author Donato Rimenti
 * 
 */ public interface Payload extends Serializable { }  "
src/main/java/co/aurasphere/botmill/fb/model/base/QuickReplyLocationPayload.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.base;

import co.aurasphere.botmill.fb.model.incoming.callback.LocationCoordinates;


/**
 * A {@link Payload} which contains a Location sent by a Quick Reply.
 * 
 * @author Alvin Reyes
 * 
 */
public class QuickReplyLocationPayload implements Payload {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The coordinates.
	 */
	private LocationCoordinates coordinates;

	/**
	 * Gets the {@link #coordinates}.
	 *
	 * @return the {@link #coordinates}.
	 */
	public LocationCoordinates getCoordinates() {
		return coordinates;
	}

	/**
	 * Sets the {@link #coordinates}.
	 *
	 * @param coordinates
	 *            the {@link #coordinates} to set.
	 */
	public void setCoordinates(LocationCoordinates coordinates) {
		this.coordinates = coordinates;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((coordinates == null) ? 0 : coordinates.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		QuickReplyLocationPayload other = (QuickReplyLocationPayload) obj;
		if (coordinates == null) {
			if (other.coordinates != null)
				return false;
		} else if (!coordinates.equals(other.coordinates))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""QuickReplyLocationPayload [coordinates="" + coordinates + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.base; public class QuickReplyLocationPayload implements Payload { private static final long serialVersionUID = 1L; private LocationCoordinates coordinates; public LocationCoordinates getCoordinates() { return coordinates; } public void setCoordinates(LocationCoordinates coordinates) { this.coordinates = coordinates; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((coordinates == null) ? 0 : coordinates.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; QuickReplyLocationPayload other = (QuickReplyLocationPayload) obj; if (coordinates == null) { if (other.coordinates != null)
				return false; } else if (!coordinates.equals(other.coordinates))
			return false; return true; } @Override
	public String toString() { return ""QuickReplyLocationPayload [coordinates="" + coordinates + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.base; public class QuickReplyLocationPayload implements Payload { private static final long serialVersionUID = 1L; private LocationCoordinates coordinates; public LocationCoordinates getCoordinates() { return coordinates; } public void setCoordinates(LocationCoordinates coordinates) { this.coordinates = coordinates; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((coordinates == null) ? 0 : coordinates.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; QuickReplyLocationPayload other = (QuickReplyLocationPayload) obj; if (coordinates == null) { if (other.coordinates != null)
				return false; } else if (!coordinates.equals(other.coordinates))
			return false; return true; } @Override
	public String toString() { return ""QuickReplyLocationPayload [coordinates="" + coordinates + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.base; 
import co.aurasphere.botmill.fb.model.incoming.callback.LocationCoordinates; 
  public class QuickReplyLocationPayload implements Payload { /**
 * A {@link Payload} which contains a Location sent by a Quick Reply.
 * 
 * @author Alvin Reyes
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  private LocationCoordinates coordinates; /**
	 * The coordinates.
	 */  public LocationCoordinates getCoordinates() { return coordinates; } /**
	 * Gets the {@link #coordinates}.
	 *
	 * @return the {@link #coordinates}.
	 */  public void setCoordinates(LocationCoordinates coordinates) { this.coordinates = coordinates; } /**
	 * Sets the {@link #coordinates}.
	 *
	 * @param coordinates
	 *            the {@link #coordinates} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((coordinates == null) ? 0 : coordinates.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; QuickReplyLocationPayload other = (QuickReplyLocationPayload) obj; if (coordinates == null) { if (other.coordinates != null)
				return false; } else if (!coordinates.equals(other.coordinates))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""QuickReplyLocationPayload [coordinates="" + coordinates + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/base/User.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.base;

import java.io.Serializable;

import org.hibernate.validator.constraints.NotBlank;


/**
 * An object that contains a Facebook's user ID.
 * 
 * @author Donato Rimenti
 * 
 */
public class User implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The Facebook's user ID.
	 */
	@NotBlank
	private String id;

	/**
	 * Instantiates a new user.
	 */
	public User() {
	}

	/**
	 * Instantiates a new user.
	 *
	 * @param id
	 *            the {@link #id}.
	 */
	public User(String id) {
		this.id = id;
	}

	/**
	 * Gets the {@link #id}.
	 *
	 * @return the {@link #id}.
	 */
	public String getId() {
		return id;
	}

	/**
	 * Sets the {@link #id}.
	 *
	 * @param id
	 *            the {@link #id} to set.
	 */
	public void setId(String id) {
		this.id = id;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		User other = (User) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""User [id="" + id + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.base; public class User implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	private String id; public User() { } public User(String id) { this.id = id; } public String getId() { return id; } public void setId(String id) { this.id = id; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((id == null) ? 0 : id.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; User other = (User) obj; if (id == null) { if (other.id != null)
				return false; } else if (!id.equals(other.id))
			return false; return true; } @Override
	public String toString() { return ""User [id="" + id + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.base; public class User implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	private String id; public User() { } public User(String id) { this.id = id; } public String getId() { return id; } public void setId(String id) { this.id = id; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((id == null) ? 0 : id.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; User other = (User) obj; if (id == null) { if (other.id != null)
				return false; } else if (!id.equals(other.id))
			return false; return true; } @Override
	public String toString() { return ""User [id="" + id + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.base; 
import java.io.Serializable; 
import org.hibernate.validator.constraints.NotBlank; 
  public class User implements Serializable { /**
 * An object that contains a Facebook's user ID.
 * 
 * @author Donato Rimenti
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @NotBlank
	private String id; /**
	 * The Facebook's user ID.
	 */  public User() { } /**
	 * Instantiates a new user.
	 */  public User(String id) { this.id = id; } /**
	 * Instantiates a new user.
	 *
	 * @param id
	 *            the {@link #id}.
	 */  public String getId() { return id; } /**
	 * Gets the {@link #id}.
	 *
	 * @return the {@link #id}.
	 */  public void setId(String id) { this.id = id; } /**
	 * Sets the {@link #id}.
	 *
	 * @param id
	 *            the {@link #id} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((id == null) ? 0 : id.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; User other = (User) obj; if (id == null) { if (other.id != null)
				return false; } else if (!id.equals(other.id))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""User [id="" + id + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/incoming/FacebookConfirmationMessage.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming;

import java.io.Serializable;

import com.google.gson.annotations.SerializedName;


/**
 * Model for a confirmation message from Facebook. This will be received back
 * whenever the bot sends a message/reply.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 * @since 1.1.0
 */
public class FacebookConfirmationMessage implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The recipient id.
	 */
	@SerializedName(""recipient_id"")
	private String recipientId;

	/**
	 * The message id.
	 */
	@SerializedName(""message_id"")
	private String messageId;

	/**
	 * The result.
	 */
	private String result;

	/**
	 * Gets the {@link #recipientId}.
	 *
	 * @return the {@link #recipientId}.
	 */
	public String getRecipientId() {
		return recipientId;
	}

	/**
	 * Sets the {@link #recipientId}.
	 *
	 * @param recipientId
	 *            the {@link #recipientId} to set.
	 */
	public void setRecipientId(String recipientId) {
		this.recipientId = recipientId;
	}

	/**
	 * Gets the {@link #messageId}.
	 *
	 * @return the {@link #messageId}.
	 */
	public String getMessageId() {
		return messageId;
	}

	/**
	 * Sets the {@link #messageId}.
	 *
	 * @param messageId
	 *            the {@link #messageId} to set.
	 */
	public void setMessageId(String messageId) {
		this.messageId = messageId;
	}

	/**
	 * Gets the {@link #result}.
	 *
	 * @return the {@link #result}.
	 */
	public String getResult() {
		return result;
	}

	/**
	 * Sets the {@link #result}.
	 *
	 * @param result
	 *            the {@link #result} to set.
	 */
	public void setResult(String result) {
		this.result = result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((messageId == null) ? 0 : messageId.hashCode());
		result = prime * result
				+ ((recipientId == null) ? 0 : recipientId.hashCode());
		result = prime * result
				+ ((this.result == null) ? 0 : this.result.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		FacebookConfirmationMessage other = (FacebookConfirmationMessage) obj;
		if (messageId == null) {
			if (other.messageId != null)
				return false;
		} else if (!messageId.equals(other.messageId))
			return false;
		if (recipientId == null) {
			if (other.recipientId != null)
				return false;
		} else if (!recipientId.equals(other.recipientId))
			return false;
		if (result == null) {
			if (other.result != null)
				return false;
		} else if (!result.equals(other.result))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""FacebookConfirmationMessage [recipientId="" + recipientId
				+ "", messageId="" + messageId + "", result="" + result + ""]"";
	}

}","package co.aurasphere.botmill.fb.model.incoming; public class FacebookConfirmationMessage implements Serializable { private static final long serialVersionUID = 1L; @SerializedName(""recipient_id"")
	private String recipientId; @SerializedName(""message_id"")
	private String messageId; private String result; public String getRecipientId() { return recipientId; } public void setRecipientId(String recipientId) { this.recipientId = recipientId; } public String getMessageId() { return messageId; } public void setMessageId(String messageId) { this.messageId = messageId; } public String getResult() { return result; } public void setResult(String result) { this.result = result; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((messageId == null) ? 0 : messageId.hashCode()); result = prime * result
				+ ((recipientId == null) ? 0 : recipientId.hashCode()); result = prime * result
				+ ((this.result == null) ? 0 : this.result.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FacebookConfirmationMessage other = (FacebookConfirmationMessage) obj; if (messageId == null) { if (other.messageId != null)
				return false; } else if (!messageId.equals(other.messageId))
			return false; if (recipientId == null) { if (other.recipientId != null)
				return false; } else if (!recipientId.equals(other.recipientId))
			return false; if (result == null) { if (other.result != null)
				return false; } else if (!result.equals(other.result))
			return false; return true; } @Override
	public String toString() { return ""FacebookConfirmationMessage [recipientId="" + recipientId
				+ "", messageId="" + messageId + "", result="" + result + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.incoming; public class FacebookConfirmationMessage implements Serializable { private static final long serialVersionUID = 1L; @SerializedName(""recipient_id"")
	private String recipientId; @SerializedName(""message_id"")
	private String messageId; private String result; public String getRecipientId() { return recipientId; } public void setRecipientId(String recipientId) { this.recipientId = recipientId; } public String getMessageId() { return messageId; } public void setMessageId(String messageId) { this.messageId = messageId; } public String getResult() { return result; } public void setResult(String result) { this.result = result; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((messageId == null) ? 0 : messageId.hashCode()); result = prime * result
				+ ((recipientId == null) ? 0 : recipientId.hashCode()); result = prime * result
				+ ((this.result == null) ? 0 : this.result.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FacebookConfirmationMessage other = (FacebookConfirmationMessage) obj; if (messageId == null) { if (other.messageId != null)
				return false; } else if (!messageId.equals(other.messageId))
			return false; if (recipientId == null) { if (other.recipientId != null)
				return false; } else if (!recipientId.equals(other.recipientId))
			return false; if (result == null) { if (other.result != null)
				return false; } else if (!result.equals(other.result))
			return false; return true; } @Override
	public String toString() { return ""FacebookConfirmationMessage [recipientId="" + recipientId
				+ "", messageId="" + messageId + "", result="" + result + ""]""; } }","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming; 
import java.io.Serializable; 
import com.google.gson.annotations.SerializedName; 
  public class FacebookConfirmationMessage implements Serializable { /**
 * Model for a confirmation message from Facebook. This will be received back
 * whenever the bot sends a message/reply.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 * @since 1.1.0
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @SerializedName(""recipient_id"")
	private String recipientId; /**
	 * The recipient id.
	 */  @SerializedName(""message_id"")
	private String messageId; /**
	 * The message id.
	 */  private String result; /**
	 * The result.
	 */  public String getRecipientId() { return recipientId; } /**
	 * Gets the {@link #recipientId}.
	 *
	 * @return the {@link #recipientId}.
	 */  public void setRecipientId(String recipientId) { this.recipientId = recipientId; } /**
	 * Sets the {@link #recipientId}.
	 *
	 * @param recipientId
	 *            the {@link #recipientId} to set.
	 */  public String getMessageId() { return messageId; } /**
	 * Gets the {@link #messageId}.
	 *
	 * @return the {@link #messageId}.
	 */  public void setMessageId(String messageId) { this.messageId = messageId; } /**
	 * Sets the {@link #messageId}.
	 *
	 * @param messageId
	 *            the {@link #messageId} to set.
	 */  public String getResult() { return result; } /**
	 * Gets the {@link #result}.
	 *
	 * @return the {@link #result}.
	 */  public void setResult(String result) { this.result = result; } /**
	 * Sets the {@link #result}.
	 *
	 * @param result
	 *            the {@link #result} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((messageId == null) ? 0 : messageId.hashCode()); result = prime * result
				+ ((recipientId == null) ? 0 : recipientId.hashCode()); result = prime * result
				+ ((this.result == null) ? 0 : this.result.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FacebookConfirmationMessage other = (FacebookConfirmationMessage) obj; if (messageId == null) { if (other.messageId != null)
				return false; } else if (!messageId.equals(other.messageId))
			return false; if (recipientId == null) { if (other.recipientId != null)
				return false; } else if (!recipientId.equals(other.recipientId))
			return false; if (result == null) { if (other.result != null)
				return false; } else if (!result.equals(other.result))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""FacebookConfirmationMessage [recipientId="" + recipientId
				+ "", messageId="" + messageId + "", result="" + result + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }"
src/main/java/co/aurasphere/botmill/fb/model/incoming/FacebookError.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming;

import java.io.Serializable;

import com.google.gson.annotations.SerializedName;


/**
 * Object that represents an error from Facebook.
 * 
 * @author Donato Rimenti
 * 
 */
public class FacebookError implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The error message.
	 */
	private String message;

	/**
	 * The error type.
	 */
	private String type;

	/**
	 * The error code.
	 */
	private String code;

	/**
	 * The error Facebook's trace ID.
	 */
	@SerializedName(""fbtrace_id"")
	private String fbTraceId;

	/**
	 * Gets the {@link #message}.
	 *
	 * @return the {@link #message}.
	 */
	public String getMessage() {
		return message;
	}

	/**
	 * Sets the {@link #message}.
	 *
	 * @param message
	 *            the {@link #message} to set.
	 */
	public void setMessage(String message) {
		this.message = message;
	}

	/**
	 * Gets the {@link #type}.
	 *
	 * @return the {@link #type}.
	 */
	public String getType() {
		return type;
	}

	/**
	 * Sets the {@link #type}.
	 *
	 * @param type
	 *            the {@link #type} to set.
	 */
	public void setType(String type) {
		this.type = type;
	}

	/**
	 * Gets the {@link #code}.
	 *
	 * @return the {@link #code}.
	 */
	public String getCode() {
		return code;
	}

	/**
	 * Sets the {@link #code}.
	 *
	 * @param code
	 *            the {@link #code} to set.
	 */
	public void setCode(String code) {
		this.code = code;
	}

	/**
	 * Gets the {@link #fbTraceId}.
	 *
	 * @return the {@link #fbTraceId}.
	 */
	public String getFbTraceId() {
		return fbTraceId;
	}

	/**
	 * Sets the {@link #fbTraceId}.
	 *
	 * @param fbTraceId
	 *            the {@link #fbTraceId} to set.
	 */
	public void setFbTraceId(String fbTraceId) {
		this.fbTraceId = fbTraceId;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((code == null) ? 0 : code.hashCode());
		result = prime * result
				+ ((fbTraceId == null) ? 0 : fbTraceId.hashCode());
		result = prime * result + ((message == null) ? 0 : message.hashCode());
		result = prime * result + ((type == null) ? 0 : type.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		FacebookError other = (FacebookError) obj;
		if (code == null) {
			if (other.code != null)
				return false;
		} else if (!code.equals(other.code))
			return false;
		if (fbTraceId == null) {
			if (other.fbTraceId != null)
				return false;
		} else if (!fbTraceId.equals(other.fbTraceId))
			return false;
		if (message == null) {
			if (other.message != null)
				return false;
		} else if (!message.equals(other.message))
			return false;
		if (type == null) {
			if (other.type != null)
				return false;
		} else if (!type.equals(other.type))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""FacebookError [message="" + message + "", type="" + type
				+ "", code="" + code + "", fbTraceId="" + fbTraceId + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.incoming; public class FacebookError implements Serializable { private static final long serialVersionUID = 1L; private String message; private String type; private String code; @SerializedName(""fbtrace_id"")
	private String fbTraceId; public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } public String getType() { return type; } public void setType(String type) { this.type = type; } public String getCode() { return code; } public void setCode(String code) { this.code = code; } public String getFbTraceId() { return fbTraceId; } public void setFbTraceId(String fbTraceId) { this.fbTraceId = fbTraceId; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((code == null) ? 0 : code.hashCode()); result = prime * result
				+ ((fbTraceId == null) ? 0 : fbTraceId.hashCode()); result = prime * result + ((message == null) ? 0 : message.hashCode()); result = prime * result + ((type == null) ? 0 : type.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FacebookError other = (FacebookError) obj; if (code == null) { if (other.code != null)
				return false; } else if (!code.equals(other.code))
			return false; if (fbTraceId == null) { if (other.fbTraceId != null)
				return false; } else if (!fbTraceId.equals(other.fbTraceId))
			return false; if (message == null) { if (other.message != null)
				return false; } else if (!message.equals(other.message))
			return false; if (type == null) { if (other.type != null)
				return false; } else if (!type.equals(other.type))
			return false; return true; } @Override
	public String toString() { return ""FacebookError [message="" + message + "", type="" + type
				+ "", code="" + code + "", fbTraceId="" + fbTraceId + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.incoming; public class FacebookError implements Serializable { private static final long serialVersionUID = 1L; private String message; private String type; private String code; @SerializedName(""fbtrace_id"")
	private String fbTraceId; public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } public String getType() { return type; } public void setType(String type) { this.type = type; } public String getCode() { return code; } public void setCode(String code) { this.code = code; } public String getFbTraceId() { return fbTraceId; } public void setFbTraceId(String fbTraceId) { this.fbTraceId = fbTraceId; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((code == null) ? 0 : code.hashCode()); result = prime * result
				+ ((fbTraceId == null) ? 0 : fbTraceId.hashCode()); result = prime * result + ((message == null) ? 0 : message.hashCode()); result = prime * result + ((type == null) ? 0 : type.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FacebookError other = (FacebookError) obj; if (code == null) { if (other.code != null)
				return false; } else if (!code.equals(other.code))
			return false; if (fbTraceId == null) { if (other.fbTraceId != null)
				return false; } else if (!fbTraceId.equals(other.fbTraceId))
			return false; if (message == null) { if (other.message != null)
				return false; } else if (!message.equals(other.message))
			return false; if (type == null) { if (other.type != null)
				return false; } else if (!type.equals(other.type))
			return false; return true; } @Override
	public String toString() { return ""FacebookError [message="" + message + "", type="" + type
				+ "", code="" + code + "", fbTraceId="" + fbTraceId + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming; 
import java.io.Serializable; 
import com.google.gson.annotations.SerializedName; 
  public class FacebookError implements Serializable { /**
 * Object that represents an error from Facebook.
 * 
 * @author Donato Rimenti
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  private String message; /**
	 * The error message.
	 */  private String type; /**
	 * The error type.
	 */  private String code; /**
	 * The error code.
	 */  @SerializedName(""fbtrace_id"")
	private String fbTraceId; /**
	 * The error Facebook's trace ID.
	 */  public String getMessage() { return message; } /**
	 * Gets the {@link #message}.
	 *
	 * @return the {@link #message}.
	 */  public void setMessage(String message) { this.message = message; } /**
	 * Sets the {@link #message}.
	 *
	 * @param message
	 *            the {@link #message} to set.
	 */  public String getType() { return type; } /**
	 * Gets the {@link #type}.
	 *
	 * @return the {@link #type}.
	 */  public void setType(String type) { this.type = type; } /**
	 * Sets the {@link #type}.
	 *
	 * @param type
	 *            the {@link #type} to set.
	 */  public String getCode() { return code; } /**
	 * Gets the {@link #code}.
	 *
	 * @return the {@link #code}.
	 */  public void setCode(String code) { this.code = code; } /**
	 * Sets the {@link #code}.
	 *
	 * @param code
	 *            the {@link #code} to set.
	 */  public String getFbTraceId() { return fbTraceId; } /**
	 * Gets the {@link #fbTraceId}.
	 *
	 * @return the {@link #fbTraceId}.
	 */  public void setFbTraceId(String fbTraceId) { this.fbTraceId = fbTraceId; } /**
	 * Sets the {@link #fbTraceId}.
	 *
	 * @param fbTraceId
	 *            the {@link #fbTraceId} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((code == null) ? 0 : code.hashCode()); result = prime * result
				+ ((fbTraceId == null) ? 0 : fbTraceId.hashCode()); result = prime * result + ((message == null) ? 0 : message.hashCode()); result = prime * result + ((type == null) ? 0 : type.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FacebookError other = (FacebookError) obj; if (code == null) { if (other.code != null)
				return false; } else if (!code.equals(other.code))
			return false; if (fbTraceId == null) { if (other.fbTraceId != null)
				return false; } else if (!fbTraceId.equals(other.fbTraceId))
			return false; if (message == null) { if (other.message != null)
				return false; } else if (!message.equals(other.message))
			return false; if (type == null) { if (other.type != null)
				return false; } else if (!type.equals(other.type))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""FacebookError [message="" + message + "", type="" + type
				+ "", code="" + code + "", fbTraceId="" + fbTraceId + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/incoming/FacebookErrorMessage.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming;

import java.io.Serializable;


/**
 * Message which contains a {@link FacebookError}.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 */
public class FacebookErrorMessage implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The error from Facebook.
	 */
	private FacebookError error;

	/**
	 * Gets the {@link #error}.
	 *
	 * @return the {@link #error}.
	 */
	public FacebookError getError() {
		return error;
	}

	/**
	 * Sets the {@link #error}.
	 *
	 * @param error
	 *            the {@link #error} to set.
	 */
	public void setError(FacebookError error) {
		this.error = error;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((error == null) ? 0 : error.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		FacebookErrorMessage other = (FacebookErrorMessage) obj;
		if (error == null) {
			if (other.error != null)
				return false;
		} else if (!error.equals(other.error))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""FacebookErrorMessage [error="" + error + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.incoming; public class FacebookErrorMessage implements Serializable { private static final long serialVersionUID = 1L; private FacebookError error; public FacebookError getError() { return error; } public void setError(FacebookError error) { this.error = error; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((error == null) ? 0 : error.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FacebookErrorMessage other = (FacebookErrorMessage) obj; if (error == null) { if (other.error != null)
				return false; } else if (!error.equals(other.error))
			return false; return true; } @Override
	public String toString() { return ""FacebookErrorMessage [error="" + error + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.incoming; public class FacebookErrorMessage implements Serializable { private static final long serialVersionUID = 1L; private FacebookError error; public FacebookError getError() { return error; } public void setError(FacebookError error) { this.error = error; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((error == null) ? 0 : error.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FacebookErrorMessage other = (FacebookErrorMessage) obj; if (error == null) { if (other.error != null)
				return false; } else if (!error.equals(other.error))
			return false; return true; } @Override
	public String toString() { return ""FacebookErrorMessage [error="" + error + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming; 
import java.io.Serializable; 
  public class FacebookErrorMessage implements Serializable { /**
 * Message which contains a {@link FacebookError}.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  private FacebookError error; /**
	 * The error from Facebook.
	 */  public FacebookError getError() { return error; } /**
	 * Gets the {@link #error}.
	 *
	 * @return the {@link #error}.
	 */  public void setError(FacebookError error) { this.error = error; } /**
	 * Sets the {@link #error}.
	 *
	 * @param error
	 *            the {@link #error} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((error == null) ? 0 : error.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FacebookErrorMessage other = (FacebookErrorMessage) obj; if (error == null) { if (other.error != null)
				return false; } else if (!error.equals(other.error))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""FacebookErrorMessage [error="" + error + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/incoming/MessageEnvelope.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming;

import java.io.Serializable;
import java.util.Calendar;

import co.aurasphere.botmill.fb.model.base.User;
import co.aurasphere.botmill.fb.model.incoming.callback.AccountLinking;
import co.aurasphere.botmill.fb.model.incoming.callback.CheckoutUpdate;
import co.aurasphere.botmill.fb.model.incoming.callback.DeliveredMessage;
import co.aurasphere.botmill.fb.model.incoming.callback.IncomingMessage;
import co.aurasphere.botmill.fb.model.incoming.callback.Optin;
import co.aurasphere.botmill.fb.model.incoming.callback.Postback;
import co.aurasphere.botmill.fb.model.incoming.callback.PreCheckout;
import co.aurasphere.botmill.fb.model.incoming.callback.Read;
import co.aurasphere.botmill.fb.model.incoming.callback.Referral;
import co.aurasphere.botmill.fb.model.incoming.callback.payment.Payment;

import com.google.gson.annotations.SerializedName;


/**
 * A generic incoming message envelope.
 *
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#format""
 *      >Facebook's Messenger Platform Common Format Documentation</a>
 * 
 */
public class MessageEnvelope implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The message sender.
	 */
	private User sender;

	/**
	 * The message recipient.
	 */
	private User recipient;

	/**
	 * The message timestamp.
	 */
	private Calendar timestamp;

	/**
	 * Message content for message and message_echoes callback.
	 */
	private IncomingMessage message;

	/**
	 * Postback object for messaging_postbacks callback.
	 */
	private Postback postback;

	/**
	 * Optin object for messaging_optins callback.
	 */
	private Optin optin;

	/**
	 * Object for Account Linking callback.
	 */
	@SerializedName(""account_linking"")
	private AccountLinking accountLinking;

	/**
	 * Delivery object for message_deliveries callback.
	 */
	private DeliveredMessage delivery;

	/**
	 * Read object for message_reads callback.
	 */
	private Read read;

	/**
	 * Referral object for messaging_referral callback.
	 */
	private Referral referral;

	/**
	 * Payment object for messaging_payments callback.
	 */
	private Payment payment;

	/**
	 * Checkout update object for messaging_checkout_updates callback.
	 */
	@SerializedName(""checkout_update"")
	private CheckoutUpdate checkoutUpdate;

	/**
	 * Pre-Checkout update object for messaging_pre_checkouts callback.
	 */
	@SerializedName(""pre_checkout"")
	private PreCheckout preCheckout;

	/**
	 * Gets the {@link #sender}.
	 *
	 * @return the {@link #sender}.
	 */
	public User getSender() {
		return sender;
	}

	/**
	 * Sets the {@link #sender}.
	 *
	 * @param sender
	 *            the {@link #sender} to set.
	 */
	public void setSender(User sender) {
		this.sender = sender;
	}

	/**
	 * Gets the {@link #recipient}.
	 *
	 * @return the {@link #recipient}.
	 */
	public User getRecipient() {
		return recipient;
	}

	/**
	 * Sets the {@link #recipient}.
	 *
	 * @param recipient
	 *            the {@link #recipient} to set.
	 */
	public void setRecipient(User recipient) {
		this.recipient = recipient;
	}

	/**
	 * Gets the {@link #timestamp}.
	 *
	 * @return the {@link #timestamp}.
	 */
	public Calendar getTimestamp() {
		return timestamp;
	}

	/**
	 * Sets the {@link #timestamp}.
	 *
	 * @param timestamp
	 *            the {@link #timestamp} to set.
	 */
	public void setTimestamp(Calendar timestamp) {
		this.timestamp = timestamp;
	}

	/**
	 * Gets the {@link #message}.
	 *
	 * @return the {@link #message}.
	 */
	public IncomingMessage getMessage() {
		return message;
	}

	/**
	 * Sets the {@link #message}.
	 *
	 * @param message
	 *            the {@link #message} to set.
	 */
	public void setMessage(IncomingMessage message) {
		this.message = message;
	}

	/**
	 * Gets the {@link #postback}.
	 *
	 * @return the {@link #postback}.
	 */
	public Postback getPostback() {
		return postback;
	}

	/**
	 * Sets the {@link #postback}.
	 *
	 * @param postback
	 *            the {@link #postback} to set.
	 */
	public void setPostback(Postback postback) {
		this.postback = postback;
	}

	/**
	 * Gets the {@link #optin}.
	 *
	 * @return the {@link #optin}.
	 */
	public Optin getOptin() {
		return optin;
	}

	/**
	 * Sets the {@link #optin}.
	 *
	 * @param optin
	 *            the {@link #optin} to set.
	 */
	public void setOptin(Optin optin) {
		this.optin = optin;
	}

	/**
	 * Gets the {@link #accountLinking}.
	 *
	 * @return the {@link #accountLinking}.
	 */
	public AccountLinking getAccountLinking() {
		return accountLinking;
	}

	/**
	 * Sets the {@link #accountLinking}.
	 *
	 * @param accountLinking
	 *            the {@link #accountLinking} to set.
	 */
	public void setAccountLinking(AccountLinking accountLinking) {
		this.accountLinking = accountLinking;
	}

	/**
	 * Gets the {@link #delivery}.
	 *
	 * @return the {@link #delivery}.
	 */
	public DeliveredMessage getDelivery() {
		return delivery;
	}

	/**
	 * Sets the {@link #delivery}.
	 *
	 * @param delivery
	 *            the {@link #delivery} to set.
	 */
	public void setDelivery(DeliveredMessage delivery) {
		this.delivery = delivery;
	}

	/**
	 * Gets the {@link #read}.
	 *
	 * @return the {@link #read}.
	 */
	public Read getRead() {
		return read;
	}

	/**
	 * Sets the {@link #read}.
	 *
	 * @param read
	 *            the {@link #read} to set.
	 */
	public void setRead(Read read) {
		this.read = read;
	}

	/**
	 * Gets the {@link #referral}.
	 *
	 * @return the {@link #referral}.
	 */
	public Referral getReferral() {
		return referral;
	}

	/**
	 * Sets the {@link #referral}.
	 *
	 * @param referral
	 *            the {@link #referral} to set.
	 */
	public void setReferral(Referral referral) {
		this.referral = referral;
	}

	/**
	 * Gets the {@link #payment}.
	 *
	 * @return the {@link #payment}.
	 */
	public Payment getPayment() {
		return payment;
	}

	/**
	 * Sets the {@link #payment}.
	 *
	 * @param payment
	 *            the {@link #payment} to set.
	 */
	public void setPayment(Payment payment) {
		this.payment = payment;
	}

	/**
	 * Gets the {@link #checkoutUpdate}.
	 *
	 * @return the {@link #checkoutUpdate}.
	 */
	public CheckoutUpdate getCheckoutUpdate() {
		return checkoutUpdate;
	}

	/**
	 * Sets the {@link #checkoutUpdate}.
	 *
	 * @param checkoutUpdate
	 *            the {@link #checkoutUpdate} to set.
	 */
	public void setCheckoutUpdate(CheckoutUpdate checkoutUpdate) {
		this.checkoutUpdate = checkoutUpdate;
	}

	/**
	 * Gets the {@link #preCheckout}.
	 *
	 * @return the {@link #preCheckout}.
	 */
	public PreCheckout getPreCheckout() {
		return preCheckout;
	}

	/**
	 * Sets the {@link #preCheckout}.
	 *
	 * @param preCheckout
	 *            the {@link #preCheckout} to set.
	 */
	public void setPreCheckout(PreCheckout preCheckout) {
		this.preCheckout = preCheckout;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((accountLinking == null) ? 0 : accountLinking.hashCode());
		result = prime * result
				+ ((checkoutUpdate == null) ? 0 : checkoutUpdate.hashCode());
		result = prime * result
				+ ((delivery == null) ? 0 : delivery.hashCode());
		result = prime * result + ((message == null) ? 0 : message.hashCode());
		result = prime * result + ((optin == null) ? 0 : optin.hashCode());
		result = prime * result + ((payment == null) ? 0 : payment.hashCode());
		result = prime * result
				+ ((postback == null) ? 0 : postback.hashCode());
		result = prime * result
				+ ((preCheckout == null) ? 0 : preCheckout.hashCode());
		result = prime * result + ((read == null) ? 0 : read.hashCode());
		result = prime * result
				+ ((recipient == null) ? 0 : recipient.hashCode());
		result = prime * result
				+ ((referral == null) ? 0 : referral.hashCode());
		result = prime * result + ((sender == null) ? 0 : sender.hashCode());
		result = prime * result
				+ ((timestamp == null) ? 0 : timestamp.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		MessageEnvelope other = (MessageEnvelope) obj;
		if (accountLinking == null) {
			if (other.accountLinking != null)
				return false;
		} else if (!accountLinking.equals(other.accountLinking))
			return false;
		if (checkoutUpdate == null) {
			if (other.checkoutUpdate != null)
				return false;
		} else if (!checkoutUpdate.equals(other.checkoutUpdate))
			return false;
		if (delivery == null) {
			if (other.delivery != null)
				return false;
		} else if (!delivery.equals(other.delivery))
			return false;
		if (message == null) {
			if (other.message != null)
				return false;
		} else if (!message.equals(other.message))
			return false;
		if (optin == null) {
			if (other.optin != null)
				return false;
		} else if (!optin.equals(other.optin))
			return false;
		if (payment == null) {
			if (other.payment != null)
				return false;
		} else if (!payment.equals(other.payment))
			return false;
		if (postback == null) {
			if (other.postback != null)
				return false;
		} else if (!postback.equals(other.postback))
			return false;
		if (preCheckout == null) {
			if (other.preCheckout != null)
				return false;
		} else if (!preCheckout.equals(other.preCheckout))
			return false;
		if (read == null) {
			if (other.read != null)
				return false;
		} else if (!read.equals(other.read))
			return false;
		if (recipient == null) {
			if (other.recipient != null)
				return false;
		} else if (!recipient.equals(other.recipient))
			return false;
		if (referral == null) {
			if (other.referral != null)
				return false;
		} else if (!referral.equals(other.referral))
			return false;
		if (sender == null) {
			if (other.sender != null)
				return false;
		} else if (!sender.equals(other.sender))
			return false;
		if (timestamp == null) {
			if (other.timestamp != null)
				return false;
		} else if (!timestamp.equals(other.timestamp))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""MessageEnvelope [sender="" + sender + "", recipient="" + recipient
				+ "", timestamp="" + timestamp + "", message="" + message
				+ "", postback="" + postback + "", optin="" + optin
				+ "", accountLinking="" + accountLinking + "", delivery=""
				+ delivery + "", read="" + read + "", referral="" + referral
				+ "", payment="" + payment + "", checkoutUpdate="" + checkoutUpdate
				+ "", preCheckout="" + preCheckout + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.incoming; public class MessageEnvelope implements Serializable { private static final long serialVersionUID = 1L; private User sender; private User recipient; private Calendar timestamp; private IncomingMessage message; private Postback postback; private Optin optin; @SerializedName(""account_linking"")
	private AccountLinking accountLinking; private DeliveredMessage delivery; private Read read; private Referral referral; private Payment payment; @SerializedName(""checkout_update"")
	private CheckoutUpdate checkoutUpdate; @SerializedName(""pre_checkout"")
	private PreCheckout preCheckout; public User getSender() { return sender; } public void setSender(User sender) { this.sender = sender; } public User getRecipient() { return recipient; } public void setRecipient(User recipient) { this.recipient = recipient; } public Calendar getTimestamp() { return timestamp; } public void setTimestamp(Calendar timestamp) { this.timestamp = timestamp; } public IncomingMessage getMessage() { return message; } public void setMessage(IncomingMessage message) { this.message = message; } public Postback getPostback() { return postback; } public void setPostback(Postback postback) { this.postback = postback; } public Optin getOptin() { return optin; } public void setOptin(Optin optin) { this.optin = optin; } public AccountLinking getAccountLinking() { return accountLinking; } public void setAccountLinking(AccountLinking accountLinking) { this.accountLinking = accountLinking; } public DeliveredMessage getDelivery() { return delivery; } public void setDelivery(DeliveredMessage delivery) { this.delivery = delivery; } public Read getRead() { return read; } public void setRead(Read read) { this.read = read; } public Referral getReferral() { return referral; } public void setReferral(Referral referral) { this.referral = referral; } public Payment getPayment() { return payment; } public void setPayment(Payment payment) { this.payment = payment; } public CheckoutUpdate getCheckoutUpdate() { return checkoutUpdate; } public void setCheckoutUpdate(CheckoutUpdate checkoutUpdate) { this.checkoutUpdate = checkoutUpdate; } public PreCheckout getPreCheckout() { return preCheckout; } public void setPreCheckout(PreCheckout preCheckout) { this.preCheckout = preCheckout; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((accountLinking == null) ? 0 : accountLinking.hashCode()); result = prime * result
				+ ((checkoutUpdate == null) ? 0 : checkoutUpdate.hashCode()); result = prime * result
				+ ((delivery == null) ? 0 : delivery.hashCode()); result = prime * result + ((message == null) ? 0 : message.hashCode()); result = prime * result + ((optin == null) ? 0 : optin.hashCode()); result = prime * result + ((payment == null) ? 0 : payment.hashCode()); result = prime * result
				+ ((postback == null) ? 0 : postback.hashCode()); result = prime * result
				+ ((preCheckout == null) ? 0 : preCheckout.hashCode()); result = prime * result + ((read == null) ? 0 : read.hashCode()); result = prime * result
				+ ((recipient == null) ? 0 : recipient.hashCode()); result = prime * result
				+ ((referral == null) ? 0 : referral.hashCode()); result = prime * result + ((sender == null) ? 0 : sender.hashCode()); result = prime * result
				+ ((timestamp == null) ? 0 : timestamp.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; MessageEnvelope other = (MessageEnvelope) obj; if (accountLinking == null) { if (other.accountLinking != null)
				return false; } else if (!accountLinking.equals(other.accountLinking))
			return false; if (checkoutUpdate == null) { if (other.checkoutUpdate != null)
				return false; } else if (!checkoutUpdate.equals(other.checkoutUpdate))
			return false; if (delivery == null) { if (other.delivery != null)
				return false; } else if (!delivery.equals(other.delivery))
			return false; if (message == null) { if (other.message != null)
				return false; } else if (!message.equals(other.message))
			return false; if (optin == null) { if (other.optin != null)
				return false; } else if (!optin.equals(other.optin))
			return false; if (payment == null) { if (other.payment != null)
				return false; } else if (!payment.equals(other.payment))
			return false; if (postback == null) { if (other.postback != null)
				return false; } else if (!postback.equals(other.postback))
			return false; if (preCheckout == null) { if (other.preCheckout != null)
				return false; } else if (!preCheckout.equals(other.preCheckout))
			return false; if (read == null) { if (other.read != null)
				return false; } else if (!read.equals(other.read))
			return false; if (recipient == null) { if (other.recipient != null)
				return false; } else if (!recipient.equals(other.recipient))
			return false; if (referral == null) { if (other.referral != null)
				return false; } else if (!referral.equals(other.referral))
			return false; if (sender == null) { if (other.sender != null)
				return false; } else if (!sender.equals(other.sender))
			return false; if (timestamp == null) { if (other.timestamp != null)
				return false; } else if (!timestamp.equals(other.timestamp))
			return false; return true; } @Override
	public String toString() { return ""MessageEnvelope [sender="" + sender + "", recipient="" + recipient
				+ "", timestamp="" + timestamp + "", message="" + message
				+ "", postback="" + postback + "", optin="" + optin
				+ "", accountLinking="" + accountLinking + "", delivery=""
				+ delivery + "", read="" + read + "", referral="" + referral
				+ "", payment="" + payment + "", checkoutUpdate="" + checkoutUpdate
				+ "", preCheckout="" + preCheckout + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.incoming; public class MessageEnvelope implements Serializable { private static final long serialVersionUID = 1L; private User sender; private User recipient; private Calendar timestamp; private IncomingMessage message; private Postback postback; private Optin optin; @SerializedName(""account_linking"")
	private AccountLinking accountLinking; private DeliveredMessage delivery; private Read read; private Referral referral; private Payment payment; @SerializedName(""checkout_update"")
	private CheckoutUpdate checkoutUpdate; @SerializedName(""pre_checkout"")
	private PreCheckout preCheckout; public User getSender() { return sender; } public void setSender(User sender) { this.sender = sender; } public User getRecipient() { return recipient; } public void setRecipient(User recipient) { this.recipient = recipient; } public Calendar getTimestamp() { return timestamp; } public void setTimestamp(Calendar timestamp) { this.timestamp = timestamp; } public IncomingMessage getMessage() { return message; } public void setMessage(IncomingMessage message) { this.message = message; } public Postback getPostback() { return postback; } public void setPostback(Postback postback) { this.postback = postback; } public Optin getOptin() { return optin; } public void setOptin(Optin optin) { this.optin = optin; } public AccountLinking getAccountLinking() { return accountLinking; } public void setAccountLinking(AccountLinking accountLinking) { this.accountLinking = accountLinking; } public DeliveredMessage getDelivery() { return delivery; } public void setDelivery(DeliveredMessage delivery) { this.delivery = delivery; } public Read getRead() { return read; } public void setRead(Read read) { this.read = read; } public Referral getReferral() { return referral; } public void setReferral(Referral referral) { this.referral = referral; } public Payment getPayment() { return payment; } public void setPayment(Payment payment) { this.payment = payment; } public CheckoutUpdate getCheckoutUpdate() { return checkoutUpdate; } public void setCheckoutUpdate(CheckoutUpdate checkoutUpdate) { this.checkoutUpdate = checkoutUpdate; } public PreCheckout getPreCheckout() { return preCheckout; } public void setPreCheckout(PreCheckout preCheckout) { this.preCheckout = preCheckout; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((accountLinking == null) ? 0 : accountLinking.hashCode()); result = prime * result
				+ ((checkoutUpdate == null) ? 0 : checkoutUpdate.hashCode()); result = prime * result
				+ ((delivery == null) ? 0 : delivery.hashCode()); result = prime * result + ((message == null) ? 0 : message.hashCode()); result = prime * result + ((optin == null) ? 0 : optin.hashCode()); result = prime * result + ((payment == null) ? 0 : payment.hashCode()); result = prime * result
				+ ((postback == null) ? 0 : postback.hashCode()); result = prime * result
				+ ((preCheckout == null) ? 0 : preCheckout.hashCode()); result = prime * result + ((read == null) ? 0 : read.hashCode()); result = prime * result
				+ ((recipient == null) ? 0 : recipient.hashCode()); result = prime * result
				+ ((referral == null) ? 0 : referral.hashCode()); result = prime * result + ((sender == null) ? 0 : sender.hashCode()); result = prime * result
				+ ((timestamp == null) ? 0 : timestamp.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; MessageEnvelope other = (MessageEnvelope) obj; if (accountLinking == null) { if (other.accountLinking != null)
				return false; } else if (!accountLinking.equals(other.accountLinking))
			return false; if (checkoutUpdate == null) { if (other.checkoutUpdate != null)
				return false; } else if (!checkoutUpdate.equals(other.checkoutUpdate))
			return false; if (delivery == null) { if (other.delivery != null)
				return false; } else if (!delivery.equals(other.delivery))
			return false; if (message == null) { if (other.message != null)
				return false; } else if (!message.equals(other.message))
			return false; if (optin == null) { if (other.optin != null)
				return false; } else if (!optin.equals(other.optin))
			return false; if (payment == null) { if (other.payment != null)
				return false; } else if (!payment.equals(other.payment))
			return false; if (postback == null) { if (other.postback != null)
				return false; } else if (!postback.equals(other.postback))
			return false; if (preCheckout == null) { if (other.preCheckout != null)
				return false; } else if (!preCheckout.equals(other.preCheckout))
			return false; if (read == null) { if (other.read != null)
				return false; } else if (!read.equals(other.read))
			return false; if (recipient == null) { if (other.recipient != null)
				return false; } else if (!recipient.equals(other.recipient))
			return false; if (referral == null) { if (other.referral != null)
				return false; } else if (!referral.equals(other.referral))
			return false; if (sender == null) { if (other.sender != null)
				return false; } else if (!sender.equals(other.sender))
			return false; if (timestamp == null) { if (other.timestamp != null)
				return false; } else if (!timestamp.equals(other.timestamp))
			return false; return true; } @Override
	public String toString() { return ""MessageEnvelope [sender="" + sender + "", recipient="" + recipient
				+ "", timestamp="" + timestamp + "", message="" + message
				+ "", postback="" + postback + "", optin="" + optin
				+ "", accountLinking="" + accountLinking + "", delivery=""
				+ delivery + "", read="" + read + "", referral="" + referral
				+ "", payment="" + payment + "", checkoutUpdate="" + checkoutUpdate
				+ "", preCheckout="" + preCheckout + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming; 
import java.io.Serializable; import java.util.Calendar; 
import co.aurasphere.botmill.fb.model.base.User; import co.aurasphere.botmill.fb.model.incoming.callback.AccountLinking; import co.aurasphere.botmill.fb.model.incoming.callback.CheckoutUpdate; import co.aurasphere.botmill.fb.model.incoming.callback.DeliveredMessage; import co.aurasphere.botmill.fb.model.incoming.callback.IncomingMessage; import co.aurasphere.botmill.fb.model.incoming.callback.Optin; import co.aurasphere.botmill.fb.model.incoming.callback.Postback; import co.aurasphere.botmill.fb.model.incoming.callback.PreCheckout; import co.aurasphere.botmill.fb.model.incoming.callback.Read; import co.aurasphere.botmill.fb.model.incoming.callback.Referral; import co.aurasphere.botmill.fb.model.incoming.callback.payment.Payment; 
import com.google.gson.annotations.SerializedName; 
  public class MessageEnvelope implements Serializable { /**
 * A generic incoming message envelope.
 *
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#format""
 *      >Facebook's Messenger Platform Common Format Documentation</a>
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  private User sender; /**
	 * The message sender.
	 */  private User recipient; /**
	 * The message recipient.
	 */  private Calendar timestamp; /**
	 * The message timestamp.
	 */  private IncomingMessage message; /**
	 * Message content for message and message_echoes callback.
	 */  private Postback postback; /**
	 * Postback object for messaging_postbacks callback.
	 */  private Optin optin; /**
	 * Optin object for messaging_optins callback.
	 */  @SerializedName(""account_linking"")
	private AccountLinking accountLinking; /**
	 * Object for Account Linking callback.
	 */  private DeliveredMessage delivery; /**
	 * Delivery object for message_deliveries callback.
	 */  private Read read; /**
	 * Read object for message_reads callback.
	 */  private Referral referral; /**
	 * Referral object for messaging_referral callback.
	 */  private Payment payment; /**
	 * Payment object for messaging_payments callback.
	 */  @SerializedName(""checkout_update"")
	private CheckoutUpdate checkoutUpdate; /**
	 * Checkout update object for messaging_checkout_updates callback.
	 */  @SerializedName(""pre_checkout"")
	private PreCheckout preCheckout; /**
	 * Pre-Checkout update object for messaging_pre_checkouts callback.
	 */  public User getSender() { return sender; } /**
	 * Gets the {@link #sender}.
	 *
	 * @return the {@link #sender}.
	 */  public void setSender(User sender) { this.sender = sender; } /**
	 * Sets the {@link #sender}.
	 *
	 * @param sender
	 *            the {@link #sender} to set.
	 */  public User getRecipient() { return recipient; } /**
	 * Gets the {@link #recipient}.
	 *
	 * @return the {@link #recipient}.
	 */  public void setRecipient(User recipient) { this.recipient = recipient; } /**
	 * Sets the {@link #recipient}.
	 *
	 * @param recipient
	 *            the {@link #recipient} to set.
	 */  public Calendar getTimestamp() { return timestamp; } /**
	 * Gets the {@link #timestamp}.
	 *
	 * @return the {@link #timestamp}.
	 */  public void setTimestamp(Calendar timestamp) { this.timestamp = timestamp; } /**
	 * Sets the {@link #timestamp}.
	 *
	 * @param timestamp
	 *            the {@link #timestamp} to set.
	 */  public IncomingMessage getMessage() { return message; } /**
	 * Gets the {@link #message}.
	 *
	 * @return the {@link #message}.
	 */  public void setMessage(IncomingMessage message) { this.message = message; } /**
	 * Sets the {@link #message}.
	 *
	 * @param message
	 *            the {@link #message} to set.
	 */  public Postback getPostback() { return postback; } /**
	 * Gets the {@link #postback}.
	 *
	 * @return the {@link #postback}.
	 */  public void setPostback(Postback postback) { this.postback = postback; } /**
	 * Sets the {@link #postback}.
	 *
	 * @param postback
	 *            the {@link #postback} to set.
	 */  public Optin getOptin() { return optin; } /**
	 * Gets the {@link #optin}.
	 *
	 * @return the {@link #optin}.
	 */  public void setOptin(Optin optin) { this.optin = optin; } /**
	 * Sets the {@link #optin}.
	 *
	 * @param optin
	 *            the {@link #optin} to set.
	 */  public AccountLinking getAccountLinking() { return accountLinking; } /**
	 * Gets the {@link #accountLinking}.
	 *
	 * @return the {@link #accountLinking}.
	 */  public void setAccountLinking(AccountLinking accountLinking) { this.accountLinking = accountLinking; } /**
	 * Sets the {@link #accountLinking}.
	 *
	 * @param accountLinking
	 *            the {@link #accountLinking} to set.
	 */  public DeliveredMessage getDelivery() { return delivery; } /**
	 * Gets the {@link #delivery}.
	 *
	 * @return the {@link #delivery}.
	 */  public void setDelivery(DeliveredMessage delivery) { this.delivery = delivery; } /**
	 * Sets the {@link #delivery}.
	 *
	 * @param delivery
	 *            the {@link #delivery} to set.
	 */  public Read getRead() { return read; } /**
	 * Gets the {@link #read}.
	 *
	 * @return the {@link #read}.
	 */  public void setRead(Read read) { this.read = read; } /**
	 * Sets the {@link #read}.
	 *
	 * @param read
	 *            the {@link #read} to set.
	 */  public Referral getReferral() { return referral; } /**
	 * Gets the {@link #referral}.
	 *
	 * @return the {@link #referral}.
	 */  public void setReferral(Referral referral) { this.referral = referral; } /**
	 * Sets the {@link #referral}.
	 *
	 * @param referral
	 *            the {@link #referral} to set.
	 */  public Payment getPayment() { return payment; } /**
	 * Gets the {@link #payment}.
	 *
	 * @return the {@link #payment}.
	 */  public void setPayment(Payment payment) { this.payment = payment; } /**
	 * Sets the {@link #payment}.
	 *
	 * @param payment
	 *            the {@link #payment} to set.
	 */  public CheckoutUpdate getCheckoutUpdate() { return checkoutUpdate; } /**
	 * Gets the {@link #checkoutUpdate}.
	 *
	 * @return the {@link #checkoutUpdate}.
	 */  public void setCheckoutUpdate(CheckoutUpdate checkoutUpdate) { this.checkoutUpdate = checkoutUpdate; } /**
	 * Sets the {@link #checkoutUpdate}.
	 *
	 * @param checkoutUpdate
	 *            the {@link #checkoutUpdate} to set.
	 */  public PreCheckout getPreCheckout() { return preCheckout; } /**
	 * Gets the {@link #preCheckout}.
	 *
	 * @return the {@link #preCheckout}.
	 */  public void setPreCheckout(PreCheckout preCheckout) { this.preCheckout = preCheckout; } /**
	 * Sets the {@link #preCheckout}.
	 *
	 * @param preCheckout
	 *            the {@link #preCheckout} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((accountLinking == null) ? 0 : accountLinking.hashCode()); result = prime * result
				+ ((checkoutUpdate == null) ? 0 : checkoutUpdate.hashCode()); result = prime * result
				+ ((delivery == null) ? 0 : delivery.hashCode()); result = prime * result + ((message == null) ? 0 : message.hashCode()); result = prime * result + ((optin == null) ? 0 : optin.hashCode()); result = prime * result + ((payment == null) ? 0 : payment.hashCode()); result = prime * result
				+ ((postback == null) ? 0 : postback.hashCode()); result = prime * result
				+ ((preCheckout == null) ? 0 : preCheckout.hashCode()); result = prime * result + ((read == null) ? 0 : read.hashCode()); result = prime * result
				+ ((recipient == null) ? 0 : recipient.hashCode()); result = prime * result
				+ ((referral == null) ? 0 : referral.hashCode()); result = prime * result + ((sender == null) ? 0 : sender.hashCode()); result = prime * result
				+ ((timestamp == null) ? 0 : timestamp.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; MessageEnvelope other = (MessageEnvelope) obj; if (accountLinking == null) { if (other.accountLinking != null)
				return false; } else if (!accountLinking.equals(other.accountLinking))
			return false; if (checkoutUpdate == null) { if (other.checkoutUpdate != null)
				return false; } else if (!checkoutUpdate.equals(other.checkoutUpdate))
			return false; if (delivery == null) { if (other.delivery != null)
				return false; } else if (!delivery.equals(other.delivery))
			return false; if (message == null) { if (other.message != null)
				return false; } else if (!message.equals(other.message))
			return false; if (optin == null) { if (other.optin != null)
				return false; } else if (!optin.equals(other.optin))
			return false; if (payment == null) { if (other.payment != null)
				return false; } else if (!payment.equals(other.payment))
			return false; if (postback == null) { if (other.postback != null)
				return false; } else if (!postback.equals(other.postback))
			return false; if (preCheckout == null) { if (other.preCheckout != null)
				return false; } else if (!preCheckout.equals(other.preCheckout))
			return false; if (read == null) { if (other.read != null)
				return false; } else if (!read.equals(other.read))
			return false; if (recipient == null) { if (other.recipient != null)
				return false; } else if (!recipient.equals(other.recipient))
			return false; if (referral == null) { if (other.referral != null)
				return false; } else if (!referral.equals(other.referral))
			return false; if (sender == null) { if (other.sender != null)
				return false; } else if (!sender.equals(other.sender))
			return false; if (timestamp == null) { if (other.timestamp != null)
				return false; } else if (!timestamp.equals(other.timestamp))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""MessageEnvelope [sender="" + sender + "", recipient="" + recipient
				+ "", timestamp="" + timestamp + "", message="" + message
				+ "", postback="" + postback + "", optin="" + optin
				+ "", accountLinking="" + accountLinking + "", delivery=""
				+ delivery + "", read="" + read + "", referral="" + referral
				+ "", payment="" + payment + "", checkoutUpdate="" + checkoutUpdate
				+ "", preCheckout="" + preCheckout + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/incoming/MessengerCallback.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming;

import java.io.Serializable;
import java.util.List;


/**
 * The base model of the Facebook's Messenger Platform callback. Used to model
 * all the received callbacks.
 *
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#format""
 *      >Facebook's Messenger Platform Common Format Documentation</a>
 * 
 */
public class MessengerCallback implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The type of callback. This always evaluates to ""page"".
	 */
	private MessengerCallbackObject object;

	/**
	 * A list of {@link MessengerCallbackEntry} for the current callback
	 * containing event data.
	 */
	private List<MessengerCallbackEntry> entry;

	/**
	 * Gets the {@link #object}.
	 *
	 * @return the {@link #object}.
	 */
	public MessengerCallbackObject getObject() {
		return object;
	}

	/**
	 * Sets the {@link #object}.
	 *
	 * @param object
	 *            the {@link #object} to set.
	 */
	public void setObject(MessengerCallbackObject object) {
		this.object = object;
	}

	/**
	 * Gets the {@link #entry}.
	 *
	 * @return the {@link #entry}.
	 */
	public List<MessengerCallbackEntry> getEntry() {
		return entry;
	}

	/**
	 * Sets the {@link #entry}.
	 *
	 * @param entry
	 *            the {@link #entry} to set.
	 */
	public void setEntry(List<MessengerCallbackEntry> entry) {
		this.entry = entry;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((entry == null) ? 0 : entry.hashCode());
		result = prime * result + ((object == null) ? 0 : object.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		MessengerCallback other = (MessengerCallback) obj;
		if (entry == null) {
			if (other.entry != null)
				return false;
		} else if (!entry.equals(other.entry))
			return false;
		if (object == null) {
			if (other.object != null)
				return false;
		} else if (!object.equals(other.object))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""MessengerCallback [object="" + object + "", entry="" + entry + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.incoming; public class MessengerCallback implements Serializable { private static final long serialVersionUID = 1L; private MessengerCallbackObject object; private List<MessengerCallbackEntry> entry; public MessengerCallbackObject getObject() { return object; } public void setObject(MessengerCallbackObject object) { this.object = object; } public List<MessengerCallbackEntry> getEntry() { return entry; } public void setEntry(List<MessengerCallbackEntry> entry) { this.entry = entry; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((entry == null) ? 0 : entry.hashCode()); result = prime * result + ((object == null) ? 0 : object.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; MessengerCallback other = (MessengerCallback) obj; if (entry == null) { if (other.entry != null)
				return false; } else if (!entry.equals(other.entry))
			return false; if (object == null) { if (other.object != null)
				return false; } else if (!object.equals(other.object))
			return false; return true; } @Override
	public String toString() { return ""MessengerCallback [object="" + object + "", entry="" + entry + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.incoming; public class MessengerCallback implements Serializable { private static final long serialVersionUID = 1L; private MessengerCallbackObject object; private List<MessengerCallbackEntry> entry; public MessengerCallbackObject getObject() { return object; } public void setObject(MessengerCallbackObject object) { this.object = object; } public List<MessengerCallbackEntry> getEntry() { return entry; } public void setEntry(List<MessengerCallbackEntry> entry) { this.entry = entry; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((entry == null) ? 0 : entry.hashCode()); result = prime * result + ((object == null) ? 0 : object.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; MessengerCallback other = (MessengerCallback) obj; if (entry == null) { if (other.entry != null)
				return false; } else if (!entry.equals(other.entry))
			return false; if (object == null) { if (other.object != null)
				return false; } else if (!object.equals(other.object))
			return false; return true; } @Override
	public String toString() { return ""MessengerCallback [object="" + object + "", entry="" + entry + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming; 
import java.io.Serializable; import java.util.List; 
  public class MessengerCallback implements Serializable { /**
 * The base model of the Facebook's Messenger Platform callback. Used to model
 * all the received callbacks.
 *
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#format""
 *      >Facebook's Messenger Platform Common Format Documentation</a>
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  private MessengerCallbackObject object; /**
	 * The type of callback. This always evaluates to ""page"".
	 */  private List<MessengerCallbackEntry> entry; /**
	 * A list of {@link MessengerCallbackEntry} for the current callback
	 * containing event data.
	 */  public MessengerCallbackObject getObject() { return object; } /**
	 * Gets the {@link #object}.
	 *
	 * @return the {@link #object}.
	 */  public void setObject(MessengerCallbackObject object) { this.object = object; } /**
	 * Sets the {@link #object}.
	 *
	 * @param object
	 *            the {@link #object} to set.
	 */  public List<MessengerCallbackEntry> getEntry() { return entry; } /**
	 * Gets the {@link #entry}.
	 *
	 * @return the {@link #entry}.
	 */  public void setEntry(List<MessengerCallbackEntry> entry) { this.entry = entry; } /**
	 * Sets the {@link #entry}.
	 *
	 * @param entry
	 *            the {@link #entry} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((entry == null) ? 0 : entry.hashCode()); result = prime * result + ((object == null) ? 0 : object.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; MessengerCallback other = (MessengerCallback) obj; if (entry == null) { if (other.entry != null)
				return false; } else if (!entry.equals(other.entry))
			return false; if (object == null) { if (other.object != null)
				return false; } else if (!object.equals(other.object))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""MessengerCallback [object="" + object + "", entry="" + entry + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/incoming/MessengerCallbackEntry.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming;

import java.io.Serializable;
import java.util.Calendar;
import java.util.List;


/**
 * Represents a received callback from Facebook's Messenger Platform.
 *
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#format""
 *      >Facebook's Messenger Platform Common Format Documentation</a>
 * 
 */
public class MessengerCallbackEntry implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Page ID of page.
	 */
	private String id;

	/**
	 * Time of update (epoch time in milliseconds).
	 */
	private Calendar time;

	/**
	 * A list of {@link MessageEnvelope} that contains all the callback details.
	 */
	private List<MessageEnvelope> messaging;

	/**
	 * Gets the {@link #id}.
	 *
	 * @return the {@link #id}.
	 */
	public String getId() {
		return id;
	}

	/**
	 * Sets the {@link #id}.
	 *
	 * @param id
	 *            the {@link #id} to set.
	 */
	public void setId(String id) {
		this.id = id;
	}

	/**
	 * Gets the {@link #time}.
	 *
	 * @return the {@link #time}.
	 */
	public Calendar getTime() {
		return time;
	}

	/**
	 * Sets the {@link #time}.
	 *
	 * @param time
	 *            the {@link #time} to set.
	 */
	public void setTime(Calendar time) {
		this.time = time;
	}

	/**
	 * Gets the {@link #messaging}.
	 *
	 * @return the {@link #messaging}.
	 */
	public List<MessageEnvelope> getMessaging() {
		return messaging;
	}

	/**
	 * Sets the {@link #messaging}.
	 *
	 * @param messaging
	 *            the {@link #messaging} to set.
	 */
	public void setMessaging(List<MessageEnvelope> messaging) {
		this.messaging = messaging;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result
				+ ((messaging == null) ? 0 : messaging.hashCode());
		result = prime * result + ((time == null) ? 0 : time.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		MessengerCallbackEntry other = (MessengerCallbackEntry) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (messaging == null) {
			if (other.messaging != null)
				return false;
		} else if (!messaging.equals(other.messaging))
			return false;
		if (time == null) {
			if (other.time != null)
				return false;
		} else if (!time.equals(other.time))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""MessengerCallbackEntry [id="" + id + "", time="" + time
				+ "", messaging="" + messaging + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.incoming; public class MessengerCallbackEntry implements Serializable { private static final long serialVersionUID = 1L; private String id; private Calendar time; private List<MessageEnvelope> messaging; public String getId() { return id; } public void setId(String id) { this.id = id; } public Calendar getTime() { return time; } public void setTime(Calendar time) { this.time = time; } public List<MessageEnvelope> getMessaging() { return messaging; } public void setMessaging(List<MessageEnvelope> messaging) { this.messaging = messaging; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((id == null) ? 0 : id.hashCode()); result = prime * result
				+ ((messaging == null) ? 0 : messaging.hashCode()); result = prime * result + ((time == null) ? 0 : time.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; MessengerCallbackEntry other = (MessengerCallbackEntry) obj; if (id == null) { if (other.id != null)
				return false; } else if (!id.equals(other.id))
			return false; if (messaging == null) { if (other.messaging != null)
				return false; } else if (!messaging.equals(other.messaging))
			return false; if (time == null) { if (other.time != null)
				return false; } else if (!time.equals(other.time))
			return false; return true; } @Override
	public String toString() { return ""MessengerCallbackEntry [id="" + id + "", time="" + time
				+ "", messaging="" + messaging + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.incoming; public class MessengerCallbackEntry implements Serializable { private static final long serialVersionUID = 1L; private String id; private Calendar time; private List<MessageEnvelope> messaging; public String getId() { return id; } public void setId(String id) { this.id = id; } public Calendar getTime() { return time; } public void setTime(Calendar time) { this.time = time; } public List<MessageEnvelope> getMessaging() { return messaging; } public void setMessaging(List<MessageEnvelope> messaging) { this.messaging = messaging; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((id == null) ? 0 : id.hashCode()); result = prime * result
				+ ((messaging == null) ? 0 : messaging.hashCode()); result = prime * result + ((time == null) ? 0 : time.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; MessengerCallbackEntry other = (MessengerCallbackEntry) obj; if (id == null) { if (other.id != null)
				return false; } else if (!id.equals(other.id))
			return false; if (messaging == null) { if (other.messaging != null)
				return false; } else if (!messaging.equals(other.messaging))
			return false; if (time == null) { if (other.time != null)
				return false; } else if (!time.equals(other.time))
			return false; return true; } @Override
	public String toString() { return ""MessengerCallbackEntry [id="" + id + "", time="" + time
				+ "", messaging="" + messaging + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming; 
import java.io.Serializable; import java.util.Calendar; import java.util.List; 
  public class MessengerCallbackEntry implements Serializable { /**
 * Represents a received callback from Facebook's Messenger Platform.
 *
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#format""
 *      >Facebook's Messenger Platform Common Format Documentation</a>
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  private String id; /**
	 * Page ID of page.
	 */  private Calendar time; /**
	 * Time of update (epoch time in milliseconds).
	 */  private List<MessageEnvelope> messaging; /**
	 * A list of {@link MessageEnvelope} that contains all the callback details.
	 */  public String getId() { return id; } /**
	 * Gets the {@link #id}.
	 *
	 * @return the {@link #id}.
	 */  public void setId(String id) { this.id = id; } /**
	 * Sets the {@link #id}.
	 *
	 * @param id
	 *            the {@link #id} to set.
	 */  public Calendar getTime() { return time; } /**
	 * Gets the {@link #time}.
	 *
	 * @return the {@link #time}.
	 */  public void setTime(Calendar time) { this.time = time; } /**
	 * Sets the {@link #time}.
	 *
	 * @param time
	 *            the {@link #time} to set.
	 */  public List<MessageEnvelope> getMessaging() { return messaging; } /**
	 * Gets the {@link #messaging}.
	 *
	 * @return the {@link #messaging}.
	 */  public void setMessaging(List<MessageEnvelope> messaging) { this.messaging = messaging; } /**
	 * Sets the {@link #messaging}.
	 *
	 * @param messaging
	 *            the {@link #messaging} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((id == null) ? 0 : id.hashCode()); result = prime * result
				+ ((messaging == null) ? 0 : messaging.hashCode()); result = prime * result + ((time == null) ? 0 : time.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; MessengerCallbackEntry other = (MessengerCallbackEntry) obj; if (id == null) { if (other.id != null)
				return false; } else if (!id.equals(other.id))
			return false; if (messaging == null) { if (other.messaging != null)
				return false; } else if (!messaging.equals(other.messaging))
			return false; if (time == null) { if (other.time != null)
				return false; } else if (!time.equals(other.time))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""MessengerCallbackEntry [id="" + id + "", time="" + time
				+ "", messaging="" + messaging + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/incoming/MessengerCallbackObject.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming;

import com.google.gson.annotations.SerializedName;


/**
 * Object field for a {@link MessengerCallback}.
 * 
 * @author Donato Rimenti
 */
public enum MessengerCallbackObject {
	
	/**
	 * The page.
	 */
	@SerializedName(""page"")
	PAGE;

}
","package co.aurasphere.botmill.fb.model.incoming; public enum MessengerCallbackObject { @SerializedName(""page"")
	PAGE; }",0 0 0 0 0,"package co.aurasphere.botmill.fb.model.incoming; public enum MessengerCallbackObject { @SerializedName(""page"")
	PAGE; } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming; 
import com.google.gson.annotations.SerializedName; 
  public enum MessengerCallbackObject { /**
 * Object field for a {@link MessengerCallback}.
 * 
 * @author Donato Rimenti
 */ 	 @SerializedName(""page"")
	PAGE; /**
	 * The page.
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/FbBotMillResponse.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming;

import java.io.Serializable;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import co.aurasphere.botmill.fb.model.base.User;


/**
 * Object that represents a FbBotMill response.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */
public abstract class FbBotMillResponse implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The recipient of the message.
	 */
	@Valid
	@NotNull
	protected User recipient;

	/**
	 * Gets the {@link #recipient}.
	 *
	 * @return the {@link #recipient}.
	 */
	public User getRecipient() {
		return recipient;
	}

	/**
	 * Sets the {@link #recipient}.
	 *
	 * @param recipient
	 *            the {@link #recipient} to set.
	 */
	public void setRecipient(User recipient) {
		this.recipient = recipient;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((recipient == null) ? 0 : recipient.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		FbBotMillResponse other = (FbBotMillResponse) obj;
		if (recipient == null) {
			if (other.recipient != null)
				return false;
		} else if (!recipient.equals(other.recipient))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""FbBotMillResponse [recipient="" + recipient + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming; public abstract class FbBotMillResponse implements Serializable { private static final long serialVersionUID = 1L; @Valid
	@NotNull
	protected User recipient; public User getRecipient() { return recipient; } public void setRecipient(User recipient) { this.recipient = recipient; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((recipient == null) ? 0 : recipient.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FbBotMillResponse other = (FbBotMillResponse) obj; if (recipient == null) { if (other.recipient != null)
				return false; } else if (!recipient.equals(other.recipient))
			return false; return true; } @Override
	public String toString() { return ""FbBotMillResponse [recipient="" + recipient + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming; public abstract class FbBotMillResponse implements Serializable { private static final long serialVersionUID = 1L; @Valid
	@NotNull
	protected User recipient; public User getRecipient() { return recipient; } public void setRecipient(User recipient) { this.recipient = recipient; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((recipient == null) ? 0 : recipient.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FbBotMillResponse other = (FbBotMillResponse) obj; if (recipient == null) { if (other.recipient != null)
				return false; } else if (!recipient.equals(other.recipient))
			return false; return true; } @Override
	public String toString() { return ""FbBotMillResponse [recipient="" + recipient + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming; 
import java.io.Serializable; 
import javax.validation.Valid; import javax.validation.constraints.NotNull; 
import co.aurasphere.botmill.fb.model.base.User; 
  public abstract class FbBotMillResponse implements Serializable { /**
 * Object that represents a FbBotMill response.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @Valid
	@NotNull
	protected User recipient; /**
	 * The recipient of the message.
	 */  public User getRecipient() { return recipient; } /**
	 * Gets the {@link #recipient}.
	 *
	 * @return the {@link #recipient}.
	 */  public void setRecipient(User recipient) { this.recipient = recipient; } /**
	 * Sets the {@link #recipient}.
	 *
	 * @param recipient
	 *            the {@link #recipient} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((recipient == null) ? 0 : recipient.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FbBotMillResponse other = (FbBotMillResponse) obj; if (recipient == null) { if (other.recipient != null)
				return false; } else if (!recipient.equals(other.recipient))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""FbBotMillResponse [recipient="" + recipient + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/test/java/co/aurasphere/botmill/fb/test/api/MessagingInsightApiTest.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.test.api;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import co.aurasphere.botmill.core.internal.util.ConfigurationUtils;
import co.aurasphere.botmill.fb.api.MessagingInsightApi;
import co.aurasphere.botmill.fb.model.api.messaginginsight.DailyUniqueActiveThreadCounts;
import co.aurasphere.botmill.fb.model.api.messaginginsight.DailyUniqueConversationCounts;

/**
 * Test for {@link MessagingInsightApi}.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */
public class MessagingInsightApiTest {

	/**
	 * The logger.
	 */
	private final static Logger logger = LoggerFactory
			.getLogger(MessagingInsightApiTest.class);
	
	/**
	 * Setup the tests.
	 */
	@Before
	public void setup() {
		ConfigurationUtils.loadEncryptedConfigurationProperties(); // loads the annotated encryption class.
		ConfigurationUtils.loadBotDefinitions(); // loads the annotated bot.
	}

	/**
	 * Tests the {@link MessagingInsightApi#getDailyUniqueActiveThreadCounts()}
	 * method.
	 */
//	@Test
	public void testGetDailyUniqueActiveThreadCounts() {
		DailyUniqueActiveThreadCounts response = MessagingInsightApi
				.getDailyUniqueActiveThreadCounts();
		Assert.assertNotNull(response);
		Assert.assertNotNull(response.getData());
		logger.info(
				""Succesfully got daily unique active thread counts. Response : {}"",
				response);
	}

	/**
	 * Tests the {@link MessagingInsightApi#getDailyUniqueConversationCounts()}
	 * method.
	 */
//	@Test
	public void testGetDailyUniqueConversationCounts() {
		DailyUniqueConversationCounts response = MessagingInsightApi
				.getDailyUniqueConversationCounts();
		Assert.assertNotNull(response);
		Assert.assertNotNull(response.getData());
		logger.info(
				""Succesfully got daily unique conversation counts. Response : {}"",
				response);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""MessagingInsightApiTest []"";
	}

}
","package co.aurasphere.botmill.fb.test.api; public class MessagingInsightApiTest { private final static Logger logger = LoggerFactory
			.getLogger(MessagingInsightApiTest.class); @Before
	public void setup() { ConfigurationUtils.loadEncryptedConfigurationProperties(); ConfigurationUtils.loadBotDefinitions(); } public void testGetDailyUniqueActiveThreadCounts() { DailyUniqueActiveThreadCounts response = MessagingInsightApi
				.getDailyUniqueActiveThreadCounts(); Assert.assertNotNull(response); Assert.assertNotNull(response.getData()); logger.info(
				""Succesfully got daily unique active thread counts. Response : { } "",
				response); } public void testGetDailyUniqueConversationCounts() { DailyUniqueConversationCounts response = MessagingInsightApi
				.getDailyUniqueConversationCounts(); Assert.assertNotNull(response); Assert.assertNotNull(response.getData()); logger.info(
				""Succesfully got daily unique conversation counts. Response : { } "",
				response); } @Override
	public String toString() { return ""MessagingInsightApiTest []""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.test.api; public class MessagingInsightApiTest { private final static Logger logger = LoggerFactory
			.getLogger(MessagingInsightApiTest.class); @Before
	public void setup() { ConfigurationUtils.loadEncryptedConfigurationProperties(); ConfigurationUtils.loadBotDefinitions(); } public void testGetDailyUniqueActiveThreadCounts() { DailyUniqueActiveThreadCounts response = MessagingInsightApi
				.getDailyUniqueActiveThreadCounts(); Assert.assertNotNull(response); Assert.assertNotNull(response.getData()); logger.info(
				""Succesfully got daily unique active thread counts. Response : { } "",
				response); } public void testGetDailyUniqueConversationCounts() { DailyUniqueConversationCounts response = MessagingInsightApi
				.getDailyUniqueConversationCounts(); Assert.assertNotNull(response); Assert.assertNotNull(response.getData()); logger.info(
				""Succesfully got daily unique conversation counts. Response : { } "",
				response); } @Override
	public String toString() { return ""MessagingInsightApiTest []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.test.api; 
import org.junit.Assert; import org.junit.Before; import org.junit.Test; import org.slf4j.Logger; import org.slf4j.LoggerFactory; 
import co.aurasphere.botmill.core.internal.util.ConfigurationUtils; import co.aurasphere.botmill.fb.api.MessagingInsightApi; import co.aurasphere.botmill.fb.model.api.messaginginsight.DailyUniqueActiveThreadCounts; import co.aurasphere.botmill.fb.model.api.messaginginsight.DailyUniqueConversationCounts;  /**
 * Test for {@link MessagingInsightApi}.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */ public class MessagingInsightApiTest {  /**
	 * The logger.
	 */ private final static Logger logger = LoggerFactory
			.getLogger(MessagingInsightApiTest.class); 	 /**
	 * Setup the tests.
	 */ @Before
	public void setup() { ConfigurationUtils.loadEncryptedConfigurationProperties(); // loads the annotated encryption class. ConfigurationUtils.loadBotDefinitions(); // loads the annotated bot. }  /**
	 * Tests the {@link MessagingInsightApi#getDailyUniqueActiveThreadCounts()}
	 * method.
	 */ //	@Test public void testGetDailyUniqueActiveThreadCounts() { DailyUniqueActiveThreadCounts response = MessagingInsightApi
				.getDailyUniqueActiveThreadCounts(); Assert.assertNotNull(response); Assert.assertNotNull(response.getData()); logger.info(
				""Succesfully got daily unique active thread counts. Response : { } "",
				response); }  /**
	 * Tests the {@link MessagingInsightApi#getDailyUniqueConversationCounts()}
	 * method.
	 */ //	@Test public void testGetDailyUniqueConversationCounts() { DailyUniqueConversationCounts response = MessagingInsightApi
				.getDailyUniqueConversationCounts(); Assert.assertNotNull(response); Assert.assertNotNull(response.getData()); logger.info(
				""Succesfully got daily unique conversation counts. Response : { } "",
				response); }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ @Override
	public String toString() { return ""MessagingInsightApiTest []""; }  }  "
src/test/java/co/aurasphere/botmill/fb/test/api/MessengerCodeApiTest.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.test.api;

import org.junit.Assert;
import org.junit.Assume;
import org.junit.Before;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import co.aurasphere.botmill.fb.FbBotMillContext;
import co.aurasphere.botmill.fb.api.MessengerCodeApi;
import co.aurasphere.botmill.fb.model.api.messengercode.MessengerCode;
import co.aurasphere.botmill.fb.model.api.messengercode.MessengerCodeRequest;

/**
 * Test for the {@link MessengerCodeApi} class.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */
public class MessengerCodeApiTest {
	
	private final static Logger logger = LoggerFactory.getLogger(MessengerCodeApiTest.class);
	
	@Before
	public void setup() {
		Assume.assumeTrue(isConfigurationExist());
		FbBotMillContext.getInstance().setup(System.getenv(""fb.page.token""), System.getenv(""fb.validation.token""));
	}

	@Test
	public void testMessengerCodeApi() {
		
		MessengerCode response = MessengerCodeApi.getMessengerCode();
		checkResponse(response);
		
		// Tests different cases.
		response = MessengerCodeApi.getMessengerCode(100);
		checkResponse(response);
		
		response = MessengerCodeApi.getMessengerCode(1000);
		checkResponse(response);
		
		response = MessengerCodeApi.getMessengerCode(new MessengerCodeRequest(2000));
		checkResponse(response);
	
	}
	
	private boolean isConfigurationExist() {
		if(System.getenv(""fb.page.token"") != null && System.getenv(""fb.validation.token"") != null) {
			return true;
		}
		return false;
	}

	/**
	 * Checks if the response is valid.
	 * 
	 * @param response
	 *            the MessengerCode to check.
	 */
	private void checkResponse(MessengerCode response) {
		Assert.assertNotNull(response);
		String uri = response.getUri();
		Assert.assertNotNull(uri);
		Assert.assertNotEquals("""", uri);
		logger.info(
				""Succesfully got a Messenger code from Facebook (uri: [{}])"",
				uri);
	}
}
","package co.aurasphere.botmill.fb.test.api; public class MessengerCodeApiTest { private final static Logger logger = LoggerFactory.getLogger(MessengerCodeApiTest.class); @Before
	public void setup() { Assume.assumeTrue(isConfigurationExist()); FbBotMillContext.getInstance().setup(System.getenv(""fb.page.token""), System.getenv(""fb.validation.token"")); } @Test
	public void testMessengerCodeApi() { MessengerCode response = MessengerCodeApi.getMessengerCode(); checkResponse(response); response = MessengerCodeApi.getMessengerCode(100); checkResponse(response); response = MessengerCodeApi.getMessengerCode(1000); checkResponse(response); response = MessengerCodeApi.getMessengerCode(new MessengerCodeRequest(2000)); checkResponse(response); } private boolean isConfigurationExist() { if(System.getenv(""fb.page.token"") != null && System.getenv(""fb.validation.token"") != null) { return true; } return false; } private void checkResponse(MessengerCode response) { Assert.assertNotNull(response); String uri = response.getUri(); Assert.assertNotNull(uri); Assert.assertNotEquals("""", uri); logger.info(
				""Succesfully got a Messenger code from Facebook (uri: [{ } ])"",
				uri); } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.test.api; public class MessengerCodeApiTest { private final static Logger logger = LoggerFactory.getLogger(MessengerCodeApiTest.class); @Before
	public void setup() { Assume.assumeTrue(isConfigurationExist()); FbBotMillContext.getInstance().setup(System.getenv(""fb.page.token""), System.getenv(""fb.validation.token"")); } @Test
	public void testMessengerCodeApi() { MessengerCode response = MessengerCodeApi.getMessengerCode(); checkResponse(response); response = MessengerCodeApi.getMessengerCode(100); checkResponse(response); response = MessengerCodeApi.getMessengerCode(1000); checkResponse(response); response = MessengerCodeApi.getMessengerCode(new MessengerCodeRequest(2000)); checkResponse(response); } private boolean isConfigurationExist() { if(System.getenv(""fb.page.token"") != null && System.getenv(""fb.validation.token"") != null) { return true; } return false; } private void checkResponse(MessengerCode response) { Assert.assertNotNull(response); String uri = response.getUri(); Assert.assertNotNull(uri); Assert.assertNotEquals("""", uri); logger.info(
				""Succesfully got a Messenger code from Facebook (uri: [{ } ])"",
				uri); } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.test.api; 
import org.junit.Assert; import org.junit.Assume; import org.junit.Before; import org.junit.Test; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import co.aurasphere.botmill.fb.FbBotMillContext; import co.aurasphere.botmill.fb.api.MessengerCodeApi; import co.aurasphere.botmill.fb.model.api.messengercode.MessengerCode; import co.aurasphere.botmill.fb.model.api.messengercode.MessengerCodeRequest;  /**
 * Test for the {@link MessengerCodeApi} class.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */ public class MessengerCodeApiTest { 	 private final static Logger logger = LoggerFactory.getLogger(MessengerCodeApiTest.class); 	 @Before
	public void setup() { Assume.assumeTrue(isConfigurationExist()); FbBotMillContext.getInstance().setup(System.getenv(""fb.page.token""), System.getenv(""fb.validation.token"")); }  @Test
	public void testMessengerCodeApi() { 		 MessengerCode response = MessengerCodeApi.getMessengerCode(); checkResponse(response); 		 // Tests different cases. response = MessengerCodeApi.getMessengerCode(100); checkResponse(response); 		 response = MessengerCodeApi.getMessengerCode(1000); checkResponse(response); 		 response = MessengerCodeApi.getMessengerCode(new MessengerCodeRequest(2000)); checkResponse(response); 	 } 	 private boolean isConfigurationExist() { if(System.getenv(""fb.page.token"") != null && System.getenv(""fb.validation.token"") != null) { return true; } return false; }  /**
	 * Checks if the response is valid.
	 * 
	 * @param response
	 *            the MessengerCode to check.
	 */ private void checkResponse(MessengerCode response) { Assert.assertNotNull(response); String uri = response.getUri(); Assert.assertNotNull(uri); Assert.assertNotEquals("""", uri); logger.info(
				""Succesfully got a Messenger code from Facebook (uri: [{ } ])"",
				uri); } }  "
src/test/java/co/aurasphere/botmill/fb/test/api/MessengerProfileApiTest.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.test.api;

import static org.junit.Assert.assertNotNull;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import org.junit.Test;

import co.aurasphere.botmill.fb.api.MessengerProfileApi;
import co.aurasphere.botmill.fb.model.api.messengerprofile.Greeting;
import co.aurasphere.botmill.fb.model.api.messengerprofile.persistentmenu.CallToActionNested;
import co.aurasphere.botmill.fb.model.api.messengerprofile.persistentmenu.PersistentMenu;
import co.aurasphere.botmill.fb.model.outcoming.factory.ButtonFactory;

/**
 * Test class for the {@link MessengerProfileApi}.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */
public class MessengerProfileApiTest {

	/**
	 * Tests the Get Started Button Messenger Profile.
	 */
//	@Test
	public void testGetStartedButtonMessengerProfile() {
		MessengerProfileApi.setGetStartedButton(""TEST_GET_STARTED_BUTTON"");
		MessengerProfileApi.deleteGetStartedButton();
	}

	/**
	 * Tests the Greeting Text Messenger Profile.
	 */
//	@Test
	public void testGreetingTextMessengerProfile() {
		MessengerProfileApi.setGreetingMessage(""TEST_GREETING_MESSAGE"");
		MessengerProfileApi.deleteGreetingMessage();

		List<Greeting> greetings = new ArrayList<Greeting>();
		greetings.add(new Greeting(""TEST_GREETING_US"", Locale.US));
		greetings.add(new Greeting(""TEST_GREETING_IT"", Locale.ITALY));
		MessengerProfileApi.setGreetingMessage(greetings);
	}

	/**
	 * Tests the Account Whitelisting Messenger Profile.
	 */
//	@Test
	public void testAccountWhitelistingMessengerProfile() {
		List<String> whitelistedDomains = new ArrayList<String>();
		whitelistedDomains.add(""www.google.it"");
		whitelistedDomains.add(""www.aurasphere.co"");
		MessengerProfileApi.setWhitelistedDomains(whitelistedDomains);

		MessengerProfileApi.deleteWhitelistedDomains();
	}

	/**
	 * Tests the Account Linking URL Messenger Profile.
	 */
//	@Test
	public void testAccountLinkingUrlMessengerProfile() {
		MessengerProfileApi.setAccountLinkingUrl(""www.aurasphere.co"");
		MessengerProfileApi.deleteAccountLinkingUrl();
	}

	/**
	 * Test persistent menu.
	 */
//	@Test
	public void testPersistentMenu() {

		MessengerProfileApi.setGetStartedButton(""get_started"");
		MessengerProfileApi.setGreetingMessage(""Greetings!"");

		List<PersistentMenu> persistentMenus = new ArrayList<PersistentMenu>();
		PersistentMenu p = new PersistentMenu(""default"", false);

		CallToActionNested c1 = new CallToActionNested(""Title1"");
		c1.addCallToActionButton(ButtonFactory.createPostbackButton(""hello"",
				""hey1""));
		c1.addCallToActionButton(ButtonFactory.createPostbackButton(""hello"",
				""hey2""));

		p.addCallToAction(c1);
		p.addCallToAction(ButtonFactory.createPostbackButton(""hello"", ""hey1""));
		p.addCallToAction(ButtonFactory.createUrlButton(""asas"",
				""http://alvinpreyes.com""));

		persistentMenus.add(p);

		MessengerProfileApi.setPersistentMenus(persistentMenus);
		assertNotNull(persistentMenus);
	}

}
","package co.aurasphere.botmill.fb.test.api; public class MessengerProfileApiTest { public void testGetStartedButtonMessengerProfile() { MessengerProfileApi.setGetStartedButton(""TEST_GET_STARTED_BUTTON""); MessengerProfileApi.deleteGetStartedButton(); } public void testGreetingTextMessengerProfile() { MessengerProfileApi.setGreetingMessage(""TEST_GREETING_MESSAGE""); MessengerProfileApi.deleteGreetingMessage(); List<Greeting> greetings = new ArrayList<Greeting>(); greetings.add(new Greeting(""TEST_GREETING_US"", Locale.US)); greetings.add(new Greeting(""TEST_GREETING_IT"", Locale.ITALY)); MessengerProfileApi.setGreetingMessage(greetings); } public void testAccountWhitelistingMessengerProfile() { List<String> whitelistedDomains = new ArrayList<String>(); whitelistedDomains.add(""www.google.it""); whitelistedDomains.add(""www.aurasphere.co""); MessengerProfileApi.setWhitelistedDomains(whitelistedDomains); MessengerProfileApi.deleteWhitelistedDomains(); } public void testAccountLinkingUrlMessengerProfile() { MessengerProfileApi.setAccountLinkingUrl(""www.aurasphere.co""); MessengerProfileApi.deleteAccountLinkingUrl(); } public void testPersistentMenu() { MessengerProfileApi.setGetStartedButton(""get_started""); MessengerProfileApi.setGreetingMessage(""Greetings!""); List<PersistentMenu> persistentMenus = new ArrayList<PersistentMenu>(); PersistentMenu p = new PersistentMenu(""default"", false); CallToActionNested c1 = new CallToActionNested(""Title1""); c1.addCallToActionButton(ButtonFactory.createPostbackButton(""hello"",
				""hey1"")); c1.addCallToActionButton(ButtonFactory.createPostbackButton(""hello"",
				""hey2"")); p.addCallToAction(c1); p.addCallToAction(ButtonFactory.createPostbackButton(""hello"", ""hey1"")); persistentMenus.add(p); MessengerProfileApi.setPersistentMenus(persistentMenus); assertNotNull(persistentMenus); } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.test.api; public class MessengerProfileApiTest { public void testGetStartedButtonMessengerProfile() { MessengerProfileApi.setGetStartedButton(""TEST_GET_STARTED_BUTTON""); MessengerProfileApi.deleteGetStartedButton(); } public void testGreetingTextMessengerProfile() { MessengerProfileApi.setGreetingMessage(""TEST_GREETING_MESSAGE""); MessengerProfileApi.deleteGreetingMessage(); List<Greeting> greetings = new ArrayList<Greeting>(); greetings.add(new Greeting(""TEST_GREETING_US"", Locale.US)); greetings.add(new Greeting(""TEST_GREETING_IT"", Locale.ITALY)); MessengerProfileApi.setGreetingMessage(greetings); } public void testAccountWhitelistingMessengerProfile() { List<String> whitelistedDomains = new ArrayList<String>(); whitelistedDomains.add(""www.google.it""); whitelistedDomains.add(""www.aurasphere.co""); MessengerProfileApi.setWhitelistedDomains(whitelistedDomains); MessengerProfileApi.deleteWhitelistedDomains(); } public void testAccountLinkingUrlMessengerProfile() { MessengerProfileApi.setAccountLinkingUrl(""www.aurasphere.co""); MessengerProfileApi.deleteAccountLinkingUrl(); } public void testPersistentMenu() { MessengerProfileApi.setGetStartedButton(""get_started""); MessengerProfileApi.setGreetingMessage(""Greetings!""); List<PersistentMenu> persistentMenus = new ArrayList<PersistentMenu>(); PersistentMenu p = new PersistentMenu(""default"", false); CallToActionNested c1 = new CallToActionNested(""Title1""); c1.addCallToActionButton(ButtonFactory.createPostbackButton(""hello"",
				""hey1"")); c1.addCallToActionButton(ButtonFactory.createPostbackButton(""hello"",
				""hey2"")); p.addCallToAction(c1); p.addCallToAction(ButtonFactory.createPostbackButton(""hello"", ""hey1"")); persistentMenus.add(p); MessengerProfileApi.setPersistentMenus(persistentMenus); assertNotNull(persistentMenus); } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.test.api; 
import static org.junit.Assert.assertNotNull; 
import java.util.ArrayList; import java.util.List; import java.util.Locale; 
import org.junit.Test; 
import co.aurasphere.botmill.fb.api.MessengerProfileApi; import co.aurasphere.botmill.fb.model.api.messengerprofile.Greeting; import co.aurasphere.botmill.fb.model.api.messengerprofile.persistentmenu.CallToActionNested; import co.aurasphere.botmill.fb.model.api.messengerprofile.persistentmenu.PersistentMenu; import co.aurasphere.botmill.fb.model.outcoming.factory.ButtonFactory;  /**
 * Test class for the {@link MessengerProfileApi}.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */ public class MessengerProfileApiTest {  /**
	 * Tests the Get Started Button Messenger Profile.
	 */ //	@Test public void testGetStartedButtonMessengerProfile() { MessengerProfileApi.setGetStartedButton(""TEST_GET_STARTED_BUTTON""); MessengerProfileApi.deleteGetStartedButton(); }  /**
	 * Tests the Greeting Text Messenger Profile.
	 */ //	@Test public void testGreetingTextMessengerProfile() { MessengerProfileApi.setGreetingMessage(""TEST_GREETING_MESSAGE""); MessengerProfileApi.deleteGreetingMessage();  List<Greeting> greetings = new ArrayList<Greeting>(); greetings.add(new Greeting(""TEST_GREETING_US"", Locale.US)); greetings.add(new Greeting(""TEST_GREETING_IT"", Locale.ITALY)); MessengerProfileApi.setGreetingMessage(greetings); }  /**
	 * Tests the Account Whitelisting Messenger Profile.
	 */ //	@Test public void testAccountWhitelistingMessengerProfile() { List<String> whitelistedDomains = new ArrayList<String>(); whitelistedDomains.add(""www.google.it""); whitelistedDomains.add(""www.aurasphere.co""); MessengerProfileApi.setWhitelistedDomains(whitelistedDomains);  MessengerProfileApi.deleteWhitelistedDomains(); }  /**
	 * Tests the Account Linking URL Messenger Profile.
	 */ //	@Test public void testAccountLinkingUrlMessengerProfile() { MessengerProfileApi.setAccountLinkingUrl(""www.aurasphere.co""); MessengerProfileApi.deleteAccountLinkingUrl(); }  /**
	 * Test persistent menu.
	 */ //	@Test public void testPersistentMenu() {  MessengerProfileApi.setGetStartedButton(""get_started""); MessengerProfileApi.setGreetingMessage(""Greetings!"");  List<PersistentMenu> persistentMenus = new ArrayList<PersistentMenu>(); PersistentMenu p = new PersistentMenu(""default"", false);  CallToActionNested c1 = new CallToActionNested(""Title1""); c1.addCallToActionButton(ButtonFactory.createPostbackButton(""hello"",
				""hey1"")); c1.addCallToActionButton(ButtonFactory.createPostbackButton(""hello"",
				""hey2""));  p.addCallToAction(c1); p.addCallToAction(ButtonFactory.createPostbackButton(""hello"", ""hey1"")); //alvinpreyes.com""));  persistentMenus.add(p);  MessengerProfileApi.setPersistentMenus(persistentMenus); assertNotNull(persistentMenus); }  }  "
src/test/java/co/aurasphere/botmill/fb/test/api/ThreadSettingsApiTest.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.test.api;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;

import co.aurasphere.botmill.fb.api.ThreadSettingsApi;
import co.aurasphere.botmill.fb.model.api.threadsettings.payment.PaymentDevModeAction;
import co.aurasphere.botmill.fb.model.api.threadsettings.payment.PaymentSettings;


/**
 * Test class for the {@link ThreadSettingsApi}.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */
public class ThreadSettingsApiTest {

	/**
	 * Tests the Get Started Button Thread Settings.
	 */
//	@Test
	public void testGetStartedButtonThreadSettings() {
		ThreadSettingsApi.setGetStartedButton(""TEST_GET_STARTED_BUTTON"");
	}

	/**
	 * Tests the Payment Thread Settings.
	 */
//	@Test
	public void testPaymentThreadSettings() {
		List<String> testers = new ArrayList<String>();
		//testers.add(mockId);
		PaymentSettings settings = new PaymentSettings();
		settings.setPaymentTesters(testers);
		settings.setPaymentDevModeAction(PaymentDevModeAction.ADD);
		settings.setPublicKey(""-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: GnuPG v2\n\nmQINBFhwEskBEADXNKLMviFqgejcJeF2LgWU7DHihxyDyPnz5aqrA8UbYYbxbDp9\nQDkBcHsOaVOO/4Ih/ieNDY4yVdmOBdafBjHTKbmcjyw1mtbcqj3xRNJ+7iNOjRwf\nYoO9o4vdHlT34hwgSd6kSM9zYUiWl6915iWuiB9bmCzIl8LroUpmMx9Ww0ZiC5BG\nMn9KjTIAUvN+HOya01+U+ijtGEaPxFwydi2CgCMcHczV7K44vsjkpaMv/vvqJo35\n62fkjysu4ystZ+5vzwoPriIFiQ0nJ7eLO3nwyHFr1mPRwk8R+0eLIfFqQ6efXDh2\nAIm5NI34ehIEPe7O0ABi62EiwpsCaMXN5RtsCY3KuELJcZ+8SMTm2MdwkErOXjcA\nsFzzz02XHQPtF3sS9UAoJ3c9nQi75mXka4Xw5k8aSZHFo2AjIQXmRPZJvqzNwC4T\nPh/LNx8gmkxw5SsuTOkk29U0jv4Q6tPl3VzhSSAlLh93rM0iF6L9BUnflwJ5UeuW\nA0CPBIYM8zbcRBXQRvfEJEhlL0F16sT6sYnER6yCqBIVRG52/MtlPCfQjLhklKHz\nXVXfC/UXfJPa910avs6tsJOuGcZDw8BO/FX0CPqD1KsdyA/ISLTrP+vqQ5/xeWr5\n3nx1XVW92BqFzSeSUN1cGhqoI84Ms9OObEKeO5DuTUvu2YCUAVcpPJ+woQARAQAB\ntFpEb25hdG8gUmltZW50aSAoRmFjZWJvb2sga2V5IGZvciB0b2tlbml6ZWQgcGF5\nbWVudHMgdGVzdGluZykgPGRvbmF0b2hhbi5yaW1lbnRpQGdtYWlsLmNvbT6JAjkE\nEwEIACMFAlhwEskCGwMHCwkIBwMCAQYVCAIJCgsEFgIDAQIeAQIXgAAKCRCGboNS\nmkaaTgh3D/9RTAMzQtDZodPi9EoC0rIX4dyDgcdSp3N5L94f9sZwzkd3HpIrF2LC\nZ5raNxR9KP5uzlne1b6gOjloP/ynLH/cI+iRSh9YVEAowur/7AvhlYdsTWeCqM7+\nika3YcSOZiTZeZuIZsT7hJA/7QPdEWYuSxXidg9VVqcnCCw8qzt9h4rbzgikSbnl\nuCb/ilr9iNW5Un+GohotAco847FZhWAgAEh5VbA8XpIenvtiXiaxxkIuMDRpm365\nqK935EVpLZWeHeXjE1dTiSXkt0HypTjuKJZrA8CH4yqwmLueyo2VHV4XgM1u1uF+\no0+/TU2Kx8NLt4SpWNWZANAtpKPS5SuZuISqh44/yUOHsP80FCvthJRAdjz1KFeL\nwFGOXAJbOtesLSEfTgjaO2WGTrJrTfFUbhk7TLYs/7eM8Kzw4zWuLzl+NHkmuqfs\nkDxSea7KktZiPd4yyZyZ/ojEtWPW8GaGrc14LAzxpYLUZMc23HWYUMUtZd+JhaIV\nwhzyZ9giJ9zS0HbzAHJt+xa5lcAAKTVGULdHVKvl0UWIFFzw48QZwzCwtrAgs53I\n/uGhUO5SWL7Fb1WG5iamyzR6H08GyAWystt1TZ4+6VlnK0hJo6VIV6cLJ3XeAOsT\nHYTvTlRYrCj7CH2eLwYtxpOc7HwbY7wfb/Hcc2B/EF48d3VKFzrCyLkCDQRYcBLJ\nARAAp+zfOanxasGWZoWIg39sGqwd9Ts3VAVmQUX3Oob3y5ORd7H+PkGzawI+HKtv\nM+nE+zLbOD5EtYjivNfNtl6xY/6bKIGg/cT1vCFHzm/+Eh+RbhXEpaXImxFe1PxT\nMOyU/LswQrOyKsY8lEMex0M2C3VFUgivzwdfBD4Kx4Vp5frsRXgdjQe1Qw2sv1gb\nHH30eCo+HXPs6hMCOGd6gGlWKV3AuU05QQjLIlrjd2CSyCFyip2NxUqhNXxQ8PpN\nA+S4HUUVtgKiXwFTBpJPkWaBE1HtOnrH2tTM1L/qafmVtgICf5zGDwCzrj4klPYQ\ndQ4n4LKHOSYfkN8oggrtHJ9GSCz5JsQVNn68yWzyxeIeDPBQqaY5KtU9+Hnv+FE+\nJrtA0GjzWiOdwy+AkH8gU0yijZcrlbwgYVepWQ/2kaoyU2fRzi8EfeZY+N+NSEMj\noQO0OcD+FG5/rfkfCYz48dgfg9EZZJ3iVJF0yS0oNXuTOihk617lwDpgVrZCEax3\nmpY1zruOBcXLyuCFC0AEEwoVeZI4ZH+yjrtNnfkduHF8NNCy2hK+ySeFgOY6gatd\nn0ph+Cb9sB/2AzcsEPtyUcF47wl27DxKc4wk5RVAWWYomYp2brVsA5s8/ibK96N7\nBExDVzj4NB3/opKiBGUJYJdN6E6T3jj/8Py5Bvad49IByYEAEQEAAYkCHwQYAQgA\nCQUCWHASyQIbDAAKCRCGboNSmkaaTqHkD/4vWU+W6rKmMfnegcrkHO4bxXGFsXFO\nGfRnlj2dJ9NGC2zDV/kH+JN5tyVSw0nqFPGsbjYSDp5QEWQ16Sm7n9Fh8KS4gQ6f\nKw49NFDTvDxmqkfOmTy5sgtc+/zxbQvWfn8g78Wnxed0YNqWij4AUecqFQCkvhxm\ns/3uY8eIA54XNJRfB4XCX0XGHgKztrJhIn3XCQUwrawXx+Ky5Jc/YImEhgWF0tAA\nbZUt/kuo4dCGXc/J+qbuDcS27TJvLvQncmfZAfV4m7e+982FhwXZzyzw+zwDAE2o\nYD0Jr/VkQKu1yqvjwtLfjeDOLALUiL7AmdlnQzor2qYg4Jo5KL2aHYED5dwNxcDv\nDwFVnTd6MVRWG+wcPp6IgNQtNRUCsIXb5wdFMCjwnaassYrS71W6CYxjwLACHxpm\n9WI3CmSUKd0BB66+9FavDQxo9qIaFtyEcQvJNh1GTFk0e+n6GjTzyy/iZTaNwMGi\nBqSQOZv3L572sY9CnO4e3oQan6/Ae3amH9P1hLo7mLPahGQk4XMIqt+o+XuTebYR\n8Ce8cWgDuSopqp0pR4HH03GinwqrI58ubD1eySITxafpoAkYkhI9LLDxCArJTi48\nfgmgzd3m9DhaAIhm9GcPYk5p+Sqmq3I8JK+vOeEWLeDGydNlp+/olQu541RDu+PC\nK6nOO3u8Mtf6rA==\n=KBrJ\n-----END PGP PUBLIC KEY BLOCK-----\n"");
		ThreadSettingsApi.addPaymentSettings(settings);
	}


}
","package co.aurasphere.botmill.fb.test.api; public class ThreadSettingsApiTest { public void testGetStartedButtonThreadSettings() { ThreadSettingsApi.setGetStartedButton(""TEST_GET_STARTED_BUTTON""); } public void testPaymentThreadSettings() { List<String> testers = new ArrayList<String>(); PaymentSettings settings = new PaymentSettings(); settings.setPaymentTesters(testers); settings.setPaymentDevModeAction(PaymentDevModeAction.ADD); settings.setPublicKey(""-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: GnuPG v2\n\nmQINBFhwEskBEADXNKLMviFqgejcJeF2LgWU7DHihxyDyPnz5aqrA8UbYYbxbDp9\nQDkBcHsOaVOO/4Ih/ieNDY4yVdmOBdafBjHTKbmcjyw1mtbcqj3xRNJ+7iNOjRwf\nYoO9o4vdHlT34hwgSd6kSM9zYUiWl6915iWuiB9bmCzIl8LroUpmMx9Ww0ZiC5BG\nMn9KjTIAUvN+HOya01+U+ijtGEaPxFwydi2CgCMcHczV7K44vsjkpaMv/vvqJo35\n62fkjysu4ystZ+5vzwoPriIFiQ0nJ7eLO3nwyHFr1mPRwk8R+0eLIfFqQ6efXDh2\nAIm5NI34ehIEPe7O0ABi62EiwpsCaMXN5RtsCY3KuELJcZ+8SMTm2MdwkErOXjcA\nsFzzz02XHQPtF3sS9UAoJ3c9nQi75mXka4Xw5k8aSZHFo2AjIQXmRPZJvqzNwC4T\nPh/LNx8gmkxw5SsuTOkk29U0jv4Q6tPl3VzhSSAlLh93rM0iF6L9BUnflwJ5UeuW\nA0CPBIYM8zbcRBXQRvfEJEhlL0F16sT6sYnER6yCqBIVRG52/MtlPCfQjLhklKHz\nXVXfC/UXfJPa910avs6tsJOuGcZDw8BO/FX0CPqD1KsdyA/ISLTrP+vqQ5/xeWr5\n3nx1XVW92BqFzSeSUN1cGhqoI84Ms9OObEKeO5DuTUvu2YCUAVcpPJ+woQARAQAB\ntFpEb25hdG8gUmltZW50aSAoRmFjZWJvb2sga2V5IGZvciB0b2tlbml6ZWQgcGF5\nbWVudHMgdGVzdGluZykgPGRvbmF0b2hhbi5yaW1lbnRpQGdtYWlsLmNvbT6JAjkE\nEwEIACMFAlhwEskCGwMHCwkIBwMCAQYVCAIJCgsEFgIDAQIeAQIXgAAKCRCGboNS\nmkaaTgh3D/9RTAMzQtDZodPi9EoC0rIX4dyDgcdSp3N5L94f9sZwzkd3HpIrF2LC\nZ5raNxR9KP5uzlne1b6gOjloP/ynLH/cI+iRSh9YVEAowur/7AvhlYdsTWeCqM7+\nika3YcSOZiTZeZuIZsT7hJA/7QPdEWYuSxXidg9VVqcnCCw8qzt9h4rbzgikSbnl\nuCb/ilr9iNW5Un+GohotAco847FZhWAgAEh5VbA8XpIenvtiXiaxxkIuMDRpm365\nqK935EVpLZWeHeXjE1dTiSXkt0HypTjuKJZrA8CH4yqwmLueyo2VHV4XgM1u1uF+\no0+/TU2Kx8NLt4SpWNWZANAtpKPS5SuZuISqh44/yUOHsP80FCvthJRAdjz1KFeL\nwFGOXAJbOtesLSEfTgjaO2WGTrJrTfFUbhk7TLYs/7eM8Kzw4zWuLzl+NHkmuqfs\nkDxSea7KktZiPd4yyZyZ/ojEtWPW8GaGrc14LAzxpYLUZMc23HWYUMUtZd+JhaIV\nwhzyZ9giJ9zS0HbzAHJt+xa5lcAAKTVGULdHVKvl0UWIFFzw48QZwzCwtrAgs53I\n/uGhUO5SWL7Fb1WG5iamyzR6H08GyAWystt1TZ4+6VlnK0hJo6VIV6cLJ3XeAOsT\nHYTvTlRYrCj7CH2eLwYtxpOc7HwbY7wfb/Hcc2B/EF48d3VKFzrCyLkCDQRYcBLJ\nARAAp+zfOanxasGWZoWIg39sGqwd9Ts3VAVmQUX3Oob3y5ORd7H+PkGzawI+HKtv\nM+nE+zLbOD5EtYjivNfNtl6xY/6bKIGg/cT1vCFHzm/+Eh+RbhXEpaXImxFe1PxT\nMOyU/LswQrOyKsY8lEMex0M2C3VFUgivzwdfBD4Kx4Vp5frsRXgdjQe1Qw2sv1gb\nHH30eCo+HXPs6hMCOGd6gGlWKV3AuU05QQjLIlrjd2CSyCFyip2NxUqhNXxQ8PpN\nA+S4HUUVtgKiXwFTBpJPkWaBE1HtOnrH2tTM1L/qafmVtgICf5zGDwCzrj4klPYQ\ndQ4n4LKHOSYfkN8oggrtHJ9GSCz5JsQVNn68yWzyxeIeDPBQqaY5KtU9+Hnv+FE+\nJrtA0GjzWiOdwy+AkH8gU0yijZcrlbwgYVepWQ/2kaoyU2fRzi8EfeZY+N+NSEMj\noQO0OcD+FG5/rfkfCYz48dgfg9EZZJ3iVJF0yS0oNXuTOihk617lwDpgVrZCEax3\nmpY1zruOBcXLyuCFC0AEEwoVeZI4ZH+yjrtNnfkduHF8NNCy2hK+ySeFgOY6gatd\nn0ph+Cb9sB/2AzcsEPtyUcF47wl27DxKc4wk5RVAWWYomYp2brVsA5s8/ibK96N7\nBExDVzj4NB3/opKiBGUJYJdN6E6T3jj/8Py5Bvad49IByYEAEQEAAYkCHwQYAQgA\nCQUCWHASyQIbDAAKCRCGboNSmkaaTqHkD/4vWU+W6rKmMfnegcrkHO4bxXGFsXFO\nGfRnlj2dJ9NGC2zDV/kH+JN5tyVSw0nqFPGsbjYSDp5QEWQ16Sm7n9Fh8KS4gQ6f\nKw49NFDTvDxmqkfOmTy5sgtc+/zxbQvWfn8g78Wnxed0YNqWij4AUecqFQCkvhxm\ns/3uY8eIA54XNJRfB4XCX0XGHgKztrJhIn3XCQUwrawXx+Ky5Jc/YImEhgWF0tAA\nbZUt/kuo4dCGXc/J+qbuDcS27TJvLvQncmfZAfV4m7e+982FhwXZzyzw+zwDAE2o\nYD0Jr/VkQKu1yqvjwtLfjeDOLALUiL7AmdlnQzor2qYg4Jo5KL2aHYED5dwNxcDv\nDwFVnTd6MVRWG+wcPp6IgNQtNRUCsIXb5wdFMCjwnaassYrS71W6CYxjwLACHxpm\n9WI3CmSUKd0BB66+9FavDQxo9qIaFtyEcQvJNh1GTFk0e+n6GjTzyy/iZTaNwMGi\nBqSQOZv3L572sY9CnO4e3oQan6/Ae3amH9P1hLo7mLPahGQk4XMIqt+o+XuTebYR\n8Ce8cWgDuSopqp0pR4HH03GinwqrI58ubD1eySITxafpoAkYkhI9LLDxCArJTi48\nfgmgzd3m9DhaAIhm9GcPYk5p+Sqmq3I8JK+vOeEWLeDGydNlp+/olQu541RDu+PC\nK6nOO3u8Mtf6rA==\n=KBrJ\n-----END PGP PUBLIC KEY BLOCK-----\n""); ThreadSettingsApi.addPaymentSettings(settings); } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.test.api; public class ThreadSettingsApiTest { public void testGetStartedButtonThreadSettings() { ThreadSettingsApi.setGetStartedButton(""TEST_GET_STARTED_BUTTON""); } public void testPaymentThreadSettings() { List<String> testers = new ArrayList<String>(); PaymentSettings settings = new PaymentSettings(); settings.setPaymentTesters(testers); settings.setPaymentDevModeAction(PaymentDevModeAction.ADD); settings.setPublicKey(""-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: GnuPG v2\n\nmQINBFhwEskBEADXNKLMviFqgejcJeF2LgWU7DHihxyDyPnz5aqrA8UbYYbxbDp9\nQDkBcHsOaVOO/4Ih/ieNDY4yVdmOBdafBjHTKbmcjyw1mtbcqj3xRNJ+7iNOjRwf\nYoO9o4vdHlT34hwgSd6kSM9zYUiWl6915iWuiB9bmCzIl8LroUpmMx9Ww0ZiC5BG\nMn9KjTIAUvN+HOya01+U+ijtGEaPxFwydi2CgCMcHczV7K44vsjkpaMv/vvqJo35\n62fkjysu4ystZ+5vzwoPriIFiQ0nJ7eLO3nwyHFr1mPRwk8R+0eLIfFqQ6efXDh2\nAIm5NI34ehIEPe7O0ABi62EiwpsCaMXN5RtsCY3KuELJcZ+8SMTm2MdwkErOXjcA\nsFzzz02XHQPtF3sS9UAoJ3c9nQi75mXka4Xw5k8aSZHFo2AjIQXmRPZJvqzNwC4T\nPh/LNx8gmkxw5SsuTOkk29U0jv4Q6tPl3VzhSSAlLh93rM0iF6L9BUnflwJ5UeuW\nA0CPBIYM8zbcRBXQRvfEJEhlL0F16sT6sYnER6yCqBIVRG52/MtlPCfQjLhklKHz\nXVXfC/UXfJPa910avs6tsJOuGcZDw8BO/FX0CPqD1KsdyA/ISLTrP+vqQ5/xeWr5\n3nx1XVW92BqFzSeSUN1cGhqoI84Ms9OObEKeO5DuTUvu2YCUAVcpPJ+woQARAQAB\ntFpEb25hdG8gUmltZW50aSAoRmFjZWJvb2sga2V5IGZvciB0b2tlbml6ZWQgcGF5\nbWVudHMgdGVzdGluZykgPGRvbmF0b2hhbi5yaW1lbnRpQGdtYWlsLmNvbT6JAjkE\nEwEIACMFAlhwEskCGwMHCwkIBwMCAQYVCAIJCgsEFgIDAQIeAQIXgAAKCRCGboNS\nmkaaTgh3D/9RTAMzQtDZodPi9EoC0rIX4dyDgcdSp3N5L94f9sZwzkd3HpIrF2LC\nZ5raNxR9KP5uzlne1b6gOjloP/ynLH/cI+iRSh9YVEAowur/7AvhlYdsTWeCqM7+\nika3YcSOZiTZeZuIZsT7hJA/7QPdEWYuSxXidg9VVqcnCCw8qzt9h4rbzgikSbnl\nuCb/ilr9iNW5Un+GohotAco847FZhWAgAEh5VbA8XpIenvtiXiaxxkIuMDRpm365\nqK935EVpLZWeHeXjE1dTiSXkt0HypTjuKJZrA8CH4yqwmLueyo2VHV4XgM1u1uF+\no0+/TU2Kx8NLt4SpWNWZANAtpKPS5SuZuISqh44/yUOHsP80FCvthJRAdjz1KFeL\nwFGOXAJbOtesLSEfTgjaO2WGTrJrTfFUbhk7TLYs/7eM8Kzw4zWuLzl+NHkmuqfs\nkDxSea7KktZiPd4yyZyZ/ojEtWPW8GaGrc14LAzxpYLUZMc23HWYUMUtZd+JhaIV\nwhzyZ9giJ9zS0HbzAHJt+xa5lcAAKTVGULdHVKvl0UWIFFzw48QZwzCwtrAgs53I\n/uGhUO5SWL7Fb1WG5iamyzR6H08GyAWystt1TZ4+6VlnK0hJo6VIV6cLJ3XeAOsT\nHYTvTlRYrCj7CH2eLwYtxpOc7HwbY7wfb/Hcc2B/EF48d3VKFzrCyLkCDQRYcBLJ\nARAAp+zfOanxasGWZoWIg39sGqwd9Ts3VAVmQUX3Oob3y5ORd7H+PkGzawI+HKtv\nM+nE+zLbOD5EtYjivNfNtl6xY/6bKIGg/cT1vCFHzm/+Eh+RbhXEpaXImxFe1PxT\nMOyU/LswQrOyKsY8lEMex0M2C3VFUgivzwdfBD4Kx4Vp5frsRXgdjQe1Qw2sv1gb\nHH30eCo+HXPs6hMCOGd6gGlWKV3AuU05QQjLIlrjd2CSyCFyip2NxUqhNXxQ8PpN\nA+S4HUUVtgKiXwFTBpJPkWaBE1HtOnrH2tTM1L/qafmVtgICf5zGDwCzrj4klPYQ\ndQ4n4LKHOSYfkN8oggrtHJ9GSCz5JsQVNn68yWzyxeIeDPBQqaY5KtU9+Hnv+FE+\nJrtA0GjzWiOdwy+AkH8gU0yijZcrlbwgYVepWQ/2kaoyU2fRzi8EfeZY+N+NSEMj\noQO0OcD+FG5/rfkfCYz48dgfg9EZZJ3iVJF0yS0oNXuTOihk617lwDpgVrZCEax3\nmpY1zruOBcXLyuCFC0AEEwoVeZI4ZH+yjrtNnfkduHF8NNCy2hK+ySeFgOY6gatd\nn0ph+Cb9sB/2AzcsEPtyUcF47wl27DxKc4wk5RVAWWYomYp2brVsA5s8/ibK96N7\nBExDVzj4NB3/opKiBGUJYJdN6E6T3jj/8Py5Bvad49IByYEAEQEAAYkCHwQYAQgA\nCQUCWHASyQIbDAAKCRCGboNSmkaaTqHkD/4vWU+W6rKmMfnegcrkHO4bxXGFsXFO\nGfRnlj2dJ9NGC2zDV/kH+JN5tyVSw0nqFPGsbjYSDp5QEWQ16Sm7n9Fh8KS4gQ6f\nKw49NFDTvDxmqkfOmTy5sgtc+/zxbQvWfn8g78Wnxed0YNqWij4AUecqFQCkvhxm\ns/3uY8eIA54XNJRfB4XCX0XGHgKztrJhIn3XCQUwrawXx+Ky5Jc/YImEhgWF0tAA\nbZUt/kuo4dCGXc/J+qbuDcS27TJvLvQncmfZAfV4m7e+982FhwXZzyzw+zwDAE2o\nYD0Jr/VkQKu1yqvjwtLfjeDOLALUiL7AmdlnQzor2qYg4Jo5KL2aHYED5dwNxcDv\nDwFVnTd6MVRWG+wcPp6IgNQtNRUCsIXb5wdFMCjwnaassYrS71W6CYxjwLACHxpm\n9WI3CmSUKd0BB66+9FavDQxo9qIaFtyEcQvJNh1GTFk0e+n6GjTzyy/iZTaNwMGi\nBqSQOZv3L572sY9CnO4e3oQan6/Ae3amH9P1hLo7mLPahGQk4XMIqt+o+XuTebYR\n8Ce8cWgDuSopqp0pR4HH03GinwqrI58ubD1eySITxafpoAkYkhI9LLDxCArJTi48\nfgmgzd3m9DhaAIhm9GcPYk5p+Sqmq3I8JK+vOeEWLeDGydNlp+/olQu541RDu+PC\nK6nOO3u8Mtf6rA==\n=KBrJ\n-----END PGP PUBLIC KEY BLOCK-----\n""); ThreadSettingsApi.addPaymentSettings(settings); } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.test.api; 
import java.util.ArrayList; import java.util.List; 
import org.junit.Test; 
import co.aurasphere.botmill.fb.api.ThreadSettingsApi; import co.aurasphere.botmill.fb.model.api.threadsettings.payment.PaymentDevModeAction; import co.aurasphere.botmill.fb.model.api.threadsettings.payment.PaymentSettings; 
  public class ThreadSettingsApiTest { /**
 * Test class for the {@link ThreadSettingsApi}.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */  /**
	 * Tests the Get Started Button Thread Settings.
	 */ public void testGetStartedButtonThreadSettings() { ThreadSettingsApi.setGetStartedButton(""TEST_GET_STARTED_BUTTON""); } //	@Test  /**
	 * Tests the Payment Thread Settings.
	 */ public void testPaymentThreadSettings() { List<String> testers = new ArrayList<String>(); //	@Test PaymentSettings settings = new PaymentSettings(); settings.setPaymentTesters(testers); settings.setPaymentDevModeAction(PaymentDevModeAction.ADD); settings.setPublicKey(""-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: GnuPG v2\n\nmQINBFhwEskBEADXNKLMviFqgejcJeF2LgWU7DHihxyDyPnz5aqrA8UbYYbxbDp9\nQDkBcHsOaVOO/4Ih/ieNDY4yVdmOBdafBjHTKbmcjyw1mtbcqj3xRNJ+7iNOjRwf\nYoO9o4vdHlT34hwgSd6kSM9zYUiWl6915iWuiB9bmCzIl8LroUpmMx9Ww0ZiC5BG\nMn9KjTIAUvN+HOya01+U+ijtGEaPxFwydi2CgCMcHczV7K44vsjkpaMv/vvqJo35\n62fkjysu4ystZ+5vzwoPriIFiQ0nJ7eLO3nwyHFr1mPRwk8R+0eLIfFqQ6efXDh2\nAIm5NI34ehIEPe7O0ABi62EiwpsCaMXN5RtsCY3KuELJcZ+8SMTm2MdwkErOXjcA\nsFzzz02XHQPtF3sS9UAoJ3c9nQi75mXka4Xw5k8aSZHFo2AjIQXmRPZJvqzNwC4T\nPh/LNx8gmkxw5SsuTOkk29U0jv4Q6tPl3VzhSSAlLh93rM0iF6L9BUnflwJ5UeuW\nA0CPBIYM8zbcRBXQRvfEJEhlL0F16sT6sYnER6yCqBIVRG52/MtlPCfQjLhklKHz\nXVXfC/UXfJPa910avs6tsJOuGcZDw8BO/FX0CPqD1KsdyA/ISLTrP+vqQ5/xeWr5\n3nx1XVW92BqFzSeSUN1cGhqoI84Ms9OObEKeO5DuTUvu2YCUAVcpPJ+woQARAQAB\ntFpEb25hdG8gUmltZW50aSAoRmFjZWJvb2sga2V5IGZvciB0b2tlbml6ZWQgcGF5\nbWVudHMgdGVzdGluZykgPGRvbmF0b2hhbi5yaW1lbnRpQGdtYWlsLmNvbT6JAjkE\nEwEIACMFAlhwEskCGwMHCwkIBwMCAQYVCAIJCgsEFgIDAQIeAQIXgAAKCRCGboNS\nmkaaTgh3D/9RTAMzQtDZodPi9EoC0rIX4dyDgcdSp3N5L94f9sZwzkd3HpIrF2LC\nZ5raNxR9KP5uzlne1b6gOjloP/ynLH/cI+iRSh9YVEAowur/7AvhlYdsTWeCqM7+\nika3YcSOZiTZeZuIZsT7hJA/7QPdEWYuSxXidg9VVqcnCCw8qzt9h4rbzgikSbnl\nuCb/ilr9iNW5Un+GohotAco847FZhWAgAEh5VbA8XpIenvtiXiaxxkIuMDRpm365\nqK935EVpLZWeHeXjE1dTiSXkt0HypTjuKJZrA8CH4yqwmLueyo2VHV4XgM1u1uF+\no0+/TU2Kx8NLt4SpWNWZANAtpKPS5SuZuISqh44/yUOHsP80FCvthJRAdjz1KFeL\nwFGOXAJbOtesLSEfTgjaO2WGTrJrTfFUbhk7TLYs/7eM8Kzw4zWuLzl+NHkmuqfs\nkDxSea7KktZiPd4yyZyZ/ojEtWPW8GaGrc14LAzxpYLUZMc23HWYUMUtZd+JhaIV\nwhzyZ9giJ9zS0HbzAHJt+xa5lcAAKTVGULdHVKvl0UWIFFzw48QZwzCwtrAgs53I\n/uGhUO5SWL7Fb1WG5iamyzR6H08GyAWystt1TZ4+6VlnK0hJo6VIV6cLJ3XeAOsT\nHYTvTlRYrCj7CH2eLwYtxpOc7HwbY7wfb/Hcc2B/EF48d3VKFzrCyLkCDQRYcBLJ\nARAAp+zfOanxasGWZoWIg39sGqwd9Ts3VAVmQUX3Oob3y5ORd7H+PkGzawI+HKtv\nM+nE+zLbOD5EtYjivNfNtl6xY/6bKIGg/cT1vCFHzm/+Eh+RbhXEpaXImxFe1PxT\nMOyU/LswQrOyKsY8lEMex0M2C3VFUgivzwdfBD4Kx4Vp5frsRXgdjQe1Qw2sv1gb\nHH30eCo+HXPs6hMCOGd6gGlWKV3AuU05QQjLIlrjd2CSyCFyip2NxUqhNXxQ8PpN\nA+S4HUUVtgKiXwFTBpJPkWaBE1HtOnrH2tTM1L/qafmVtgICf5zGDwCzrj4klPYQ\ndQ4n4LKHOSYfkN8oggrtHJ9GSCz5JsQVNn68yWzyxeIeDPBQqaY5KtU9+Hnv+FE+\nJrtA0GjzWiOdwy+AkH8gU0yijZcrlbwgYVepWQ/2kaoyU2fRzi8EfeZY+N+NSEMj\noQO0OcD+FG5/rfkfCYz48dgfg9EZZJ3iVJF0yS0oNXuTOihk617lwDpgVrZCEax3\nmpY1zruOBcXLyuCFC0AEEwoVeZI4ZH+yjrtNnfkduHF8NNCy2hK+ySeFgOY6gatd\nn0ph+Cb9sB/2AzcsEPtyUcF47wl27DxKc4wk5RVAWWYomYp2brVsA5s8/ibK96N7\nBExDVzj4NB3/opKiBGUJYJdN6E6T3jj/8Py5Bvad49IByYEAEQEAAYkCHwQYAQgA\nCQUCWHASyQIbDAAKCRCGboNSmkaaTqHkD/4vWU+W6rKmMfnegcrkHO4bxXGFsXFO\nGfRnlj2dJ9NGC2zDV/kH+JN5tyVSw0nqFPGsbjYSDp5QEWQ16Sm7n9Fh8KS4gQ6f\nKw49NFDTvDxmqkfOmTy5sgtc+/zxbQvWfn8g78Wnxed0YNqWij4AUecqFQCkvhxm\ns/3uY8eIA54XNJRfB4XCX0XGHgKztrJhIn3XCQUwrawXx+Ky5Jc/YImEhgWF0tAA\nbZUt/kuo4dCGXc/J+qbuDcS27TJvLvQncmfZAfV4m7e+982FhwXZzyzw+zwDAE2o\nYD0Jr/VkQKu1yqvjwtLfjeDOLALUiL7AmdlnQzor2qYg4Jo5KL2aHYED5dwNxcDv\nDwFVnTd6MVRWG+wcPp6IgNQtNRUCsIXb5wdFMCjwnaassYrS71W6CYxjwLACHxpm\n9WI3CmSUKd0BB66+9FavDQxo9qIaFtyEcQvJNh1GTFk0e+n6GjTzyy/iZTaNwMGi\nBqSQOZv3L572sY9CnO4e3oQan6/Ae3amH9P1hLo7mLPahGQk4XMIqt+o+XuTebYR\n8Ce8cWgDuSopqp0pR4HH03GinwqrI58ubD1eySITxafpoAkYkhI9LLDxCArJTi48\nfgmgzd3m9DhaAIhm9GcPYk5p+Sqmq3I8JK+vOeEWLeDGydNlp+/olQu541RDu+PC\nK6nOO3u8Mtf6rA==\n=KBrJ\n-----END PGP PUBLIC KEY BLOCK-----\n""); ThreadSettingsApi.addPaymentSettings(settings); } //testers.add(mockId); } 
 "
src/test/java/co/aurasphere/botmill/fb/test/api/UploadApiTest.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.test.api;

import org.junit.Assume;
import org.junit.Before;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.Assert;

import co.aurasphere.botmill.core.internal.util.ConfigurationUtils;
import co.aurasphere.botmill.fb.FbBotMillContext;
import co.aurasphere.botmill.fb.api.UploadApi;
import co.aurasphere.botmill.fb.model.api.upload.UploadAttachmentResponse;
import co.aurasphere.botmill.fb.model.base.AttachmentType;


/**
 * Test for the {@link UploadApi} class.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */
public class UploadApiTest {
	
	private final static Logger logger = LoggerFactory.getLogger(UploadApiTest.class);
	
	@Before
	public void setup() {
		Assume.assumeTrue(isConfigurationExist());
		FbBotMillContext.getInstance().setup(System.getenv(""fb.page.token""), System.getenv(""fb.validation.token""));
	}

	@Test
	public void test() {
		UploadAttachmentResponse response = UploadApi
				.uploadAttachment(
						AttachmentType.IMAGE,
						""http://vignette2.wikia.nocookie.net/nickelodeon/images/2/27/Spongebob_PNG.png/revision/latest?cb=20120702055752"");
		String attachmentId = response.getAttachmentId();
		Assert.notNull(attachmentId);
		logger.info(""Succesfully posted attachment with Upload Api (ID: [{}])"", attachmentId);
	}

	private boolean isConfigurationExist() {
		if(System.getenv(""fb.page.token"") != null && System.getenv(""fb.validation.token"") != null) {
			return true;
		}
		return false;
	}
	
}
","package co.aurasphere.botmill.fb.test.api; public class UploadApiTest { private final static Logger logger = LoggerFactory.getLogger(UploadApiTest.class); @Before
	public void setup() { Assume.assumeTrue(isConfigurationExist()); FbBotMillContext.getInstance().setup(System.getenv(""fb.page.token""), System.getenv(""fb.validation.token"")); } @Test
	public void test() { String attachmentId = response.getAttachmentId(); Assert.notNull(attachmentId); logger.info(""Succesfully posted attachment with Upload Api (ID: [{ } ])"", attachmentId); } private boolean isConfigurationExist() { if(System.getenv(""fb.page.token"") != null && System.getenv(""fb.validation.token"") != null) { return true; } return false; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.test.api; public class UploadApiTest { private final static Logger logger = LoggerFactory.getLogger(UploadApiTest.class); @Before
	public void setup() { Assume.assumeTrue(isConfigurationExist()); FbBotMillContext.getInstance().setup(System.getenv(""fb.page.token""), System.getenv(""fb.validation.token"")); } @Test
	public void test() { String attachmentId = response.getAttachmentId(); Assert.notNull(attachmentId); logger.info(""Succesfully posted attachment with Upload Api (ID: [{ } ])"", attachmentId); } private boolean isConfigurationExist() { if(System.getenv(""fb.page.token"") != null && System.getenv(""fb.validation.token"") != null) { return true; } return false; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.test.api; 
import org.junit.Assume; import org.junit.Before; import org.junit.Test; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.util.Assert; 
import co.aurasphere.botmill.core.internal.util.ConfigurationUtils; import co.aurasphere.botmill.fb.FbBotMillContext; import co.aurasphere.botmill.fb.api.UploadApi; import co.aurasphere.botmill.fb.model.api.upload.UploadAttachmentResponse; import co.aurasphere.botmill.fb.model.base.AttachmentType; 
  public class UploadApiTest { /**
 * Test for the {@link UploadApi} class.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */ private final static Logger logger = LoggerFactory.getLogger(UploadApiTest.class); 	 @Before
	public void setup() { Assume.assumeTrue(isConfigurationExist()); FbBotMillContext.getInstance().setup(System.getenv(""fb.page.token""), System.getenv(""fb.validation.token"")); } 	 @Test
	public void test() {  String attachmentId = response.getAttachmentId(); Assert.notNull(attachmentId); logger.info(""Succesfully posted attachment with Upload Api (ID: [{ } ])"", attachmentId); } //vignette2.wikia.nocookie.net/nickelodeon/images/2/27/Spongebob_PNG.png/revision/latest?cb=20120702055752""); private boolean isConfigurationExist() { if(System.getenv(""fb.page.token"") != null && System.getenv(""fb.validation.token"") != null) { return true; } return false; }  } 	 "
src/test/java/co/aurasphere/botmill/fb/test/autoreply/LambdaAutoReplyTest.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.test.autoreply;

import co.aurasphere.botmill.core.annotation.Bot;
import co.aurasphere.botmill.fb.FbBot;
import co.aurasphere.botmill.fb.autoreply.LambdaAutoReply;
import co.aurasphere.botmill.fb.autoreply.Reply;
import co.aurasphere.botmill.fb.event.message.MessageEvent;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;
import co.aurasphere.botmill.fb.model.outcoming.factory.ReplyFactory;


/**
 * Test for a {@link LambdaAutoReply}.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */
@Bot
public class LambdaAutoReplyTest extends FbBot {
	
	/**
	 * The message to send in order to test this component.
	 */
	private static final String MESSAGE_TO_SEND = ""test_lambda_auto_reply"";
	
	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.FbBotDefinition#defineBehaviour()
	 */
	@Override
	public void defineBehaviour() {
		
		// This cannot be tested with a real lambda since the project is
		// compiled in 1.5, but this test is equivalent.
		addActionFrame(new MessageEvent(MESSAGE_TO_SEND), new LambdaAutoReply(
				new Reply() {
					public FbBotMillResponse createResponse(
							MessageEnvelope envelope) {
						return ReplyFactory.addTextMessageOnly(MESSAGE_TO_SEND).build(
								envelope);
					}
				}));
	}

}
","package co.aurasphere.botmill.fb.test.autoreply; @Bot
public class LambdaAutoReplyTest extends FbBot { private static final String MESSAGE_TO_SEND = ""test_lambda_auto_reply""; @Override
	public void defineBehaviour() { addActionFrame(new MessageEvent(MESSAGE_TO_SEND), new LambdaAutoReply(
				new Reply() { public FbBotMillResponse createResponse(
							MessageEnvelope envelope) { return ReplyFactory.addTextMessageOnly(MESSAGE_TO_SEND).build(
								envelope); } } )); } }",0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.test.autoreply; @Bot
public class LambdaAutoReplyTest extends FbBot { private static final String MESSAGE_TO_SEND = ""test_lambda_auto_reply""; @Override
	public void defineBehaviour() { addActionFrame(new MessageEvent(MESSAGE_TO_SEND), new LambdaAutoReply(
				new Reply() { public FbBotMillResponse createResponse(
							MessageEnvelope envelope) { return ReplyFactory.addTextMessageOnly(MESSAGE_TO_SEND).build(
								envelope); } } )); } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.test.autoreply; 
import co.aurasphere.botmill.core.annotation.Bot; import co.aurasphere.botmill.fb.FbBot; import co.aurasphere.botmill.fb.autoreply.LambdaAutoReply; import co.aurasphere.botmill.fb.autoreply.Reply; import co.aurasphere.botmill.fb.event.message.MessageEvent; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; import co.aurasphere.botmill.fb.model.outcoming.factory.ReplyFactory; 
  @Bot
public class LambdaAutoReplyTest extends FbBot { /**
 * Test for a {@link LambdaAutoReply}.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */ 	 private static final String MESSAGE_TO_SEND = ""test_lambda_auto_reply""; /**
	 * The message to send in order to test this component.
	 */ 	 @Override
	public void defineBehaviour() { /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.FbBotDefinition#defineBehaviour()
	 */ 		 // This cannot be tested with a real lambda since the project is addActionFrame(new MessageEvent(MESSAGE_TO_SEND), new LambdaAutoReply(
				new Reply() { public FbBotMillResponse createResponse(
							MessageEnvelope envelope) { return ReplyFactory.addTextMessageOnly(MESSAGE_TO_SEND).build(
								envelope); } } )); } // compiled in 1.5, but this test is equivalent. }  "
src/test/java/co/aurasphere/botmill/fb/test/encryption/DefaultEncryption.java,"package co.aurasphere.botmill.fb.test.encryption;

import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;

import co.aurasphere.botmill.core.annotation.BotEncryption;
import co.aurasphere.botmill.core.internal.util.ConfigurationUtils;

@BotEncryption
public class DefaultEncryption {
	public DefaultEncryption() {
		StandardPBEStringEncryptor enc = new StandardPBEStringEncryptor();
		enc.setPassword(""password""); // can be sourced out
		ConfigurationUtils.loadEncryptedConfigurationFile(enc, ""botmill.properties"");
	}
}
","package co.aurasphere.botmill.fb.test.encryption; @BotEncryption
public class DefaultEncryption { public DefaultEncryption() { StandardPBEStringEncryptor enc = new StandardPBEStringEncryptor(); enc.setPassword(""password""); ConfigurationUtils.loadEncryptedConfigurationFile(enc, ""botmill.properties""); } }",0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.test.encryption; @BotEncryption
public class DefaultEncryption { public DefaultEncryption() { StandardPBEStringEncryptor enc = new StandardPBEStringEncryptor(); enc.setPassword(""password""); ConfigurationUtils.loadEncryptedConfigurationFile(enc, ""botmill.properties""); } } ","package co.aurasphere.botmill.fb.test.encryption; 
import org.jasypt.encryption.pbe.StandardPBEStringEncryptor; 
import co.aurasphere.botmill.core.annotation.BotEncryption; import co.aurasphere.botmill.core.internal.util.ConfigurationUtils;  @BotEncryption
public class DefaultEncryption { public DefaultEncryption() { StandardPBEStringEncryptor enc = new StandardPBEStringEncryptor(); enc.setPassword(""password""); // can be sourced out ConfigurationUtils.loadEncryptedConfigurationFile(enc, ""botmill.properties""); } }  "
src/main/java/co/aurasphere/botmill/fb/internal/util/json/AttachmentDeserializer.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.internal.util.json;

import java.lang.reflect.Type;

import co.aurasphere.botmill.core.internal.util.json.SkipDeserializationAnnotationExclusionStrategy;
import co.aurasphere.botmill.fb.model.base.Attachment;
import co.aurasphere.botmill.fb.model.base.AttachmentType;
import co.aurasphere.botmill.fb.model.base.Payload;
import co.aurasphere.botmill.fb.model.base.QuickReplyLocationPayload;
import co.aurasphere.botmill.fb.model.outcoming.payload.PayloadType;
import co.aurasphere.botmill.fb.model.outcoming.payload.UrlPayload;
import co.aurasphere.botmill.fb.model.outcoming.payload.template.ButtonTemplatePayload;
import co.aurasphere.botmill.fb.model.outcoming.payload.template.GenericTemplatePayload;
import co.aurasphere.botmill.fb.model.outcoming.payload.template.ListTemplatePayload;
import co.aurasphere.botmill.fb.model.outcoming.payload.template.ReceiptTemplatePayload;
import co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.AirlineBoardingPassTemplatePayload;
import co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.AirlineCheckinTemplatePayload;
import co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.AirlineFlightUpdateTemplatePayload;
import co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.AirlineItineraryTemplatePayload;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;


/**
 * Custom deserializer for an {@link Attachment}. Instantiates the correct
 * payload according to the current object.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */
public class AttachmentDeserializer implements JsonDeserializer<Attachment> {

	/**
	 * Gson delegate used to avoid infinite loops during the deserialization.
	 */
	private static Gson delegateGson;

	/**
	 * Instantiates a new AttachmentDeserializer.
	 */
	public AttachmentDeserializer() {
		GsonBuilder builder = new GsonBuilder();
		builder.addDeserializationExclusionStrategy(new SkipDeserializationAnnotationExclusionStrategy());
		delegateGson = builder.create();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.google.gson.JsonDeserializer#deserialize(com.google.gson.JsonElement,
	 * java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)
	 */
	public Attachment deserialize(JsonElement json, Type typeOfT,
			JsonDeserializationContext context) throws JsonParseException {

		Attachment attachment = delegateGson.fromJson(json, Attachment.class);
		AttachmentType type = attachment.getType();
		Class<? extends Payload> payloadClass = null;
		JsonElement payloadJson = json.getAsJsonObject().get(""payload"");
		
		switch (type) {
		case AUDIO:
		case FILE:
		case IMAGE:
		case VIDEO:
			payloadClass = UrlPayload.class;
			break;
		case LOCATION:
			payloadClass = QuickReplyLocationPayload.class;
			break;
		case FALLBACK:
			// In case of Fallback attachment the payload will be null so I do
			// nothing.
			break;
		case TEMPLATE:
			// In case of a template I need to check which one to instantiate.
			String payloadTypeString = payloadJson.getAsJsonObject()
					.get(""template_type"").getAsString();
			PayloadType templateType = PayloadType.valueOf(payloadTypeString
					.toUpperCase());

			switch (templateType) {
			case AIRLINE_BOARDINGPASS:
				payloadClass = AirlineBoardingPassTemplatePayload.class;
				break;
			case AIRLINE_CHECKIN:
				payloadClass = AirlineCheckinTemplatePayload.class;
				break;
			case AIRLINE_ITINERARY:
				payloadClass = AirlineItineraryTemplatePayload.class;
				break;
			case AIRLINE_UPDATE:
				payloadClass = AirlineFlightUpdateTemplatePayload.class;
				break;
			case BUTTON:
				payloadClass = ButtonTemplatePayload.class;
				break;
			case GENERIC:
				payloadClass = GenericTemplatePayload.class;
				break;
			case LIST:
				payloadClass = ListTemplatePayload.class;
				break;
			case RECEIPT:
				payloadClass = ReceiptTemplatePayload.class;
				break;
			}
			break;
		}
		Payload payload = context.deserialize(payloadJson, payloadClass);
		attachment.setPayload(payload);
		return attachment;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""AttachmentDeserializer []"";
	}

}
","package co.aurasphere.botmill.fb.internal.util.json; public class AttachmentDeserializer implements JsonDeserializer<Attachment> { private static Gson delegateGson; public AttachmentDeserializer() { GsonBuilder builder = new GsonBuilder(); builder.addDeserializationExclusionStrategy(new SkipDeserializationAnnotationExclusionStrategy()); delegateGson = builder.create(); } public Attachment deserialize(JsonElement json, Type typeOfT,
			JsonDeserializationContext context) throws JsonParseException { Attachment attachment = delegateGson.fromJson(json, Attachment.class); AttachmentType type = attachment.getType(); Class<? extends Payload> payloadClass = null; JsonElement payloadJson = json.getAsJsonObject().get(""payload""); switch (type) { case AUDIO:
		case FILE:
		case IMAGE:
		case VIDEO:
			payloadClass = UrlPayload.class; break; case LOCATION:
			payloadClass = QuickReplyLocationPayload.class; break; break; String payloadTypeString = payloadJson.getAsJsonObject()
					.get(""template_type"").getAsString(); PayloadType templateType = PayloadType.valueOf(payloadTypeString
					.toUpperCase()); switch (templateType) { case AIRLINE_BOARDINGPASS:
				payloadClass = AirlineBoardingPassTemplatePayload.class; break; case AIRLINE_CHECKIN:
				payloadClass = AirlineCheckinTemplatePayload.class; break; case AIRLINE_ITINERARY:
				payloadClass = AirlineItineraryTemplatePayload.class; break; case AIRLINE_UPDATE:
				payloadClass = AirlineFlightUpdateTemplatePayload.class; break; case BUTTON:
				payloadClass = ButtonTemplatePayload.class; break; case GENERIC:
				payloadClass = GenericTemplatePayload.class; break; case LIST:
				payloadClass = ListTemplatePayload.class; break; case RECEIPT:
				payloadClass = ReceiptTemplatePayload.class; break; } break; } Payload payload = context.deserialize(payloadJson, payloadClass); attachment.setPayload(payload); return attachment; } @Override
	public String toString() { return ""AttachmentDeserializer []""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.internal.util.json; public class AttachmentDeserializer implements JsonDeserializer<Attachment> { private static Gson delegateGson; public AttachmentDeserializer() { GsonBuilder builder = new GsonBuilder(); builder.addDeserializationExclusionStrategy(new SkipDeserializationAnnotationExclusionStrategy()); delegateGson = builder.create(); } public Attachment deserialize(JsonElement json, Type typeOfT,
			JsonDeserializationContext context) throws JsonParseException { Attachment attachment = delegateGson.fromJson(json, Attachment.class); AttachmentType type = attachment.getType(); Class<? extends Payload> payloadClass = null; JsonElement payloadJson = json.getAsJsonObject().get(""payload""); switch (type) { case AUDIO:
		case FILE:
		case IMAGE:
		case VIDEO:
			payloadClass = UrlPayload.class; break; case LOCATION:
			payloadClass = QuickReplyLocationPayload.class; break; break; String payloadTypeString = payloadJson.getAsJsonObject()
					.get(""template_type"").getAsString(); PayloadType templateType = PayloadType.valueOf(payloadTypeString
					.toUpperCase()); switch (templateType) { case AIRLINE_BOARDINGPASS:
				payloadClass = AirlineBoardingPassTemplatePayload.class; break; case AIRLINE_CHECKIN:
				payloadClass = AirlineCheckinTemplatePayload.class; break; case AIRLINE_ITINERARY:
				payloadClass = AirlineItineraryTemplatePayload.class; break; case AIRLINE_UPDATE:
				payloadClass = AirlineFlightUpdateTemplatePayload.class; break; case BUTTON:
				payloadClass = ButtonTemplatePayload.class; break; case GENERIC:
				payloadClass = GenericTemplatePayload.class; break; case LIST:
				payloadClass = ListTemplatePayload.class; break; case RECEIPT:
				payloadClass = ReceiptTemplatePayload.class; break; } break; } Payload payload = context.deserialize(payloadJson, payloadClass); attachment.setPayload(payload); return attachment; } @Override
	public String toString() { return ""AttachmentDeserializer []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.internal.util.json; 
import java.lang.reflect.Type; 
import co.aurasphere.botmill.core.internal.util.json.SkipDeserializationAnnotationExclusionStrategy; import co.aurasphere.botmill.fb.model.base.Attachment; import co.aurasphere.botmill.fb.model.base.AttachmentType; import co.aurasphere.botmill.fb.model.base.Payload; import co.aurasphere.botmill.fb.model.base.QuickReplyLocationPayload; import co.aurasphere.botmill.fb.model.outcoming.payload.PayloadType; import co.aurasphere.botmill.fb.model.outcoming.payload.UrlPayload; import co.aurasphere.botmill.fb.model.outcoming.payload.template.ButtonTemplatePayload; import co.aurasphere.botmill.fb.model.outcoming.payload.template.GenericTemplatePayload; import co.aurasphere.botmill.fb.model.outcoming.payload.template.ListTemplatePayload; import co.aurasphere.botmill.fb.model.outcoming.payload.template.ReceiptTemplatePayload; import co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.AirlineBoardingPassTemplatePayload; import co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.AirlineCheckinTemplatePayload; import co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.AirlineFlightUpdateTemplatePayload; import co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.AirlineItineraryTemplatePayload; 
import com.google.gson.Gson; import com.google.gson.GsonBuilder; import com.google.gson.JsonDeserializationContext; import com.google.gson.JsonDeserializer; import com.google.gson.JsonElement; import com.google.gson.JsonParseException; 
  public class AttachmentDeserializer implements JsonDeserializer<Attachment> { /**
 * Custom deserializer for an {@link Attachment}. Instantiates the correct
 * payload according to the current object.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */  private static Gson delegateGson; /**
	 * Gson delegate used to avoid infinite loops during the deserialization.
	 */  public AttachmentDeserializer() { GsonBuilder builder = new GsonBuilder(); builder.addDeserializationExclusionStrategy(new SkipDeserializationAnnotationExclusionStrategy()); delegateGson = builder.create(); } /**
	 * Instantiates a new AttachmentDeserializer.
	 */  public Attachment deserialize(JsonElement json, Type typeOfT,
			JsonDeserializationContext context) throws JsonParseException { /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.google.gson.JsonDeserializer#deserialize(com.google.gson.JsonElement,
	 * java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)
	 */ Attachment attachment = delegateGson.fromJson(json, Attachment.class); AttachmentType type = attachment.getType(); Class<? extends Payload> payloadClass = null; JsonElement payloadJson = json.getAsJsonObject().get(""payload"");  switch (type) { case AUDIO:
		case FILE:
		case IMAGE:
		case VIDEO:
			payloadClass = UrlPayload.class; break; case LOCATION:
			payloadClass = QuickReplyLocationPayload.class; break; 		 // In case of Fallback attachment the payload will be null so I do break; // nothing. String payloadTypeString = payloadJson.getAsJsonObject()
					.get(""template_type"").getAsString(); PayloadType templateType = PayloadType.valueOf(payloadTypeString
					.toUpperCase()); // In case of a template I need to check which one to instantiate. switch (templateType) { case AIRLINE_BOARDINGPASS:
				payloadClass = AirlineBoardingPassTemplatePayload.class; break; case AIRLINE_CHECKIN:
				payloadClass = AirlineCheckinTemplatePayload.class; break; case AIRLINE_ITINERARY:
				payloadClass = AirlineItineraryTemplatePayload.class; break; case AIRLINE_UPDATE:
				payloadClass = AirlineFlightUpdateTemplatePayload.class; break; case BUTTON:
				payloadClass = ButtonTemplatePayload.class; break; case GENERIC:
				payloadClass = GenericTemplatePayload.class; break; case LIST:
				payloadClass = ListTemplatePayload.class; break; case RECEIPT:
				payloadClass = ReceiptTemplatePayload.class; break; } break; } Payload payload = context.deserialize(payloadJson, payloadClass); attachment.setPayload(payload); return attachment; }   @Override
	public String toString() { return ""AttachmentDeserializer []""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/internal/util/json/ButtonSerializer.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.internal.util.json;

import java.lang.reflect.Type;

import co.aurasphere.botmill.fb.model.api.messengerprofile.persistentmenu.CallToActionNested;
import co.aurasphere.botmill.fb.model.outcoming.template.button.Button;
import co.aurasphere.botmill.fb.model.outcoming.template.button.ButtonType;
import co.aurasphere.botmill.fb.model.outcoming.template.button.BuyButton;
import co.aurasphere.botmill.fb.model.outcoming.template.button.LoginButton;
import co.aurasphere.botmill.fb.model.outcoming.template.button.LogoutButton;
import co.aurasphere.botmill.fb.model.outcoming.template.button.PostbackButton;
import co.aurasphere.botmill.fb.model.outcoming.template.button.ShareButton;
import co.aurasphere.botmill.fb.model.outcoming.template.button.WebUrlButton;

import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;


/**
 * Custom serializer/deserializer for an {@link Button}. Instantiates the
 * correct button from interface.
 * 
 * @author Donato Rimenti
 * @since 1.1.0
 */
public class ButtonSerializer implements JsonSerializer<Button>,
		JsonDeserializer<Button> {

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.google.gson.JsonSerializer#serialize(java.lang.Object,
	 * java.lang.reflect.Type, com.google.gson.JsonSerializationContext)
	 */
	public JsonElement serialize(Button src, Type typeOfSrc,
			JsonSerializationContext context) {
		ButtonType buttonType = src.getType();
		Class<?> buttonClass = getButtonClass(buttonType);
		return context.serialize(src, buttonClass);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.google.gson.JsonDeserializer#deserialize(com.google.gson.JsonElement,
	 * java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)
	 */
	public Button deserialize(JsonElement json, Type typeOfT,
			JsonDeserializationContext context) throws JsonParseException {
		String buttonTypeString = json.getAsJsonObject().get(""type"")
				.getAsString();
		ButtonType buttonType = ButtonType.valueOf(buttonTypeString
				.toUpperCase());
		Class<?> buttonClass = getButtonClass(buttonType);
		return context.deserialize(json, buttonClass);
	}

	/**
	 * Utility method for getting a button class from the {@link ButtonType}.
	 * 
	 * @param type
	 *            the button type.
	 * @return the button class for that type.
	 */
	private Class<?> getButtonClass(ButtonType type) {
		switch (type) {
		case ACCOUNT_LINK:
			return LoginButton.class;
		case ACCOUNT_UNLINK:
			return LogoutButton.class;
		case ELEMENT_SHARE:
			return ShareButton.class;
		case PAYMENT:
			return BuyButton.class;
		case PHONE_NUMBER:
			return PostbackButton.class;
		case POSTBACK:
			return PostbackButton.class;
		case WEB_URL:
			return WebUrlButton.class;
		case NESTED:
			return CallToActionNested.class;
		}
		// This will never happen.
		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""ButtonSerializer []"";
	}

}
","package co.aurasphere.botmill.fb.internal.util.json; public class ButtonSerializer implements JsonSerializer<Button>,
		JsonDeserializer<Button> { public JsonElement serialize(Button src, Type typeOfSrc,
			JsonSerializationContext context) { ButtonType buttonType = src.getType(); Class<?> buttonClass = getButtonClass(buttonType); return context.serialize(src, buttonClass); } public Button deserialize(JsonElement json, Type typeOfT,
			JsonDeserializationContext context) throws JsonParseException { String buttonTypeString = json.getAsJsonObject().get(""type"")
				.getAsString(); ButtonType buttonType = ButtonType.valueOf(buttonTypeString
				.toUpperCase()); Class<?> buttonClass = getButtonClass(buttonType); return context.deserialize(json, buttonClass); } private Class<?> getButtonClass(ButtonType type) { switch (type) { case ACCOUNT_LINK:
			return LoginButton.class; case ACCOUNT_UNLINK:
			return LogoutButton.class; case ELEMENT_SHARE:
			return ShareButton.class; case PAYMENT:
			return BuyButton.class; case PHONE_NUMBER:
			return PostbackButton.class; case POSTBACK:
			return PostbackButton.class; case WEB_URL:
			return WebUrlButton.class; case NESTED:
			return CallToActionNested.class; } return null; } @Override
	public String toString() { return ""ButtonSerializer []""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.internal.util.json; public class ButtonSerializer implements JsonSerializer<Button>,
		JsonDeserializer<Button> { public JsonElement serialize(Button src, Type typeOfSrc,
			JsonSerializationContext context) { ButtonType buttonType = src.getType(); Class<?> buttonClass = getButtonClass(buttonType); return context.serialize(src, buttonClass); } public Button deserialize(JsonElement json, Type typeOfT,
			JsonDeserializationContext context) throws JsonParseException { String buttonTypeString = json.getAsJsonObject().get(""type"")
				.getAsString(); ButtonType buttonType = ButtonType.valueOf(buttonTypeString
				.toUpperCase()); Class<?> buttonClass = getButtonClass(buttonType); return context.deserialize(json, buttonClass); } private Class<?> getButtonClass(ButtonType type) { switch (type) { case ACCOUNT_LINK:
			return LoginButton.class; case ACCOUNT_UNLINK:
			return LogoutButton.class; case ELEMENT_SHARE:
			return ShareButton.class; case PAYMENT:
			return BuyButton.class; case PHONE_NUMBER:
			return PostbackButton.class; case POSTBACK:
			return PostbackButton.class; case WEB_URL:
			return WebUrlButton.class; case NESTED:
			return CallToActionNested.class; } return null; } @Override
	public String toString() { return ""ButtonSerializer []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.internal.util.json; 
import java.lang.reflect.Type; 
import co.aurasphere.botmill.fb.model.api.messengerprofile.persistentmenu.CallToActionNested; import co.aurasphere.botmill.fb.model.outcoming.template.button.Button; import co.aurasphere.botmill.fb.model.outcoming.template.button.ButtonType; import co.aurasphere.botmill.fb.model.outcoming.template.button.BuyButton; import co.aurasphere.botmill.fb.model.outcoming.template.button.LoginButton; import co.aurasphere.botmill.fb.model.outcoming.template.button.LogoutButton; import co.aurasphere.botmill.fb.model.outcoming.template.button.PostbackButton; import co.aurasphere.botmill.fb.model.outcoming.template.button.ShareButton; import co.aurasphere.botmill.fb.model.outcoming.template.button.WebUrlButton; 
import com.google.gson.JsonDeserializationContext; import com.google.gson.JsonDeserializer; import com.google.gson.JsonElement; import com.google.gson.JsonParseException; import com.google.gson.JsonSerializationContext; import com.google.gson.JsonSerializer; 
  public class ButtonSerializer implements JsonSerializer<Button>,
		JsonDeserializer<Button> { /**
 * Custom serializer/deserializer for an {@link Button}. Instantiates the
 * correct button from interface.
 * 
 * @author Donato Rimenti
 * @since 1.1.0
 */  public JsonElement serialize(Button src, Type typeOfSrc,
			JsonSerializationContext context) { ButtonType buttonType = src.getType(); Class<?> buttonClass = getButtonClass(buttonType); return context.serialize(src, buttonClass); } /*
	 * (non-Javadoc)
	 * 
	 * @see com.google.gson.JsonSerializer#serialize(java.lang.Object,
	 * java.lang.reflect.Type, com.google.gson.JsonSerializationContext)
	 */  public Button deserialize(JsonElement json, Type typeOfT,
			JsonDeserializationContext context) throws JsonParseException { String buttonTypeString = json.getAsJsonObject().get(""type"")
				.getAsString(); ButtonType buttonType = ButtonType.valueOf(buttonTypeString
				.toUpperCase()); Class<?> buttonClass = getButtonClass(buttonType); return context.deserialize(json, buttonClass); } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.google.gson.JsonDeserializer#deserialize(com.google.gson.JsonElement,
	 * java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)
	 */  private Class<?> getButtonClass(ButtonType type) { switch (type) { case ACCOUNT_LINK:
			return LoginButton.class; case ACCOUNT_UNLINK:
			return LogoutButton.class; case ELEMENT_SHARE:
			return ShareButton.class; case PAYMENT:
			return BuyButton.class; case PHONE_NUMBER:
			return PostbackButton.class; case POSTBACK:
			return PostbackButton.class; case WEB_URL:
			return WebUrlButton.class; case NESTED:
			return CallToActionNested.class; } /**
	 * Utility method for getting a button class from the {@link ButtonType}.
	 * 
	 * @param type
	 *            the button type.
	 * @return the button class for that type.
	 */ return null; } // This will never happen.  @Override
	public String toString() { return ""ButtonSerializer []""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/internal/util/json/CalendarSerializer.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.internal.util.json;

import java.lang.reflect.Type;
import java.text.DecimalFormat;
import java.util.Calendar;

import com.google.gson.JsonElement;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;


/**
 * Class that handles the serialization of a Calendar using the Facebook date
 * format (YYYY-MM-DDThh:mm).
 * 
 * @author Donato Rimenti
 * 
 */
public class CalendarSerializer implements JsonSerializer<Calendar> {

	/**
	 * The formatter for the calendar.
	 */
	private final DecimalFormat formatter;

	/**
	 * Instantiates a new calendar serializer.
	 */
	public CalendarSerializer() {
		this.formatter = new DecimalFormat(""00"");
	}

	/**
	 * Serializes a Calendar using the Facebook date format (YYYY-MM-DDThh:mm).
	 *
	 * @param src
	 *            the src
	 * @param typeOfSrc
	 *            the type of src
	 * @param context
	 *            the context
	 * @return the json element
	 */
	public JsonElement serialize(Calendar src, Type typeOfSrc,
			JsonSerializationContext context) {
		int year = src.get(Calendar.YEAR);
		String month = this.formatter.format(Double.valueOf(src
				.get(Calendar.MONTH) + 1));
		String day = this.formatter.format(Double.valueOf(src
				.get(Calendar.DAY_OF_MONTH)));
		String hour = this.formatter.format(Double.valueOf(src
				.get(Calendar.HOUR_OF_DAY)));
		String minute = this.formatter.format(Double.valueOf(src
				.get(Calendar.MINUTE)));
		String formattedDate = year + ""-"" + month + ""-"" + day + ""T"" + hour
				+ "":"" + minute;

		return context.serialize(formattedDate);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""CalendarSerializer [formatter="" + formatter + ""]"";
	}
}
","package co.aurasphere.botmill.fb.internal.util.json; public class CalendarSerializer implements JsonSerializer<Calendar> { private final DecimalFormat formatter; public CalendarSerializer() { this.formatter = new DecimalFormat(""00""); } public JsonElement serialize(Calendar src, Type typeOfSrc,
			JsonSerializationContext context) { int year = src.get(Calendar.YEAR); String month = this.formatter.format(Double.valueOf(src
				.get(Calendar.MONTH) + 1)); String day = this.formatter.format(Double.valueOf(src
				.get(Calendar.DAY_OF_MONTH))); String hour = this.formatter.format(Double.valueOf(src
				.get(Calendar.HOUR_OF_DAY))); String minute = this.formatter.format(Double.valueOf(src
				.get(Calendar.MINUTE))); String formattedDate = year + ""-"" + month + ""-"" + day + ""T"" + hour
				+ "":"" + minute; return context.serialize(formattedDate); } @Override
	public String toString() { return ""CalendarSerializer [formatter="" + formatter + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.internal.util.json; public class CalendarSerializer implements JsonSerializer<Calendar> { private final DecimalFormat formatter; public CalendarSerializer() { this.formatter = new DecimalFormat(""00""); } public JsonElement serialize(Calendar src, Type typeOfSrc,
			JsonSerializationContext context) { int year = src.get(Calendar.YEAR); String month = this.formatter.format(Double.valueOf(src
				.get(Calendar.MONTH) + 1)); String day = this.formatter.format(Double.valueOf(src
				.get(Calendar.DAY_OF_MONTH))); String hour = this.formatter.format(Double.valueOf(src
				.get(Calendar.HOUR_OF_DAY))); String minute = this.formatter.format(Double.valueOf(src
				.get(Calendar.MINUTE))); String formattedDate = year + ""-"" + month + ""-"" + day + ""T"" + hour
				+ "":"" + minute; return context.serialize(formattedDate); } @Override
	public String toString() { return ""CalendarSerializer [formatter="" + formatter + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.internal.util.json; 
import java.lang.reflect.Type; import java.text.DecimalFormat; import java.util.Calendar; 
import com.google.gson.JsonElement; import com.google.gson.JsonSerializationContext; import com.google.gson.JsonSerializer; 
  public class CalendarSerializer implements JsonSerializer<Calendar> { /**
 * Class that handles the serialization of a Calendar using the Facebook date
 * format (YYYY-MM-DDThh:mm).
 * 
 * @author Donato Rimenti
 * 
 */  private final DecimalFormat formatter; /**
	 * The formatter for the calendar.
	 */  public CalendarSerializer() { this.formatter = new DecimalFormat(""00""); } /**
	 * Instantiates a new calendar serializer.
	 */  public JsonElement serialize(Calendar src, Type typeOfSrc,
			JsonSerializationContext context) { int year = src.get(Calendar.YEAR); String month = this.formatter.format(Double.valueOf(src
				.get(Calendar.MONTH) + 1)); String day = this.formatter.format(Double.valueOf(src
				.get(Calendar.DAY_OF_MONTH))); String hour = this.formatter.format(Double.valueOf(src
				.get(Calendar.HOUR_OF_DAY))); String minute = this.formatter.format(Double.valueOf(src
				.get(Calendar.MINUTE))); String formattedDate = year + ""-"" + month + ""-"" + day + ""T"" + hour
				+ "":"" + minute; /**
	 * Serializes a Calendar using the Facebook date format (YYYY-MM-DDThh:mm).
	 *
	 * @param src
	 *            the src
	 * @param typeOfSrc
	 *            the type of src
	 * @param context
	 *            the context
	 * @return the json element
	 */ return context.serialize(formattedDate); }   @Override
	public String toString() { return ""CalendarSerializer [formatter="" + formatter + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/internal/util/json/EnumLowercaseSerializer.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.internal.util.json;

import java.lang.reflect.Type;

import co.aurasphere.botmill.fb.model.outcoming.template.button.PaymentType;

import com.google.gson.JsonElement;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;


/**
 * Class that serializes an Enum as its lowercase name.
 * 
 * @author Donato Rimenti
 */
public class EnumLowercaseSerializer implements JsonSerializer<Enum<?>> {

	/**
	 * Serializes an Enum as its lowercase name.
	 *
	 * @param src
	 *            the src.
	 * @param typeOfSrc
	 *            the type of src.
	 * @param context
	 *            the context.
	 * @return the json element.
	 */
	public JsonElement serialize(Enum<?> src, Type typeOfSrc,
			JsonSerializationContext context) {

		// Ignore this serializer for enums of class PaymentType.
		if (src.getDeclaringClass().equals(PaymentType.class)) {
			return context.serialize(src.name());
		}

		return context.serialize(src.name().toLowerCase());
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""EnumLowercaseSerializer []"";
	}
}","package co.aurasphere.botmill.fb.internal.util.json; public class EnumLowercaseSerializer implements JsonSerializer<Enum<?>> { public JsonElement serialize(Enum<?> src, Type typeOfSrc,
			JsonSerializationContext context) { if (src.getDeclaringClass().equals(PaymentType.class)) { return context.serialize(src.name()); } return context.serialize(src.name().toLowerCase()); } @Override
	public String toString() { return ""EnumLowercaseSerializer []""; } }",0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.internal.util.json; public class EnumLowercaseSerializer implements JsonSerializer<Enum<?>> { public JsonElement serialize(Enum<?> src, Type typeOfSrc,
			JsonSerializationContext context) { if (src.getDeclaringClass().equals(PaymentType.class)) { return context.serialize(src.name()); } return context.serialize(src.name().toLowerCase()); } @Override
	public String toString() { return ""EnumLowercaseSerializer []""; } }","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.internal.util.json; 
import java.lang.reflect.Type; 
import co.aurasphere.botmill.fb.model.outcoming.template.button.PaymentType; 
import com.google.gson.JsonElement; import com.google.gson.JsonSerializationContext; import com.google.gson.JsonSerializer; 
  public class EnumLowercaseSerializer implements JsonSerializer<Enum<?>> { /**
 * Class that serializes an Enum as its lowercase name.
 * 
 * @author Donato Rimenti
 */  public JsonElement serialize(Enum<?> src, Type typeOfSrc,
			JsonSerializationContext context) { /**
	 * Serializes an Enum as its lowercase name.
	 *
	 * @param src
	 *            the src.
	 * @param typeOfSrc
	 *            the type of src.
	 * @param context
	 *            the context.
	 * @return the json element.
	 */  if (src.getDeclaringClass().equals(PaymentType.class)) { return context.serialize(src.name()); } // Ignore this serializer for enums of class PaymentType. return context.serialize(src.name().toLowerCase()); }   @Override
	public String toString() { return ""EnumLowercaseSerializer []""; } }"
src/main/java/co/aurasphere/botmill/fb/internal/util/json/FbBotMillJsonUtils.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.internal.util.json;

import java.util.Calendar;

import co.aurasphere.botmill.core.internal.util.json.CalendarFromTimestampJsonDeserializer;
import co.aurasphere.botmill.fb.model.base.Attachment;
import co.aurasphere.botmill.fb.model.incoming.callback.IncomingMessage;
import co.aurasphere.botmill.fb.model.outcoming.template.button.Button;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;


/**
 * Utility class for handling JSON serialization and deserialization.
 * 
 * @author Donato Rimenti
 */
public class FbBotMillJsonUtils {

	/**
	 * Gson which handles the JSON conversion.
	 */
	private static Gson gson;

	/**
	 * Instantiates a new JsonUtils.
	 */
	private FbBotMillJsonUtils() {
	}

	/**
	 * Initializes the current Gson object if null and returns it. The Gson
	 * object has custom adapters to manage datatypes according to Facebook
	 * formats.
	 * 
	 * @return the current instance of Gson.
	 */
	private static Gson getGson() {
		if (gson == null) {
			// Creates the Gson object which will manage the information
			// received
			GsonBuilder builder = new GsonBuilder();

			// Serializes enums as lower-case.
			builder.registerTypeHierarchyAdapter(Enum.class,
					new EnumLowercaseSerializer());

			// Serializes calendar in format YYYY-MM-DDThh:mm.
			builder.registerTypeHierarchyAdapter(Calendar.class,
					new CalendarSerializer());

			// Deserializes payloads from interface.
			builder.registerTypeAdapter(Attachment.class,
					new AttachmentDeserializer());

			// Serializes/deserializes buttons from interface.
			builder.registerTypeAdapter(Button.class, new ButtonSerializer());

			// Deserializes incoming messages from interface.
			builder.registerTypeAdapter(IncomingMessage.class,
					new IncomingMessageDeserializer());

			// Deserializes timestamp as Calendar.
			builder.registerTypeAdapter(Calendar.class,
					new CalendarFromTimestampJsonDeserializer());

			gson = builder.create();
		}
		return gson;
	}

	/**
	 * From json.
	 *
	 * @param <T>
	 *            the generic type
	 * @param json
	 *            the string from which the object is to be deserialized.
	 * @param T
	 *            the type of the desired object.
	 * @return an object of type T from the string. Returns null if json is
	 *         null.
	 * @see Gson#fromJson(String, Class)
	 */
	public static <T> T fromJson(String json, Class<T> T) {
		return getGson().fromJson(json, T);
	}

	/**
	 * To json.
	 *
	 * @param src
	 *            the object for which Json representation is to be created
	 *            setting for Gson .
	 * @return Json representation of src.
	 * @see Gson#toJson(Object)
	 */
	public static String toJson(Object src) {
		return getGson().toJson(src);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""JsonUtils []"";
	}

}
","package co.aurasphere.botmill.fb.internal.util.json; public class FbBotMillJsonUtils { private static Gson gson; private FbBotMillJsonUtils() { } private static Gson getGson() { if (gson == null) { GsonBuilder builder = new GsonBuilder(); builder.registerTypeHierarchyAdapter(Enum.class,
					new EnumLowercaseSerializer()); builder.registerTypeHierarchyAdapter(Calendar.class,
					new CalendarSerializer()); builder.registerTypeAdapter(Attachment.class,
					new AttachmentDeserializer()); builder.registerTypeAdapter(Button.class, new ButtonSerializer()); builder.registerTypeAdapter(IncomingMessage.class,
					new IncomingMessageDeserializer()); builder.registerTypeAdapter(Calendar.class,
					new CalendarFromTimestampJsonDeserializer()); gson = builder.create(); } return gson; } public static <T> T fromJson(String json, Class<T> T) { return getGson().fromJson(json, T); } public static String toJson(Object src) { return getGson().toJson(src); } @Override
	public String toString() { return ""JsonUtils []""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.internal.util.json; public class FbBotMillJsonUtils { private static Gson gson; private FbBotMillJsonUtils() { } private static Gson getGson() { if (gson == null) { GsonBuilder builder = new GsonBuilder(); builder.registerTypeHierarchyAdapter(Enum.class,
					new EnumLowercaseSerializer()); builder.registerTypeHierarchyAdapter(Calendar.class,
					new CalendarSerializer()); builder.registerTypeAdapter(Attachment.class,
					new AttachmentDeserializer()); builder.registerTypeAdapter(Button.class, new ButtonSerializer()); builder.registerTypeAdapter(IncomingMessage.class,
					new IncomingMessageDeserializer()); builder.registerTypeAdapter(Calendar.class,
					new CalendarFromTimestampJsonDeserializer()); gson = builder.create(); } return gson; } public static <T> T fromJson(String json, Class<T> T) { return getGson().fromJson(json, T); } public static String toJson(Object src) { return getGson().toJson(src); } @Override
	public String toString() { return ""JsonUtils []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.internal.util.json; 
import java.util.Calendar; 
import co.aurasphere.botmill.core.internal.util.json.CalendarFromTimestampJsonDeserializer; import co.aurasphere.botmill.fb.model.base.Attachment; import co.aurasphere.botmill.fb.model.incoming.callback.IncomingMessage; import co.aurasphere.botmill.fb.model.outcoming.template.button.Button; 
import com.google.gson.Gson; import com.google.gson.GsonBuilder; 
  public class FbBotMillJsonUtils { /**
 * Utility class for handling JSON serialization and deserialization.
 * 
 * @author Donato Rimenti
 */  private static Gson gson; /**
	 * Gson which handles the JSON conversion.
	 */  private FbBotMillJsonUtils() { } /**
	 * Instantiates a new JsonUtils.
	 */  private static Gson getGson() { if (gson == null) { /**
	 * Initializes the current Gson object if null and returns it. The Gson
	 * object has custom adapters to manage datatypes according to Facebook
	 * formats.
	 * 
	 * @return the current instance of Gson.
	 */ // Creates the Gson object which will manage the information GsonBuilder builder = new GsonBuilder(); // received  builder.registerTypeHierarchyAdapter(Enum.class,
					new EnumLowercaseSerializer()); // Serializes enums as lower-case.  builder.registerTypeHierarchyAdapter(Calendar.class,
					new CalendarSerializer()); // Serializes calendar in format YYYY-MM-DDThh:mm.  builder.registerTypeAdapter(Attachment.class,
					new AttachmentDeserializer()); // Deserializes payloads from interface.  builder.registerTypeAdapter(Button.class, new ButtonSerializer()); // Serializes/deserializes buttons from interface.  builder.registerTypeAdapter(IncomingMessage.class,
					new IncomingMessageDeserializer()); // Deserializes incoming messages from interface.  builder.registerTypeAdapter(Calendar.class,
					new CalendarFromTimestampJsonDeserializer()); // Deserializes timestamp as Calendar. gson = builder.create(); } return gson; }   public static <T> T fromJson(String json, Class<T> T) { return getGson().fromJson(json, T); } /**
	 * From json.
	 *
	 * @param <T>
	 *            the generic type
	 * @param json
	 *            the string from which the object is to be deserialized.
	 * @param T
	 *            the type of the desired object.
	 * @return an object of type T from the string. Returns null if json is
	 *         null.
	 * @see Gson#fromJson(String, Class)
	 */  public static String toJson(Object src) { return getGson().toJson(src); } /**
	 * To json.
	 *
	 * @param src
	 *            the object for which Json representation is to be created
	 *            setting for Gson .
	 * @return Json representation of src.
	 * @see Gson#toJson(Object)
	 */  @Override
	public String toString() { return ""JsonUtils []""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/internal/util/json/IncomingMessageDeserializer.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.internal.util.json;

import java.lang.reflect.Type;

import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;

import co.aurasphere.botmill.fb.model.incoming.callback.EchoMessage;
import co.aurasphere.botmill.fb.model.incoming.callback.IncomingMessage;
import co.aurasphere.botmill.fb.model.incoming.callback.ReceivedMessage;


/**
 * Custom deserializer for an {@link IncomingMessage}. Instantiates the correct
 * message from interface.
 * 
 * @author Donato Rimenti
 * @since 1.1.0
 */
public class IncomingMessageDeserializer implements
		JsonDeserializer<IncomingMessage> {

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.google.gson.JsonDeserializer#deserialize(com.google.gson.JsonElement,
	 * java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)
	 */
	public IncomingMessage deserialize(JsonElement json, Type typeOfT,
			JsonDeserializationContext context) throws JsonParseException {
		JsonElement isEchoElement = json.getAsJsonObject().get(""is_echo"");
		boolean isEcho = isEchoElement != null ? isEchoElement.getAsBoolean() : false;
		Class<? extends IncomingMessage> incomingMessageClass = null;
		if (isEcho == true) {
			incomingMessageClass = EchoMessage.class;
		} else {
			incomingMessageClass = ReceivedMessage.class;
		}
		return context.deserialize(json, incomingMessageClass);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""IncomingMessageDeserializer []"";
	}

}
","package co.aurasphere.botmill.fb.internal.util.json; public class IncomingMessageDeserializer implements
		JsonDeserializer<IncomingMessage> { public IncomingMessage deserialize(JsonElement json, Type typeOfT,
			JsonDeserializationContext context) throws JsonParseException { JsonElement isEchoElement = json.getAsJsonObject().get(""is_echo""); boolean isEcho = isEchoElement != null ? isEchoElement.getAsBoolean() : false; Class<? extends IncomingMessage> incomingMessageClass = null; if (isEcho == true) { incomingMessageClass = EchoMessage.class; } else { incomingMessageClass = ReceivedMessage.class; } return context.deserialize(json, incomingMessageClass); } @Override
	public String toString() { return ""IncomingMessageDeserializer []""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.internal.util.json; public class IncomingMessageDeserializer implements
		JsonDeserializer<IncomingMessage> { public IncomingMessage deserialize(JsonElement json, Type typeOfT,
			JsonDeserializationContext context) throws JsonParseException { JsonElement isEchoElement = json.getAsJsonObject().get(""is_echo""); boolean isEcho = isEchoElement != null ? isEchoElement.getAsBoolean() : false; Class<? extends IncomingMessage> incomingMessageClass = null; if (isEcho == true) { incomingMessageClass = EchoMessage.class; } else { incomingMessageClass = ReceivedMessage.class; } return context.deserialize(json, incomingMessageClass); } @Override
	public String toString() { return ""IncomingMessageDeserializer []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.internal.util.json; 
import java.lang.reflect.Type; 
import com.google.gson.JsonDeserializationContext; import com.google.gson.JsonDeserializer; import com.google.gson.JsonElement; import com.google.gson.JsonParseException; 
import co.aurasphere.botmill.fb.model.incoming.callback.EchoMessage; import co.aurasphere.botmill.fb.model.incoming.callback.IncomingMessage; import co.aurasphere.botmill.fb.model.incoming.callback.ReceivedMessage; 
  public class IncomingMessageDeserializer implements
		JsonDeserializer<IncomingMessage> { /**
 * Custom deserializer for an {@link IncomingMessage}. Instantiates the correct
 * message from interface.
 * 
 * @author Donato Rimenti
 * @since 1.1.0
 */  public IncomingMessage deserialize(JsonElement json, Type typeOfT,
			JsonDeserializationContext context) throws JsonParseException { JsonElement isEchoElement = json.getAsJsonObject().get(""is_echo""); boolean isEcho = isEchoElement != null ? isEchoElement.getAsBoolean() : false; Class<? extends IncomingMessage> incomingMessageClass = null; if (isEcho == true) { incomingMessageClass = EchoMessage.class; } else { incomingMessageClass = ReceivedMessage.class; } return context.deserialize(json, incomingMessageClass); } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.google.gson.JsonDeserializer#deserialize(com.google.gson.JsonElement,
	 * java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)
	 */  @Override
	public String toString() { return ""IncomingMessageDeserializer []""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/internal/util/network/FbBotMillNetworkConstants.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.internal.util.network;

import co.aurasphere.botmill.fb.FbBotMillContext;

/**
 * Utility class that contains the constants used to handle the network
 * communication with Facebook.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/quickstart"">
 *      Facebook's Messenger Platform Documentation</a>
 * 
 */
public class FbBotMillNetworkConstants {

	/**
	 * Instantiates a new FbBotMillNetworkConstants.
	 */
	private FbBotMillNetworkConstants() {
	}

	/**
	 * GET parameter indicating the type of request from Facebook. Used only
	 * during WebHook initial registration.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/quickstart""
	 *      > Facebook's Messenger Platform Documentation</a>
	 */
	public static final String HUB_MODE_PARAMETER = ""hub.mode"";

	/**
	 * GET parameter indicating the verify token from Facebook. Used only during
	 * WebHook initial registration. Facebook will send a verify token as
	 * defined during configuration phase. The Servlet will check that the token
	 * is the same registered in the {@link FbBotMillContext} and, if that's the
	 * case, proceed with registration.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/quickstart""
	 *      > Facebook's Messenger Platform Documentation</a>
	 */
	public static final String HUB_VERIFY_TOKEN_PARAMETER = ""hub.verify_token"";

	/**
	 * GET parameter indicating the hub challenge from Facebook. Used only
	 * during WebHook initial registration. Facebook will send an hub challenge
	 * as defined during configuration phase and expects the app to reply with
	 * the same challenge to complete the WebHook registration.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/quickstart""
	 *      > Facebook's Messenger Platform Documentation</a>
	 */
	public static final String HUB_CHALLENGE_PARAMETER = ""hub.challenge"";

	/**
	 * Hub mode expected from Facebook for WebHook initial registration.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/quickstart""
	 *      > Facebook's Messenger Platform Documentation</a>
	 */
	public static final String HUB_MODE_SUBSCRIBE = ""subscribe"";

	/**
	 * Facebook's base URL used to POST data.
	 */
	public static final String FACEBOOK_BASE_URL = ""https://graph.facebook.com/v2.9/"";

	/**
	 * Facebook's REST path for the Send API.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference""
	 *      > Facebook's Messenger Send API Documentation</a>
	 */
	public static final String FACEBOOK_MESSAGES_URL = ""me/messages?access_token="";

	/**
	 * Facebook's REST path for the Thread Settings API.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings""
	 *      > Facebook's Messenger Thread Settings Documentation</a>
	 */
	public static final String FACEBOOK_THREAD_SETTINGS_URL = ""me/thread_settings?access_token="";

	/**
	 * Facebook's REST path for the Messenger Profile API.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile""
	 *      > Facebook's Messenger Profile Documentation</a>
	 */
	public static final String FACEBOOK_MESSENGER_PROFILE = ""/me/messenger_profile?access_token="";

	/**
	 * Facebook's GET parameters for the User Profile API.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/user-profile""
	 *      >Facebook's Messenger User Profile API Documentation</a>
	 */
	public static final String USER_PROFILE_FIELDS = ""?fields=first_name,last_name,profile_pic,locale,timezone,gender&access_token="";

	/**
	 * Facebook's REST path for the Upload API.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/attachment-upload/v2.8""
	 *      > Facebook's Messenger Upload API Documentation</a>
	 */
	public static final String FACEBOOK_UPLOAD_API_URL = ""me/message_attachments?access_token="";

	/**
	 * Facebook's REST path for the Messenger Code API.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-code""
	 *      > Facebook's Messenger Code API Documentation</a>
	 */
	public static final String FACEBOOK_MESSENGER_CODE_API_URL = ""me/messenger_codes?access_token="";

	/**
	 * Facebook's REST path for Getting Daily Unique Active Thread Counts
	 * through Messaging Insight API.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/insights/page-messaging""
	 *      > Facebook's Messaging Insight API Documentation</a>
	 */
	public static final String FACEBOOK_MESSAGING_INSIGHT_ACTIVE_THREADS_URL = ""me/insights/page_messages_active_threads_unique&access_token="";

	/**
	 * Facebook's REST path for Getting Daily Unique Conversation Counts through
	 * Messaging Insight API.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/insights/page-messaging""
	 *      > Facebook's Messaging Insight API Documentation</a>
	 */
	public static final String FACEBOOK_MESSAGING_INSIGHT_CONVERSATION_URL = ""me/insights/page_messages_feedback_by_action_unique&access_token="";

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""FbBotMillNetworkConstants []"";
	}

}
","package co.aurasphere.botmill.fb.internal.util.network; public class FbBotMillNetworkConstants { private FbBotMillNetworkConstants() { } public static final String HUB_MODE_PARAMETER = ""hub.mode""; public static final String HUB_VERIFY_TOKEN_PARAMETER = ""hub.verify_token""; public static final String HUB_CHALLENGE_PARAMETER = ""hub.challenge""; public static final String HUB_MODE_SUBSCRIBE = ""subscribe""; public static final String FACEBOOK_MESSAGES_URL = ""me/messages?access_token=""; public static final String FACEBOOK_THREAD_SETTINGS_URL = ""me/thread_settings?access_token=""; public static final String FACEBOOK_MESSENGER_PROFILE = ""/me/messenger_profile?access_token=""; public static final String USER_PROFILE_FIELDS = ""?fields=first_name,last_name,profile_pic,locale,timezone,gender&access_token=""; public static final String FACEBOOK_UPLOAD_API_URL = ""me/message_attachments?access_token=""; public static final String FACEBOOK_MESSENGER_CODE_API_URL = ""me/messenger_codes?access_token=""; public static final String FACEBOOK_MESSAGING_INSIGHT_ACTIVE_THREADS_URL = ""me/insights/page_messages_active_threads_unique&access_token=""; public static final String FACEBOOK_MESSAGING_INSIGHT_CONVERSATION_URL = ""me/insights/page_messages_feedback_by_action_unique&access_token=""; @Override
	public String toString() { return ""FbBotMillNetworkConstants []""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.internal.util.network; public class FbBotMillNetworkConstants { private FbBotMillNetworkConstants() { } public static final String HUB_MODE_PARAMETER = ""hub.mode""; public static final String HUB_VERIFY_TOKEN_PARAMETER = ""hub.verify_token""; public static final String HUB_CHALLENGE_PARAMETER = ""hub.challenge""; public static final String HUB_MODE_SUBSCRIBE = ""subscribe""; public static final String FACEBOOK_MESSAGES_URL = ""me/messages?access_token=""; public static final String FACEBOOK_THREAD_SETTINGS_URL = ""me/thread_settings?access_token=""; public static final String FACEBOOK_MESSENGER_PROFILE = ""/me/messenger_profile?access_token=""; public static final String USER_PROFILE_FIELDS = ""?fields=first_name,last_name,profile_pic,locale,timezone,gender&access_token=""; public static final String FACEBOOK_UPLOAD_API_URL = ""me/message_attachments?access_token=""; public static final String FACEBOOK_MESSENGER_CODE_API_URL = ""me/messenger_codes?access_token=""; public static final String FACEBOOK_MESSAGING_INSIGHT_ACTIVE_THREADS_URL = ""me/insights/page_messages_active_threads_unique&access_token=""; public static final String FACEBOOK_MESSAGING_INSIGHT_CONVERSATION_URL = ""me/insights/page_messages_feedback_by_action_unique&access_token=""; @Override
	public String toString() { return ""FbBotMillNetworkConstants []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.internal.util.network; 
import co.aurasphere.botmill.fb.FbBotMillContext;  /**
 * Utility class that contains the constants used to handle the network
 * communication with Facebook.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/quickstart"">
 *      Facebook's Messenger Platform Documentation</a>
 * 
 */ public class FbBotMillNetworkConstants {  /**
	 * Instantiates a new FbBotMillNetworkConstants.
	 */ private FbBotMillNetworkConstants() { }  /**
	 * GET parameter indicating the type of request from Facebook. Used only
	 * during WebHook initial registration.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/quickstart""
	 *      > Facebook's Messenger Platform Documentation</a>
	 */ public static final String HUB_MODE_PARAMETER = ""hub.mode"";  /**
	 * GET parameter indicating the verify token from Facebook. Used only during
	 * WebHook initial registration. Facebook will send a verify token as
	 * defined during configuration phase. The Servlet will check that the token
	 * is the same registered in the {@link FbBotMillContext} and, if that's the
	 * case, proceed with registration.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/quickstart""
	 *      > Facebook's Messenger Platform Documentation</a>
	 */ public static final String HUB_VERIFY_TOKEN_PARAMETER = ""hub.verify_token"";  /**
	 * GET parameter indicating the hub challenge from Facebook. Used only
	 * during WebHook initial registration. Facebook will send an hub challenge
	 * as defined during configuration phase and expects the app to reply with
	 * the same challenge to complete the WebHook registration.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/quickstart""
	 *      > Facebook's Messenger Platform Documentation</a>
	 */ public static final String HUB_CHALLENGE_PARAMETER = ""hub.challenge"";  /**
	 * Hub mode expected from Facebook for WebHook initial registration.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/quickstart""
	 *      > Facebook's Messenger Platform Documentation</a>
	 */ public static final String HUB_MODE_SUBSCRIBE = ""subscribe"";  /**
	 * Facebook's base URL used to POST data.
	 */ //graph.facebook.com/v2.9/"";  /**
	 * Facebook's REST path for the Send API.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference""
	 *      > Facebook's Messenger Send API Documentation</a>
	 */ public static final String FACEBOOK_MESSAGES_URL = ""me/messages?access_token="";  /**
	 * Facebook's REST path for the Thread Settings API.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings""
	 *      > Facebook's Messenger Thread Settings Documentation</a>
	 */ public static final String FACEBOOK_THREAD_SETTINGS_URL = ""me/thread_settings?access_token="";  /**
	 * Facebook's REST path for the Messenger Profile API.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile""
	 *      > Facebook's Messenger Profile Documentation</a>
	 */ public static final String FACEBOOK_MESSENGER_PROFILE = ""/me/messenger_profile?access_token="";  /**
	 * Facebook's GET parameters for the User Profile API.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/user-profile""
	 *      >Facebook's Messenger User Profile API Documentation</a>
	 */ public static final String USER_PROFILE_FIELDS = ""?fields=first_name,last_name,profile_pic,locale,timezone,gender&access_token="";  /**
	 * Facebook's REST path for the Upload API.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/attachment-upload/v2.8""
	 *      > Facebook's Messenger Upload API Documentation</a>
	 */ public static final String FACEBOOK_UPLOAD_API_URL = ""me/message_attachments?access_token="";  /**
	 * Facebook's REST path for the Messenger Code API.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-code""
	 *      > Facebook's Messenger Code API Documentation</a>
	 */ public static final String FACEBOOK_MESSENGER_CODE_API_URL = ""me/messenger_codes?access_token="";  /**
	 * Facebook's REST path for Getting Daily Unique Active Thread Counts
	 * through Messaging Insight API.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/insights/page-messaging""
	 *      > Facebook's Messaging Insight API Documentation</a>
	 */ public static final String FACEBOOK_MESSAGING_INSIGHT_ACTIVE_THREADS_URL = ""me/insights/page_messages_active_threads_unique&access_token="";  /**
	 * Facebook's REST path for Getting Daily Unique Conversation Counts through
	 * Messaging Insight API.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/insights/page-messaging""
	 *      > Facebook's Messaging Insight API Documentation</a>
	 */ public static final String FACEBOOK_MESSAGING_INSIGHT_CONVERSATION_URL = ""me/insights/page_messages_feedback_by_action_unique&access_token="";  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ @Override
	public String toString() { return ""FbBotMillNetworkConstants []""; }  }  "
src/main/java/co/aurasphere/botmill/fb/internal/util/network/FbBotMillNetworkController.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.internal.util.network;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;

import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import co.aurasphere.botmill.core.internal.util.network.BotMillNetworkResponse;
import co.aurasphere.botmill.core.internal.util.network.NetworkUtils;
import co.aurasphere.botmill.fb.FbBotMillContext;
import co.aurasphere.botmill.fb.internal.util.json.FbBotMillJsonUtils;
import co.aurasphere.botmill.fb.model.api.messaginginsight.DailyUniqueActiveThreadCounts;
import co.aurasphere.botmill.fb.model.api.messaginginsight.DailyUniqueConversationCounts;
import co.aurasphere.botmill.fb.model.api.messengercode.MessengerCode;
import co.aurasphere.botmill.fb.model.api.upload.UploadAttachmentResponse;
import co.aurasphere.botmill.fb.model.api.userprofile.FacebookUserProfile;
import co.aurasphere.botmill.fb.model.base.AttachmentType;
import co.aurasphere.botmill.fb.model.incoming.FacebookConfirmationMessage;
import co.aurasphere.botmill.fb.model.incoming.FacebookError;
import co.aurasphere.botmill.fb.model.incoming.FacebookErrorMessage;
import co.aurasphere.botmill.fb.support.FbBotMillMonitor;

/**
 * Class that contains methods that allows FbBotMill to communicate through the
 * network.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */
public class FbBotMillNetworkController {

	/**
	 * The logger.
	 */
	private static final Logger logger = LoggerFactory
			.getLogger(FbBotMillNetworkController.class);

	/**
	 * The registered monitors to the {@link FbBotMillContext}.
	 */
	private static final List<FbBotMillMonitor> registeredMonitors = FbBotMillContext
			.getInstance().getRegisteredMonitors();

	/**
	 * Method used to retrieve a {@link FacebookUserProfile} from an ID using
	 * the GET method.
	 * 
	 * @param userId
	 *            the ID of the user to retrieve.
	 * @return the user profile info.
	 */
	public static FacebookUserProfile getUserProfile(String userId) {
		String pageToken = FbBotMillContext.getInstance().getPageToken();
		BotMillNetworkResponse response = NetworkUtils
				.get(FbBotMillNetworkConstants.FACEBOOK_BASE_URL + userId
						+ FbBotMillNetworkConstants.USER_PROFILE_FIELDS
						+ pageToken);
		FacebookUserProfile user = FbBotMillJsonUtils.fromJson(
				response.getResponse(), FacebookUserProfile.class);
		return user;
	}

	/**
	 * GETs the daily unique active thread counts.
	 * 
	 * @return the daily unique active thread counts.
	 */
	public static DailyUniqueActiveThreadCounts getDailyUniqueActiveThreadCounts() {
		String pageToken = FbBotMillContext.getInstance().getPageToken();
		BotMillNetworkResponse response = NetworkUtils
				.get(FbBotMillNetworkConstants.FACEBOOK_BASE_URL
						+ FbBotMillNetworkConstants.FACEBOOK_MESSAGING_INSIGHT_ACTIVE_THREADS_URL
						+ pageToken);
		return FbBotMillJsonUtils.fromJson(response.getResponse(),
				DailyUniqueActiveThreadCounts.class);
	}

	/**
	 * GETs the daily unique conversation counts.
	 * 
	 * @return the daily unique conversation counts.
	 */
	public static DailyUniqueConversationCounts getDailyUniqueConversationCounts() {
		String pageToken = FbBotMillContext.getInstance().getPageToken();
		BotMillNetworkResponse response = NetworkUtils
				.get(FbBotMillNetworkConstants.FACEBOOK_BASE_URL
						+ FbBotMillNetworkConstants.FACEBOOK_MESSAGING_INSIGHT_CONVERSATION_URL
						+ pageToken);
		return FbBotMillJsonUtils.fromJson(response.getResponse(),
				DailyUniqueConversationCounts.class);
	}

	/**
	 * POSTs a message as a JSON string to Facebook.
	 * 
	 * @param input
	 *            the JSON data to send.
	 */
	public static void postJsonMessage(StringEntity input) {
		String pageToken = FbBotMillContext.getInstance().getPageToken();
		// If the page token is invalid, returns.
		if (!validatePageToken(pageToken)) {
			return;
		}

		String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_MESSAGES_URL + pageToken;
		postInternal(url, input);
	}

	/**
	 * POSTs a message as a JSON string to Facebook.
	 * 
	 * @param input
	 *            the JSON data to send.
	 */
	public static void postJsonMessage(Object input) {
		StringEntity stringEntity = toStringEntity(input);
		postJsonMessage(stringEntity);
	}

	/**
	 * POSTs a thread setting as a JSON string to Facebook.
	 * 
	 * @param input
	 *            the JSON data to send.
	 */
	public static void postThreadSetting(StringEntity input) {
		String pageToken = FbBotMillContext.getInstance().getPageToken();
		// If the page token is invalid, returns.
		if (!validatePageToken(pageToken)) {
			return;
		}

		String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_THREAD_SETTINGS_URL
				+ pageToken;
		postInternal(url, input);
	}

	/**
	 * Post messenger profile.
	 *
	 * @param input
	 *            the input
	 */
	public static void postMessengerProfile(StringEntity input) {
		String pageToken = FbBotMillContext.getInstance().getPageToken();
		// If the page token is invalid, returns.
		if (!validatePageToken(pageToken)) {
			return;
		}

		String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_MESSENGER_PROFILE
				+ pageToken;
		postInternal(url, input);
	}

	/**
	 * POSTs a thread setting as a JSON string to Facebook.
	 * 
	 * @param input
	 *            the JSON data to send.
	 */
	public static void postThreadSetting(Object input) {
		StringEntity stringEntity = toStringEntity(input);
		postThreadSetting(stringEntity);
	}

	/**
	 * POSTs a messenger profile as a JSON string to Facebook.
	 * 
	 * @param input
	 *            the JSON data to send.
	 */
	public static void postMessengerProfile(Object input) {
		StringEntity stringEntity = toStringEntity(input);
		postMessengerProfile(stringEntity);
	}

	/**
	 * POSTs an attachment as a JSON string to Facebook.
	 * 
	 * @param input
	 *            the JSON data to send.
	 * @return the uploaded attachment ID.
	 */
	public static UploadAttachmentResponse postUploadAttachment(
			StringEntity input) {
		String pageToken = FbBotMillContext.getInstance().getPageToken();
		// If the page token is invalid, returns.
		if (!validatePageToken(pageToken)) {
			return null;
		}

		String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_UPLOAD_API_URL + pageToken;
		BotMillNetworkResponse response = postInternal(url, input);

		// Parses the response as a UploadAttachmentResponse and returns it.
		return FbBotMillJsonUtils.fromJson(response.getResponse(),
				UploadAttachmentResponse.class);
	}

	/**
	 * POSTs an attachment as a JSON string to Facebook.
	 * 
	 * @param input
	 *            the JSON data to send.
	 * @return the uploaded attachment ID.
	 */
	public static UploadAttachmentResponse postUploadAttachment(Object input) {
		StringEntity stringEntity = toStringEntity(input);
		return postUploadAttachment(stringEntity);
	}

	/**
	 * POSTs a messenger code as a JSON string to Facebook.
	 * 
	 * @param input
	 *            the JSON data to send.
	 * @return the requested messenger code.
	 */
	public static MessengerCode postMessengerCode(StringEntity input) {
		String pageToken = FbBotMillContext.getInstance().getPageToken();
		// If the page token is invalid, returns.
		if (!validatePageToken(pageToken)) {
			return null;
		}

		String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_MESSENGER_CODE_API_URL
				+ pageToken;
		BotMillNetworkResponse response = postInternal(url, input);

		// Parses the response as a MessengerCode and returns it.
		return FbBotMillJsonUtils.fromJson(response.getResponse(),
				MessengerCode.class);
	}

	/**
	 * POSTs a messenger code as a JSON string to Facebook.
	 * 
	 * @param input
	 *            the JSON data to send.
	 * @return the uploaded attachment ID.
	 */
	public static MessengerCode postMessengerCode(Object input) {
		StringEntity stringEntity = toStringEntity(input);
		return postMessengerCode(stringEntity);
	}

	/**
	 * Performs a POST and propagates it to the registered monitors.
	 * 
	 * @param url
	 *            the URL where to post.
	 * @param input
	 *            the object to send.
	 * @return the response.
	 */
	private static BotMillNetworkResponse postInternal(String url,
			StringEntity input) {
		BotMillNetworkResponse response = NetworkUtils.post(url, input);
		propagateResponse(response);
		return response;
	}

	/**
	 * Propagates the response to the registered {@link FbBotMillMonitor}.
	 *
	 * @param response
	 *            the response to propagate.
	 */
	private static void propagateResponse(BotMillNetworkResponse response) {

		String output = response.getResponse();
		if (response.isError()) {

			// Parses the error message and logs it.
			FacebookErrorMessage errorMessage = FbBotMillJsonUtils.fromJson(
					output, FacebookErrorMessage.class);
			FacebookError error = errorMessage.getError();
			logger.error(
					""Error message from Facebook. Message: [{}], Code: [{}], Type: [{}], FbTraceID: [{}]."",
					error.getMessage(), error.getCode(), error.getType(),
					error.getFbTraceId());

			// Sends the callback to the registered network monitors.
			for (FbBotMillMonitor monitor : registeredMonitors) {
				monitor.onError(errorMessage);
			}
		} else {
			FacebookConfirmationMessage confirmationMessage = FbBotMillJsonUtils
					.fromJson(output, FacebookConfirmationMessage.class);
			logger.debug(
					""Confirmation from Facebook. Recipient ID: [{}], Message ID: [{}], Result Message: [{}]"",
					confirmationMessage.getRecipientId(),
					confirmationMessage.getMessageId(),
					confirmationMessage.getResult());

			// Sends the callback to the registered network monitors.
			for (FbBotMillMonitor monitor : registeredMonitors) {
				monitor.onConfirmation(confirmationMessage);
			}
		}
	}

	/**
	 * DELETEs a JSON string as a Facebook's Thread Setting.
	 * 
	 * @param input
	 *            the JSON data to send.
	 */
	public static void deleteThreadSetting(StringEntity input) {
		String pageToken = FbBotMillContext.getInstance().getPageToken();
		// If the page token is invalid, returns.
		if (!validatePageToken(pageToken)) {
			return;
		}

		String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_THREAD_SETTINGS_URL
				+ pageToken;
		BotMillNetworkResponse response = NetworkUtils.delete(url, input);
		propagateResponse(response);
	}

	/**
	 * DELETEs a JSON string as a Facebook's Thread Setting.
	 * 
	 * @param input
	 *            the data to send.
	 */
	public static void deleteThreadSetting(Object input) {
		StringEntity stringEntity = toStringEntity(input);
		deleteThreadSetting(stringEntity);
	}

	/**
	 * DELETEs a JSON string as a Facebook's Messenger Profile.
	 * 
	 * @param input
	 *            the JSON data to send.
	 */
	public static void deleteMessengerProfile(StringEntity input) {
		String pageToken = FbBotMillContext.getInstance().getPageToken();
		// If the page token is invalid, returns.
		if (!validatePageToken(pageToken)) {
			return;
		}

		String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_MESSENGER_PROFILE
				+ pageToken;
		BotMillNetworkResponse response = NetworkUtils.delete(url, input);
		propagateResponse(response);
	}

	/**
	 * DELETEs a JSON string as a Facebook's Messenger Profile.
	 * 
	 * @param input
	 *            the data to send.
	 */
	public static void deleteMessengerProfile(Object input) {
		StringEntity stringEntity = toStringEntity(input);
		deleteMessengerProfile(stringEntity);
	}

	/**
	 * Validates a Facebook Page Token.
	 * 
	 * @param pageToken
	 *            the token to validate.
	 * @return true if the token is not null or empty, false otherwise.
	 */
	private static boolean validatePageToken(String pageToken) {
		if (pageToken == null || """".equals(pageToken)) {
			logger.error(""FbBotMill validation error: Page token can't be null or empty! Have you called the method FbBotMillContext.getInstance().setup(String, String)?"");
			return false;
		}
		return true;
	}

	/**
	 * Utility method that converts an object to its StringEntity
	 * representation.
	 * 
	 * @param object
	 *            the object to convert to a StringEntity.
	 * @return a {@link StringEntity} object containing the object JSON.
	 */
	private static StringEntity toStringEntity(Object object) {
		StringEntity input = null;
		try {
			String json = FbBotMillJsonUtils.toJson(object);
			input = new StringEntity(json, ""UTF-8"");
			input.setContentType(""application/json"");
			logger.debug(""Request: {}"", inputStreamToString(input.getContent()));
		} catch (Exception e) {
			logger.error(""Error during JSON message creation: "", e);
		}
		return input;
	}

	/**
	 * Utility method which converts an InputStream to a String.
	 *
	 * @param stream
	 *            the InputStream to convert.
	 * @return a String with the InputStream content.
	 * @throws IOException
	 *             Signals that an I/O exception has occurred.
	 */
	private static String inputStreamToString(InputStream stream)
			throws IOException {
		ByteArrayOutputStream result = new ByteArrayOutputStream();
		byte[] buffer = new byte[1024];
		int length;
		String resultString = null;
		while ((length = stream.read(buffer)) != -1) {
			result.write(buffer, 0, length);
		}
		resultString = result.toString(""UTF-8"");
		return resultString;
	}

	// TODO: used for attaching files but not working at the moment.
	/**
	 * POSTs a message as a JSON string to Facebook.
	 *
	 * @param recipient
	 *            the recipient
	 * @param type
	 *            the type
	 * @param file
	 *            the file
	 */
	public static void postFormDataMessage(String recipient,
			AttachmentType type, File file) {
		String pageToken = FbBotMillContext.getInstance().getPageToken();
		// If the page token is invalid, returns.
		if (!validatePageToken(pageToken)) {
			return;
		}

		// TODO: add checks for valid attachmentTypes (FILE, AUDIO or VIDEO)
		HttpPost post = new HttpPost(
				FbBotMillNetworkConstants.FACEBOOK_BASE_URL
						+ FbBotMillNetworkConstants.FACEBOOK_MESSAGES_URL
						+ pageToken);

		FileBody filedata = new FileBody(file);
		StringBody recipientPart = new StringBody(""{\""id\"":\"""" + recipient
				+ ""\""}"", ContentType.MULTIPART_FORM_DATA);
		StringBody messagePart = new StringBody(""{\""attachment\"":{\""type\"":\""""
				+ type.name().toLowerCase() + ""\"", \""payload\"":{}}}"",
				ContentType.MULTIPART_FORM_DATA);
		MultipartEntityBuilder builder = MultipartEntityBuilder.create();
		builder.setMode(HttpMultipartMode.STRICT);
		builder.addPart(""recipient"", recipientPart);
		builder.addPart(""message"", messagePart);
		// builder.addPart(""filedata"", filedata);
		builder.addBinaryBody(""filedata"", file);
		builder.setContentType(ContentType.MULTIPART_FORM_DATA);

		// builder.setBoundary(""----WebKitFormBoundary7MA4YWxkTrZu0gW"");
		HttpEntity entity = builder.build();
		post.setEntity(entity);

		// Logs the raw JSON for debug purposes.
		BufferedReader br;
		// post.addHeader(""Content-Type"", ""multipart/form-data"");
		try {
			// br = new BufferedReader(new InputStreamReader(
			// ())));

			Header[] allHeaders = post.getAllHeaders();
			for (Header h : allHeaders) {

				logger.debug(""Header {} ->  {}"", h.getName(), h.getValue());
			}
			// String output = br.readLine();

		} catch (Exception e) {
			e.printStackTrace();
		}

		// postInternal(post);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""FbBotMillNetworkController []"";
	}

}
","package co.aurasphere.botmill.fb.internal.util.network; public class FbBotMillNetworkController { private static final Logger logger = LoggerFactory
			.getLogger(FbBotMillNetworkController.class); private static final List<FbBotMillMonitor> registeredMonitors = FbBotMillContext
			.getInstance().getRegisteredMonitors(); public static FacebookUserProfile getUserProfile(String userId) { String pageToken = FbBotMillContext.getInstance().getPageToken(); BotMillNetworkResponse response = NetworkUtils
				.get(FbBotMillNetworkConstants.FACEBOOK_BASE_URL + userId
						+ FbBotMillNetworkConstants.USER_PROFILE_FIELDS
						+ pageToken); FacebookUserProfile user = FbBotMillJsonUtils.fromJson(
				response.getResponse(), FacebookUserProfile.class); return user; } public static DailyUniqueActiveThreadCounts getDailyUniqueActiveThreadCounts() { String pageToken = FbBotMillContext.getInstance().getPageToken(); BotMillNetworkResponse response = NetworkUtils
				.get(FbBotMillNetworkConstants.FACEBOOK_BASE_URL
						+ FbBotMillNetworkConstants.FACEBOOK_MESSAGING_INSIGHT_ACTIVE_THREADS_URL
						+ pageToken); return FbBotMillJsonUtils.fromJson(response.getResponse(),
				DailyUniqueActiveThreadCounts.class); } public static DailyUniqueConversationCounts getDailyUniqueConversationCounts() { String pageToken = FbBotMillContext.getInstance().getPageToken(); BotMillNetworkResponse response = NetworkUtils
				.get(FbBotMillNetworkConstants.FACEBOOK_BASE_URL
						+ FbBotMillNetworkConstants.FACEBOOK_MESSAGING_INSIGHT_CONVERSATION_URL
						+ pageToken); return FbBotMillJsonUtils.fromJson(response.getResponse(),
				DailyUniqueConversationCounts.class); } public static void postJsonMessage(StringEntity input) { String pageToken = FbBotMillContext.getInstance().getPageToken(); if (!validatePageToken(pageToken)) { return; } String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_MESSAGES_URL + pageToken; postInternal(url, input); } public static void postJsonMessage(Object input) { StringEntity stringEntity = toStringEntity(input); postJsonMessage(stringEntity); } public static void postThreadSetting(StringEntity input) { String pageToken = FbBotMillContext.getInstance().getPageToken(); if (!validatePageToken(pageToken)) { return; } String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_THREAD_SETTINGS_URL
				+ pageToken; postInternal(url, input); } public static void postMessengerProfile(StringEntity input) { String pageToken = FbBotMillContext.getInstance().getPageToken(); if (!validatePageToken(pageToken)) { return; } String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_MESSENGER_PROFILE
				+ pageToken; postInternal(url, input); } public static void postThreadSetting(Object input) { StringEntity stringEntity = toStringEntity(input); postThreadSetting(stringEntity); } public static void postMessengerProfile(Object input) { StringEntity stringEntity = toStringEntity(input); postMessengerProfile(stringEntity); } public static UploadAttachmentResponse postUploadAttachment(
			StringEntity input) { String pageToken = FbBotMillContext.getInstance().getPageToken(); if (!validatePageToken(pageToken)) { return null; } String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_UPLOAD_API_URL + pageToken; BotMillNetworkResponse response = postInternal(url, input); return FbBotMillJsonUtils.fromJson(response.getResponse(),
				UploadAttachmentResponse.class); } public static UploadAttachmentResponse postUploadAttachment(Object input) { StringEntity stringEntity = toStringEntity(input); return postUploadAttachment(stringEntity); } public static MessengerCode postMessengerCode(StringEntity input) { String pageToken = FbBotMillContext.getInstance().getPageToken(); if (!validatePageToken(pageToken)) { return null; } String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_MESSENGER_CODE_API_URL
				+ pageToken; BotMillNetworkResponse response = postInternal(url, input); return FbBotMillJsonUtils.fromJson(response.getResponse(),
				MessengerCode.class); } public static MessengerCode postMessengerCode(Object input) { StringEntity stringEntity = toStringEntity(input); return postMessengerCode(stringEntity); } private static BotMillNetworkResponse postInternal(String url,
			StringEntity input) { BotMillNetworkResponse response = NetworkUtils.post(url, input); propagateResponse(response); return response; } private static void propagateResponse(BotMillNetworkResponse response) { String output = response.getResponse(); if (response.isError()) { FacebookErrorMessage errorMessage = FbBotMillJsonUtils.fromJson(
					output, FacebookErrorMessage.class); FacebookError error = errorMessage.getError(); logger.error(
					""Error message from Facebook. Message: [{ } ], Code: [{ } ], Type: [{ } ], FbTraceID: [{ } ]."",
					error.getMessage(), error.getCode(), error.getType(),
					error.getFbTraceId()); for (FbBotMillMonitor monitor : registeredMonitors) { monitor.onError(errorMessage); } } else { FacebookConfirmationMessage confirmationMessage = FbBotMillJsonUtils
					.fromJson(output, FacebookConfirmationMessage.class); logger.debug(
					""Confirmation from Facebook. Recipient ID: [{ } ], Message ID: [{ } ], Result Message: [{ } ]"",
					confirmationMessage.getRecipientId(),
					confirmationMessage.getMessageId(),
					confirmationMessage.getResult()); for (FbBotMillMonitor monitor : registeredMonitors) { monitor.onConfirmation(confirmationMessage); } } } public static void deleteThreadSetting(StringEntity input) { String pageToken = FbBotMillContext.getInstance().getPageToken(); if (!validatePageToken(pageToken)) { return; } String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_THREAD_SETTINGS_URL
				+ pageToken; BotMillNetworkResponse response = NetworkUtils.delete(url, input); propagateResponse(response); } public static void deleteThreadSetting(Object input) { StringEntity stringEntity = toStringEntity(input); deleteThreadSetting(stringEntity); } public static void deleteMessengerProfile(StringEntity input) { String pageToken = FbBotMillContext.getInstance().getPageToken(); if (!validatePageToken(pageToken)) { return; } String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_MESSENGER_PROFILE
				+ pageToken; BotMillNetworkResponse response = NetworkUtils.delete(url, input); propagateResponse(response); } public static void deleteMessengerProfile(Object input) { StringEntity stringEntity = toStringEntity(input); deleteMessengerProfile(stringEntity); } private static boolean validatePageToken(String pageToken) { if (pageToken == null || """".equals(pageToken)) { return false; } return true; } private static StringEntity toStringEntity(Object object) { StringEntity input = null; try { String json = FbBotMillJsonUtils.toJson(object); input = new StringEntity(json, ""UTF-8""); input.setContentType(""application/json""); logger.debug(""Request: { } "", inputStreamToString(input.getContent())); } catch (Exception e) { } return input; } private static String inputStreamToString(InputStream stream)
			throws IOException { ByteArrayOutputStream result = new ByteArrayOutputStream(); byte[] buffer = new byte[1024]; int length; String resultString = null; while ((length = stream.read(buffer)) != -1) { result.write(buffer, 0, length); } resultString = result.toString(""UTF-8""); return resultString; } public static void postFormDataMessage(String recipient,
			AttachmentType type, File file) { String pageToken = FbBotMillContext.getInstance().getPageToken(); if (!validatePageToken(pageToken)) { return; } HttpPost post = new HttpPost(
				FbBotMillNetworkConstants.FACEBOOK_BASE_URL
						+ FbBotMillNetworkConstants.FACEBOOK_MESSAGES_URL
						+ pageToken); FileBody filedata = new FileBody(file); StringBody recipientPart = new StringBody(""{ \""id\"":\"""" + recipient
				+ ""\""} "", ContentType.MULTIPART_FORM_DATA); StringBody messagePart = new StringBody(""{ \""attachment\"":{ \""type\"":\""""
				+ type.name().toLowerCase() + ""\"", \""payload\"":{ } } } "",
				ContentType.MULTIPART_FORM_DATA); MultipartEntityBuilder builder = MultipartEntityBuilder.create(); builder.setMode(HttpMultipartMode.STRICT); builder.addPart(""recipient"", recipientPart); builder.addPart(""message"", messagePart); builder.addBinaryBody(""filedata"", file); builder.setContentType(ContentType.MULTIPART_FORM_DATA); HttpEntity entity = builder.build(); post.setEntity(entity); BufferedReader br; try { Header[] allHeaders = post.getAllHeaders(); for (Header h : allHeaders) { logger.debug(""Header { } ->  { } "", h.getName(), h.getValue()); } } catch (Exception e) { e.printStackTrace(); } } @Override
	public String toString() { return ""FbBotMillNetworkController []""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.internal.util.network; public class FbBotMillNetworkController { private static final Logger logger = LoggerFactory
			.getLogger(FbBotMillNetworkController.class); private static final List<FbBotMillMonitor> registeredMonitors = FbBotMillContext
			.getInstance().getRegisteredMonitors(); public static FacebookUserProfile getUserProfile(String userId) { String pageToken = FbBotMillContext.getInstance().getPageToken(); BotMillNetworkResponse response = NetworkUtils
				.get(FbBotMillNetworkConstants.FACEBOOK_BASE_URL + userId
						+ FbBotMillNetworkConstants.USER_PROFILE_FIELDS
						+ pageToken); FacebookUserProfile user = FbBotMillJsonUtils.fromJson(
				response.getResponse(), FacebookUserProfile.class); return user; } public static DailyUniqueActiveThreadCounts getDailyUniqueActiveThreadCounts() { String pageToken = FbBotMillContext.getInstance().getPageToken(); BotMillNetworkResponse response = NetworkUtils
				.get(FbBotMillNetworkConstants.FACEBOOK_BASE_URL
						+ FbBotMillNetworkConstants.FACEBOOK_MESSAGING_INSIGHT_ACTIVE_THREADS_URL
						+ pageToken); return FbBotMillJsonUtils.fromJson(response.getResponse(),
				DailyUniqueActiveThreadCounts.class); } public static DailyUniqueConversationCounts getDailyUniqueConversationCounts() { String pageToken = FbBotMillContext.getInstance().getPageToken(); BotMillNetworkResponse response = NetworkUtils
				.get(FbBotMillNetworkConstants.FACEBOOK_BASE_URL
						+ FbBotMillNetworkConstants.FACEBOOK_MESSAGING_INSIGHT_CONVERSATION_URL
						+ pageToken); return FbBotMillJsonUtils.fromJson(response.getResponse(),
				DailyUniqueConversationCounts.class); } public static void postJsonMessage(StringEntity input) { String pageToken = FbBotMillContext.getInstance().getPageToken(); if (!validatePageToken(pageToken)) { return; } String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_MESSAGES_URL + pageToken; postInternal(url, input); } public static void postJsonMessage(Object input) { StringEntity stringEntity = toStringEntity(input); postJsonMessage(stringEntity); } public static void postThreadSetting(StringEntity input) { String pageToken = FbBotMillContext.getInstance().getPageToken(); if (!validatePageToken(pageToken)) { return; } String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_THREAD_SETTINGS_URL
				+ pageToken; postInternal(url, input); } public static void postMessengerProfile(StringEntity input) { String pageToken = FbBotMillContext.getInstance().getPageToken(); if (!validatePageToken(pageToken)) { return; } String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_MESSENGER_PROFILE
				+ pageToken; postInternal(url, input); } public static void postThreadSetting(Object input) { StringEntity stringEntity = toStringEntity(input); postThreadSetting(stringEntity); } public static void postMessengerProfile(Object input) { StringEntity stringEntity = toStringEntity(input); postMessengerProfile(stringEntity); } public static UploadAttachmentResponse postUploadAttachment(
			StringEntity input) { String pageToken = FbBotMillContext.getInstance().getPageToken(); if (!validatePageToken(pageToken)) { return null; } String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_UPLOAD_API_URL + pageToken; BotMillNetworkResponse response = postInternal(url, input); return FbBotMillJsonUtils.fromJson(response.getResponse(),
				UploadAttachmentResponse.class); } public static UploadAttachmentResponse postUploadAttachment(Object input) { StringEntity stringEntity = toStringEntity(input); return postUploadAttachment(stringEntity); } public static MessengerCode postMessengerCode(StringEntity input) { String pageToken = FbBotMillContext.getInstance().getPageToken(); if (!validatePageToken(pageToken)) { return null; } String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_MESSENGER_CODE_API_URL
				+ pageToken; BotMillNetworkResponse response = postInternal(url, input); return FbBotMillJsonUtils.fromJson(response.getResponse(),
				MessengerCode.class); } public static MessengerCode postMessengerCode(Object input) { StringEntity stringEntity = toStringEntity(input); return postMessengerCode(stringEntity); } private static BotMillNetworkResponse postInternal(String url,
			StringEntity input) { BotMillNetworkResponse response = NetworkUtils.post(url, input); propagateResponse(response); return response; } private static void propagateResponse(BotMillNetworkResponse response) { String output = response.getResponse(); if (response.isError()) { FacebookErrorMessage errorMessage = FbBotMillJsonUtils.fromJson(
					output, FacebookErrorMessage.class); FacebookError error = errorMessage.getError(); logger.error(
					""Error message from Facebook. Message: [{ } ], Code: [{ } ], Type: [{ } ], FbTraceID: [{ } ]."",
					error.getMessage(), error.getCode(), error.getType(),
					error.getFbTraceId()); for (FbBotMillMonitor monitor : registeredMonitors) { monitor.onError(errorMessage); } } else { FacebookConfirmationMessage confirmationMessage = FbBotMillJsonUtils
					.fromJson(output, FacebookConfirmationMessage.class); logger.debug(
					""Confirmation from Facebook. Recipient ID: [{ } ], Message ID: [{ } ], Result Message: [{ } ]"",
					confirmationMessage.getRecipientId(),
					confirmationMessage.getMessageId(),
					confirmationMessage.getResult()); for (FbBotMillMonitor monitor : registeredMonitors) { monitor.onConfirmation(confirmationMessage); } } } public static void deleteThreadSetting(StringEntity input) { String pageToken = FbBotMillContext.getInstance().getPageToken(); if (!validatePageToken(pageToken)) { return; } String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_THREAD_SETTINGS_URL
				+ pageToken; BotMillNetworkResponse response = NetworkUtils.delete(url, input); propagateResponse(response); } public static void deleteThreadSetting(Object input) { StringEntity stringEntity = toStringEntity(input); deleteThreadSetting(stringEntity); } public static void deleteMessengerProfile(StringEntity input) { String pageToken = FbBotMillContext.getInstance().getPageToken(); if (!validatePageToken(pageToken)) { return; } String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_MESSENGER_PROFILE
				+ pageToken; BotMillNetworkResponse response = NetworkUtils.delete(url, input); propagateResponse(response); } public static void deleteMessengerProfile(Object input) { StringEntity stringEntity = toStringEntity(input); deleteMessengerProfile(stringEntity); } private static boolean validatePageToken(String pageToken) { if (pageToken == null || """".equals(pageToken)) { <FILL_ME> return false; } return true; } private static StringEntity toStringEntity(Object object) { StringEntity input = null; try { String json = FbBotMillJsonUtils.toJson(object); input = new StringEntity(json, ""UTF-8""); input.setContentType(""application/json""); logger.debug(""Request: { } "", inputStreamToString(input.getContent())); } catch (Exception e) { <FILL_ME> } return input; } private static String inputStreamToString(InputStream stream)
			throws IOException { ByteArrayOutputStream result = new ByteArrayOutputStream(); byte[] buffer = new byte[1024]; int length; String resultString = null; while ((length = stream.read(buffer)) != -1) { result.write(buffer, 0, length); } resultString = result.toString(""UTF-8""); return resultString; } public static void postFormDataMessage(String recipient,
			AttachmentType type, File file) { String pageToken = FbBotMillContext.getInstance().getPageToken(); if (!validatePageToken(pageToken)) { return; } HttpPost post = new HttpPost(
				FbBotMillNetworkConstants.FACEBOOK_BASE_URL
						+ FbBotMillNetworkConstants.FACEBOOK_MESSAGES_URL
						+ pageToken); FileBody filedata = new FileBody(file); StringBody recipientPart = new StringBody(""{ \""id\"":\"""" + recipient
				+ ""\""} "", ContentType.MULTIPART_FORM_DATA); StringBody messagePart = new StringBody(""{ \""attachment\"":{ \""type\"":\""""
				+ type.name().toLowerCase() + ""\"", \""payload\"":{ } } } "",
				ContentType.MULTIPART_FORM_DATA); MultipartEntityBuilder builder = MultipartEntityBuilder.create(); builder.setMode(HttpMultipartMode.STRICT); builder.addPart(""recipient"", recipientPart); builder.addPart(""message"", messagePart); builder.addBinaryBody(""filedata"", file); builder.setContentType(ContentType.MULTIPART_FORM_DATA); HttpEntity entity = builder.build(); post.setEntity(entity); BufferedReader br; try { Header[] allHeaders = post.getAllHeaders(); for (Header h : allHeaders) { logger.debug(""Header { } ->  { } "", h.getName(), h.getValue()); } } catch (Exception e) { e.printStackTrace(); } } @Override
	public String toString() { return ""FbBotMillNetworkController []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.internal.util.network; 
import java.io.BufferedReader; import java.io.ByteArrayOutputStream; import java.io.File; import java.io.IOException; import java.io.InputStream; import java.util.List; 
import org.apache.http.Header; import org.apache.http.HttpEntity; import org.apache.http.client.methods.HttpPost; import org.apache.http.entity.ContentType; import org.apache.http.entity.StringEntity; import org.apache.http.entity.mime.HttpMultipartMode; import org.apache.http.entity.mime.MultipartEntityBuilder; import org.apache.http.entity.mime.content.FileBody; import org.apache.http.entity.mime.content.StringBody; import org.slf4j.Logger; import org.slf4j.LoggerFactory; 
import co.aurasphere.botmill.core.internal.util.network.BotMillNetworkResponse; import co.aurasphere.botmill.core.internal.util.network.NetworkUtils; import co.aurasphere.botmill.fb.FbBotMillContext; import co.aurasphere.botmill.fb.internal.util.json.FbBotMillJsonUtils; import co.aurasphere.botmill.fb.model.api.messaginginsight.DailyUniqueActiveThreadCounts; import co.aurasphere.botmill.fb.model.api.messaginginsight.DailyUniqueConversationCounts; import co.aurasphere.botmill.fb.model.api.messengercode.MessengerCode; import co.aurasphere.botmill.fb.model.api.upload.UploadAttachmentResponse; import co.aurasphere.botmill.fb.model.api.userprofile.FacebookUserProfile; import co.aurasphere.botmill.fb.model.base.AttachmentType; import co.aurasphere.botmill.fb.model.incoming.FacebookConfirmationMessage; import co.aurasphere.botmill.fb.model.incoming.FacebookError; import co.aurasphere.botmill.fb.model.incoming.FacebookErrorMessage; import co.aurasphere.botmill.fb.support.FbBotMillMonitor;  /**
 * Class that contains methods that allows FbBotMill to communicate through the
 * network.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */ public class FbBotMillNetworkController {  /**
	 * The logger.
	 */ private static final Logger logger = LoggerFactory
			.getLogger(FbBotMillNetworkController.class);  /**
	 * The registered monitors to the {@link FbBotMillContext}.
	 */ private static final List<FbBotMillMonitor> registeredMonitors = FbBotMillContext
			.getInstance().getRegisteredMonitors();  /**
	 * Method used to retrieve a {@link FacebookUserProfile} from an ID using
	 * the GET method.
	 * 
	 * @param userId
	 *            the ID of the user to retrieve.
	 * @return the user profile info.
	 */ public static FacebookUserProfile getUserProfile(String userId) { String pageToken = FbBotMillContext.getInstance().getPageToken(); BotMillNetworkResponse response = NetworkUtils
				.get(FbBotMillNetworkConstants.FACEBOOK_BASE_URL + userId
						+ FbBotMillNetworkConstants.USER_PROFILE_FIELDS
						+ pageToken); FacebookUserProfile user = FbBotMillJsonUtils.fromJson(
				response.getResponse(), FacebookUserProfile.class); return user; }  /**
	 * GETs the daily unique active thread counts.
	 * 
	 * @return the daily unique active thread counts.
	 */ public static DailyUniqueActiveThreadCounts getDailyUniqueActiveThreadCounts() { String pageToken = FbBotMillContext.getInstance().getPageToken(); BotMillNetworkResponse response = NetworkUtils
				.get(FbBotMillNetworkConstants.FACEBOOK_BASE_URL
						+ FbBotMillNetworkConstants.FACEBOOK_MESSAGING_INSIGHT_ACTIVE_THREADS_URL
						+ pageToken); return FbBotMillJsonUtils.fromJson(response.getResponse(),
				DailyUniqueActiveThreadCounts.class); }  /**
	 * GETs the daily unique conversation counts.
	 * 
	 * @return the daily unique conversation counts.
	 */ public static DailyUniqueConversationCounts getDailyUniqueConversationCounts() { String pageToken = FbBotMillContext.getInstance().getPageToken(); BotMillNetworkResponse response = NetworkUtils
				.get(FbBotMillNetworkConstants.FACEBOOK_BASE_URL
						+ FbBotMillNetworkConstants.FACEBOOK_MESSAGING_INSIGHT_CONVERSATION_URL
						+ pageToken); return FbBotMillJsonUtils.fromJson(response.getResponse(),
				DailyUniqueConversationCounts.class); }  /**
	 * POSTs a message as a JSON string to Facebook.
	 * 
	 * @param input
	 *            the JSON data to send.
	 */ public static void postJsonMessage(StringEntity input) { String pageToken = FbBotMillContext.getInstance().getPageToken(); // If the page token is invalid, returns. if (!validatePageToken(pageToken)) { return; }  String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_MESSAGES_URL + pageToken; postInternal(url, input); }  /**
	 * POSTs a message as a JSON string to Facebook.
	 * 
	 * @param input
	 *            the JSON data to send.
	 */ public static void postJsonMessage(Object input) { StringEntity stringEntity = toStringEntity(input); postJsonMessage(stringEntity); }  /**
	 * POSTs a thread setting as a JSON string to Facebook.
	 * 
	 * @param input
	 *            the JSON data to send.
	 */ public static void postThreadSetting(StringEntity input) { String pageToken = FbBotMillContext.getInstance().getPageToken(); // If the page token is invalid, returns. if (!validatePageToken(pageToken)) { return; }  String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_THREAD_SETTINGS_URL
				+ pageToken; postInternal(url, input); }  /**
	 * Post messenger profile.
	 *
	 * @param input
	 *            the input
	 */ public static void postMessengerProfile(StringEntity input) { String pageToken = FbBotMillContext.getInstance().getPageToken(); // If the page token is invalid, returns. if (!validatePageToken(pageToken)) { return; }  String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_MESSENGER_PROFILE
				+ pageToken; postInternal(url, input); }  /**
	 * POSTs a thread setting as a JSON string to Facebook.
	 * 
	 * @param input
	 *            the JSON data to send.
	 */ public static void postThreadSetting(Object input) { StringEntity stringEntity = toStringEntity(input); postThreadSetting(stringEntity); }  /**
	 * POSTs a messenger profile as a JSON string to Facebook.
	 * 
	 * @param input
	 *            the JSON data to send.
	 */ public static void postMessengerProfile(Object input) { StringEntity stringEntity = toStringEntity(input); postMessengerProfile(stringEntity); }  /**
	 * POSTs an attachment as a JSON string to Facebook.
	 * 
	 * @param input
	 *            the JSON data to send.
	 * @return the uploaded attachment ID.
	 */ public static UploadAttachmentResponse postUploadAttachment(
			StringEntity input) { String pageToken = FbBotMillContext.getInstance().getPageToken(); // If the page token is invalid, returns. if (!validatePageToken(pageToken)) { return null; }  String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_UPLOAD_API_URL + pageToken; BotMillNetworkResponse response = postInternal(url, input);  // Parses the response as a UploadAttachmentResponse and returns it. return FbBotMillJsonUtils.fromJson(response.getResponse(),
				UploadAttachmentResponse.class); }  /**
	 * POSTs an attachment as a JSON string to Facebook.
	 * 
	 * @param input
	 *            the JSON data to send.
	 * @return the uploaded attachment ID.
	 */ public static UploadAttachmentResponse postUploadAttachment(Object input) { StringEntity stringEntity = toStringEntity(input); return postUploadAttachment(stringEntity); }  /**
	 * POSTs a messenger code as a JSON string to Facebook.
	 * 
	 * @param input
	 *            the JSON data to send.
	 * @return the requested messenger code.
	 */ public static MessengerCode postMessengerCode(StringEntity input) { String pageToken = FbBotMillContext.getInstance().getPageToken(); // If the page token is invalid, returns. if (!validatePageToken(pageToken)) { return null; }  String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_MESSENGER_CODE_API_URL
				+ pageToken; BotMillNetworkResponse response = postInternal(url, input);  // Parses the response as a MessengerCode and returns it. return FbBotMillJsonUtils.fromJson(response.getResponse(),
				MessengerCode.class); }  /**
	 * POSTs a messenger code as a JSON string to Facebook.
	 * 
	 * @param input
	 *            the JSON data to send.
	 * @return the uploaded attachment ID.
	 */ public static MessengerCode postMessengerCode(Object input) { StringEntity stringEntity = toStringEntity(input); return postMessengerCode(stringEntity); }  /**
	 * Performs a POST and propagates it to the registered monitors.
	 * 
	 * @param url
	 *            the URL where to post.
	 * @param input
	 *            the object to send.
	 * @return the response.
	 */ private static BotMillNetworkResponse postInternal(String url,
			StringEntity input) { BotMillNetworkResponse response = NetworkUtils.post(url, input); propagateResponse(response); return response; }  /**
	 * Propagates the response to the registered {@link FbBotMillMonitor}.
	 *
	 * @param response
	 *            the response to propagate.
	 */ private static void propagateResponse(BotMillNetworkResponse response) {  String output = response.getResponse(); if (response.isError()) {  // Parses the error message and logs it. FacebookErrorMessage errorMessage = FbBotMillJsonUtils.fromJson(
					output, FacebookErrorMessage.class); FacebookError error = errorMessage.getError(); logger.error(
					""Error message from Facebook. Message: [{ } ], Code: [{ } ], Type: [{ } ], FbTraceID: [{ } ]."",
					error.getMessage(), error.getCode(), error.getType(),
					error.getFbTraceId());  // Sends the callback to the registered network monitors. for (FbBotMillMonitor monitor : registeredMonitors) { monitor.onError(errorMessage); } } else { FacebookConfirmationMessage confirmationMessage = FbBotMillJsonUtils
					.fromJson(output, FacebookConfirmationMessage.class); logger.debug(
					""Confirmation from Facebook. Recipient ID: [{ } ], Message ID: [{ } ], Result Message: [{ } ]"",
					confirmationMessage.getRecipientId(),
					confirmationMessage.getMessageId(),
					confirmationMessage.getResult());  // Sends the callback to the registered network monitors. for (FbBotMillMonitor monitor : registeredMonitors) { monitor.onConfirmation(confirmationMessage); } } }  /**
	 * DELETEs a JSON string as a Facebook's Thread Setting.
	 * 
	 * @param input
	 *            the JSON data to send.
	 */ public static void deleteThreadSetting(StringEntity input) { String pageToken = FbBotMillContext.getInstance().getPageToken(); // If the page token is invalid, returns. if (!validatePageToken(pageToken)) { return; }  String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_THREAD_SETTINGS_URL
				+ pageToken; BotMillNetworkResponse response = NetworkUtils.delete(url, input); propagateResponse(response); }  /**
	 * DELETEs a JSON string as a Facebook's Thread Setting.
	 * 
	 * @param input
	 *            the data to send.
	 */ public static void deleteThreadSetting(Object input) { StringEntity stringEntity = toStringEntity(input); deleteThreadSetting(stringEntity); }  /**
	 * DELETEs a JSON string as a Facebook's Messenger Profile.
	 * 
	 * @param input
	 *            the JSON data to send.
	 */ public static void deleteMessengerProfile(StringEntity input) { String pageToken = FbBotMillContext.getInstance().getPageToken(); // If the page token is invalid, returns. if (!validatePageToken(pageToken)) { return; }  String url = FbBotMillNetworkConstants.FACEBOOK_BASE_URL
				+ FbBotMillNetworkConstants.FACEBOOK_MESSENGER_PROFILE
				+ pageToken; BotMillNetworkResponse response = NetworkUtils.delete(url, input); propagateResponse(response); }  /**
	 * DELETEs a JSON string as a Facebook's Messenger Profile.
	 * 
	 * @param input
	 *            the data to send.
	 */ public static void deleteMessengerProfile(Object input) { StringEntity stringEntity = toStringEntity(input); deleteMessengerProfile(stringEntity); }  /**
	 * Validates a Facebook Page Token.
	 * 
	 * @param pageToken
	 *            the token to validate.
	 * @return true if the token is not null or empty, false otherwise.
	 */ private static boolean validatePageToken(String pageToken) { if (pageToken == null || """".equals(pageToken)) { <FILL_ME> return false; } return true; }  /**
	 * Utility method that converts an object to its StringEntity
	 * representation.
	 * 
	 * @param object
	 *            the object to convert to a StringEntity.
	 * @return a {@link StringEntity} object containing the object JSON.
	 */ private static StringEntity toStringEntity(Object object) { StringEntity input = null; try { String json = FbBotMillJsonUtils.toJson(object); input = new StringEntity(json, ""UTF-8""); input.setContentType(""application/json""); logger.debug(""Request: { } "", inputStreamToString(input.getContent())); } catch (Exception e) { <FILL_ME> } return input; }  /**
	 * Utility method which converts an InputStream to a String.
	 *
	 * @param stream
	 *            the InputStream to convert.
	 * @return a String with the InputStream content.
	 * @throws IOException
	 *             Signals that an I/O exception has occurred.
	 */ private static String inputStreamToString(InputStream stream)
			throws IOException { ByteArrayOutputStream result = new ByteArrayOutputStream(); byte[] buffer = new byte[1024]; int length; String resultString = null; while ((length = stream.read(buffer)) != -1) { result.write(buffer, 0, length); } resultString = result.toString(""UTF-8""); return resultString; }  // TODO: used for attaching files but not working at the moment. /**
	 * POSTs a message as a JSON string to Facebook.
	 *
	 * @param recipient
	 *            the recipient
	 * @param type
	 *            the type
	 * @param file
	 *            the file
	 */ public static void postFormDataMessage(String recipient,
			AttachmentType type, File file) { String pageToken = FbBotMillContext.getInstance().getPageToken(); // If the page token is invalid, returns. if (!validatePageToken(pageToken)) { return; }  // TODO: add checks for valid attachmentTypes (FILE, AUDIO or VIDEO) HttpPost post = new HttpPost(
				FbBotMillNetworkConstants.FACEBOOK_BASE_URL
						+ FbBotMillNetworkConstants.FACEBOOK_MESSAGES_URL
						+ pageToken);  FileBody filedata = new FileBody(file); StringBody recipientPart = new StringBody(""{ \""id\"":\"""" + recipient
				+ ""\""} "", ContentType.MULTIPART_FORM_DATA); StringBody messagePart = new StringBody(""{ \""attachment\"":{ \""type\"":\""""
				+ type.name().toLowerCase() + ""\"", \""payload\"":{ } } } "",
				ContentType.MULTIPART_FORM_DATA); MultipartEntityBuilder builder = MultipartEntityBuilder.create(); builder.setMode(HttpMultipartMode.STRICT); builder.addPart(""recipient"", recipientPart); builder.addPart(""message"", messagePart); // builder.addPart(""filedata"", filedata); builder.addBinaryBody(""filedata"", file); builder.setContentType(ContentType.MULTIPART_FORM_DATA);  // builder.setBoundary(""----WebKitFormBoundary7MA4YWxkTrZu0gW""); HttpEntity entity = builder.build(); post.setEntity(entity);  // Logs the raw JSON for debug purposes. BufferedReader br; // post.addHeader(""Content-Type"", ""multipart/form-data""); try { // br = new BufferedReader(new InputStreamReader( // ())));  Header[] allHeaders = post.getAllHeaders(); for (Header h : allHeaders) {  logger.debug(""Header { } ->  { } "", h.getName(), h.getValue()); } // String output = br.readLine();  } catch (Exception e) { e.printStackTrace(); }  // postInternal(post); }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ @Override
	public String toString() { return ""FbBotMillNetworkController []""; }  }  "
src/main/java/co/aurasphere/botmill/fb/internal/util/validation/FbBotMillValidationConstants.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.internal.util.validation;


/**
 * Utility class that contains the constants used for FbBotMill internal
 * validations.
 * 
 * @author Donato Rimenti
 */
public class FbBotMillValidationConstants {

	/**
	 * Instantiates a new FbBotMillValidationConstants.
	 */
	// TODO: fix javadoc
	private FbBotMillValidationConstants() {
	}

	/** The Constant BUTTON_TITLE_MAX_LENGTH. */
	public static final int BUTTON_TITLE_MAX_LENGTH = 20;

	/** The Constant PAYLOAD_MAX_LENGTH. */
	public static final int PAYLOAD_MAX_LENGTH = 1000;

	/** The Constant QUICK_REPLY_MAX_ELEMENTS. */
	public static final int QUICK_REPLY_MAX_ELEMENTS = 11;

	/** The Constant MESSAGE_MAX_LENGTH. */
	public static final int MESSAGE_MAX_LENGTH = 640;

	/** The Constant BUTTONS_MAX_ELEMENTS. */
	public static final int BUTTONS_MAX_ELEMENTS = 3;

	/** The Constant GENERIC_TEMPLATE_MAX_ELEMENTS. */
	public static final int GENERIC_TEMPLATE_MAX_ELEMENTS = 10;

	/** The Constant GENERIC_TEMPLATE_TITLE_MAX_LENGHT. */
	public static final int GENERIC_TEMPLATE_TITLE_MAX_LENGHT = 80;

	/** The Constant GENERIC_TEMPLATE_SUBTITLE_MAX_LENGHT. */
	public static final int GENERIC_TEMPLATE_SUBTITLE_MAX_LENGHT = 80;

	/** The Constant GREETING_TEXT_MAX_LENGTH. */
	public static final int GREETING_TEXT_MAX_LENGTH = 160;

	/** The Constant PERSISTENT_BUTTONS_MAX_ELEMENTS. */
	public static final int PERSISTENT_BUTTONS_MAX_ELEMENTS = 5;

	/** The Constant PERSISTENT_BUTTON_TITLE_MAX_LENGTH. */
	public static final int PERSISTENT_BUTTON_TITLE_MAX_LENGTH = 30;

	/** The Constant LIST_TEMPLATE_MAX_BUTTONS. */
	public static final int LIST_TEMPLATE_MAX_BUTTONS = 1;

	/** The Constant LIST_TEMPLATE_MAX_ELEMENTS. */
	public static final int LIST_TEMPLATE_MAX_ELEMENTS = 4;

	/** The Constant LIST_TEMPLATE_MIN_ELEMENTS. */
	public static final int LIST_TEMPLATE_MIN_ELEMENTS = 2;

	/**
	 * Thread Settings max length of buttons lists.
	 */
	public static final int THREAD_SETTINGS_BUTTONS_MAX_ELEMENTS = 5;

	/**
	 * Thread Settings max length of greeting text message.
	 */
	public static final int THREAD_SETTINGS_GREETING_MESSAGE_MAX_LENGTH = 160;

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""FbBotMillValidationConstants []"";
	}

}
","package co.aurasphere.botmill.fb.internal.util.validation; public class FbBotMillValidationConstants { private FbBotMillValidationConstants() { } public static final int BUTTON_TITLE_MAX_LENGTH = 20; public static final int PAYLOAD_MAX_LENGTH = 1000; public static final int QUICK_REPLY_MAX_ELEMENTS = 11; public static final int MESSAGE_MAX_LENGTH = 640; public static final int BUTTONS_MAX_ELEMENTS = 3; public static final int GENERIC_TEMPLATE_MAX_ELEMENTS = 10; public static final int GENERIC_TEMPLATE_TITLE_MAX_LENGHT = 80; public static final int GENERIC_TEMPLATE_SUBTITLE_MAX_LENGHT = 80; public static final int GREETING_TEXT_MAX_LENGTH = 160; public static final int PERSISTENT_BUTTONS_MAX_ELEMENTS = 5; public static final int PERSISTENT_BUTTON_TITLE_MAX_LENGTH = 30; public static final int LIST_TEMPLATE_MAX_BUTTONS = 1; public static final int LIST_TEMPLATE_MAX_ELEMENTS = 4; public static final int LIST_TEMPLATE_MIN_ELEMENTS = 2; public static final int THREAD_SETTINGS_BUTTONS_MAX_ELEMENTS = 5; public static final int THREAD_SETTINGS_GREETING_MESSAGE_MAX_LENGTH = 160; @Override
	public String toString() { return ""FbBotMillValidationConstants []""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.internal.util.validation; public class FbBotMillValidationConstants { private FbBotMillValidationConstants() { } public static final int BUTTON_TITLE_MAX_LENGTH = 20; public static final int PAYLOAD_MAX_LENGTH = 1000; public static final int QUICK_REPLY_MAX_ELEMENTS = 11; public static final int MESSAGE_MAX_LENGTH = 640; public static final int BUTTONS_MAX_ELEMENTS = 3; public static final int GENERIC_TEMPLATE_MAX_ELEMENTS = 10; public static final int GENERIC_TEMPLATE_TITLE_MAX_LENGHT = 80; public static final int GENERIC_TEMPLATE_SUBTITLE_MAX_LENGHT = 80; public static final int GREETING_TEXT_MAX_LENGTH = 160; public static final int PERSISTENT_BUTTONS_MAX_ELEMENTS = 5; public static final int PERSISTENT_BUTTON_TITLE_MAX_LENGTH = 30; public static final int LIST_TEMPLATE_MAX_BUTTONS = 1; public static final int LIST_TEMPLATE_MAX_ELEMENTS = 4; public static final int LIST_TEMPLATE_MIN_ELEMENTS = 2; public static final int THREAD_SETTINGS_BUTTONS_MAX_ELEMENTS = 5; public static final int THREAD_SETTINGS_GREETING_MESSAGE_MAX_LENGTH = 160; @Override
	public String toString() { return ""FbBotMillValidationConstants []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.internal.util.validation; 
  public class FbBotMillValidationConstants { /**
 * Utility class that contains the constants used for FbBotMill internal
 * validations.
 * 
 * @author Donato Rimenti
 */  /**
	 * Instantiates a new FbBotMillValidationConstants.
	 */ private FbBotMillValidationConstants() { } // TODO: fix javadoc  public static final int BUTTON_TITLE_MAX_LENGTH = 20; /** The Constant BUTTON_TITLE_MAX_LENGTH. */  public static final int PAYLOAD_MAX_LENGTH = 1000; /** The Constant PAYLOAD_MAX_LENGTH. */  public static final int QUICK_REPLY_MAX_ELEMENTS = 11; /** The Constant QUICK_REPLY_MAX_ELEMENTS. */  public static final int MESSAGE_MAX_LENGTH = 640; /** The Constant MESSAGE_MAX_LENGTH. */  public static final int BUTTONS_MAX_ELEMENTS = 3; /** The Constant BUTTONS_MAX_ELEMENTS. */  public static final int GENERIC_TEMPLATE_MAX_ELEMENTS = 10; /** The Constant GENERIC_TEMPLATE_MAX_ELEMENTS. */  public static final int GENERIC_TEMPLATE_TITLE_MAX_LENGHT = 80; /** The Constant GENERIC_TEMPLATE_TITLE_MAX_LENGHT. */  public static final int GENERIC_TEMPLATE_SUBTITLE_MAX_LENGHT = 80; /** The Constant GENERIC_TEMPLATE_SUBTITLE_MAX_LENGHT. */  public static final int GREETING_TEXT_MAX_LENGTH = 160; /** The Constant GREETING_TEXT_MAX_LENGTH. */  public static final int PERSISTENT_BUTTONS_MAX_ELEMENTS = 5; /** The Constant PERSISTENT_BUTTONS_MAX_ELEMENTS. */  public static final int PERSISTENT_BUTTON_TITLE_MAX_LENGTH = 30; /** The Constant PERSISTENT_BUTTON_TITLE_MAX_LENGTH. */  public static final int LIST_TEMPLATE_MAX_BUTTONS = 1; /** The Constant LIST_TEMPLATE_MAX_BUTTONS. */  public static final int LIST_TEMPLATE_MAX_ELEMENTS = 4; /** The Constant LIST_TEMPLATE_MAX_ELEMENTS. */  public static final int LIST_TEMPLATE_MIN_ELEMENTS = 2; /** The Constant LIST_TEMPLATE_MIN_ELEMENTS. */  public static final int THREAD_SETTINGS_BUTTONS_MAX_ELEMENTS = 5; /**
	 * Thread Settings max length of buttons lists.
	 */  public static final int THREAD_SETTINGS_GREETING_MESSAGE_MAX_LENGTH = 160; /**
	 * Thread Settings max length of greeting text message.
	 */  @Override
	public String toString() { return ""FbBotMillValidationConstants []""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/api/messaginginsight/DailyUniqueActiveThreadCounts.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.messaginginsight;

import java.io.Serializable;
import java.util.List;

import co.aurasphere.botmill.fb.api.MessagingInsightApi;

/**
 * Model used by {@link MessagingInsightApi#getDailyUniqueActiveThreadCounts()}.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */
public class DailyUniqueActiveThreadCounts implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The data.
	 */
	private List<DailyUniqueActiveThreadCountsRecord> data;

	/**
	 * Gets the {@link #data}.
	 *
	 * @return the {@link #data}.
	 */
	public List<DailyUniqueActiveThreadCountsRecord> getData() {
		return data;
	}

	/**
	 * Sets the {@link #data}.
	 *
	 * @param data
	 *            the {@link #data} to set.
	 */
	public void setData(List<DailyUniqueActiveThreadCountsRecord> data) {
		this.data = data;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((data == null) ? 0 : data.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		DailyUniqueActiveThreadCounts other = (DailyUniqueActiveThreadCounts) obj;
		if (data == null) {
			if (other.data != null)
				return false;
		} else if (!data.equals(other.data))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""DailyUniqueActiveThreadCounts [data="" + data + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.api.messaginginsight; public class DailyUniqueActiveThreadCounts implements Serializable { private static final long serialVersionUID = 1L; private List<DailyUniqueActiveThreadCountsRecord> data; public List<DailyUniqueActiveThreadCountsRecord> getData() { return data; } public void setData(List<DailyUniqueActiveThreadCountsRecord> data) { this.data = data; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((data == null) ? 0 : data.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; DailyUniqueActiveThreadCounts other = (DailyUniqueActiveThreadCounts) obj; if (data == null) { if (other.data != null)
				return false; } else if (!data.equals(other.data))
			return false; return true; } @Override
	public String toString() { return ""DailyUniqueActiveThreadCounts [data="" + data + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.messaginginsight; public class DailyUniqueActiveThreadCounts implements Serializable { private static final long serialVersionUID = 1L; private List<DailyUniqueActiveThreadCountsRecord> data; public List<DailyUniqueActiveThreadCountsRecord> getData() { return data; } public void setData(List<DailyUniqueActiveThreadCountsRecord> data) { this.data = data; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((data == null) ? 0 : data.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; DailyUniqueActiveThreadCounts other = (DailyUniqueActiveThreadCounts) obj; if (data == null) { if (other.data != null)
				return false; } else if (!data.equals(other.data))
			return false; return true; } @Override
	public String toString() { return ""DailyUniqueActiveThreadCounts [data="" + data + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.messaginginsight; 
import java.io.Serializable; import java.util.List; 
import co.aurasphere.botmill.fb.api.MessagingInsightApi;  /**
 * Model used by {@link MessagingInsightApi#getDailyUniqueActiveThreadCounts()}.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */ public class DailyUniqueActiveThreadCounts implements Serializable {  /**
	 * The serial version UID.
	 */ private static final long serialVersionUID = 1L;  /**
	 * The data.
	 */ private List<DailyUniqueActiveThreadCountsRecord> data;  /**
	 * Gets the {@link #data}.
	 *
	 * @return the {@link #data}.
	 */ public List<DailyUniqueActiveThreadCountsRecord> getData() { return data; }  /**
	 * Sets the {@link #data}.
	 *
	 * @param data
	 *            the {@link #data} to set.
	 */ public void setData(List<DailyUniqueActiveThreadCountsRecord> data) { this.data = data; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */ @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((data == null) ? 0 : data.hashCode()); return result; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */ @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; DailyUniqueActiveThreadCounts other = (DailyUniqueActiveThreadCounts) obj; if (data == null) { if (other.data != null)
				return false; } else if (!data.equals(other.data))
			return false; return true; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ @Override
	public String toString() { return ""DailyUniqueActiveThreadCounts [data="" + data + ""]""; }  }  "
src/main/java/co/aurasphere/botmill/fb/model/api/messaginginsight/DailyUniqueActiveThreadCountsRecord.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.messaginginsight;

import java.util.List;

/**
 * Record used by {@link DailyUniqueActiveThreadCounts}.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */
public class DailyUniqueActiveThreadCountsRecord extends MessagingInsightBaseRecord {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;
	
	/**
	 * Number of active thread counts in the period.
	 */
	private List<DailyUniqueActiveThreadCountsValue> values;

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((description == null) ? 0 : description.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + ((period == null) ? 0 : period.hashCode());
		result = prime * result + ((title == null) ? 0 : title.hashCode());
		result = prime * result + ((values == null) ? 0 : values.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		DailyUniqueActiveThreadCountsRecord other = (DailyUniqueActiveThreadCountsRecord) obj;
		if (description == null) {
			if (other.description != null)
				return false;
		} else if (!description.equals(other.description))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (period == null) {
			if (other.period != null)
				return false;
		} else if (!period.equals(other.period))
			return false;
		if (title == null) {
			if (other.title != null)
				return false;
		} else if (!title.equals(other.title))
			return false;
		if (values == null) {
			if (other.values != null)
				return false;
		} else if (!values.equals(other.values))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""DailyUniqueActiveThreadCounts [name="" + name + "", period=""
				+ period + "", values="" + values + "", title="" + title
				+ "", description="" + description + "", id="" + id + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.api.messaginginsight; public class DailyUniqueActiveThreadCountsRecord extends MessagingInsightBaseRecord { private static final long serialVersionUID = 1L; private List<DailyUniqueActiveThreadCountsValue> values; @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((description == null) ? 0 : description.hashCode()); result = prime * result + ((id == null) ? 0 : id.hashCode()); result = prime * result + ((name == null) ? 0 : name.hashCode()); result = prime * result + ((period == null) ? 0 : period.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); result = prime * result + ((values == null) ? 0 : values.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; DailyUniqueActiveThreadCountsRecord other = (DailyUniqueActiveThreadCountsRecord) obj; if (description == null) { if (other.description != null)
				return false; } else if (!description.equals(other.description))
			return false; if (id == null) { if (other.id != null)
				return false; } else if (!id.equals(other.id))
			return false; if (name == null) { if (other.name != null)
				return false; } else if (!name.equals(other.name))
			return false; if (period == null) { if (other.period != null)
				return false; } else if (!period.equals(other.period))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; if (values == null) { if (other.values != null)
				return false; } else if (!values.equals(other.values))
			return false; return true; } @Override
	public String toString() { return ""DailyUniqueActiveThreadCounts [name="" + name + "", period=""
				+ period + "", values="" + values + "", title="" + title
				+ "", description="" + description + "", id="" + id + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.messaginginsight; public class DailyUniqueActiveThreadCountsRecord extends MessagingInsightBaseRecord { private static final long serialVersionUID = 1L; private List<DailyUniqueActiveThreadCountsValue> values; @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((description == null) ? 0 : description.hashCode()); result = prime * result + ((id == null) ? 0 : id.hashCode()); result = prime * result + ((name == null) ? 0 : name.hashCode()); result = prime * result + ((period == null) ? 0 : period.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); result = prime * result + ((values == null) ? 0 : values.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; DailyUniqueActiveThreadCountsRecord other = (DailyUniqueActiveThreadCountsRecord) obj; if (description == null) { if (other.description != null)
				return false; } else if (!description.equals(other.description))
			return false; if (id == null) { if (other.id != null)
				return false; } else if (!id.equals(other.id))
			return false; if (name == null) { if (other.name != null)
				return false; } else if (!name.equals(other.name))
			return false; if (period == null) { if (other.period != null)
				return false; } else if (!period.equals(other.period))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; if (values == null) { if (other.values != null)
				return false; } else if (!values.equals(other.values))
			return false; return true; } @Override
	public String toString() { return ""DailyUniqueActiveThreadCounts [name="" + name + "", period=""
				+ period + "", values="" + values + "", title="" + title
				+ "", description="" + description + "", id="" + id + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.messaginginsight; 
import java.util.List;  /**
 * Record used by {@link DailyUniqueActiveThreadCounts}.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */ public class DailyUniqueActiveThreadCountsRecord extends MessagingInsightBaseRecord {  /**
	 * The serial version UID.
	 */ private static final long serialVersionUID = 1L; 	 /**
	 * Number of active thread counts in the period.
	 */ private List<DailyUniqueActiveThreadCountsValue> values;  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */ @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((description == null) ? 0 : description.hashCode()); result = prime * result + ((id == null) ? 0 : id.hashCode()); result = prime * result + ((name == null) ? 0 : name.hashCode()); result = prime * result + ((period == null) ? 0 : period.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); result = prime * result + ((values == null) ? 0 : values.hashCode()); return result; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */ @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; DailyUniqueActiveThreadCountsRecord other = (DailyUniqueActiveThreadCountsRecord) obj; if (description == null) { if (other.description != null)
				return false; } else if (!description.equals(other.description))
			return false; if (id == null) { if (other.id != null)
				return false; } else if (!id.equals(other.id))
			return false; if (name == null) { if (other.name != null)
				return false; } else if (!name.equals(other.name))
			return false; if (period == null) { if (other.period != null)
				return false; } else if (!period.equals(other.period))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; if (values == null) { if (other.values != null)
				return false; } else if (!values.equals(other.values))
			return false; return true; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ @Override
	public String toString() { return ""DailyUniqueActiveThreadCounts [name="" + name + "", period=""
				+ period + "", values="" + values + "", title="" + title
				+ "", description="" + description + "", id="" + id + ""]""; }  }  "
src/main/java/co/aurasphere/botmill/fb/model/api/messaginginsight/DailyUniqueActiveThreadCountsValue.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.messaginginsight;

import java.io.Serializable;
import java.sql.Date;

import com.google.gson.annotations.SerializedName;

/**
 * Value of a record from {@link DailyUniqueActiveThreadCountsRecord}.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */
public class DailyUniqueActiveThreadCountsValue implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The value.
	 */
	private String value;

	/**
	 * The end time.
	 */
	@SerializedName(""end_time"")
	private Date endTime;

	/**
	 * Gets the {@link #value}.
	 *
	 * @return the {@link #value}.
	 */
	public String getValue() {
		return value;
	}

	/**
	 * Sets the {@link #value}.
	 *
	 * @param value
	 *            the {@link #value} to set.
	 */
	public void setValue(String value) {
		this.value = value;
	}

	/**
	 * Gets the {@link #endTime}.
	 *
	 * @return the {@link #endTime}.
	 */
	public Date getEndTime() {
		return endTime;
	}

	/**
	 * Sets the {@link #endTime}.
	 *
	 * @param endTime
	 *            the {@link #endTime} to set.
	 */
	public void setEndTime(Date endTime) {
		this.endTime = endTime;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((endTime == null) ? 0 : endTime.hashCode());
		result = prime * result + ((value == null) ? 0 : value.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		DailyUniqueActiveThreadCountsValue other = (DailyUniqueActiveThreadCountsValue) obj;
		if (endTime == null) {
			if (other.endTime != null)
				return false;
		} else if (!endTime.equals(other.endTime))
			return false;
		if (value == null) {
			if (other.value != null)
				return false;
		} else if (!value.equals(other.value))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""DailyUniqueActiveThreadCountsValue [value="" + value
				+ "", endTime="" + endTime + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.api.messaginginsight; public class DailyUniqueActiveThreadCountsValue implements Serializable { private static final long serialVersionUID = 1L; private String value; @SerializedName(""end_time"")
	private Date endTime; public String getValue() { return value; } public void setValue(String value) { this.value = value; } public Date getEndTime() { return endTime; } public void setEndTime(Date endTime) { this.endTime = endTime; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((endTime == null) ? 0 : endTime.hashCode()); result = prime * result + ((value == null) ? 0 : value.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; DailyUniqueActiveThreadCountsValue other = (DailyUniqueActiveThreadCountsValue) obj; if (endTime == null) { if (other.endTime != null)
				return false; } else if (!endTime.equals(other.endTime))
			return false; if (value == null) { if (other.value != null)
				return false; } else if (!value.equals(other.value))
			return false; return true; } @Override
	public String toString() { return ""DailyUniqueActiveThreadCountsValue [value="" + value
				+ "", endTime="" + endTime + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.messaginginsight; public class DailyUniqueActiveThreadCountsValue implements Serializable { private static final long serialVersionUID = 1L; private String value; @SerializedName(""end_time"")
	private Date endTime; public String getValue() { return value; } public void setValue(String value) { this.value = value; } public Date getEndTime() { return endTime; } public void setEndTime(Date endTime) { this.endTime = endTime; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((endTime == null) ? 0 : endTime.hashCode()); result = prime * result + ((value == null) ? 0 : value.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; DailyUniqueActiveThreadCountsValue other = (DailyUniqueActiveThreadCountsValue) obj; if (endTime == null) { if (other.endTime != null)
				return false; } else if (!endTime.equals(other.endTime))
			return false; if (value == null) { if (other.value != null)
				return false; } else if (!value.equals(other.value))
			return false; return true; } @Override
	public String toString() { return ""DailyUniqueActiveThreadCountsValue [value="" + value
				+ "", endTime="" + endTime + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.messaginginsight; 
import java.io.Serializable; import java.sql.Date; 
import com.google.gson.annotations.SerializedName;  /**
 * Value of a record from {@link DailyUniqueActiveThreadCountsRecord}.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */ public class DailyUniqueActiveThreadCountsValue implements Serializable {  /**
	 * The serial version UID.
	 */ private static final long serialVersionUID = 1L;  /**
	 * The value.
	 */ private String value;  /**
	 * The end time.
	 */ @SerializedName(""end_time"")
	private Date endTime;  /**
	 * Gets the {@link #value}.
	 *
	 * @return the {@link #value}.
	 */ public String getValue() { return value; }  /**
	 * Sets the {@link #value}.
	 *
	 * @param value
	 *            the {@link #value} to set.
	 */ public void setValue(String value) { this.value = value; }  /**
	 * Gets the {@link #endTime}.
	 *
	 * @return the {@link #endTime}.
	 */ public Date getEndTime() { return endTime; }  /**
	 * Sets the {@link #endTime}.
	 *
	 * @param endTime
	 *            the {@link #endTime} to set.
	 */ public void setEndTime(Date endTime) { this.endTime = endTime; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */ @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((endTime == null) ? 0 : endTime.hashCode()); result = prime * result + ((value == null) ? 0 : value.hashCode()); return result; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */ @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; DailyUniqueActiveThreadCountsValue other = (DailyUniqueActiveThreadCountsValue) obj; if (endTime == null) { if (other.endTime != null)
				return false; } else if (!endTime.equals(other.endTime))
			return false; if (value == null) { if (other.value != null)
				return false; } else if (!value.equals(other.value))
			return false; return true; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ @Override
	public String toString() { return ""DailyUniqueActiveThreadCountsValue [value="" + value
				+ "", endTime="" + endTime + ""]""; }  }  "
src/main/java/co/aurasphere/botmill/fb/model/api/messaginginsight/DailyUniqueConversationCounts.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.messaginginsight;

import java.io.Serializable;
import java.util.List;

import co.aurasphere.botmill.fb.api.MessagingInsightApi;

/**
 * Model used by {@link MessagingInsightApi#getDailyUniqueConversationCounts()}.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */
public class DailyUniqueConversationCounts implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The data.
	 */
	private List<DailyUniqueConversationCountsRecord> data;

	/**
	 * Gets the {@link #data}.
	 *
	 * @return the {@link #data}.
	 */
	public List<DailyUniqueConversationCountsRecord> getData() {
		return data;
	}

	/**
	 * Sets the {@link #data}.
	 *
	 * @param data
	 *            the {@link #data} to set.
	 */
	public void setData(List<DailyUniqueConversationCountsRecord> data) {
		this.data = data;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((data == null) ? 0 : data.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		DailyUniqueConversationCounts other = (DailyUniqueConversationCounts) obj;
		if (data == null) {
			if (other.data != null)
				return false;
		} else if (!data.equals(other.data))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""DailyUniqueConversationCounts [data="" + data + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.api.messaginginsight; public class DailyUniqueConversationCounts implements Serializable { private static final long serialVersionUID = 1L; private List<DailyUniqueConversationCountsRecord> data; public List<DailyUniqueConversationCountsRecord> getData() { return data; } public void setData(List<DailyUniqueConversationCountsRecord> data) { this.data = data; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((data == null) ? 0 : data.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; DailyUniqueConversationCounts other = (DailyUniqueConversationCounts) obj; if (data == null) { if (other.data != null)
				return false; } else if (!data.equals(other.data))
			return false; return true; } @Override
	public String toString() { return ""DailyUniqueConversationCounts [data="" + data + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.messaginginsight; public class DailyUniqueConversationCounts implements Serializable { private static final long serialVersionUID = 1L; private List<DailyUniqueConversationCountsRecord> data; public List<DailyUniqueConversationCountsRecord> getData() { return data; } public void setData(List<DailyUniqueConversationCountsRecord> data) { this.data = data; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((data == null) ? 0 : data.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; DailyUniqueConversationCounts other = (DailyUniqueConversationCounts) obj; if (data == null) { if (other.data != null)
				return false; } else if (!data.equals(other.data))
			return false; return true; } @Override
	public String toString() { return ""DailyUniqueConversationCounts [data="" + data + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.messaginginsight; 
import java.io.Serializable; import java.util.List; 
import co.aurasphere.botmill.fb.api.MessagingInsightApi;  /**
 * Model used by {@link MessagingInsightApi#getDailyUniqueConversationCounts()}.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */ public class DailyUniqueConversationCounts implements Serializable {  /**
	 * The serial version UID.
	 */ private static final long serialVersionUID = 1L;  /**
	 * The data.
	 */ private List<DailyUniqueConversationCountsRecord> data;  /**
	 * Gets the {@link #data}.
	 *
	 * @return the {@link #data}.
	 */ public List<DailyUniqueConversationCountsRecord> getData() { return data; }  /**
	 * Sets the {@link #data}.
	 *
	 * @param data
	 *            the {@link #data} to set.
	 */ public void setData(List<DailyUniqueConversationCountsRecord> data) { this.data = data; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */ @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((data == null) ? 0 : data.hashCode()); return result; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */ @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; DailyUniqueConversationCounts other = (DailyUniqueConversationCounts) obj; if (data == null) { if (other.data != null)
				return false; } else if (!data.equals(other.data))
			return false; return true; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ @Override
	public String toString() { return ""DailyUniqueConversationCounts [data="" + data + ""]""; }  }  "
src/main/java/co/aurasphere/botmill/fb/model/api/messaginginsight/DailyUniqueConversationCountsRecord.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.messaginginsight;

import java.util.List;

/**
 * Record used by {@link DailyUniqueConversationCounts}.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */
public class DailyUniqueConversationCountsRecord extends MessagingInsightBaseRecord {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;
	
	/**
	 * The values.
	 */
	private List<DailyUniqueConversationCountsValue> values;

	/**
	 * Gets the {@link #values}.
	 *
	 * @return the {@link #values}.
	 */
	public List<DailyUniqueConversationCountsValue> getValues() {
		return values;
	}

	/**
	 * Sets the {@link #values}.
	 *
	 * @param values the {@link #values} to set.
	 */
	public void setValues(List<DailyUniqueConversationCountsValue> values) {
		this.values = values;
	}

	/* (non-Javadoc)
	 * @see co.aurasphere.botmill.fb.model.api.messaginginsight.MessagingInsightBaseRecord#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((values == null) ? 0 : values.hashCode());
		return result;
	}

	/* (non-Javadoc)
	 * @see co.aurasphere.botmill.fb.model.api.messaginginsight.MessagingInsightBaseRecord#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		DailyUniqueConversationCountsRecord other = (DailyUniqueConversationCountsRecord) obj;
		if (values == null) {
			if (other.values != null)
				return false;
		} else if (!values.equals(other.values))
			return false;
		return true;
	}

	/* (non-Javadoc)
	 * @see co.aurasphere.botmill.fb.model.api.messaginginsight.MessagingInsightBaseRecord#toString()
	 */
	@Override
	public String toString() {
		return ""DailyUniqueConversationCountsRecord [values="" + values + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.api.messaginginsight; public class DailyUniqueConversationCountsRecord extends MessagingInsightBaseRecord { private static final long serialVersionUID = 1L; private List<DailyUniqueConversationCountsValue> values; public List<DailyUniqueConversationCountsValue> getValues() { return values; } public void setValues(List<DailyUniqueConversationCountsValue> values) { this.values = values; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((values == null) ? 0 : values.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; DailyUniqueConversationCountsRecord other = (DailyUniqueConversationCountsRecord) obj; if (values == null) { if (other.values != null)
				return false; } else if (!values.equals(other.values))
			return false; return true; } @Override
	public String toString() { return ""DailyUniqueConversationCountsRecord [values="" + values + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.messaginginsight; public class DailyUniqueConversationCountsRecord extends MessagingInsightBaseRecord { private static final long serialVersionUID = 1L; private List<DailyUniqueConversationCountsValue> values; public List<DailyUniqueConversationCountsValue> getValues() { return values; } public void setValues(List<DailyUniqueConversationCountsValue> values) { this.values = values; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((values == null) ? 0 : values.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; DailyUniqueConversationCountsRecord other = (DailyUniqueConversationCountsRecord) obj; if (values == null) { if (other.values != null)
				return false; } else if (!values.equals(other.values))
			return false; return true; } @Override
	public String toString() { return ""DailyUniqueConversationCountsRecord [values="" + values + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.messaginginsight; 
import java.util.List;  /**
 * Record used by {@link DailyUniqueConversationCounts}.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */ public class DailyUniqueConversationCountsRecord extends MessagingInsightBaseRecord {  /**
	 * The serial version UID.
	 */ private static final long serialVersionUID = 1L; 	 /**
	 * The values.
	 */ private List<DailyUniqueConversationCountsValue> values;  /**
	 * Gets the {@link #values}.
	 *
	 * @return the {@link #values}.
	 */ public List<DailyUniqueConversationCountsValue> getValues() { return values; }  /**
	 * Sets the {@link #values}.
	 *
	 * @param values the {@link #values} to set.
	 */ public void setValues(List<DailyUniqueConversationCountsValue> values) { this.values = values; }  /* (non-Javadoc)
	 * @see co.aurasphere.botmill.fb.model.api.messaginginsight.MessagingInsightBaseRecord#hashCode()
	 */ @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((values == null) ? 0 : values.hashCode()); return result; }  /* (non-Javadoc)
	 * @see co.aurasphere.botmill.fb.model.api.messaginginsight.MessagingInsightBaseRecord#equals(java.lang.Object)
	 */ @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; DailyUniqueConversationCountsRecord other = (DailyUniqueConversationCountsRecord) obj; if (values == null) { if (other.values != null)
				return false; } else if (!values.equals(other.values))
			return false; return true; }  /* (non-Javadoc)
	 * @see co.aurasphere.botmill.fb.model.api.messaginginsight.MessagingInsightBaseRecord#toString()
	 */ @Override
	public String toString() { return ""DailyUniqueConversationCountsRecord [values="" + values + ""]""; }  }  "
src/main/java/co/aurasphere/botmill/fb/model/api/messaginginsight/DailyUniqueConversationCountsValue.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.messaginginsight;

import java.io.Serializable;
import java.util.Date;

import com.google.gson.annotations.SerializedName;

/**
 * Value of a record from {@link DailyUniqueConversationCountsRecord}.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */
public class DailyUniqueConversationCountsValue implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The value.
	 */
	private DailyUniqueConversationCountsValueEnum value;

	/**
	 * The end time.
	 */
	@SerializedName(""end_time"")
	private Date endTime;

	/**
	 * Gets the {@link #value}.
	 *
	 * @return the {@link #value}.
	 */
	public DailyUniqueConversationCountsValueEnum getValue() {
		return value;
	}

	/**
	 * Sets the {@link #value}.
	 *
	 * @param value
	 *            the {@link #value} to set.
	 */
	public void setValue(DailyUniqueConversationCountsValueEnum value) {
		this.value = value;
	}

	/**
	 * Gets the {@link #endTime}.
	 *
	 * @return the {@link #endTime}.
	 */
	public Date getEndTime() {
		return endTime;
	}

	/**
	 * Sets the {@link #endTime}.
	 *
	 * @param endTime
	 *            the {@link #endTime} to set.
	 */
	public void setEndTime(Date endTime) {
		this.endTime = endTime;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((endTime == null) ? 0 : endTime.hashCode());
		result = prime * result + ((value == null) ? 0 : value.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		DailyUniqueConversationCountsValue other = (DailyUniqueConversationCountsValue) obj;
		if (endTime == null) {
			if (other.endTime != null)
				return false;
		} else if (!endTime.equals(other.endTime))
			return false;
		if (value == null) {
			if (other.value != null)
				return false;
		} else if (!value.equals(other.value))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""DailyUniqueConversationCountsValue [value="" + value
				+ "", endTime="" + endTime + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.api.messaginginsight; public class DailyUniqueConversationCountsValue implements Serializable { private static final long serialVersionUID = 1L; private DailyUniqueConversationCountsValueEnum value; @SerializedName(""end_time"")
	private Date endTime; public DailyUniqueConversationCountsValueEnum getValue() { return value; } public void setValue(DailyUniqueConversationCountsValueEnum value) { this.value = value; } public Date getEndTime() { return endTime; } public void setEndTime(Date endTime) { this.endTime = endTime; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((endTime == null) ? 0 : endTime.hashCode()); result = prime * result + ((value == null) ? 0 : value.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; DailyUniqueConversationCountsValue other = (DailyUniqueConversationCountsValue) obj; if (endTime == null) { if (other.endTime != null)
				return false; } else if (!endTime.equals(other.endTime))
			return false; if (value == null) { if (other.value != null)
				return false; } else if (!value.equals(other.value))
			return false; return true; } @Override
	public String toString() { return ""DailyUniqueConversationCountsValue [value="" + value
				+ "", endTime="" + endTime + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.messaginginsight; public class DailyUniqueConversationCountsValue implements Serializable { private static final long serialVersionUID = 1L; private DailyUniqueConversationCountsValueEnum value; @SerializedName(""end_time"")
	private Date endTime; public DailyUniqueConversationCountsValueEnum getValue() { return value; } public void setValue(DailyUniqueConversationCountsValueEnum value) { this.value = value; } public Date getEndTime() { return endTime; } public void setEndTime(Date endTime) { this.endTime = endTime; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((endTime == null) ? 0 : endTime.hashCode()); result = prime * result + ((value == null) ? 0 : value.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; DailyUniqueConversationCountsValue other = (DailyUniqueConversationCountsValue) obj; if (endTime == null) { if (other.endTime != null)
				return false; } else if (!endTime.equals(other.endTime))
			return false; if (value == null) { if (other.value != null)
				return false; } else if (!value.equals(other.value))
			return false; return true; } @Override
	public String toString() { return ""DailyUniqueConversationCountsValue [value="" + value
				+ "", endTime="" + endTime + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.messaginginsight; 
import java.io.Serializable; import java.util.Date; 
import com.google.gson.annotations.SerializedName;  /**
 * Value of a record from {@link DailyUniqueConversationCountsRecord}.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */ public class DailyUniqueConversationCountsValue implements Serializable {  /**
	 * The serial version UID.
	 */ private static final long serialVersionUID = 1L;  /**
	 * The value.
	 */ private DailyUniqueConversationCountsValueEnum value;  /**
	 * The end time.
	 */ @SerializedName(""end_time"")
	private Date endTime;  /**
	 * Gets the {@link #value}.
	 *
	 * @return the {@link #value}.
	 */ public DailyUniqueConversationCountsValueEnum getValue() { return value; }  /**
	 * Sets the {@link #value}.
	 *
	 * @param value
	 *            the {@link #value} to set.
	 */ public void setValue(DailyUniqueConversationCountsValueEnum value) { this.value = value; }  /**
	 * Gets the {@link #endTime}.
	 *
	 * @return the {@link #endTime}.
	 */ public Date getEndTime() { return endTime; }  /**
	 * Sets the {@link #endTime}.
	 *
	 * @param endTime
	 *            the {@link #endTime} to set.
	 */ public void setEndTime(Date endTime) { this.endTime = endTime; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */ @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((endTime == null) ? 0 : endTime.hashCode()); result = prime * result + ((value == null) ? 0 : value.hashCode()); return result; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */ @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; DailyUniqueConversationCountsValue other = (DailyUniqueConversationCountsValue) obj; if (endTime == null) { if (other.endTime != null)
				return false; } else if (!endTime.equals(other.endTime))
			return false; if (value == null) { if (other.value != null)
				return false; } else if (!value.equals(other.value))
			return false; return true; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ @Override
	public String toString() { return ""DailyUniqueConversationCountsValue [value="" + value
				+ "", endTime="" + endTime + ""]""; }  }  "
src/main/java/co/aurasphere/botmill/fb/model/api/messaginginsight/DailyUniqueConversationCountsValueEnum.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.messaginginsight;

import java.io.Serializable;

import com.google.gson.annotations.SerializedName;

/**
 * Value of a record from {@link DailyUniqueConversationCountsValueEnum}.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */
public class DailyUniqueConversationCountsValueEnum implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The turn on.
	 */
	@SerializedName(""TURN_ON"")
	private int turnOn;

	/**
	 * The turn off.
	 */
	@SerializedName(""TURN_OFF"")
	private int turnOff;

	/**
	 * The delete.
	 */
	@SerializedName(""DELETE"")
	private int delete;

	/**
	 * The other.
	 */
	@SerializedName(""OTHER"")
	private int other;

	/**
	 * The report spam.
	 */
	@SerializedName(""REPORT_SPAM"")
	private int reportSpam;

	/**
	 * Gets the {@link #turnOn}.
	 *
	 * @return the {@link #turnOn}.
	 */
	public int getTurnOn() {
		return turnOn;
	}

	/**
	 * Sets the {@link #turnOn}.
	 *
	 * @param turnOn
	 *            the {@link #turnOn} to set.
	 */
	public void setTurnOn(int turnOn) {
		this.turnOn = turnOn;
	}

	/**
	 * Gets the {@link #turnOff}.
	 *
	 * @return the {@link #turnOff}.
	 */
	public int getTurnOff() {
		return turnOff;
	}

	/**
	 * Sets the {@link #turnOff}.
	 *
	 * @param turnOff
	 *            the {@link #turnOff} to set.
	 */
	public void setTurnOff(int turnOff) {
		this.turnOff = turnOff;
	}

	/**
	 * Gets the {@link #delete}.
	 *
	 * @return the {@link #delete}.
	 */
	public int getDelete() {
		return delete;
	}

	/**
	 * Sets the {@link #delete}.
	 *
	 * @param delete
	 *            the {@link #delete} to set.
	 */
	public void setDelete(int delete) {
		this.delete = delete;
	}

	/**
	 * Gets the {@link #other}.
	 *
	 * @return the {@link #other}.
	 */
	public int getOther() {
		return other;
	}

	/**
	 * Sets the {@link #other}.
	 *
	 * @param other
	 *            the {@link #other} to set.
	 */
	public void setOther(int other) {
		this.other = other;
	}

	/**
	 * Gets the {@link #reportSpam}.
	 *
	 * @return the {@link #reportSpam}.
	 */
	public int getReportSpam() {
		return reportSpam;
	}

	/**
	 * Sets the {@link #reportSpam}.
	 *
	 * @param reportSpam
	 *            the {@link #reportSpam} to set.
	 */
	public void setReportSpam(int reportSpam) {
		this.reportSpam = reportSpam;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + delete;
		result = prime * result + other;
		result = prime * result + reportSpam;
		result = prime * result + turnOff;
		result = prime * result + turnOn;
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		DailyUniqueConversationCountsValueEnum other = (DailyUniqueConversationCountsValueEnum) obj;
		if (delete != other.delete)
			return false;
		if (this.other != other.other)
			return false;
		if (reportSpam != other.reportSpam)
			return false;
		if (turnOff != other.turnOff)
			return false;
		if (turnOn != other.turnOn)
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""DailyUniqueConversationCountsValueEnum [turnOn="" + turnOn
				+ "", turnOff="" + turnOff + "", delete="" + delete + "", other=""
				+ other + "", reportSpam="" + reportSpam + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.api.messaginginsight; public class DailyUniqueConversationCountsValueEnum implements Serializable { private static final long serialVersionUID = 1L; @SerializedName(""TURN_ON"")
	private int turnOn; @SerializedName(""TURN_OFF"")
	private int turnOff; @SerializedName(""DELETE"")
	private int delete; @SerializedName(""OTHER"")
	private int other; @SerializedName(""REPORT_SPAM"")
	private int reportSpam; public int getTurnOn() { return turnOn; } public void setTurnOn(int turnOn) { this.turnOn = turnOn; } public int getTurnOff() { return turnOff; } public void setTurnOff(int turnOff) { this.turnOff = turnOff; } public int getDelete() { return delete; } public void setDelete(int delete) { this.delete = delete; } public int getOther() { return other; } public void setOther(int other) { this.other = other; } public int getReportSpam() { return reportSpam; } public void setReportSpam(int reportSpam) { this.reportSpam = reportSpam; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + delete; result = prime * result + other; result = prime * result + reportSpam; result = prime * result + turnOff; result = prime * result + turnOn; return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; DailyUniqueConversationCountsValueEnum other = (DailyUniqueConversationCountsValueEnum) obj; if (delete != other.delete)
			return false; if (this.other != other.other)
			return false; if (reportSpam != other.reportSpam)
			return false; if (turnOff != other.turnOff)
			return false; if (turnOn != other.turnOn)
			return false; return true; } @Override
	public String toString() { return ""DailyUniqueConversationCountsValueEnum [turnOn="" + turnOn
				+ "", turnOff="" + turnOff + "", delete="" + delete + "", other=""
				+ other + "", reportSpam="" + reportSpam + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.messaginginsight; public class DailyUniqueConversationCountsValueEnum implements Serializable { private static final long serialVersionUID = 1L; @SerializedName(""TURN_ON"")
	private int turnOn; @SerializedName(""TURN_OFF"")
	private int turnOff; @SerializedName(""DELETE"")
	private int delete; @SerializedName(""OTHER"")
	private int other; @SerializedName(""REPORT_SPAM"")
	private int reportSpam; public int getTurnOn() { return turnOn; } public void setTurnOn(int turnOn) { this.turnOn = turnOn; } public int getTurnOff() { return turnOff; } public void setTurnOff(int turnOff) { this.turnOff = turnOff; } public int getDelete() { return delete; } public void setDelete(int delete) { this.delete = delete; } public int getOther() { return other; } public void setOther(int other) { this.other = other; } public int getReportSpam() { return reportSpam; } public void setReportSpam(int reportSpam) { this.reportSpam = reportSpam; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + delete; result = prime * result + other; result = prime * result + reportSpam; result = prime * result + turnOff; result = prime * result + turnOn; return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; DailyUniqueConversationCountsValueEnum other = (DailyUniqueConversationCountsValueEnum) obj; if (delete != other.delete)
			return false; if (this.other != other.other)
			return false; if (reportSpam != other.reportSpam)
			return false; if (turnOff != other.turnOff)
			return false; if (turnOn != other.turnOn)
			return false; return true; } @Override
	public String toString() { return ""DailyUniqueConversationCountsValueEnum [turnOn="" + turnOn
				+ "", turnOff="" + turnOff + "", delete="" + delete + "", other=""
				+ other + "", reportSpam="" + reportSpam + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.messaginginsight; 
import java.io.Serializable; 
import com.google.gson.annotations.SerializedName;  /**
 * Value of a record from {@link DailyUniqueConversationCountsValueEnum}.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */ public class DailyUniqueConversationCountsValueEnum implements Serializable {  /**
	 * The serial version UID.
	 */ private static final long serialVersionUID = 1L;  /**
	 * The turn on.
	 */ @SerializedName(""TURN_ON"")
	private int turnOn;  /**
	 * The turn off.
	 */ @SerializedName(""TURN_OFF"")
	private int turnOff;  /**
	 * The delete.
	 */ @SerializedName(""DELETE"")
	private int delete;  /**
	 * The other.
	 */ @SerializedName(""OTHER"")
	private int other;  /**
	 * The report spam.
	 */ @SerializedName(""REPORT_SPAM"")
	private int reportSpam;  /**
	 * Gets the {@link #turnOn}.
	 *
	 * @return the {@link #turnOn}.
	 */ public int getTurnOn() { return turnOn; }  /**
	 * Sets the {@link #turnOn}.
	 *
	 * @param turnOn
	 *            the {@link #turnOn} to set.
	 */ public void setTurnOn(int turnOn) { this.turnOn = turnOn; }  /**
	 * Gets the {@link #turnOff}.
	 *
	 * @return the {@link #turnOff}.
	 */ public int getTurnOff() { return turnOff; }  /**
	 * Sets the {@link #turnOff}.
	 *
	 * @param turnOff
	 *            the {@link #turnOff} to set.
	 */ public void setTurnOff(int turnOff) { this.turnOff = turnOff; }  /**
	 * Gets the {@link #delete}.
	 *
	 * @return the {@link #delete}.
	 */ public int getDelete() { return delete; }  /**
	 * Sets the {@link #delete}.
	 *
	 * @param delete
	 *            the {@link #delete} to set.
	 */ public void setDelete(int delete) { this.delete = delete; }  /**
	 * Gets the {@link #other}.
	 *
	 * @return the {@link #other}.
	 */ public int getOther() { return other; }  /**
	 * Sets the {@link #other}.
	 *
	 * @param other
	 *            the {@link #other} to set.
	 */ public void setOther(int other) { this.other = other; }  /**
	 * Gets the {@link #reportSpam}.
	 *
	 * @return the {@link #reportSpam}.
	 */ public int getReportSpam() { return reportSpam; }  /**
	 * Sets the {@link #reportSpam}.
	 *
	 * @param reportSpam
	 *            the {@link #reportSpam} to set.
	 */ public void setReportSpam(int reportSpam) { this.reportSpam = reportSpam; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */ @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + delete; result = prime * result + other; result = prime * result + reportSpam; result = prime * result + turnOff; result = prime * result + turnOn; return result; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */ @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; DailyUniqueConversationCountsValueEnum other = (DailyUniqueConversationCountsValueEnum) obj; if (delete != other.delete)
			return false; if (this.other != other.other)
			return false; if (reportSpam != other.reportSpam)
			return false; if (turnOff != other.turnOff)
			return false; if (turnOn != other.turnOn)
			return false; return true; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ @Override
	public String toString() { return ""DailyUniqueConversationCountsValueEnum [turnOn="" + turnOn
				+ "", turnOff="" + turnOff + "", delete="" + delete + "", other=""
				+ other + "", reportSpam="" + reportSpam + ""]""; }  }  "
src/main/java/co/aurasphere/botmill/fb/model/api/messaginginsight/MessagingInsightBaseRecord.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.messaginginsight;

import java.io.Serializable;

/**
 * Base class for a Messaging Insight API record.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */
public class MessagingInsightBaseRecord implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The name.
	 */
	protected String name;

	/**
	 * The period.
	 */
	protected String period;

	/**
	 * The title.
	 */
	protected String title;

	/**
	 * The description.
	 */
	protected String description;

	/**
	 * The id.
	 */
	protected String id;

	/**
	 * Gets the {@link #name}.
	 *
	 * @return the {@link #name}.
	 */
	public String getName() {
		return name;
	}

	/**
	 * Sets the {@link #name}.
	 *
	 * @param name
	 *            the {@link #name} to set.
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Gets the {@link #period}.
	 *
	 * @return the {@link #period}.
	 */
	public String getPeriod() {
		return period;
	}

	/**
	 * Sets the {@link #period}.
	 *
	 * @param period
	 *            the {@link #period} to set.
	 */
	public void setPeriod(String period) {
		this.period = period;
	}

	/**
	 * Gets the {@link #title}.
	 *
	 * @return the {@link #title}.
	 */
	public String getTitle() {
		return title;
	}

	/**
	 * Sets the {@link #title}.
	 *
	 * @param title
	 *            the {@link #title} to set.
	 */
	public void setTitle(String title) {
		this.title = title;
	}

	/**
	 * Gets the {@link #description}.
	 *
	 * @return the {@link #description}.
	 */
	public String getDescription() {
		return description;
	}

	/**
	 * Sets the {@link #description}.
	 *
	 * @param description
	 *            the {@link #description} to set.
	 */
	public void setDescription(String description) {
		this.description = description;
	}

	/**
	 * Gets the {@link #id}.
	 *
	 * @return the {@link #id}.
	 */
	public String getId() {
		return id;
	}

	/**
	 * Sets the {@link #id}.
	 *
	 * @param id
	 *            the {@link #id} to set.
	 */
	public void setId(String id) {
		this.id = id;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((description == null) ? 0 : description.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + ((period == null) ? 0 : period.hashCode());
		result = prime * result + ((title == null) ? 0 : title.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		MessagingInsightBaseRecord other = (MessagingInsightBaseRecord) obj;
		if (description == null) {
			if (other.description != null)
				return false;
		} else if (!description.equals(other.description))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (period == null) {
			if (other.period != null)
				return false;
		} else if (!period.equals(other.period))
			return false;
		if (title == null) {
			if (other.title != null)
				return false;
		} else if (!title.equals(other.title))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""MessagingInsightBaseRecord [name="" + name + "", period=""
				+ period + "", title="" + title + "", description="" + description
				+ "", id="" + id + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.api.messaginginsight; public class MessagingInsightBaseRecord implements Serializable { private static final long serialVersionUID = 1L; protected String name; protected String period; protected String title; protected String description; protected String id; public String getName() { return name; } public void setName(String name) { this.name = name; } public String getPeriod() { return period; } public void setPeriod(String period) { this.period = period; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } public String getId() { return id; } public void setId(String id) { this.id = id; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((description == null) ? 0 : description.hashCode()); result = prime * result + ((id == null) ? 0 : id.hashCode()); result = prime * result + ((name == null) ? 0 : name.hashCode()); result = prime * result + ((period == null) ? 0 : period.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; MessagingInsightBaseRecord other = (MessagingInsightBaseRecord) obj; if (description == null) { if (other.description != null)
				return false; } else if (!description.equals(other.description))
			return false; if (id == null) { if (other.id != null)
				return false; } else if (!id.equals(other.id))
			return false; if (name == null) { if (other.name != null)
				return false; } else if (!name.equals(other.name))
			return false; if (period == null) { if (other.period != null)
				return false; } else if (!period.equals(other.period))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; return true; } @Override
	public String toString() { return ""MessagingInsightBaseRecord [name="" + name + "", period=""
				+ period + "", title="" + title + "", description="" + description
				+ "", id="" + id + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.messaginginsight; public class MessagingInsightBaseRecord implements Serializable { private static final long serialVersionUID = 1L; protected String name; protected String period; protected String title; protected String description; protected String id; public String getName() { return name; } public void setName(String name) { this.name = name; } public String getPeriod() { return period; } public void setPeriod(String period) { this.period = period; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } public String getId() { return id; } public void setId(String id) { this.id = id; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((description == null) ? 0 : description.hashCode()); result = prime * result + ((id == null) ? 0 : id.hashCode()); result = prime * result + ((name == null) ? 0 : name.hashCode()); result = prime * result + ((period == null) ? 0 : period.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; MessagingInsightBaseRecord other = (MessagingInsightBaseRecord) obj; if (description == null) { if (other.description != null)
				return false; } else if (!description.equals(other.description))
			return false; if (id == null) { if (other.id != null)
				return false; } else if (!id.equals(other.id))
			return false; if (name == null) { if (other.name != null)
				return false; } else if (!name.equals(other.name))
			return false; if (period == null) { if (other.period != null)
				return false; } else if (!period.equals(other.period))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; return true; } @Override
	public String toString() { return ""MessagingInsightBaseRecord [name="" + name + "", period=""
				+ period + "", title="" + title + "", description="" + description
				+ "", id="" + id + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.messaginginsight; 
import java.io.Serializable;  /**
 * Base class for a Messaging Insight API record.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */ public class MessagingInsightBaseRecord implements Serializable {  /**
	 * The serial version UID.
	 */ private static final long serialVersionUID = 1L;  /**
	 * The name.
	 */ protected String name;  /**
	 * The period.
	 */ protected String period;  /**
	 * The title.
	 */ protected String title;  /**
	 * The description.
	 */ protected String description;  /**
	 * The id.
	 */ protected String id;  /**
	 * Gets the {@link #name}.
	 *
	 * @return the {@link #name}.
	 */ public String getName() { return name; }  /**
	 * Sets the {@link #name}.
	 *
	 * @param name
	 *            the {@link #name} to set.
	 */ public void setName(String name) { this.name = name; }  /**
	 * Gets the {@link #period}.
	 *
	 * @return the {@link #period}.
	 */ public String getPeriod() { return period; }  /**
	 * Sets the {@link #period}.
	 *
	 * @param period
	 *            the {@link #period} to set.
	 */ public void setPeriod(String period) { this.period = period; }  /**
	 * Gets the {@link #title}.
	 *
	 * @return the {@link #title}.
	 */ public String getTitle() { return title; }  /**
	 * Sets the {@link #title}.
	 *
	 * @param title
	 *            the {@link #title} to set.
	 */ public void setTitle(String title) { this.title = title; }  /**
	 * Gets the {@link #description}.
	 *
	 * @return the {@link #description}.
	 */ public String getDescription() { return description; }  /**
	 * Sets the {@link #description}.
	 *
	 * @param description
	 *            the {@link #description} to set.
	 */ public void setDescription(String description) { this.description = description; }  /**
	 * Gets the {@link #id}.
	 *
	 * @return the {@link #id}.
	 */ public String getId() { return id; }  /**
	 * Sets the {@link #id}.
	 *
	 * @param id
	 *            the {@link #id} to set.
	 */ public void setId(String id) { this.id = id; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */ @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((description == null) ? 0 : description.hashCode()); result = prime * result + ((id == null) ? 0 : id.hashCode()); result = prime * result + ((name == null) ? 0 : name.hashCode()); result = prime * result + ((period == null) ? 0 : period.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); return result; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */ @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; MessagingInsightBaseRecord other = (MessagingInsightBaseRecord) obj; if (description == null) { if (other.description != null)
				return false; } else if (!description.equals(other.description))
			return false; if (id == null) { if (other.id != null)
				return false; } else if (!id.equals(other.id))
			return false; if (name == null) { if (other.name != null)
				return false; } else if (!name.equals(other.name))
			return false; if (period == null) { if (other.period != null)
				return false; } else if (!period.equals(other.period))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; return true; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ @Override
	public String toString() { return ""MessagingInsightBaseRecord [name="" + name + "", period=""
				+ period + "", title="" + title + "", description="" + description
				+ "", id="" + id + ""]""; }  }  "
src/main/java/co/aurasphere/botmill/fb/model/api/messengercode/MessengerCode.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.messengercode;

import java.io.Serializable;

/**
 * Base class for a Messenger Code (Messenger's platform QR code).
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */
public class MessengerCode implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The URI that you can download your Messenger Code at. This is not a
	 * permanent URI; you should download and cache the image as soon as
	 * possible.
	 */
	private String uri;

	/**
	 * Gets the {@link #uri}.
	 *
	 * @return the {@link #uri}.
	 */
	public String getUri() {
		return uri;
	}

	/**
	 * Sets the {@link #uri}.
	 *
	 * @param uri
	 *            the {@link #uri} to set.
	 */
	public void setUri(String uri) {
		this.uri = uri;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((uri == null) ? 0 : uri.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		MessengerCode other = (MessengerCode) obj;
		if (uri == null) {
			if (other.uri != null)
				return false;
		} else if (!uri.equals(other.uri))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""MessengerCode [uri="" + uri + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.api.messengercode; public class MessengerCode implements Serializable { private static final long serialVersionUID = 1L; private String uri; public String getUri() { return uri; } public void setUri(String uri) { this.uri = uri; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((uri == null) ? 0 : uri.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; MessengerCode other = (MessengerCode) obj; if (uri == null) { if (other.uri != null)
				return false; } else if (!uri.equals(other.uri))
			return false; return true; } @Override
	public String toString() { return ""MessengerCode [uri="" + uri + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.messengercode; public class MessengerCode implements Serializable { private static final long serialVersionUID = 1L; private String uri; public String getUri() { return uri; } public void setUri(String uri) { this.uri = uri; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((uri == null) ? 0 : uri.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; MessengerCode other = (MessengerCode) obj; if (uri == null) { if (other.uri != null)
				return false; } else if (!uri.equals(other.uri))
			return false; return true; } @Override
	public String toString() { return ""MessengerCode [uri="" + uri + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.messengercode; 
import java.io.Serializable;  /**
 * Base class for a Messenger Code (Messenger's platform QR code).
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */ public class MessengerCode implements Serializable {  /**
	 * The serial version UID.
	 */ private static final long serialVersionUID = 1L;  /**
	 * The URI that you can download your Messenger Code at. This is not a
	 * permanent URI; you should download and cache the image as soon as
	 * possible.
	 */ private String uri;  /**
	 * Gets the {@link #uri}.
	 *
	 * @return the {@link #uri}.
	 */ public String getUri() { return uri; }  /**
	 * Sets the {@link #uri}.
	 *
	 * @param uri
	 *            the {@link #uri} to set.
	 */ public void setUri(String uri) { this.uri = uri; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */ @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((uri == null) ? 0 : uri.hashCode()); return result; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */ @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; MessengerCode other = (MessengerCode) obj; if (uri == null) { if (other.uri != null)
				return false; } else if (!uri.equals(other.uri))
			return false; return true; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ @Override
	public String toString() { return ""MessengerCode [uri="" + uri + ""]""; }  }  "
src/main/java/co/aurasphere/botmill/fb/model/api/messengercode/MessengerCodeRequest.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.messengercode;

import java.io.Serializable;

import javax.validation.constraints.NotNull;

import org.hibernate.validator.constraints.Range;

import co.aurasphere.botmill.fb.api.MessengerCodeApi;

import com.google.gson.annotations.SerializedName;

/**
 * Request class for {@link MessengerCodeApi#getMessengerCode}.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */
public class MessengerCodeRequest implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Must be ""standard"".
	 */
	@NotNull
	private MessengerCodeType type;

	/**
	 * The size, in pixels, for the image you are requesting. Supported range:
	 * 100-2000 px, defaults to 1000px.
	 */
	@Range(min = 100, max = 2000)
	@SerializedName(""image_size"")
	private int imageSize;

	/**
	 * Instantiates a new MessengerCodeRequest.
	 */
	public MessengerCodeRequest() {
		// Default imageSize.
		this.imageSize = 1000;
		this.type = MessengerCodeType.STANDARD;
	}

	/**
	 * Instantiates a new MessengerCodeRequest.
	 *
	 * @param imageSize
	 *            the {@link #imageSize}.
	 */
	public MessengerCodeRequest(int imageSize) {
		this();
		this.imageSize = imageSize;
	}

	/**
	 * Gets the {@link #type}.
	 *
	 * @return the {@link #type}.
	 */
	public MessengerCodeType getType() {
		return type;
	}

	/**
	 * Sets the {@link #type}.
	 *
	 * @param type
	 *            the {@link #type} to set.
	 */
	public void setType(MessengerCodeType type) {
		this.type = type;
	}

	/**
	 * Gets the {@link #imageSize}.
	 *
	 * @return the {@link #imageSize}.
	 */
	public int getImageSize() {
		return imageSize;
	}

	/**
	 * Sets the {@link #imageSize}.
	 *
	 * @param imageSize
	 *            the {@link #imageSize} to set.
	 */
	public void setImageSize(int imageSize) {
		this.imageSize = imageSize;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + imageSize;
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		MessengerCodeRequest other = (MessengerCodeRequest) obj;
		if (imageSize != other.imageSize)
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""MessengerCodeRequest [imageSize="" + imageSize + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.api.messengercode; public class MessengerCodeRequest implements Serializable { private static final long serialVersionUID = 1L; @NotNull
	private MessengerCodeType type; @Range(min = 100, max = 2000)
	@SerializedName(""image_size"")
	private int imageSize; public MessengerCodeRequest() { this.imageSize = 1000; this.type = MessengerCodeType.STANDARD; } public MessengerCodeRequest(int imageSize) { this(); this.imageSize = imageSize; } public MessengerCodeType getType() { return type; } public void setType(MessengerCodeType type) { this.type = type; } public int getImageSize() { return imageSize; } public void setImageSize(int imageSize) { this.imageSize = imageSize; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + imageSize; return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; MessengerCodeRequest other = (MessengerCodeRequest) obj; if (imageSize != other.imageSize)
			return false; return true; } @Override
	public String toString() { return ""MessengerCodeRequest [imageSize="" + imageSize + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.messengercode; public class MessengerCodeRequest implements Serializable { private static final long serialVersionUID = 1L; @NotNull
	private MessengerCodeType type; @Range(min = 100, max = 2000)
	@SerializedName(""image_size"")
	private int imageSize; public MessengerCodeRequest() { this.imageSize = 1000; this.type = MessengerCodeType.STANDARD; } public MessengerCodeRequest(int imageSize) { this(); this.imageSize = imageSize; } public MessengerCodeType getType() { return type; } public void setType(MessengerCodeType type) { this.type = type; } public int getImageSize() { return imageSize; } public void setImageSize(int imageSize) { this.imageSize = imageSize; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + imageSize; return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; MessengerCodeRequest other = (MessengerCodeRequest) obj; if (imageSize != other.imageSize)
			return false; return true; } @Override
	public String toString() { return ""MessengerCodeRequest [imageSize="" + imageSize + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.messengercode; 
import java.io.Serializable; 
import javax.validation.constraints.NotNull; 
import org.hibernate.validator.constraints.Range; 
import co.aurasphere.botmill.fb.api.MessengerCodeApi; 
import com.google.gson.annotations.SerializedName;  /**
 * Request class for {@link MessengerCodeApi#getMessengerCode}.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */ public class MessengerCodeRequest implements Serializable {  /**
	 * The serial version UID.
	 */ private static final long serialVersionUID = 1L;  /**
	 * Must be ""standard"".
	 */ @NotNull
	private MessengerCodeType type;  /**
	 * The size, in pixels, for the image you are requesting. Supported range:
	 * 100-2000 px, defaults to 1000px.
	 */ @Range(min = 100, max = 2000)
	@SerializedName(""image_size"")
	private int imageSize;  /**
	 * Instantiates a new MessengerCodeRequest.
	 */ public MessengerCodeRequest() { // Default imageSize. this.imageSize = 1000; this.type = MessengerCodeType.STANDARD; }  /**
	 * Instantiates a new MessengerCodeRequest.
	 *
	 * @param imageSize
	 *            the {@link #imageSize}.
	 */ public MessengerCodeRequest(int imageSize) { this(); this.imageSize = imageSize; }  /**
	 * Gets the {@link #type}.
	 *
	 * @return the {@link #type}.
	 */ public MessengerCodeType getType() { return type; }  /**
	 * Sets the {@link #type}.
	 *
	 * @param type
	 *            the {@link #type} to set.
	 */ public void setType(MessengerCodeType type) { this.type = type; }  /**
	 * Gets the {@link #imageSize}.
	 *
	 * @return the {@link #imageSize}.
	 */ public int getImageSize() { return imageSize; }  /**
	 * Sets the {@link #imageSize}.
	 *
	 * @param imageSize
	 *            the {@link #imageSize} to set.
	 */ public void setImageSize(int imageSize) { this.imageSize = imageSize; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */ @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + imageSize; return result; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */ @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; MessengerCodeRequest other = (MessengerCodeRequest) obj; if (imageSize != other.imageSize)
			return false; return true; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ @Override
	public String toString() { return ""MessengerCodeRequest [imageSize="" + imageSize + ""]""; }  }  "
src/main/java/co/aurasphere/botmill/fb/model/api/messengercode/MessengerCodeType.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.messengercode;

import com.google.gson.annotations.SerializedName;

/**
 * Type for a {@link MessengerCode}.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */
public enum MessengerCodeType {

	/**
	 * The standard.
	 */
	@SerializedName(""standard"")
	STANDARD;

}
","package co.aurasphere.botmill.fb.model.api.messengercode; public enum MessengerCodeType { @SerializedName(""standard"")
	STANDARD; }",0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.messengercode; public enum MessengerCodeType { @SerializedName(""standard"")
	STANDARD; } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.messengercode; 
import com.google.gson.annotations.SerializedName;  /**
 * Type for a {@link MessengerCode}.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */ public enum MessengerCodeType {  /**
	 * The standard.
	 */ @SerializedName(""standard"")
	STANDARD;  }  "
src/main/java/co/aurasphere/botmill/fb/model/api/messengerprofile/DeleteMessengerProfileRequest.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.messengerprofile;

import java.io.Serializable;
import java.util.Arrays;
import java.util.List;

import org.hibernate.validator.constraints.NotEmpty;


/**
 * Request used to delete a Messenger Profile setting.
 * 
 * @author Donato Rimenti
 */
public class DeleteMessengerProfileRequest implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The fields to delete.
	 */
	@NotEmpty
	private List<String> fields;

	/**
	 * Instantiates a new DeleteMessengerProfileRequest.
	 */
	public DeleteMessengerProfileRequest() {
	}

	/**
	 * Instantiates a new DeleteMessengerProfileRequest.
	 *
	 * @param fields
	 *            the {@link #fields}.
	 */
	public DeleteMessengerProfileRequest(String... fields) {
		this.fields = Arrays.asList(fields);
	}

	/**
	 * Gets the {@link #fields}.
	 *
	 * @return the {@link #fields}.
	 */
	public List<String> getFields() {
		return fields;
	}

	/**
	 * Sets the {@link #fields}.
	 *
	 * @param fields
	 *            the {@link #fields} to set.
	 */
	public void setFields(List<String> fields) {
		this.fields = fields;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((fields == null) ? 0 : fields.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		DeleteMessengerProfileRequest other = (DeleteMessengerProfileRequest) obj;
		if (fields == null) {
			if (other.fields != null)
				return false;
		} else if (!fields.equals(other.fields))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""DeleteMessengerProfileRequest [fields="" + fields + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.api.messengerprofile; public class DeleteMessengerProfileRequest implements Serializable { private static final long serialVersionUID = 1L; @NotEmpty
	private List<String> fields; public DeleteMessengerProfileRequest() { } public DeleteMessengerProfileRequest(String... fields) { this.fields = Arrays.asList(fields); } public List<String> getFields() { return fields; } public void setFields(List<String> fields) { this.fields = fields; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((fields == null) ? 0 : fields.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; DeleteMessengerProfileRequest other = (DeleteMessengerProfileRequest) obj; if (fields == null) { if (other.fields != null)
				return false; } else if (!fields.equals(other.fields))
			return false; return true; } @Override
	public String toString() { return ""DeleteMessengerProfileRequest [fields="" + fields + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.messengerprofile; public class DeleteMessengerProfileRequest implements Serializable { private static final long serialVersionUID = 1L; @NotEmpty
	private List<String> fields; public DeleteMessengerProfileRequest() { } public DeleteMessengerProfileRequest(String... fields) { this.fields = Arrays.asList(fields); } public List<String> getFields() { return fields; } public void setFields(List<String> fields) { this.fields = fields; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((fields == null) ? 0 : fields.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; DeleteMessengerProfileRequest other = (DeleteMessengerProfileRequest) obj; if (fields == null) { if (other.fields != null)
				return false; } else if (!fields.equals(other.fields))
			return false; return true; } @Override
	public String toString() { return ""DeleteMessengerProfileRequest [fields="" + fields + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.messengerprofile; 
import java.io.Serializable; import java.util.Arrays; import java.util.List; 
import org.hibernate.validator.constraints.NotEmpty; 
  public class DeleteMessengerProfileRequest implements Serializable { /**
 * Request used to delete a Messenger Profile setting.
 * 
 * @author Donato Rimenti
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @NotEmpty
	private List<String> fields; /**
	 * The fields to delete.
	 */  public DeleteMessengerProfileRequest() { } /**
	 * Instantiates a new DeleteMessengerProfileRequest.
	 */  public DeleteMessengerProfileRequest(String... fields) { this.fields = Arrays.asList(fields); } /**
	 * Instantiates a new DeleteMessengerProfileRequest.
	 *
	 * @param fields
	 *            the {@link #fields}.
	 */  public List<String> getFields() { return fields; } /**
	 * Gets the {@link #fields}.
	 *
	 * @return the {@link #fields}.
	 */  public void setFields(List<String> fields) { this.fields = fields; } /**
	 * Sets the {@link #fields}.
	 *
	 * @param fields
	 *            the {@link #fields} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((fields == null) ? 0 : fields.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; DeleteMessengerProfileRequest other = (DeleteMessengerProfileRequest) obj; if (fields == null) { if (other.fields != null)
				return false; } else if (!fields.equals(other.fields))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""DeleteMessengerProfileRequest [fields="" + fields + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/api/messengerprofile/GetStarted.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.messengerprofile;

import java.io.Serializable;

import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotBlank;

import co.aurasphere.botmill.fb.internal.util.validation.FbBotMillValidationConstants;


/**
 * Object used by the {@link SetGetStartedButtonRequest} which contains the payload to be
 * sent back when the Get Started Button is pressed.
 * 
 * @author Donato Rimenti
 */
public class GetStarted implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The payload sent back when this button is sent.
	 */
	@NotBlank
	@Size(max = FbBotMillValidationConstants.PAYLOAD_MAX_LENGTH)
	private String payload;

	/**
	 * Instantiates a new GetStarted.
	 */
	public GetStarted() {

	}

	/**
	 * Instantiates a new GetStarted.
	 *
	 * @param payload
	 *            the {@link #payload}.
	 */
	public GetStarted(String payload) {
		this.payload = payload;
	}

	/**
	 * Gets the {@link #payload}.
	 *
	 * @return the {@link #payload}.
	 */
	public String getPayload() {
		return payload;
	}

	/**
	 * Sets the {@link #payload}.
	 *
	 * @param payload
	 *            the {@link #payload} to set.
	 */
	public void setPayload(String payload) {
		this.payload = payload;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((payload == null) ? 0 : payload.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		GetStarted other = (GetStarted) obj;
		if (payload == null) {
			if (other.payload != null)
				return false;
		} else if (!payload.equals(other.payload))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""GetStarted [payload="" + payload + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.api.messengerprofile; public class GetStarted implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	@Size(max = FbBotMillValidationConstants.PAYLOAD_MAX_LENGTH)
	private String payload; public GetStarted() { } public GetStarted(String payload) { this.payload = payload; } public String getPayload() { return payload; } public void setPayload(String payload) { this.payload = payload; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((payload == null) ? 0 : payload.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; GetStarted other = (GetStarted) obj; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; return true; } @Override
	public String toString() { return ""GetStarted [payload="" + payload + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.messengerprofile; public class GetStarted implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	@Size(max = FbBotMillValidationConstants.PAYLOAD_MAX_LENGTH)
	private String payload; public GetStarted() { } public GetStarted(String payload) { this.payload = payload; } public String getPayload() { return payload; } public void setPayload(String payload) { this.payload = payload; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((payload == null) ? 0 : payload.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; GetStarted other = (GetStarted) obj; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; return true; } @Override
	public String toString() { return ""GetStarted [payload="" + payload + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.messengerprofile; 
import java.io.Serializable; 
import javax.validation.constraints.Size; 
import org.hibernate.validator.constraints.NotBlank; 
import co.aurasphere.botmill.fb.internal.util.validation.FbBotMillValidationConstants; 
  public class GetStarted implements Serializable { /**
 * Object used by the {@link SetGetStartedButtonRequest} which contains the payload to be
 * sent back when the Get Started Button is pressed.
 * 
 * @author Donato Rimenti
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @NotBlank
	@Size(max = FbBotMillValidationConstants.PAYLOAD_MAX_LENGTH)
	private String payload; /**
	 * The payload sent back when this button is sent.
	 */  public GetStarted() { /**
	 * Instantiates a new GetStarted.
	 */ }   public GetStarted(String payload) { this.payload = payload; } /**
	 * Instantiates a new GetStarted.
	 *
	 * @param payload
	 *            the {@link #payload}.
	 */  public String getPayload() { return payload; } /**
	 * Gets the {@link #payload}.
	 *
	 * @return the {@link #payload}.
	 */  public void setPayload(String payload) { this.payload = payload; } /**
	 * Sets the {@link #payload}.
	 *
	 * @param payload
	 *            the {@link #payload} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((payload == null) ? 0 : payload.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; GetStarted other = (GetStarted) obj; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""GetStarted [payload="" + payload + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/api/messengerprofile/Greeting.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.messengerprofile;

import java.io.Serializable;
import java.util.Locale;

import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotBlank;

import co.aurasphere.botmill.fb.internal.util.validation.FbBotMillValidationConstants;


/**
 * Greeting object used by the {@link SetGreetingTextRequest}.
 * 
 * @author Donato Rimenti
 */
public class Greeting implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;
	
	/**
	 * Placeholder for the user first name. This placeholder will be dinamically
	 * changed with the current user first name.
	 */
	public static final String USER_FIRST_NAME = ""{{user_first_name}}"";

	/**
	 * Placeholder for the user last name. This placeholder will be dinamically
	 * changed with the current user last name.
	 */
	public static final String USER_LAST_NAME = ""{{user_last_name}}"";

	/**
	 * Placeholder for the user full name. This placeholder will be dinamically
	 * changed with the current user full name.
	 */
	public static final String USER_FULL_NAME = ""{{user_full_name}}"";

	/**
	 * Locale of the greeting text. We will show this greeting text when user
	 * locale matches the provided locale. You must at least specify greeting
	 * text for the default locale. This is the text we will fall back to if we
	 * don't find another matching the user's locale. See the list of supported
	 * locales.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile/supported-locales""
	 *      >List of Facebook's supported locales</a>
	 */
	@NotBlank
	private String locale;

	/**
	 * The greeting text for the specific locale. It must be UTF-8 and has a 160
	 * character limit.
	 */
	@NotBlank
	@Size(max = FbBotMillValidationConstants.GREETING_TEXT_MAX_LENGTH)
	private String text;

	/**
	 * Instantiates a new Greeting.
	 */
	public Greeting() {
		this.locale = ""default"";
	}

	/**
	 * Instantiates a new Greeting.
	 *
	 * @param text
	 *            the {@link #text}.
	 */
	public Greeting(String text) {
		this();
		this.text = text;
	}

	/**
	 * Instantiates a new Greeting.
	 *
	 * @param text
	 *            the {@link #text}.
	 * @param locale
	 *            the {@link #locale}.
	 */
	public Greeting(String text, String locale) {
		this.locale = locale;
		this.text = text;
	}

	/**
	 * Instantiates a new Greeting.
	 *
	 * @param text
	 *            the {@link #text}.
	 * @param locale
	 *            the {@link #locale}.
	 */
	public Greeting(String text, Locale locale) {
		this(text, locale.toString().toLowerCase());
	}

	/**
	 * Gets the {@link #locale}.
	 *
	 * @return the {@link #locale}.
	 */
	public String getLocale() {
		return locale;
	}

	/**
	 * Sets the {@link #locale}.
	 *
	 * @param locale
	 *            the {@link #locale} to set.
	 */
	public void setLocale(String locale) {
		this.locale = locale;
	}

	/**
	 * Gets the {@link #text}.
	 *
	 * @return the {@link #text}.
	 */
	public String getText() {
		return text;
	}

	/**
	 * Sets the {@link #text}.
	 *
	 * @param text
	 *            the {@link #text} to set.
	 */
	public void setText(String text) {
		this.text = text;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((locale == null) ? 0 : locale.hashCode());
		result = prime * result + ((text == null) ? 0 : text.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Greeting other = (Greeting) obj;
		if (locale == null) {
			if (other.locale != null)
				return false;
		} else if (!locale.equals(other.locale))
			return false;
		if (text == null) {
			if (other.text != null)
				return false;
		} else if (!text.equals(other.text))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""Greeting [locale="" + locale + "", text="" + text + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.api.messengerprofile; public class Greeting implements Serializable { private static final long serialVersionUID = 1L; public static final String USER_FIRST_NAME = ""{ { user_first_name} } ""; public static final String USER_LAST_NAME = ""{ { user_last_name} } ""; public static final String USER_FULL_NAME = ""{ { user_full_name} } ""; @NotBlank
	private String locale; @NotBlank
	@Size(max = FbBotMillValidationConstants.GREETING_TEXT_MAX_LENGTH)
	private String text; public Greeting() { this.locale = ""default""; } public Greeting(String text) { this(); this.text = text; } public Greeting(String text, String locale) { this.locale = locale; this.text = text; } public Greeting(String text, Locale locale) { this(text, locale.toString().toLowerCase()); } public String getLocale() { return locale; } public void setLocale(String locale) { this.locale = locale; } public String getText() { return text; } public void setText(String text) { this.text = text; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((locale == null) ? 0 : locale.hashCode()); result = prime * result + ((text == null) ? 0 : text.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Greeting other = (Greeting) obj; if (locale == null) { if (other.locale != null)
				return false; } else if (!locale.equals(other.locale))
			return false; if (text == null) { if (other.text != null)
				return false; } else if (!text.equals(other.text))
			return false; return true; } @Override
	public String toString() { return ""Greeting [locale="" + locale + "", text="" + text + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.messengerprofile; public class Greeting implements Serializable { private static final long serialVersionUID = 1L; public static final String USER_FIRST_NAME = ""{ { user_first_name} } ""; public static final String USER_LAST_NAME = ""{ { user_last_name} } ""; public static final String USER_FULL_NAME = ""{ { user_full_name} } ""; @NotBlank
	private String locale; @NotBlank
	@Size(max = FbBotMillValidationConstants.GREETING_TEXT_MAX_LENGTH)
	private String text; public Greeting() { this.locale = ""default""; } public Greeting(String text) { this(); this.text = text; } public Greeting(String text, String locale) { this.locale = locale; this.text = text; } public Greeting(String text, Locale locale) { this(text, locale.toString().toLowerCase()); } public String getLocale() { return locale; } public void setLocale(String locale) { this.locale = locale; } public String getText() { return text; } public void setText(String text) { this.text = text; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((locale == null) ? 0 : locale.hashCode()); result = prime * result + ((text == null) ? 0 : text.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Greeting other = (Greeting) obj; if (locale == null) { if (other.locale != null)
				return false; } else if (!locale.equals(other.locale))
			return false; if (text == null) { if (other.text != null)
				return false; } else if (!text.equals(other.text))
			return false; return true; } @Override
	public String toString() { return ""Greeting [locale="" + locale + "", text="" + text + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.messengerprofile; 
import java.io.Serializable; import java.util.Locale; 
import javax.validation.constraints.Size; 
import org.hibernate.validator.constraints.NotBlank; 
import co.aurasphere.botmill.fb.internal.util.validation.FbBotMillValidationConstants; 
  public class Greeting implements Serializable { /**
 * Greeting object used by the {@link SetGreetingTextRequest}.
 * 
 * @author Donato Rimenti
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */ 	 public static final String USER_FIRST_NAME = ""{ { user_first_name} } ""; /**
	 * Placeholder for the user first name. This placeholder will be dinamically
	 * changed with the current user first name.
	 */  public static final String USER_LAST_NAME = ""{ { user_last_name} } ""; /**
	 * Placeholder for the user last name. This placeholder will be dinamically
	 * changed with the current user last name.
	 */  public static final String USER_FULL_NAME = ""{ { user_full_name} } ""; /**
	 * Placeholder for the user full name. This placeholder will be dinamically
	 * changed with the current user full name.
	 */  @NotBlank
	private String locale; /**
	 * Locale of the greeting text. We will show this greeting text when user
	 * locale matches the provided locale. You must at least specify greeting
	 * text for the default locale. This is the text we will fall back to if we
	 * don't find another matching the user's locale. See the list of supported
	 * locales.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/messenger-profile/supported-locales""
	 *      >List of Facebook's supported locales</a>
	 */  @NotBlank
	@Size(max = FbBotMillValidationConstants.GREETING_TEXT_MAX_LENGTH)
	private String text; /**
	 * The greeting text for the specific locale. It must be UTF-8 and has a 160
	 * character limit.
	 */  public Greeting() { this.locale = ""default""; } /**
	 * Instantiates a new Greeting.
	 */  public Greeting(String text) { this(); this.text = text; } /**
	 * Instantiates a new Greeting.
	 *
	 * @param text
	 *            the {@link #text}.
	 */  public Greeting(String text, String locale) { this.locale = locale; this.text = text; } /**
	 * Instantiates a new Greeting.
	 *
	 * @param text
	 *            the {@link #text}.
	 * @param locale
	 *            the {@link #locale}.
	 */  public Greeting(String text, Locale locale) { this(text, locale.toString().toLowerCase()); } /**
	 * Instantiates a new Greeting.
	 *
	 * @param text
	 *            the {@link #text}.
	 * @param locale
	 *            the {@link #locale}.
	 */  public String getLocale() { return locale; } /**
	 * Gets the {@link #locale}.
	 *
	 * @return the {@link #locale}.
	 */  public void setLocale(String locale) { this.locale = locale; } /**
	 * Sets the {@link #locale}.
	 *
	 * @param locale
	 *            the {@link #locale} to set.
	 */  public String getText() { return text; } /**
	 * Gets the {@link #text}.
	 *
	 * @return the {@link #text}.
	 */  public void setText(String text) { this.text = text; } /**
	 * Sets the {@link #text}.
	 *
	 * @param text
	 *            the {@link #text} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((locale == null) ? 0 : locale.hashCode()); result = prime * result + ((text == null) ? 0 : text.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Greeting other = (Greeting) obj; if (locale == null) { if (other.locale != null)
				return false; } else if (!locale.equals(other.locale))
			return false; if (text == null) { if (other.text != null)
				return false; } else if (!text.equals(other.text))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""Greeting [locale="" + locale + "", text="" + text + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/api/messengerprofile/HomeUrl.java,"package co.aurasphere.botmill.fb.model.api.messengerprofile;

import java.io.Serializable;

import com.google.gson.annotations.SerializedName;

import co.aurasphere.botmill.fb.model.outcoming.template.button.WebViewHeightRatioType;
import co.aurasphere.botmill.fb.model.outcoming.template.button.WebViewShareButton;

public class HomeUrl implements Serializable {

	private static final long serialVersionUID = 1L;

	private String url;
	@SerializedName(""webview_height_ratio"")
	private WebViewHeightRatioType webviewHeightRatio;
	@SerializedName(""webview_share_button"")
	private WebViewShareButton webviewShareButton;
	@SerializedName(""in_test"")
	private boolean inTest;

	public String getUrl() {
		return url;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	public WebViewHeightRatioType getWebviewHeightRatio() {
		return webviewHeightRatio;
	}

	public void setWebviewHeightRatio(WebViewHeightRatioType webviewHeightRatio) {
		this.webviewHeightRatio = webviewHeightRatio;
	}

	public WebViewShareButton getWebviewShareButton() {
		return webviewShareButton;
	}

	public void setWebviewShareButton(WebViewShareButton webviewShareButton) {
		this.webviewShareButton = webviewShareButton;
	}

	public boolean isInTest() {
		return inTest;
	}

	public void setInTest(boolean inTest) {
		this.inTest = inTest;
	}

}
","package co.aurasphere.botmill.fb.model.api.messengerprofile; public class HomeUrl implements Serializable { private static final long serialVersionUID = 1L; private String url; @SerializedName(""webview_height_ratio"")
	private WebViewHeightRatioType webviewHeightRatio; @SerializedName(""webview_share_button"")
	private WebViewShareButton webviewShareButton; @SerializedName(""in_test"")
	private boolean inTest; public String getUrl() { return url; } public void setUrl(String url) { this.url = url; } public WebViewHeightRatioType getWebviewHeightRatio() { return webviewHeightRatio; } public void setWebviewHeightRatio(WebViewHeightRatioType webviewHeightRatio) { this.webviewHeightRatio = webviewHeightRatio; } public WebViewShareButton getWebviewShareButton() { return webviewShareButton; } public void setWebviewShareButton(WebViewShareButton webviewShareButton) { this.webviewShareButton = webviewShareButton; } public boolean isInTest() { return inTest; } public void setInTest(boolean inTest) { this.inTest = inTest; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.messengerprofile; public class HomeUrl implements Serializable { private static final long serialVersionUID = 1L; private String url; @SerializedName(""webview_height_ratio"")
	private WebViewHeightRatioType webviewHeightRatio; @SerializedName(""webview_share_button"")
	private WebViewShareButton webviewShareButton; @SerializedName(""in_test"")
	private boolean inTest; public String getUrl() { return url; } public void setUrl(String url) { this.url = url; } public WebViewHeightRatioType getWebviewHeightRatio() { return webviewHeightRatio; } public void setWebviewHeightRatio(WebViewHeightRatioType webviewHeightRatio) { this.webviewHeightRatio = webviewHeightRatio; } public WebViewShareButton getWebviewShareButton() { return webviewShareButton; } public void setWebviewShareButton(WebViewShareButton webviewShareButton) { this.webviewShareButton = webviewShareButton; } public boolean isInTest() { return inTest; } public void setInTest(boolean inTest) { this.inTest = inTest; } } ","package co.aurasphere.botmill.fb.model.api.messengerprofile; 
import java.io.Serializable; 
import com.google.gson.annotations.SerializedName; 
import co.aurasphere.botmill.fb.model.outcoming.template.button.WebViewHeightRatioType; import co.aurasphere.botmill.fb.model.outcoming.template.button.WebViewShareButton;  public class HomeUrl implements Serializable {  private static final long serialVersionUID = 1L;  private String url; @SerializedName(""webview_height_ratio"")
	private WebViewHeightRatioType webviewHeightRatio; @SerializedName(""webview_share_button"")
	private WebViewShareButton webviewShareButton; @SerializedName(""in_test"")
	private boolean inTest;  public String getUrl() { return url; }  public void setUrl(String url) { this.url = url; }  public WebViewHeightRatioType getWebviewHeightRatio() { return webviewHeightRatio; }  public void setWebviewHeightRatio(WebViewHeightRatioType webviewHeightRatio) { this.webviewHeightRatio = webviewHeightRatio; }  public WebViewShareButton getWebviewShareButton() { return webviewShareButton; }  public void setWebviewShareButton(WebViewShareButton webviewShareButton) { this.webviewShareButton = webviewShareButton; }  public boolean isInTest() { return inTest; }  public void setInTest(boolean inTest) { this.inTest = inTest; }  }  "
src/main/java/co/aurasphere/botmill/fb/model/api/messengerprofile/HomeUrlRequest.java,"package co.aurasphere.botmill.fb.model.api.messengerprofile;

import com.google.gson.annotations.SerializedName;

public class HomeUrlRequest {

	@SerializedName(""home_url"")
	private HomeUrl homeUrl;

	public HomeUrl getHomeUrl() {
		return homeUrl;
	}

	public void setHomeUrl(HomeUrl homeUrl) {
		this.homeUrl = homeUrl;
	}
	
	
}
","package co.aurasphere.botmill.fb.model.api.messengerprofile; public class HomeUrlRequest { @SerializedName(""home_url"")
	private HomeUrl homeUrl; public HomeUrl getHomeUrl() { return homeUrl; } public void setHomeUrl(HomeUrl homeUrl) { this.homeUrl = homeUrl; } }",0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.messengerprofile; public class HomeUrlRequest { @SerializedName(""home_url"")
	private HomeUrl homeUrl; public HomeUrl getHomeUrl() { return homeUrl; } public void setHomeUrl(HomeUrl homeUrl) { this.homeUrl = homeUrl; } } ","package co.aurasphere.botmill.fb.model.api.messengerprofile; 
import com.google.gson.annotations.SerializedName;  public class HomeUrlRequest {  @SerializedName(""home_url"")
	private HomeUrl homeUrl;  public HomeUrl getHomeUrl() { return homeUrl; }  public void setHomeUrl(HomeUrl homeUrl) { this.homeUrl = homeUrl; } 	
	 }  "
src/main/java/co/aurasphere/botmill/fb/model/api/messengerprofile/SetAccountLinkingUrlRequest.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.messengerprofile;

import java.io.Serializable;

import org.hibernate.validator.constraints.NotBlank;

import co.aurasphere.botmill.fb.api.MessengerProfileApi;

import com.google.gson.annotations.SerializedName;


/**
 * Request for
 * {@link MessengerProfileApi#setAccountLinkingUrl(String)}
 * method.
 * 
 * @author Donato Rimenti
 */
public class SetAccountLinkingUrlRequest implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Authentication callback URL. Must use https protocol.
	 */
	@NotBlank
	@SerializedName(""account_linking_url"")
	private String accountLinkingUrl;

	/**
	 * Instantiates a new SetAccountLinkingUrl.
	 */
	public SetAccountLinkingUrlRequest() {
	}

	/**
	 * Instantiates a new SetAccountLinkingUrl.
	 *
	 * @param accountLinkingUrl
	 *            the {@link #accountLinkingUrl}.
	 */
	public SetAccountLinkingUrlRequest(String accountLinkingUrl) {
		this.accountLinkingUrl = accountLinkingUrl;
	}

	/**
	 * Gets the {@link #accountLinkingUrl}.
	 *
	 * @return the {@link #accountLinkingUrl}.
	 */
	public String getAccountLinkingUrl() {
		return accountLinkingUrl;
	}

	/**
	 * Sets the {@link #accountLinkingUrl}.
	 *
	 * @param accountLinkingUrl
	 *            the {@link #accountLinkingUrl} to set.
	 */
	public void setAccountLinkingUrl(String accountLinkingUrl) {
		this.accountLinkingUrl = accountLinkingUrl;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime
				* result
				+ ((accountLinkingUrl == null) ? 0 : accountLinkingUrl
						.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		SetAccountLinkingUrlRequest other = (SetAccountLinkingUrlRequest) obj;
		if (accountLinkingUrl == null) {
			if (other.accountLinkingUrl != null)
				return false;
		} else if (!accountLinkingUrl.equals(other.accountLinkingUrl))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""SetAccountLinkingUrl [accountLinkingUrl="" + accountLinkingUrl
				+ ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.api.messengerprofile; public class SetAccountLinkingUrlRequest implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	@SerializedName(""account_linking_url"")
	private String accountLinkingUrl; public SetAccountLinkingUrlRequest() { } public SetAccountLinkingUrlRequest(String accountLinkingUrl) { this.accountLinkingUrl = accountLinkingUrl; } public String getAccountLinkingUrl() { return accountLinkingUrl; } public void setAccountLinkingUrl(String accountLinkingUrl) { this.accountLinkingUrl = accountLinkingUrl; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime
				* result
				+ ((accountLinkingUrl == null) ? 0 : accountLinkingUrl
						.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; SetAccountLinkingUrlRequest other = (SetAccountLinkingUrlRequest) obj; if (accountLinkingUrl == null) { if (other.accountLinkingUrl != null)
				return false; } else if (!accountLinkingUrl.equals(other.accountLinkingUrl))
			return false; return true; } @Override
	public String toString() { return ""SetAccountLinkingUrl [accountLinkingUrl="" + accountLinkingUrl
				+ ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.messengerprofile; public class SetAccountLinkingUrlRequest implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	@SerializedName(""account_linking_url"")
	private String accountLinkingUrl; public SetAccountLinkingUrlRequest() { } public SetAccountLinkingUrlRequest(String accountLinkingUrl) { this.accountLinkingUrl = accountLinkingUrl; } public String getAccountLinkingUrl() { return accountLinkingUrl; } public void setAccountLinkingUrl(String accountLinkingUrl) { this.accountLinkingUrl = accountLinkingUrl; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime
				* result
				+ ((accountLinkingUrl == null) ? 0 : accountLinkingUrl
						.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; SetAccountLinkingUrlRequest other = (SetAccountLinkingUrlRequest) obj; if (accountLinkingUrl == null) { if (other.accountLinkingUrl != null)
				return false; } else if (!accountLinkingUrl.equals(other.accountLinkingUrl))
			return false; return true; } @Override
	public String toString() { return ""SetAccountLinkingUrl [accountLinkingUrl="" + accountLinkingUrl
				+ ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.messengerprofile; 
import java.io.Serializable; 
import org.hibernate.validator.constraints.NotBlank; 
import co.aurasphere.botmill.fb.api.MessengerProfileApi; 
import com.google.gson.annotations.SerializedName; 
  public class SetAccountLinkingUrlRequest implements Serializable { /**
 * Request for
 * {@link MessengerProfileApi#setAccountLinkingUrl(String)}
 * method.
 * 
 * @author Donato Rimenti
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @NotBlank
	@SerializedName(""account_linking_url"")
	private String accountLinkingUrl; /**
	 * Authentication callback URL. Must use https protocol.
	 */  public SetAccountLinkingUrlRequest() { } /**
	 * Instantiates a new SetAccountLinkingUrl.
	 */  public SetAccountLinkingUrlRequest(String accountLinkingUrl) { this.accountLinkingUrl = accountLinkingUrl; } /**
	 * Instantiates a new SetAccountLinkingUrl.
	 *
	 * @param accountLinkingUrl
	 *            the {@link #accountLinkingUrl}.
	 */  public String getAccountLinkingUrl() { return accountLinkingUrl; } /**
	 * Gets the {@link #accountLinkingUrl}.
	 *
	 * @return the {@link #accountLinkingUrl}.
	 */  public void setAccountLinkingUrl(String accountLinkingUrl) { this.accountLinkingUrl = accountLinkingUrl; } /**
	 * Sets the {@link #accountLinkingUrl}.
	 *
	 * @param accountLinkingUrl
	 *            the {@link #accountLinkingUrl} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime
				* result
				+ ((accountLinkingUrl == null) ? 0 : accountLinkingUrl
						.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; SetAccountLinkingUrlRequest other = (SetAccountLinkingUrlRequest) obj; if (accountLinkingUrl == null) { if (other.accountLinkingUrl != null)
				return false; } else if (!accountLinkingUrl.equals(other.accountLinkingUrl))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""SetAccountLinkingUrl [accountLinkingUrl="" + accountLinkingUrl
				+ ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/api/messengerprofile/SetGetStartedButtonRequest.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.messengerprofile;

import java.io.Serializable;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import co.aurasphere.botmill.fb.api.MessengerProfileApi;

import com.google.gson.annotations.SerializedName;


/**
 * Request for
 * {@link MessengerProfileApi#setGetStartedButton(String)}
 * method.
 * 
 * @author Donato Rimenti
 */
public class SetGetStartedButtonRequest implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Object which contains the payload to be sent back when the Get Started
	 * Button is pressed.
	 */
	@Valid
	@NotNull
	@SerializedName(""get_started"")
	private GetStarted getStarted;
	
	/**
	 * Instantiates a new GetStartedRequest.
	 */
	public SetGetStartedButtonRequest() {
	}
	
	/**
	 * Instantiates a new GetStartedRequest.
	 *
	 * @param payload the {@link GetStarted#payload}.
	 */
	public SetGetStartedButtonRequest(String payload) {
		this.getStarted = new GetStarted(payload);
	}

	/**
	 * Gets the {@link #getStarted}.
	 *
	 * @return the {@link #getStarted}.
	 */
	public GetStarted getGetStarted() {
		return getStarted;
	}

	/**
	 * Sets the {@link #getStarted}.
	 *
	 * @param getStarted
	 *            the {@link #getStarted} to set.
	 */
	public void setGetStarted(GetStarted getStarted) {
		this.getStarted = getStarted;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((getStarted == null) ? 0 : getStarted.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		SetGetStartedButtonRequest other = (SetGetStartedButtonRequest) obj;
		if (getStarted == null) {
			if (other.getStarted != null)
				return false;
		} else if (!getStarted.equals(other.getStarted))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""GetStartedRequest []"";
	}

}","package co.aurasphere.botmill.fb.model.api.messengerprofile; public class SetGetStartedButtonRequest implements Serializable { private static final long serialVersionUID = 1L; @Valid
	@NotNull
	@SerializedName(""get_started"")
	private GetStarted getStarted; public SetGetStartedButtonRequest() { } public SetGetStartedButtonRequest(String payload) { this.getStarted = new GetStarted(payload); } public GetStarted getGetStarted() { return getStarted; } public void setGetStarted(GetStarted getStarted) { this.getStarted = getStarted; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((getStarted == null) ? 0 : getStarted.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; SetGetStartedButtonRequest other = (SetGetStartedButtonRequest) obj; if (getStarted == null) { if (other.getStarted != null)
				return false; } else if (!getStarted.equals(other.getStarted))
			return false; return true; } @Override
	public String toString() { return ""GetStartedRequest []""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.messengerprofile; public class SetGetStartedButtonRequest implements Serializable { private static final long serialVersionUID = 1L; @Valid
	@NotNull
	@SerializedName(""get_started"")
	private GetStarted getStarted; public SetGetStartedButtonRequest() { } public SetGetStartedButtonRequest(String payload) { this.getStarted = new GetStarted(payload); } public GetStarted getGetStarted() { return getStarted; } public void setGetStarted(GetStarted getStarted) { this.getStarted = getStarted; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((getStarted == null) ? 0 : getStarted.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; SetGetStartedButtonRequest other = (SetGetStartedButtonRequest) obj; if (getStarted == null) { if (other.getStarted != null)
				return false; } else if (!getStarted.equals(other.getStarted))
			return false; return true; } @Override
	public String toString() { return ""GetStartedRequest []""; } }","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.messengerprofile; 
import java.io.Serializable; 
import javax.validation.Valid; import javax.validation.constraints.NotNull; 
import co.aurasphere.botmill.fb.api.MessengerProfileApi; 
import com.google.gson.annotations.SerializedName; 
  public class SetGetStartedButtonRequest implements Serializable { /**
 * Request for
 * {@link MessengerProfileApi#setGetStartedButton(String)}
 * method.
 * 
 * @author Donato Rimenti
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @Valid
	@NotNull
	@SerializedName(""get_started"")
	private GetStarted getStarted; /**
	 * Object which contains the payload to be sent back when the Get Started
	 * Button is pressed.
	 */ 	 public SetGetStartedButtonRequest() { } /**
	 * Instantiates a new GetStartedRequest.
	 */ 	 public SetGetStartedButtonRequest(String payload) { this.getStarted = new GetStarted(payload); } /**
	 * Instantiates a new GetStartedRequest.
	 *
	 * @param payload the {@link GetStarted#payload}.
	 */  public GetStarted getGetStarted() { return getStarted; } /**
	 * Gets the {@link #getStarted}.
	 *
	 * @return the {@link #getStarted}.
	 */  public void setGetStarted(GetStarted getStarted) { this.getStarted = getStarted; } /**
	 * Sets the {@link #getStarted}.
	 *
	 * @param getStarted
	 *            the {@link #getStarted} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((getStarted == null) ? 0 : getStarted.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; SetGetStartedButtonRequest other = (SetGetStartedButtonRequest) obj; if (getStarted == null) { if (other.getStarted != null)
				return false; } else if (!getStarted.equals(other.getStarted))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""GetStartedRequest []""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }"
src/main/java/co/aurasphere/botmill/fb/model/api/messengerprofile/SetGreetingTextRequest.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.messengerprofile;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;

import org.hibernate.validator.constraints.NotEmpty;

import co.aurasphere.botmill.fb.api.MessengerProfileApi;


/**
 * Request for {@link MessengerProfileApi#setGreetingMessage(List)}
 * method.
 * 
 * @author Donato Rimenti
 */
public class SetGreetingTextRequest implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * A list of locale-greeting messages to set.
	 */
	@Valid
	@NotEmpty
	private List<Greeting> greeting;

	/**
	 * Instantiates a new GreetingTextRequest.
	 */
	public SetGreetingTextRequest() {
		this.greeting = new ArrayList<Greeting>();
	}

	/**
	 * Instantiates a new GreetingTextRequest.
	 *
	 * @param greeting
	 *            the {@link #greeting}.
	 */
	public SetGreetingTextRequest(List<Greeting> greeting) {
		this.greeting = greeting;
	}

	/**
	 * Instantiates a new sets the greeting text request.
	 *
	 * @param message the message
	 */
	public SetGreetingTextRequest(String message) {
		this();
		greeting.add(new Greeting(message));
	}

	/**
	 * Gets the {@link #greeting}.
	 *
	 * @return the {@link #greeting}.
	 */
	public List<Greeting> getGreeting() {
		return greeting;
	}

	/**
	 * Sets the {@link #greeting}.
	 *
	 * @param greeting
	 *            the {@link #greeting} to set.
	 */
	public void setGreeting(List<Greeting> greeting) {
		this.greeting = greeting;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((greeting == null) ? 0 : greeting.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		SetGreetingTextRequest other = (SetGreetingTextRequest) obj;
		if (greeting == null) {
			if (other.greeting != null)
				return false;
		} else if (!greeting.equals(other.greeting))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""GreetingTextRequest [greeting="" + greeting + ""]"";
	}

}","package co.aurasphere.botmill.fb.model.api.messengerprofile; public class SetGreetingTextRequest implements Serializable { private static final long serialVersionUID = 1L; @Valid
	@NotEmpty
	private List<Greeting> greeting; public SetGreetingTextRequest() { this.greeting = new ArrayList<Greeting>(); } public SetGreetingTextRequest(List<Greeting> greeting) { this.greeting = greeting; } public SetGreetingTextRequest(String message) { this(); greeting.add(new Greeting(message)); } public List<Greeting> getGreeting() { return greeting; } public void setGreeting(List<Greeting> greeting) { this.greeting = greeting; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((greeting == null) ? 0 : greeting.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; SetGreetingTextRequest other = (SetGreetingTextRequest) obj; if (greeting == null) { if (other.greeting != null)
				return false; } else if (!greeting.equals(other.greeting))
			return false; return true; } @Override
	public String toString() { return ""GreetingTextRequest [greeting="" + greeting + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.messengerprofile; public class SetGreetingTextRequest implements Serializable { private static final long serialVersionUID = 1L; @Valid
	@NotEmpty
	private List<Greeting> greeting; public SetGreetingTextRequest() { this.greeting = new ArrayList<Greeting>(); } public SetGreetingTextRequest(List<Greeting> greeting) { this.greeting = greeting; } public SetGreetingTextRequest(String message) { this(); greeting.add(new Greeting(message)); } public List<Greeting> getGreeting() { return greeting; } public void setGreeting(List<Greeting> greeting) { this.greeting = greeting; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((greeting == null) ? 0 : greeting.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; SetGreetingTextRequest other = (SetGreetingTextRequest) obj; if (greeting == null) { if (other.greeting != null)
				return false; } else if (!greeting.equals(other.greeting))
			return false; return true; } @Override
	public String toString() { return ""GreetingTextRequest [greeting="" + greeting + ""]""; } }","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.messengerprofile; 
import java.io.Serializable; import java.util.ArrayList; import java.util.List; 
import javax.validation.Valid; 
import org.hibernate.validator.constraints.NotEmpty; 
import co.aurasphere.botmill.fb.api.MessengerProfileApi; 
  public class SetGreetingTextRequest implements Serializable { /**
 * Request for {@link MessengerProfileApi#setGreetingMessage(List)}
 * method.
 * 
 * @author Donato Rimenti
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @Valid
	@NotEmpty
	private List<Greeting> greeting; /**
	 * A list of locale-greeting messages to set.
	 */  public SetGreetingTextRequest() { this.greeting = new ArrayList<Greeting>(); } /**
	 * Instantiates a new GreetingTextRequest.
	 */  public SetGreetingTextRequest(List<Greeting> greeting) { this.greeting = greeting; } /**
	 * Instantiates a new GreetingTextRequest.
	 *
	 * @param greeting
	 *            the {@link #greeting}.
	 */  public SetGreetingTextRequest(String message) { this(); greeting.add(new Greeting(message)); } /**
	 * Instantiates a new sets the greeting text request.
	 *
	 * @param message the message
	 */  public List<Greeting> getGreeting() { return greeting; } /**
	 * Gets the {@link #greeting}.
	 *
	 * @return the {@link #greeting}.
	 */  public void setGreeting(List<Greeting> greeting) { this.greeting = greeting; } /**
	 * Sets the {@link #greeting}.
	 *
	 * @param greeting
	 *            the {@link #greeting} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((greeting == null) ? 0 : greeting.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; SetGreetingTextRequest other = (SetGreetingTextRequest) obj; if (greeting == null) { if (other.greeting != null)
				return false; } else if (!greeting.equals(other.greeting))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""GreetingTextRequest [greeting="" + greeting + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }"
src/main/java/co/aurasphere/botmill/fb/model/api/messengerprofile/SetWhitelistedDomainsRequest.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.messengerprofile;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotEmpty;

import co.aurasphere.botmill.fb.api.MessengerProfileApi;

import com.google.gson.annotations.SerializedName;


/**
 * Request for
 * {@link MessengerProfileApi#setWhitelistedDomains(List)}
 * method.
 * 
 * @author Donato Rimenti
 */
public class SetWhitelistedDomainsRequest implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * A list of domains being used. All domains must be valid. Up to 10 domains
	 * allowed.
	 */
	// TODO: max as a constant in FbValidation
	@NotEmpty
	@Size(max = 10)
	@SerializedName(""whitelisted_domains"")
	private List<String> whitelistedDomains;

	/**
	 * Instantiates a new SetWhitelistedDomainsRequest.
	 */
	public SetWhitelistedDomainsRequest() {
		this.whitelistedDomains = new ArrayList<String>();
	}

	/**
	 * Instantiates a new SetWhitelistedDomainsRequest.
	 *
	 * @param whitelistedDomains
	 *            the {@link #whitelistedDomains}.
	 */
	public SetWhitelistedDomainsRequest(List<String> whitelistedDomains) {
		this.whitelistedDomains = whitelistedDomains;
	}

	/**
	 * Gets the {@link #whitelistedDomains}.
	 *
	 * @return the {@link #whitelistedDomains}.
	 */
	public List<String> getWhitelistedDomains() {
		return whitelistedDomains;
	}

	/**
	 * Sets the {@link #whitelistedDomains}.
	 *
	 * @param whitelistedDomains
	 *            the {@link #whitelistedDomains} to set.
	 */
	public void setWhitelistedDomains(List<String> whitelistedDomains) {
		this.whitelistedDomains = whitelistedDomains;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime
				* result
				+ ((whitelistedDomains == null) ? 0 : whitelistedDomains
						.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		SetWhitelistedDomainsRequest other = (SetWhitelistedDomainsRequest) obj;
		if (whitelistedDomains == null) {
			if (other.whitelistedDomains != null)
				return false;
		} else if (!whitelistedDomains.equals(other.whitelistedDomains))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""SetWhitelistedDomainsRequest [whitelistedDomains=""
				+ whitelistedDomains + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.api.messengerprofile; public class SetWhitelistedDomainsRequest implements Serializable { private static final long serialVersionUID = 1L; @NotEmpty
	@Size(max = 10)
	@SerializedName(""whitelisted_domains"")
	private List<String> whitelistedDomains; public SetWhitelistedDomainsRequest() { this.whitelistedDomains = new ArrayList<String>(); } public SetWhitelistedDomainsRequest(List<String> whitelistedDomains) { this.whitelistedDomains = whitelistedDomains; } public List<String> getWhitelistedDomains() { return whitelistedDomains; } public void setWhitelistedDomains(List<String> whitelistedDomains) { this.whitelistedDomains = whitelistedDomains; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime
				* result
				+ ((whitelistedDomains == null) ? 0 : whitelistedDomains
						.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; SetWhitelistedDomainsRequest other = (SetWhitelistedDomainsRequest) obj; if (whitelistedDomains == null) { if (other.whitelistedDomains != null)
				return false; } else if (!whitelistedDomains.equals(other.whitelistedDomains))
			return false; return true; } @Override
	public String toString() { return ""SetWhitelistedDomainsRequest [whitelistedDomains=""
				+ whitelistedDomains + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.messengerprofile; public class SetWhitelistedDomainsRequest implements Serializable { private static final long serialVersionUID = 1L; @NotEmpty
	@Size(max = 10)
	@SerializedName(""whitelisted_domains"")
	private List<String> whitelistedDomains; public SetWhitelistedDomainsRequest() { this.whitelistedDomains = new ArrayList<String>(); } public SetWhitelistedDomainsRequest(List<String> whitelistedDomains) { this.whitelistedDomains = whitelistedDomains; } public List<String> getWhitelistedDomains() { return whitelistedDomains; } public void setWhitelistedDomains(List<String> whitelistedDomains) { this.whitelistedDomains = whitelistedDomains; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime
				* result
				+ ((whitelistedDomains == null) ? 0 : whitelistedDomains
						.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; SetWhitelistedDomainsRequest other = (SetWhitelistedDomainsRequest) obj; if (whitelistedDomains == null) { if (other.whitelistedDomains != null)
				return false; } else if (!whitelistedDomains.equals(other.whitelistedDomains))
			return false; return true; } @Override
	public String toString() { return ""SetWhitelistedDomainsRequest [whitelistedDomains=""
				+ whitelistedDomains + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.messengerprofile; 
import java.io.Serializable; import java.util.ArrayList; import java.util.List; 
import javax.validation.constraints.Size; 
import org.hibernate.validator.constraints.NotEmpty; 
import co.aurasphere.botmill.fb.api.MessengerProfileApi; 
import com.google.gson.annotations.SerializedName; 
  public class SetWhitelistedDomainsRequest implements Serializable { /**
 * Request for
 * {@link MessengerProfileApi#setWhitelistedDomains(List)}
 * method.
 * 
 * @author Donato Rimenti
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  /**
	 * A list of domains being used. All domains must be valid. Up to 10 domains
	 * allowed.
	 */ @NotEmpty
	@Size(max = 10)
	@SerializedName(""whitelisted_domains"")
	private List<String> whitelistedDomains; // TODO: max as a constant in FbValidation  public SetWhitelistedDomainsRequest() { this.whitelistedDomains = new ArrayList<String>(); } /**
	 * Instantiates a new SetWhitelistedDomainsRequest.
	 */  public SetWhitelistedDomainsRequest(List<String> whitelistedDomains) { this.whitelistedDomains = whitelistedDomains; } /**
	 * Instantiates a new SetWhitelistedDomainsRequest.
	 *
	 * @param whitelistedDomains
	 *            the {@link #whitelistedDomains}.
	 */  public List<String> getWhitelistedDomains() { return whitelistedDomains; } /**
	 * Gets the {@link #whitelistedDomains}.
	 *
	 * @return the {@link #whitelistedDomains}.
	 */  public void setWhitelistedDomains(List<String> whitelistedDomains) { this.whitelistedDomains = whitelistedDomains; } /**
	 * Sets the {@link #whitelistedDomains}.
	 *
	 * @param whitelistedDomains
	 *            the {@link #whitelistedDomains} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime
				* result
				+ ((whitelistedDomains == null) ? 0 : whitelistedDomains
						.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; SetWhitelistedDomainsRequest other = (SetWhitelistedDomainsRequest) obj; if (whitelistedDomains == null) { if (other.whitelistedDomains != null)
				return false; } else if (!whitelistedDomains.equals(other.whitelistedDomains))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""SetWhitelistedDomainsRequest [whitelistedDomains=""
				+ whitelistedDomains + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/api/threadsettings/CallToActionsRequest.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.threadsettings;

import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotEmpty;

import co.aurasphere.botmill.fb.internal.util.validation.FbBotMillValidationConstants;
import co.aurasphere.botmill.fb.model.outcoming.template.button.Button;

import com.google.gson.annotations.SerializedName;


/**
 * Request used for Thread Settings of Get Started Button and Persistent Menu.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings""
 *      >Facebook's Messenger Platform Thread Settings Documentation</a>
 * 
 * 
 */
public class CallToActionsRequest extends ThreadSettingsBaseRequest {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The Facebook Thread State.
	 */
	@NotNull
	@SerializedName(""thread_state"")
	private ThreadState threadState;

	/**
	 * The list of buttons used by this Thread Setting.
	 */
	@Valid
	@Size(max = FbBotMillValidationConstants.THREAD_SETTINGS_BUTTONS_MAX_ELEMENTS)
	@NotEmpty
	@SerializedName(""call_to_actions"")
	private List<Button> callToActions;

	/**
	 * Instantiates a new call to actions request.
	 *
	 * @param threadState
	 *            the {@link #threadState}.
	 * @param callToActions
	 *            the {@link #callToActions}.
	 */
	public CallToActionsRequest(ThreadState threadState,
			List<Button> callToActions) {
		this.type = SettingType.CALL_TO_ACTIONS;
		this.threadState = threadState;
		this.callToActions = callToActions;
	}

	/**
	 * Gets the {@link #threadState}.
	 *
	 * @return the {@link #threadState}.
	 */
	public ThreadState getThreadState() {
		return threadState;
	}

	/**
	 * Sets the {@link #threadState}.
	 *
	 * @param threadState
	 *            the {@link #threadState} to set.
	 */
	public void setThreadState(ThreadState threadState) {
		this.threadState = threadState;
	}

	/**
	 * Gets the {@link #callToActions}.
	 *
	 * @return the {@link #callToActions}.
	 */
	public List<Button> getCallToActions() {
		return callToActions;
	}

	/**
	 * Sets the {@link #callToActions}.
	 *
	 * @param callToActions
	 *            the {@link #callToActions} to set.
	 */
	public void setCallToActions(List<Button> callToActions) {
		this.callToActions = callToActions;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((callToActions == null) ? 0 : callToActions.hashCode());
		result = prime * result
				+ ((threadState == null) ? 0 : threadState.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		CallToActionsRequest other = (CallToActionsRequest) obj;
		if (callToActions == null) {
			if (other.callToActions != null)
				return false;
		} else if (!callToActions.equals(other.callToActions))
			return false;
		if (threadState != other.threadState)
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""CallToActionsRequest [threadState="" + threadState
				+ "", callToActions="" + callToActions + "", type="" + type + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.api.threadsettings; public class CallToActionsRequest extends ThreadSettingsBaseRequest { private static final long serialVersionUID = 1L; @NotNull
	@SerializedName(""thread_state"")
	private ThreadState threadState; @Valid
	@Size(max = FbBotMillValidationConstants.THREAD_SETTINGS_BUTTONS_MAX_ELEMENTS)
	@NotEmpty
	@SerializedName(""call_to_actions"")
	private List<Button> callToActions; public CallToActionsRequest(ThreadState threadState,
			List<Button> callToActions) { this.type = SettingType.CALL_TO_ACTIONS; this.threadState = threadState; this.callToActions = callToActions; } public ThreadState getThreadState() { return threadState; } public void setThreadState(ThreadState threadState) { this.threadState = threadState; } public List<Button> getCallToActions() { return callToActions; } public void setCallToActions(List<Button> callToActions) { this.callToActions = callToActions; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((callToActions == null) ? 0 : callToActions.hashCode()); result = prime * result
				+ ((threadState == null) ? 0 : threadState.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; CallToActionsRequest other = (CallToActionsRequest) obj; if (callToActions == null) { if (other.callToActions != null)
				return false; } else if (!callToActions.equals(other.callToActions))
			return false; if (threadState != other.threadState)
			return false; return true; } @Override
	public String toString() { return ""CallToActionsRequest [threadState="" + threadState
				+ "", callToActions="" + callToActions + "", type="" + type + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.threadsettings; public class CallToActionsRequest extends ThreadSettingsBaseRequest { private static final long serialVersionUID = 1L; @NotNull
	@SerializedName(""thread_state"")
	private ThreadState threadState; @Valid
	@Size(max = FbBotMillValidationConstants.THREAD_SETTINGS_BUTTONS_MAX_ELEMENTS)
	@NotEmpty
	@SerializedName(""call_to_actions"")
	private List<Button> callToActions; public CallToActionsRequest(ThreadState threadState,
			List<Button> callToActions) { this.type = SettingType.CALL_TO_ACTIONS; this.threadState = threadState; this.callToActions = callToActions; } public ThreadState getThreadState() { return threadState; } public void setThreadState(ThreadState threadState) { this.threadState = threadState; } public List<Button> getCallToActions() { return callToActions; } public void setCallToActions(List<Button> callToActions) { this.callToActions = callToActions; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((callToActions == null) ? 0 : callToActions.hashCode()); result = prime * result
				+ ((threadState == null) ? 0 : threadState.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; CallToActionsRequest other = (CallToActionsRequest) obj; if (callToActions == null) { if (other.callToActions != null)
				return false; } else if (!callToActions.equals(other.callToActions))
			return false; if (threadState != other.threadState)
			return false; return true; } @Override
	public String toString() { return ""CallToActionsRequest [threadState="" + threadState
				+ "", callToActions="" + callToActions + "", type="" + type + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.threadsettings; 
import java.util.List; 
import javax.validation.Valid; import javax.validation.constraints.NotNull; import javax.validation.constraints.Size; 
import org.hibernate.validator.constraints.NotEmpty; 
import co.aurasphere.botmill.fb.internal.util.validation.FbBotMillValidationConstants; import co.aurasphere.botmill.fb.model.outcoming.template.button.Button; 
import com.google.gson.annotations.SerializedName; 
  public class CallToActionsRequest extends ThreadSettingsBaseRequest { /**
 * Request used for Thread Settings of Get Started Button and Persistent Menu.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings""
 *      >Facebook's Messenger Platform Thread Settings Documentation</a>
 * 
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @NotNull
	@SerializedName(""thread_state"")
	private ThreadState threadState; /**
	 * The Facebook Thread State.
	 */  @Valid
	@Size(max = FbBotMillValidationConstants.THREAD_SETTINGS_BUTTONS_MAX_ELEMENTS)
	@NotEmpty
	@SerializedName(""call_to_actions"")
	private List<Button> callToActions; /**
	 * The list of buttons used by this Thread Setting.
	 */  public CallToActionsRequest(ThreadState threadState,
			List<Button> callToActions) { this.type = SettingType.CALL_TO_ACTIONS; this.threadState = threadState; this.callToActions = callToActions; } /**
	 * Instantiates a new call to actions request.
	 *
	 * @param threadState
	 *            the {@link #threadState}.
	 * @param callToActions
	 *            the {@link #callToActions}.
	 */  public ThreadState getThreadState() { return threadState; } /**
	 * Gets the {@link #threadState}.
	 *
	 * @return the {@link #threadState}.
	 */  public void setThreadState(ThreadState threadState) { this.threadState = threadState; } /**
	 * Sets the {@link #threadState}.
	 *
	 * @param threadState
	 *            the {@link #threadState} to set.
	 */  public List<Button> getCallToActions() { return callToActions; } /**
	 * Gets the {@link #callToActions}.
	 *
	 * @return the {@link #callToActions}.
	 */  public void setCallToActions(List<Button> callToActions) { this.callToActions = callToActions; } /**
	 * Sets the {@link #callToActions}.
	 *
	 * @param callToActions
	 *            the {@link #callToActions} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((callToActions == null) ? 0 : callToActions.hashCode()); result = prime * result
				+ ((threadState == null) ? 0 : threadState.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; CallToActionsRequest other = (CallToActionsRequest) obj; if (callToActions == null) { if (other.callToActions != null)
				return false; } else if (!callToActions.equals(other.callToActions))
			return false; if (threadState != other.threadState)
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""CallToActionsRequest [threadState="" + threadState
				+ "", callToActions="" + callToActions + "", type="" + type + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/api/threadsettings/DomainActionType.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.threadsettings;


/**
 * The Enum DomainActionType.
 * 
 * @author Alvin Reyes
 */
public enum DomainActionType {

	/** The add. */
	ADD,
	/** The remove. */
	REMOVE;
}
",package co.aurasphere.botmill.fb.model.api.threadsettings; public enum DomainActionType { REMOVE; },0 0 0 0 0,package co.aurasphere.botmill.fb.model.api.threadsettings; public enum DomainActionType { REMOVE; } ,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.threadsettings; 
  public enum DomainActionType { /**
 * The Enum DomainActionType.
 * 
 * @author Alvin Reyes
 */  /** The add. */ REMOVE; } /** The remove. */ "
src/main/java/co/aurasphere/botmill/fb/model/api/threadsettings/SettingType.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.threadsettings;


/**
 * Enum for the Thread Setting to modify.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings""
 *      >Facebook's Messenger Platform Thread Settings Documentation</a>
 * 
 */
public enum SettingType {

	/**
	 * Setting for the Greeting Text message.
	 */
	GREETING,

	/**
	 * Setting for the Get Started Button or the Persistent Menu.
	 */
	CALL_TO_ACTIONS,

	/** The domain whitelisting. */
	DOMAIN_WHITELISTING,
	
	/** The payment. */
	PAYMENT;

}
",package co.aurasphere.botmill.fb.model.api.threadsettings; public enum SettingType { PAYMENT; },0 0 0 0 0,package co.aurasphere.botmill.fb.model.api.threadsettings; public enum SettingType { PAYMENT; } ,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.threadsettings; 
  public enum SettingType { /**
 * Enum for the Thread Setting to modify.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings""
 *      >Facebook's Messenger Platform Thread Settings Documentation</a>
 * 
 */  /**
	 * Setting for the Greeting Text message.
	 */  /**
	 * Setting for the Get Started Button or the Persistent Menu.
	 */  /** The domain whitelisting. */ 	 PAYMENT; /** The payment. */ }  "
src/main/java/co/aurasphere/botmill/fb/model/api/threadsettings/ThreadSettingsBaseRequest.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.threadsettings;

import java.io.Serializable;

import javax.validation.constraints.NotNull;

import com.google.gson.annotations.SerializedName;


/**
 * Base request for a Thread Setting configuration.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings""
 *      >Facebook's Messenger Platform Thread Settings Documentation</a>
 * 
 */
public abstract class ThreadSettingsBaseRequest implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The type of setting to change.
	 */
	@NotNull
	@SerializedName(""setting_type"")
	protected SettingType type;

	/**
	 * Gets the {@link #type}.
	 *
	 * @return the {@link #type}.
	 */
	public SettingType getType() {
		return type;
	}

	/**
	 * Sets the {@link #type}.
	 *
	 * @param type
	 *            the {@link #type} to set.
	 */
	public void setType(SettingType type) {
		this.type = type;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((type == null) ? 0 : type.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ThreadSettingsBaseRequest other = (ThreadSettingsBaseRequest) obj;
		if (type != other.type)
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""ThreadSettingsBaseRequest [type="" + type + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.api.threadsettings; public abstract class ThreadSettingsBaseRequest implements Serializable { private static final long serialVersionUID = 1L; @NotNull
	@SerializedName(""setting_type"")
	protected SettingType type; public SettingType getType() { return type; } public void setType(SettingType type) { this.type = type; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((type == null) ? 0 : type.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ThreadSettingsBaseRequest other = (ThreadSettingsBaseRequest) obj; if (type != other.type)
			return false; return true; } @Override
	public String toString() { return ""ThreadSettingsBaseRequest [type="" + type + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.threadsettings; public abstract class ThreadSettingsBaseRequest implements Serializable { private static final long serialVersionUID = 1L; @NotNull
	@SerializedName(""setting_type"")
	protected SettingType type; public SettingType getType() { return type; } public void setType(SettingType type) { this.type = type; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((type == null) ? 0 : type.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ThreadSettingsBaseRequest other = (ThreadSettingsBaseRequest) obj; if (type != other.type)
			return false; return true; } @Override
	public String toString() { return ""ThreadSettingsBaseRequest [type="" + type + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.threadsettings; 
import java.io.Serializable; 
import javax.validation.constraints.NotNull; 
import com.google.gson.annotations.SerializedName; 
  public abstract class ThreadSettingsBaseRequest implements Serializable { /**
 * Base request for a Thread Setting configuration.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings""
 *      >Facebook's Messenger Platform Thread Settings Documentation</a>
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @NotNull
	@SerializedName(""setting_type"")
	protected SettingType type; /**
	 * The type of setting to change.
	 */  public SettingType getType() { return type; } /**
	 * Gets the {@link #type}.
	 *
	 * @return the {@link #type}.
	 */  public void setType(SettingType type) { this.type = type; } /**
	 * Sets the {@link #type}.
	 *
	 * @param type
	 *            the {@link #type} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((type == null) ? 0 : type.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ThreadSettingsBaseRequest other = (ThreadSettingsBaseRequest) obj; if (type != other.type)
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""ThreadSettingsBaseRequest [type="" + type + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/api/threadsettings/ThreadState.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.threadsettings;


/**
 * Enum that represents the Facebook Thread state.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings""
 *      >Facebook's Messenger Platform Thread Settings Documentation</a>
 * 
 */
public enum ThreadState {

	/**
	 * Used for the Get Started Button.
	 */
	NEW_THREAD,

	/**
	 * Used for the Persistent Menu.
	 */
	EXISTING_THREAD;
}
",package co.aurasphere.botmill.fb.model.api.threadsettings; public enum ThreadState { EXISTING_THREAD; },0 0 0 0 0,package co.aurasphere.botmill.fb.model.api.threadsettings; public enum ThreadState { EXISTING_THREAD; } ,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.threadsettings; 
  public enum ThreadState { /**
 * Enum that represents the Facebook Thread state.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings""
 *      >Facebook's Messenger Platform Thread Settings Documentation</a>
 * 
 */  /**
	 * Used for the Get Started Button.
	 */  EXISTING_THREAD; } /**
	 * Used for the Persistent Menu.
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/api/threadsettings/WhitelistDomainRequest.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.threadsettings;

import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotEmpty;

import com.google.gson.annotations.SerializedName;


/**
 * The Class WhitelistDomainRequest.
 * 
 * @author Alvin Reyes
 */
public class WhitelistDomainRequest extends ThreadSettingsBaseRequest {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The domain action type. */
	@NotNull
	@SerializedName(""domain_action_type"")
	private DomainActionType domainActionType;

	/** The white listed domains. */
	@Valid
	@Size(max = 5)
	@NotEmpty
	@SerializedName(""whitelisted_domains"")
	private List<String> whiteListedDomains;

	/**
	 * Instantiates a new whitelist domain request.
	 */
	public WhitelistDomainRequest() {
		this.whiteListedDomains = new ArrayList<String>();
		this.type = SettingType.DOMAIN_WHITELISTING;
	}

	/**
	 * Instantiates a new whitelist domain request.
	 *
	 * @param whiteListedDomains
	 *            the white listed domains
	 */
	public WhitelistDomainRequest(List<String> whiteListedDomains) {
		this.whiteListedDomains = whiteListedDomains;
		this.type = SettingType.DOMAIN_WHITELISTING;
	}

	/**
	 * Instantiates a new whitelist domain request.
	 *
	 * @param whiteListedDomains
	 *            the white listed domains
	 * @param domainActionType
	 *            the domain action type
	 */
	public WhitelistDomainRequest(List<String> whiteListedDomains,
			DomainActionType domainActionType) {
		this.whiteListedDomains = whiteListedDomains;
		this.domainActionType = domainActionType;
		this.type = SettingType.DOMAIN_WHITELISTING;
	}

	/**
	 * Gets the domain action type.
	 *
	 * @return the domain action type
	 */
	public DomainActionType getDomainActionType() {
		return domainActionType;
	}

	/**
	 * Sets the domain action type.
	 *
	 * @param domainActionType
	 *            the new domain action type
	 */
	public void setDomainActionType(DomainActionType domainActionType) {
		this.domainActionType = domainActionType;
	}

	/**
	 * Gets the white listed domains.
	 *
	 * @return the white listed domains
	 */
	public List<String> getWhiteListedDomains() {
		return whiteListedDomains;
	}

	/**
	 * Sets the white listed domains.
	 *
	 * @param whiteListedDomains
	 *            the new white listed domains
	 */
	public void setWhiteListedDomains(List<String> whiteListedDomains) {
		this.whiteListedDomains = whiteListedDomains;
	}

	/**
	 * Adds the white listed domain.
	 *
	 * @param domain
	 *            the domain
	 */
	public void addWhiteListedDomain(String domain) {
		this.whiteListedDomains.add(domain);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.threadsettings.ThreadSettingsBaseRequest
	 * #hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime
				* result
				+ ((domainActionType == null) ? 0 : domainActionType.hashCode());
		result = prime
				* result
				+ ((whiteListedDomains == null) ? 0 : whiteListedDomains
						.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.threadsettings.ThreadSettingsBaseRequest
	 * #equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		WhitelistDomainRequest other = (WhitelistDomainRequest) obj;
		if (domainActionType != other.domainActionType)
			return false;
		if (whiteListedDomains == null) {
			if (other.whiteListedDomains != null)
				return false;
		} else if (!whiteListedDomains.equals(other.whiteListedDomains))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.threadsettings.ThreadSettingsBaseRequest
	 * #toString()
	 */
	@Override
	public String toString() {
		return ""WhitelistDomainRequest [domainActionType="" + domainActionType
				+ "", whiteListedDomains="" + whiteListedDomains + "", type=""
				+ type + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.api.threadsettings; public class WhitelistDomainRequest extends ThreadSettingsBaseRequest { private static final long serialVersionUID = 1L; @NotNull
	@SerializedName(""domain_action_type"")
	private DomainActionType domainActionType; @Valid
	@Size(max = 5)
	@NotEmpty
	@SerializedName(""whitelisted_domains"")
	private List<String> whiteListedDomains; public WhitelistDomainRequest() { this.whiteListedDomains = new ArrayList<String>(); this.type = SettingType.DOMAIN_WHITELISTING; } public WhitelistDomainRequest(List<String> whiteListedDomains) { this.whiteListedDomains = whiteListedDomains; this.type = SettingType.DOMAIN_WHITELISTING; } public WhitelistDomainRequest(List<String> whiteListedDomains,
			DomainActionType domainActionType) { this.whiteListedDomains = whiteListedDomains; this.domainActionType = domainActionType; this.type = SettingType.DOMAIN_WHITELISTING; } public DomainActionType getDomainActionType() { return domainActionType; } public void setDomainActionType(DomainActionType domainActionType) { this.domainActionType = domainActionType; } public List<String> getWhiteListedDomains() { return whiteListedDomains; } public void setWhiteListedDomains(List<String> whiteListedDomains) { this.whiteListedDomains = whiteListedDomains; } public void addWhiteListedDomain(String domain) { this.whiteListedDomains.add(domain); } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime
				* result
				+ ((domainActionType == null) ? 0 : domainActionType.hashCode()); result = prime
				* result
				+ ((whiteListedDomains == null) ? 0 : whiteListedDomains
						.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; WhitelistDomainRequest other = (WhitelistDomainRequest) obj; if (domainActionType != other.domainActionType)
			return false; if (whiteListedDomains == null) { if (other.whiteListedDomains != null)
				return false; } else if (!whiteListedDomains.equals(other.whiteListedDomains))
			return false; return true; } @Override
	public String toString() { return ""WhitelistDomainRequest [domainActionType="" + domainActionType
				+ "", whiteListedDomains="" + whiteListedDomains + "", type=""
				+ type + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.threadsettings; public class WhitelistDomainRequest extends ThreadSettingsBaseRequest { private static final long serialVersionUID = 1L; @NotNull
	@SerializedName(""domain_action_type"")
	private DomainActionType domainActionType; @Valid
	@Size(max = 5)
	@NotEmpty
	@SerializedName(""whitelisted_domains"")
	private List<String> whiteListedDomains; public WhitelistDomainRequest() { this.whiteListedDomains = new ArrayList<String>(); this.type = SettingType.DOMAIN_WHITELISTING; } public WhitelistDomainRequest(List<String> whiteListedDomains) { this.whiteListedDomains = whiteListedDomains; this.type = SettingType.DOMAIN_WHITELISTING; } public WhitelistDomainRequest(List<String> whiteListedDomains,
			DomainActionType domainActionType) { this.whiteListedDomains = whiteListedDomains; this.domainActionType = domainActionType; this.type = SettingType.DOMAIN_WHITELISTING; } public DomainActionType getDomainActionType() { return domainActionType; } public void setDomainActionType(DomainActionType domainActionType) { this.domainActionType = domainActionType; } public List<String> getWhiteListedDomains() { return whiteListedDomains; } public void setWhiteListedDomains(List<String> whiteListedDomains) { this.whiteListedDomains = whiteListedDomains; } public void addWhiteListedDomain(String domain) { this.whiteListedDomains.add(domain); } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime
				* result
				+ ((domainActionType == null) ? 0 : domainActionType.hashCode()); result = prime
				* result
				+ ((whiteListedDomains == null) ? 0 : whiteListedDomains
						.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; WhitelistDomainRequest other = (WhitelistDomainRequest) obj; if (domainActionType != other.domainActionType)
			return false; if (whiteListedDomains == null) { if (other.whiteListedDomains != null)
				return false; } else if (!whiteListedDomains.equals(other.whiteListedDomains))
			return false; return true; } @Override
	public String toString() { return ""WhitelistDomainRequest [domainActionType="" + domainActionType
				+ "", whiteListedDomains="" + whiteListedDomains + "", type=""
				+ type + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.threadsettings; 
import java.util.ArrayList; import java.util.List; 
import javax.validation.Valid; import javax.validation.constraints.NotNull; import javax.validation.constraints.Size; 
import org.hibernate.validator.constraints.NotEmpty; 
import com.google.gson.annotations.SerializedName; 
  public class WhitelistDomainRequest extends ThreadSettingsBaseRequest { /**
 * The Class WhitelistDomainRequest.
 * 
 * @author Alvin Reyes
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @NotNull
	@SerializedName(""domain_action_type"")
	private DomainActionType domainActionType; /** The domain action type. */  @Valid
	@Size(max = 5)
	@NotEmpty
	@SerializedName(""whitelisted_domains"")
	private List<String> whiteListedDomains; /** The white listed domains. */  public WhitelistDomainRequest() { this.whiteListedDomains = new ArrayList<String>(); this.type = SettingType.DOMAIN_WHITELISTING; } /**
	 * Instantiates a new whitelist domain request.
	 */  public WhitelistDomainRequest(List<String> whiteListedDomains) { this.whiteListedDomains = whiteListedDomains; this.type = SettingType.DOMAIN_WHITELISTING; } /**
	 * Instantiates a new whitelist domain request.
	 *
	 * @param whiteListedDomains
	 *            the white listed domains
	 */  public WhitelistDomainRequest(List<String> whiteListedDomains,
			DomainActionType domainActionType) { this.whiteListedDomains = whiteListedDomains; this.domainActionType = domainActionType; this.type = SettingType.DOMAIN_WHITELISTING; } /**
	 * Instantiates a new whitelist domain request.
	 *
	 * @param whiteListedDomains
	 *            the white listed domains
	 * @param domainActionType
	 *            the domain action type
	 */  public DomainActionType getDomainActionType() { return domainActionType; } /**
	 * Gets the domain action type.
	 *
	 * @return the domain action type
	 */  public void setDomainActionType(DomainActionType domainActionType) { this.domainActionType = domainActionType; } /**
	 * Sets the domain action type.
	 *
	 * @param domainActionType
	 *            the new domain action type
	 */  public List<String> getWhiteListedDomains() { return whiteListedDomains; } /**
	 * Gets the white listed domains.
	 *
	 * @return the white listed domains
	 */  public void setWhiteListedDomains(List<String> whiteListedDomains) { this.whiteListedDomains = whiteListedDomains; } /**
	 * Sets the white listed domains.
	 *
	 * @param whiteListedDomains
	 *            the new white listed domains
	 */  public void addWhiteListedDomain(String domain) { this.whiteListedDomains.add(domain); } /**
	 * Adds the white listed domain.
	 *
	 * @param domain
	 *            the domain
	 */  @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime
				* result
				+ ((domainActionType == null) ? 0 : domainActionType.hashCode()); result = prime
				* result
				+ ((whiteListedDomains == null) ? 0 : whiteListedDomains
						.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.threadsettings.ThreadSettingsBaseRequest
	 * #hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; WhitelistDomainRequest other = (WhitelistDomainRequest) obj; if (domainActionType != other.domainActionType)
			return false; if (whiteListedDomains == null) { if (other.whiteListedDomains != null)
				return false; } else if (!whiteListedDomains.equals(other.whiteListedDomains))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.threadsettings.ThreadSettingsBaseRequest
	 * #equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""WhitelistDomainRequest [domainActionType="" + domainActionType
				+ "", whiteListedDomains="" + whiteListedDomains + "", type=""
				+ type + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.threadsettings.ThreadSettingsBaseRequest
	 * #toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/api/upload/UploadAttachmentResponse.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.upload;

import java.io.Serializable;

import com.google.gson.annotations.SerializedName;

import co.aurasphere.botmill.fb.api.UploadApi;


/**
 * Response class used by {@link UploadApi#uploadAttachment}.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */
public class UploadAttachmentResponse implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The id of the uploaded attachment.
	 */
	@SerializedName(""attachment_id"")
	private String attachmentId;

	/**
	 * Gets the {@link #attachmentId}.
	 *
	 * @return the {@link #attachmentId}.
	 */
	public String getAttachmentId() {
		return attachmentId;
	}

	/**
	 * Sets the {@link #attachmentId}.
	 *
	 * @param attachmentId
	 *            the {@link #attachmentId} to set.
	 */
	public void setAttachmentId(String attachmentId) {
		this.attachmentId = attachmentId;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((attachmentId == null) ? 0 : attachmentId.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		UploadAttachmentResponse other = (UploadAttachmentResponse) obj;
		if (attachmentId == null) {
			if (other.attachmentId != null)
				return false;
		} else if (!attachmentId.equals(other.attachmentId))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""UploadAttachmentResponse [attachmentId="" + attachmentId + ""]"";
	}

}","package co.aurasphere.botmill.fb.model.api.upload; public class UploadAttachmentResponse implements Serializable { private static final long serialVersionUID = 1L; @SerializedName(""attachment_id"")
	private String attachmentId; public String getAttachmentId() { return attachmentId; } public void setAttachmentId(String attachmentId) { this.attachmentId = attachmentId; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((attachmentId == null) ? 0 : attachmentId.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; UploadAttachmentResponse other = (UploadAttachmentResponse) obj; if (attachmentId == null) { if (other.attachmentId != null)
				return false; } else if (!attachmentId.equals(other.attachmentId))
			return false; return true; } @Override
	public String toString() { return ""UploadAttachmentResponse [attachmentId="" + attachmentId + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.upload; public class UploadAttachmentResponse implements Serializable { private static final long serialVersionUID = 1L; @SerializedName(""attachment_id"")
	private String attachmentId; public String getAttachmentId() { return attachmentId; } public void setAttachmentId(String attachmentId) { this.attachmentId = attachmentId; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((attachmentId == null) ? 0 : attachmentId.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; UploadAttachmentResponse other = (UploadAttachmentResponse) obj; if (attachmentId == null) { if (other.attachmentId != null)
				return false; } else if (!attachmentId.equals(other.attachmentId))
			return false; return true; } @Override
	public String toString() { return ""UploadAttachmentResponse [attachmentId="" + attachmentId + ""]""; } }","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.upload; 
import java.io.Serializable; 
import com.google.gson.annotations.SerializedName; 
import co.aurasphere.botmill.fb.api.UploadApi; 
  public class UploadAttachmentResponse implements Serializable { /**
 * Response class used by {@link UploadApi#uploadAttachment}.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @SerializedName(""attachment_id"")
	private String attachmentId; /**
	 * The id of the uploaded attachment.
	 */  public String getAttachmentId() { return attachmentId; } /**
	 * Gets the {@link #attachmentId}.
	 *
	 * @return the {@link #attachmentId}.
	 */  public void setAttachmentId(String attachmentId) { this.attachmentId = attachmentId; } /**
	 * Sets the {@link #attachmentId}.
	 *
	 * @param attachmentId
	 *            the {@link #attachmentId} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((attachmentId == null) ? 0 : attachmentId.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; UploadAttachmentResponse other = (UploadAttachmentResponse) obj; if (attachmentId == null) { if (other.attachmentId != null)
				return false; } else if (!attachmentId.equals(other.attachmentId))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""UploadAttachmentResponse [attachmentId="" + attachmentId + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }"
src/main/java/co/aurasphere/botmill/fb/model/api/userprofile/FacebookUserProfile.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.userprofile;

import java.io.Serializable;

import com.google.gson.annotations.SerializedName;


/**
 * Model for the User Profile API. <br>
 * <br>
 * The profile API can be used to query more information about the user, and
 * personalize the experience further. This API is only available after the user
 * initiated the conversation by sending a message or by interacting with a <a
 * href=
 * ""https://developers.facebook.com/docs/messenger-platform/plugin-reference"" >
 * Web Plugin</a>. <br>
 * <br>
 * If the conversation was initiated by using a phone number (customer
 * matching]), you will only be able to use this API after the user replied to
 * your message. <br>
 * <br>
 * The information at this API is only available after a person has sent a
 * message to your bot or clicked the ""Send to Messenger"" plugin. If you call
 * the API before these actions, then you will receive an empty result. You will
 * also receive an empty result if a person has revoked platform permissions on
 * Facebook.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/user-profile"" >
 *      Facebook's Messenger User Profile Reference Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/plugin-reference""
 *      > Facebook's Messenger Platform Plugin Reference Documentation</a>
 * 
 */
public class FacebookUserProfile implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * First name.
	 */
	@SerializedName(""first_name"")
	private String firstName;

	/**
	 * Last name.
	 */
	@SerializedName(""last_name"")
	private String lastName;

	/**
	 * Profile picture.
	 */
	@SerializedName(""profile_pic"")
	private String profilePic;

	/**
	 * Locale of the user on Facebook.
	 */
	private String locale;

	/**
	 * Timezone, number relative to GMT.
	 */
	private String timezone;

	/**
	 * Gender.
	 */
	private Gender gender;

	/**
	 * Is the user eligible to receive messenger platform payment messages.
	 */
	@SerializedName(""is_payment_enabled"")
	private boolean isPaymentEnabled;

	/**
	 * Gets the {@link #firstName}.
	 *
	 * @return the {@link #firstName}.
	 */
	public String getFirstName() {
		return firstName;
	}

	/**
	 * Sets the {@link #firstName}.
	 *
	 * @param firstName
	 *            the {@link #firstName} to set.
	 */
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	/**
	 * Gets the {@link #lastName}.
	 *
	 * @return the {@link #lastName}.
	 */
	public String getLastName() {
		return lastName;
	}

	/**
	 * Sets the {@link #lastName}.
	 *
	 * @param lastName
	 *            the {@link #lastName} to set.
	 */
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	/**
	 * Gets the {@link #profilePic}.
	 *
	 * @return the {@link #profilePic}.
	 */
	public String getProfilePic() {
		return profilePic;
	}

	/**
	 * Sets the {@link #profilePic}.
	 *
	 * @param profilePic
	 *            the {@link #profilePic} to set.
	 */
	public void setProfilePic(String profilePic) {
		this.profilePic = profilePic;
	}

	/**
	 * Gets the {@link #locale}.
	 *
	 * @return the {@link #locale}.
	 */
	public String getLocale() {
		return locale;
	}

	/**
	 * Sets the {@link #locale}.
	 *
	 * @param locale
	 *            the {@link #locale} to set.
	 */
	public void setLocale(String locale) {
		this.locale = locale;
	}

	/**
	 * Gets the {@link #timezone}.
	 *
	 * @return the {@link #timezone}.
	 */
	public String getTimezone() {
		return timezone;
	}

	/**
	 * Sets the {@link #timezone}.
	 *
	 * @param timezone
	 *            the {@link #timezone} to set.
	 */
	public void setTimezone(String timezone) {
		this.timezone = timezone;
	}

	/**
	 * Gets the {@link #gender}.
	 *
	 * @return the {@link #gender}.
	 */
	public Gender getGender() {
		return gender;
	}

	/**
	 * Sets the {@link #gender}.
	 *
	 * @param gender
	 *            the {@link #gender} to set.
	 */
	public void setGender(Gender gender) {
		this.gender = gender;
	}

	/**
	 * Checks if is payment enabled.
	 *
	 * @return the {#isPaymentEnabled}.
	 */
	public boolean isPaymentEnabled() {
		return isPaymentEnabled;
	}

	/**
	 * Sets the {@link #isPaymentEnabled}.
	 *
	 * @param isPaymentEnabled
	 *            the {@link #isPaymentEnabled} to set.
	 */
	public void setPaymentEnabled(boolean isPaymentEnabled) {
		this.isPaymentEnabled = isPaymentEnabled;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((firstName == null) ? 0 : firstName.hashCode());
		result = prime * result + ((gender == null) ? 0 : gender.hashCode());
		result = prime * result + (isPaymentEnabled ? 1231 : 1237);
		result = prime * result
				+ ((lastName == null) ? 0 : lastName.hashCode());
		result = prime * result + ((locale == null) ? 0 : locale.hashCode());
		result = prime * result
				+ ((profilePic == null) ? 0 : profilePic.hashCode());
		result = prime * result + timezone.hashCode();
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		FacebookUserProfile other = (FacebookUserProfile) obj;
		if (firstName == null) {
			if (other.firstName != null)
				return false;
		} else if (!firstName.equals(other.firstName))
			return false;
		if (gender != other.gender)
			return false;
		if (isPaymentEnabled != other.isPaymentEnabled)
			return false;
		if (lastName == null) {
			if (other.lastName != null)
				return false;
		} else if (!lastName.equals(other.lastName))
			return false;
		if (locale == null) {
			if (other.locale != null)
				return false;
		} else if (!locale.equals(other.locale))
			return false;
		if (profilePic == null) {
			if (other.profilePic != null)
				return false;
		} else if (!profilePic.equals(other.profilePic))
			return false;
		if (timezone != other.timezone)
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""FacebookUserProfile [firstName="" + firstName + "", lastName=""
				+ lastName + "", profilePic="" + profilePic + "", locale=""
				+ locale + "", timezone="" + timezone + "", gender="" + gender
				+ "", isPaymentEnabled="" + isPaymentEnabled + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.api.userprofile; public class FacebookUserProfile implements Serializable { private static final long serialVersionUID = 1L; @SerializedName(""first_name"")
	private String firstName; @SerializedName(""last_name"")
	private String lastName; @SerializedName(""profile_pic"")
	private String profilePic; private String locale; private String timezone; private Gender gender; @SerializedName(""is_payment_enabled"")
	private boolean isPaymentEnabled; public String getFirstName() { return firstName; } public void setFirstName(String firstName) { this.firstName = firstName; } public String getLastName() { return lastName; } public void setLastName(String lastName) { this.lastName = lastName; } public String getProfilePic() { return profilePic; } public void setProfilePic(String profilePic) { this.profilePic = profilePic; } public String getLocale() { return locale; } public void setLocale(String locale) { this.locale = locale; } public String getTimezone() { return timezone; } public void setTimezone(String timezone) { this.timezone = timezone; } public Gender getGender() { return gender; } public void setGender(Gender gender) { this.gender = gender; } public boolean isPaymentEnabled() { return isPaymentEnabled; } public void setPaymentEnabled(boolean isPaymentEnabled) { this.isPaymentEnabled = isPaymentEnabled; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((firstName == null) ? 0 : firstName.hashCode()); result = prime * result + ((gender == null) ? 0 : gender.hashCode()); result = prime * result + (isPaymentEnabled ? 1231 : 1237); result = prime * result
				+ ((lastName == null) ? 0 : lastName.hashCode()); result = prime * result + ((locale == null) ? 0 : locale.hashCode()); result = prime * result
				+ ((profilePic == null) ? 0 : profilePic.hashCode()); result = prime * result + timezone.hashCode(); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FacebookUserProfile other = (FacebookUserProfile) obj; if (firstName == null) { if (other.firstName != null)
				return false; } else if (!firstName.equals(other.firstName))
			return false; if (gender != other.gender)
			return false; if (isPaymentEnabled != other.isPaymentEnabled)
			return false; if (lastName == null) { if (other.lastName != null)
				return false; } else if (!lastName.equals(other.lastName))
			return false; if (locale == null) { if (other.locale != null)
				return false; } else if (!locale.equals(other.locale))
			return false; if (profilePic == null) { if (other.profilePic != null)
				return false; } else if (!profilePic.equals(other.profilePic))
			return false; if (timezone != other.timezone)
			return false; return true; } @Override
	public String toString() { return ""FacebookUserProfile [firstName="" + firstName + "", lastName=""
				+ lastName + "", profilePic="" + profilePic + "", locale=""
				+ locale + "", timezone="" + timezone + "", gender="" + gender
				+ "", isPaymentEnabled="" + isPaymentEnabled + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.userprofile; public class FacebookUserProfile implements Serializable { private static final long serialVersionUID = 1L; @SerializedName(""first_name"")
	private String firstName; @SerializedName(""last_name"")
	private String lastName; @SerializedName(""profile_pic"")
	private String profilePic; private String locale; private String timezone; private Gender gender; @SerializedName(""is_payment_enabled"")
	private boolean isPaymentEnabled; public String getFirstName() { return firstName; } public void setFirstName(String firstName) { this.firstName = firstName; } public String getLastName() { return lastName; } public void setLastName(String lastName) { this.lastName = lastName; } public String getProfilePic() { return profilePic; } public void setProfilePic(String profilePic) { this.profilePic = profilePic; } public String getLocale() { return locale; } public void setLocale(String locale) { this.locale = locale; } public String getTimezone() { return timezone; } public void setTimezone(String timezone) { this.timezone = timezone; } public Gender getGender() { return gender; } public void setGender(Gender gender) { this.gender = gender; } public boolean isPaymentEnabled() { return isPaymentEnabled; } public void setPaymentEnabled(boolean isPaymentEnabled) { this.isPaymentEnabled = isPaymentEnabled; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((firstName == null) ? 0 : firstName.hashCode()); result = prime * result + ((gender == null) ? 0 : gender.hashCode()); result = prime * result + (isPaymentEnabled ? 1231 : 1237); result = prime * result
				+ ((lastName == null) ? 0 : lastName.hashCode()); result = prime * result + ((locale == null) ? 0 : locale.hashCode()); result = prime * result
				+ ((profilePic == null) ? 0 : profilePic.hashCode()); result = prime * result + timezone.hashCode(); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FacebookUserProfile other = (FacebookUserProfile) obj; if (firstName == null) { if (other.firstName != null)
				return false; } else if (!firstName.equals(other.firstName))
			return false; if (gender != other.gender)
			return false; if (isPaymentEnabled != other.isPaymentEnabled)
			return false; if (lastName == null) { if (other.lastName != null)
				return false; } else if (!lastName.equals(other.lastName))
			return false; if (locale == null) { if (other.locale != null)
				return false; } else if (!locale.equals(other.locale))
			return false; if (profilePic == null) { if (other.profilePic != null)
				return false; } else if (!profilePic.equals(other.profilePic))
			return false; if (timezone != other.timezone)
			return false; return true; } @Override
	public String toString() { return ""FacebookUserProfile [firstName="" + firstName + "", lastName=""
				+ lastName + "", profilePic="" + profilePic + "", locale=""
				+ locale + "", timezone="" + timezone + "", gender="" + gender
				+ "", isPaymentEnabled="" + isPaymentEnabled + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.userprofile; 
import java.io.Serializable; 
import com.google.gson.annotations.SerializedName; 
  public class FacebookUserProfile implements Serializable { /**
 * Model for the User Profile API. <br>
 * <br>
 * The profile API can be used to query more information about the user, and
 * personalize the experience further. This API is only available after the user
 * initiated the conversation by sending a message or by interacting with a <a
 * href=
 * ""https://developers.facebook.com/docs/messenger-platform/plugin-reference"" >
 * Web Plugin</a>. <br>
 * <br>
 * If the conversation was initiated by using a phone number (customer
 * matching]), you will only be able to use this API after the user replied to
 * your message. <br>
 * <br>
 * The information at this API is only available after a person has sent a
 * message to your bot or clicked the ""Send to Messenger"" plugin. If you call
 * the API before these actions, then you will receive an empty result. You will
 * also receive an empty result if a person has revoked platform permissions on
 * Facebook.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/user-profile"" >
 *      Facebook's Messenger User Profile Reference Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/plugin-reference""
 *      > Facebook's Messenger Platform Plugin Reference Documentation</a>
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @SerializedName(""first_name"")
	private String firstName; /**
	 * First name.
	 */  @SerializedName(""last_name"")
	private String lastName; /**
	 * Last name.
	 */  @SerializedName(""profile_pic"")
	private String profilePic; /**
	 * Profile picture.
	 */  private String locale; /**
	 * Locale of the user on Facebook.
	 */  private String timezone; /**
	 * Timezone, number relative to GMT.
	 */  private Gender gender; /**
	 * Gender.
	 */  @SerializedName(""is_payment_enabled"")
	private boolean isPaymentEnabled; /**
	 * Is the user eligible to receive messenger platform payment messages.
	 */  public String getFirstName() { return firstName; } /**
	 * Gets the {@link #firstName}.
	 *
	 * @return the {@link #firstName}.
	 */  public void setFirstName(String firstName) { this.firstName = firstName; } /**
	 * Sets the {@link #firstName}.
	 *
	 * @param firstName
	 *            the {@link #firstName} to set.
	 */  public String getLastName() { return lastName; } /**
	 * Gets the {@link #lastName}.
	 *
	 * @return the {@link #lastName}.
	 */  public void setLastName(String lastName) { this.lastName = lastName; } /**
	 * Sets the {@link #lastName}.
	 *
	 * @param lastName
	 *            the {@link #lastName} to set.
	 */  public String getProfilePic() { return profilePic; } /**
	 * Gets the {@link #profilePic}.
	 *
	 * @return the {@link #profilePic}.
	 */  public void setProfilePic(String profilePic) { this.profilePic = profilePic; } /**
	 * Sets the {@link #profilePic}.
	 *
	 * @param profilePic
	 *            the {@link #profilePic} to set.
	 */  public String getLocale() { return locale; } /**
	 * Gets the {@link #locale}.
	 *
	 * @return the {@link #locale}.
	 */  public void setLocale(String locale) { this.locale = locale; } /**
	 * Sets the {@link #locale}.
	 *
	 * @param locale
	 *            the {@link #locale} to set.
	 */  public String getTimezone() { return timezone; } /**
	 * Gets the {@link #timezone}.
	 *
	 * @return the {@link #timezone}.
	 */  public void setTimezone(String timezone) { this.timezone = timezone; } /**
	 * Sets the {@link #timezone}.
	 *
	 * @param timezone
	 *            the {@link #timezone} to set.
	 */  public Gender getGender() { return gender; } /**
	 * Gets the {@link #gender}.
	 *
	 * @return the {@link #gender}.
	 */  public void setGender(Gender gender) { this.gender = gender; } /**
	 * Sets the {@link #gender}.
	 *
	 * @param gender
	 *            the {@link #gender} to set.
	 */  public boolean isPaymentEnabled() { return isPaymentEnabled; } /**
	 * Checks if is payment enabled.
	 *
	 * @return the {#isPaymentEnabled}.
	 */  public void setPaymentEnabled(boolean isPaymentEnabled) { this.isPaymentEnabled = isPaymentEnabled; } /**
	 * Sets the {@link #isPaymentEnabled}.
	 *
	 * @param isPaymentEnabled
	 *            the {@link #isPaymentEnabled} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((firstName == null) ? 0 : firstName.hashCode()); result = prime * result + ((gender == null) ? 0 : gender.hashCode()); result = prime * result + (isPaymentEnabled ? 1231 : 1237); result = prime * result
				+ ((lastName == null) ? 0 : lastName.hashCode()); result = prime * result + ((locale == null) ? 0 : locale.hashCode()); result = prime * result
				+ ((profilePic == null) ? 0 : profilePic.hashCode()); result = prime * result + timezone.hashCode(); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FacebookUserProfile other = (FacebookUserProfile) obj; if (firstName == null) { if (other.firstName != null)
				return false; } else if (!firstName.equals(other.firstName))
			return false; if (gender != other.gender)
			return false; if (isPaymentEnabled != other.isPaymentEnabled)
			return false; if (lastName == null) { if (other.lastName != null)
				return false; } else if (!lastName.equals(other.lastName))
			return false; if (locale == null) { if (other.locale != null)
				return false; } else if (!locale.equals(other.locale))
			return false; if (profilePic == null) { if (other.profilePic != null)
				return false; } else if (!profilePic.equals(other.profilePic))
			return false; if (timezone != other.timezone)
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""FacebookUserProfile [firstName="" + firstName + "", lastName=""
				+ lastName + "", profilePic="" + profilePic + "", locale=""
				+ locale + "", timezone="" + timezone + "", gender="" + gender
				+ "", isPaymentEnabled="" + isPaymentEnabled + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/api/userprofile/Gender.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.userprofile;

import com.google.gson.annotations.SerializedName;


/**
 * Enumeration used for the deserialization of the gender in the user profile.
 * 
 * @author Donato Rimenti
 * 
 */
public enum Gender {

	/**
	 * The male gender.
	 */
	@SerializedName(""male"") MALE,

	/**
	 * The female gender.
	 */
	@SerializedName(""female"") FEMALE;

}
","package co.aurasphere.botmill.fb.model.api.userprofile; public enum Gender { @SerializedName(""female"") FEMALE; }",0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.userprofile; public enum Gender { @SerializedName(""female"") FEMALE; } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.userprofile; 
import com.google.gson.annotations.SerializedName; 
  public enum Gender { /**
 * Enumeration used for the deserialization of the gender in the user profile.
 * 
 * @author Donato Rimenti
 * 
 */  /**
	 * The male gender.
	 */  @SerializedName(""female"") FEMALE; /**
	 * The female gender.
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/incoming/callback/AccountLinking.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming.callback;

import java.io.Serializable;

import com.google.gson.annotations.SerializedName;


/**
 * Model for an account linking callback. <br>
 * <br>
 * This callback will occur when the <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/account-linking/link-account""
 * >Linked Account</a> or <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/account-linking/unlink-account""
 * >Unlink Account</a> call-to-action have been tapped. The status parameter is
 * set to inform you whether the user linked or unlinked their account. The
 * authorization_code is a pass-through parameter. allowing you to match the
 * business user entity to the page-scoped ID (PSID) of the sender.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference/account-linking""
 *      >Facebook's Messenger Platform Account Linking Callback
 *      Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/account-linking""
 *      >Facebook's Messenger Platform Account Linking Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/account-linking/link-account""
 *      >Facebook's Messenger Platform Link Account Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/account-linking/unlink-account""
 *      >Facebook's Messenger Platform Unlink Account Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 *      >Facebook's Messenger Platform Webhook Setup Documentation</a>
 * 
 */
public class AccountLinking implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * May be linked or unlinked.
	 */
	private AccountLinkingStatus status;

	/**
	 * Value of pass-through authorization_code provided in the Linking Account
	 * flow. This is only available when status is linked.
	 */
	@SerializedName(""authorization_code"")
	private String authorizationCode;

	/**
	 * Gets the {@link #status}.
	 *
	 * @return the {@link #status}.
	 */
	public AccountLinkingStatus getStatus() {
		return status;
	}

	/**
	 * Sets the {@link #status}.
	 *
	 * @param status
	 *            the {@link #status} to set.
	 */
	public void setStatus(AccountLinkingStatus status) {
		this.status = status;
	}

	/**
	 * Gets the {@link #authorizationCode}.
	 *
	 * @return the {@link #authorizationCode}.
	 */
	public String getAuthorizationCode() {
		return authorizationCode;
	}

	/**
	 * Sets the {@link #authorizationCode}.
	 *
	 * @param authorizationCode
	 *            the {@link #authorizationCode} to set.
	 */
	public void setAuthorizationCode(String authorizationCode) {
		this.authorizationCode = authorizationCode;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime
				* result
				+ ((authorizationCode == null) ? 0 : authorizationCode
						.hashCode());
		result = prime * result + ((status == null) ? 0 : status.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		AccountLinking other = (AccountLinking) obj;
		if (authorizationCode == null) {
			if (other.authorizationCode != null)
				return false;
		} else if (!authorizationCode.equals(other.authorizationCode))
			return false;
		if (status == null) {
			if (other.status != null)
				return false;
		} else if (!status.equals(other.status))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""AccountLinking [status="" + status + "", authorizationCode=""
				+ authorizationCode + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.incoming.callback; public class AccountLinking implements Serializable { private static final long serialVersionUID = 1L; private AccountLinkingStatus status; @SerializedName(""authorization_code"")
	private String authorizationCode; public AccountLinkingStatus getStatus() { return status; } public void setStatus(AccountLinkingStatus status) { this.status = status; } public String getAuthorizationCode() { return authorizationCode; } public void setAuthorizationCode(String authorizationCode) { this.authorizationCode = authorizationCode; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime
				* result
				+ ((authorizationCode == null) ? 0 : authorizationCode
						.hashCode()); result = prime * result + ((status == null) ? 0 : status.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; AccountLinking other = (AccountLinking) obj; if (authorizationCode == null) { if (other.authorizationCode != null)
				return false; } else if (!authorizationCode.equals(other.authorizationCode))
			return false; if (status == null) { if (other.status != null)
				return false; } else if (!status.equals(other.status))
			return false; return true; } @Override
	public String toString() { return ""AccountLinking [status="" + status + "", authorizationCode=""
				+ authorizationCode + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.incoming.callback; public class AccountLinking implements Serializable { private static final long serialVersionUID = 1L; private AccountLinkingStatus status; @SerializedName(""authorization_code"")
	private String authorizationCode; public AccountLinkingStatus getStatus() { return status; } public void setStatus(AccountLinkingStatus status) { this.status = status; } public String getAuthorizationCode() { return authorizationCode; } public void setAuthorizationCode(String authorizationCode) { this.authorizationCode = authorizationCode; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime
				* result
				+ ((authorizationCode == null) ? 0 : authorizationCode
						.hashCode()); result = prime * result + ((status == null) ? 0 : status.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; AccountLinking other = (AccountLinking) obj; if (authorizationCode == null) { if (other.authorizationCode != null)
				return false; } else if (!authorizationCode.equals(other.authorizationCode))
			return false; if (status == null) { if (other.status != null)
				return false; } else if (!status.equals(other.status))
			return false; return true; } @Override
	public String toString() { return ""AccountLinking [status="" + status + "", authorizationCode=""
				+ authorizationCode + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming.callback; 
import java.io.Serializable; 
import com.google.gson.annotations.SerializedName; 
  public class AccountLinking implements Serializable { /**
 * Model for an account linking callback. <br>
 * <br>
 * This callback will occur when the <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/account-linking/link-account""
 * >Linked Account</a> or <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/account-linking/unlink-account""
 * >Unlink Account</a> call-to-action have been tapped. The status parameter is
 * set to inform you whether the user linked or unlinked their account. The
 * authorization_code is a pass-through parameter. allowing you to match the
 * business user entity to the page-scoped ID (PSID) of the sender.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference/account-linking""
 *      >Facebook's Messenger Platform Account Linking Callback
 *      Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/account-linking""
 *      >Facebook's Messenger Platform Account Linking Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/account-linking/link-account""
 *      >Facebook's Messenger Platform Link Account Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/account-linking/unlink-account""
 *      >Facebook's Messenger Platform Unlink Account Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 *      >Facebook's Messenger Platform Webhook Setup Documentation</a>
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  private AccountLinkingStatus status; /**
	 * May be linked or unlinked.
	 */  @SerializedName(""authorization_code"")
	private String authorizationCode; /**
	 * Value of pass-through authorization_code provided in the Linking Account
	 * flow. This is only available when status is linked.
	 */  public AccountLinkingStatus getStatus() { return status; } /**
	 * Gets the {@link #status}.
	 *
	 * @return the {@link #status}.
	 */  public void setStatus(AccountLinkingStatus status) { this.status = status; } /**
	 * Sets the {@link #status}.
	 *
	 * @param status
	 *            the {@link #status} to set.
	 */  public String getAuthorizationCode() { return authorizationCode; } /**
	 * Gets the {@link #authorizationCode}.
	 *
	 * @return the {@link #authorizationCode}.
	 */  public void setAuthorizationCode(String authorizationCode) { this.authorizationCode = authorizationCode; } /**
	 * Sets the {@link #authorizationCode}.
	 *
	 * @param authorizationCode
	 *            the {@link #authorizationCode} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime
				* result
				+ ((authorizationCode == null) ? 0 : authorizationCode
						.hashCode()); result = prime * result + ((status == null) ? 0 : status.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; AccountLinking other = (AccountLinking) obj; if (authorizationCode == null) { if (other.authorizationCode != null)
				return false; } else if (!authorizationCode.equals(other.authorizationCode))
			return false; if (status == null) { if (other.status != null)
				return false; } else if (!status.equals(other.status))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""AccountLinking [status="" + status + "", authorizationCode=""
				+ authorizationCode + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/incoming/callback/AccountLinkingStatus.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming.callback;

import com.google.gson.annotations.SerializedName;


/**
 * Status for {@link AccountLinking}.
 * 
 * @author Donato Rimenti
 */
public enum AccountLinkingStatus {
	
	/**
	 * The linked.
	 */
	@SerializedName(""linked"")
	LINKED,
	
	/**
	 * The unlinked.
	 */
	@SerializedName(""unlinked"")
	UNLINKED;

}
","package co.aurasphere.botmill.fb.model.incoming.callback; public enum AccountLinkingStatus { @SerializedName(""unlinked"")
	UNLINKED; }",0 0 0 0 0,"package co.aurasphere.botmill.fb.model.incoming.callback; public enum AccountLinkingStatus { @SerializedName(""unlinked"")
	UNLINKED; } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming.callback; 
import com.google.gson.annotations.SerializedName; 
  public enum AccountLinkingStatus { /**
 * Status for {@link AccountLinking}.
 * 
 * @author Donato Rimenti
 */ 	 /**
	 * The linked.
	 */ 	 @SerializedName(""unlinked"")
	UNLINKED; /**
	 * The unlinked.
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/incoming/callback/CheckoutUpdate.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming.callback;

import java.io.Serializable;

import co.aurasphere.botmill.fb.model.outcoming.template.button.BuyButton;

import com.google.gson.annotations.SerializedName;


/**
 * Model for a checkout update callback. <br>
 * <br>
 * This callback enables you to update pricing for flexible-amount transactions
 * on the checkout dialog displayed by the {@link BuyButton}. <br>
 * <br>
 * After the Buy Button is tapped, a call is made to the webhook containing the
 * person's shipping address. This enables you to update pricing with shipping
 * and taxes based on a person's location. This callback is made each time the
 * shipping address is changed. <br>
 * <br>
 * You can subscribe to this callback by selecting the
 * messaging_checkout_updates field when <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 * >setting up</a> your webhook.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference/checkout-update""
 *      >Facebook's Messenger Platform Checkout Update Callback
 *      Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/buy-button""
 *      >Facebook's Messenger Platform Buy Button Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 *      >Facebook's Messenger Platform Webhook Setup Documentation</a>
 * 
 */
public class CheckoutUpdate implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Metadata defined in the {@link BuyButton}.
	 */
	private String payload;

	/**
	 * The person's shipping address.
	 */
	@SerializedName(""shipping_address"")
	private ShippingAddress shippingAddress;

	/**
	 * Gets the {@link #payload}.
	 *
	 * @return the {@link #payload}.
	 */
	public String getPayload() {
		return payload;
	}

	/**
	 * Sets the {@link #payload}.
	 *
	 * @param payload
	 *            the {@link #payload} to set.
	 */
	public void setPayload(String payload) {
		this.payload = payload;
	}

	/**
	 * Gets the {@link #shippingAddress}.
	 *
	 * @return the {@link #shippingAddress}.
	 */
	public ShippingAddress getShippingAddress() {
		return shippingAddress;
	}

	/**
	 * Sets the {@link #shippingAddress}.
	 *
	 * @param shippingAddress
	 *            the {@link #shippingAddress} to set.
	 */
	public void setShippingAddress(ShippingAddress shippingAddress) {
		this.shippingAddress = shippingAddress;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((payload == null) ? 0 : payload.hashCode());
		result = prime * result
				+ ((shippingAddress == null) ? 0 : shippingAddress.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		CheckoutUpdate other = (CheckoutUpdate) obj;
		if (payload == null) {
			if (other.payload != null)
				return false;
		} else if (!payload.equals(other.payload))
			return false;
		if (shippingAddress == null) {
			if (other.shippingAddress != null)
				return false;
		} else if (!shippingAddress.equals(other.shippingAddress))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""CheckoutUpdate [payload="" + payload + "", shippingAddress=""
				+ shippingAddress + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.incoming.callback; public class CheckoutUpdate implements Serializable { private static final long serialVersionUID = 1L; private String payload; @SerializedName(""shipping_address"")
	private ShippingAddress shippingAddress; public String getPayload() { return payload; } public void setPayload(String payload) { this.payload = payload; } public ShippingAddress getShippingAddress() { return shippingAddress; } public void setShippingAddress(ShippingAddress shippingAddress) { this.shippingAddress = shippingAddress; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((payload == null) ? 0 : payload.hashCode()); result = prime * result
				+ ((shippingAddress == null) ? 0 : shippingAddress.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; CheckoutUpdate other = (CheckoutUpdate) obj; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; if (shippingAddress == null) { if (other.shippingAddress != null)
				return false; } else if (!shippingAddress.equals(other.shippingAddress))
			return false; return true; } @Override
	public String toString() { return ""CheckoutUpdate [payload="" + payload + "", shippingAddress=""
				+ shippingAddress + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.incoming.callback; public class CheckoutUpdate implements Serializable { private static final long serialVersionUID = 1L; private String payload; @SerializedName(""shipping_address"")
	private ShippingAddress shippingAddress; public String getPayload() { return payload; } public void setPayload(String payload) { this.payload = payload; } public ShippingAddress getShippingAddress() { return shippingAddress; } public void setShippingAddress(ShippingAddress shippingAddress) { this.shippingAddress = shippingAddress; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((payload == null) ? 0 : payload.hashCode()); result = prime * result
				+ ((shippingAddress == null) ? 0 : shippingAddress.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; CheckoutUpdate other = (CheckoutUpdate) obj; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; if (shippingAddress == null) { if (other.shippingAddress != null)
				return false; } else if (!shippingAddress.equals(other.shippingAddress))
			return false; return true; } @Override
	public String toString() { return ""CheckoutUpdate [payload="" + payload + "", shippingAddress=""
				+ shippingAddress + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming.callback; 
import java.io.Serializable; 
import co.aurasphere.botmill.fb.model.outcoming.template.button.BuyButton; 
import com.google.gson.annotations.SerializedName; 
  public class CheckoutUpdate implements Serializable { /**
 * Model for a checkout update callback. <br>
 * <br>
 * This callback enables you to update pricing for flexible-amount transactions
 * on the checkout dialog displayed by the {@link BuyButton}. <br>
 * <br>
 * After the Buy Button is tapped, a call is made to the webhook containing the
 * person's shipping address. This enables you to update pricing with shipping
 * and taxes based on a person's location. This callback is made each time the
 * shipping address is changed. <br>
 * <br>
 * You can subscribe to this callback by selecting the
 * messaging_checkout_updates field when <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 * >setting up</a> your webhook.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference/checkout-update""
 *      >Facebook's Messenger Platform Checkout Update Callback
 *      Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/buy-button""
 *      >Facebook's Messenger Platform Buy Button Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 *      >Facebook's Messenger Platform Webhook Setup Documentation</a>
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  private String payload; /**
	 * Metadata defined in the {@link BuyButton}.
	 */  @SerializedName(""shipping_address"")
	private ShippingAddress shippingAddress; /**
	 * The person's shipping address.
	 */  public String getPayload() { return payload; } /**
	 * Gets the {@link #payload}.
	 *
	 * @return the {@link #payload}.
	 */  public void setPayload(String payload) { this.payload = payload; } /**
	 * Sets the {@link #payload}.
	 *
	 * @param payload
	 *            the {@link #payload} to set.
	 */  public ShippingAddress getShippingAddress() { return shippingAddress; } /**
	 * Gets the {@link #shippingAddress}.
	 *
	 * @return the {@link #shippingAddress}.
	 */  public void setShippingAddress(ShippingAddress shippingAddress) { this.shippingAddress = shippingAddress; } /**
	 * Sets the {@link #shippingAddress}.
	 *
	 * @param shippingAddress
	 *            the {@link #shippingAddress} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((payload == null) ? 0 : payload.hashCode()); result = prime * result
				+ ((shippingAddress == null) ? 0 : shippingAddress.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; CheckoutUpdate other = (CheckoutUpdate) obj; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; if (shippingAddress == null) { if (other.shippingAddress != null)
				return false; } else if (!shippingAddress.equals(other.shippingAddress))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""CheckoutUpdate [payload="" + payload + "", shippingAddress=""
				+ shippingAddress + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/incoming/callback/DeliveredMessage.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming.callback;

import java.io.Serializable;
import java.util.Calendar;
import java.util.List;


/**
 * Model for a delivered message callback. <br>
 * <br>
 * This callback will occur when a message a page has sent has been delivered.
 * You can subscribe to this callback by selecting the message_deliveries field
 * when <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 * >setting up</a> your webhook.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference/message-delivered""
 *      >Facebook's Messenger Platform Delivery Callback Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 *      >Facebook's Messenger Platform Webhook Setup Documentation</a>
 * 
 */
public class DeliveredMessage implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Messages IDs. <br>
	 * <br>
	 * Both mids and {@link #watermark} fields are used to determine which
	 * messages were delivered. watermark is always present and mids is
	 * sometimes present. mids provides delivery receipts on a per-message basis
	 * but may not be present (due to backward compatibility reasons with older
	 * Messenger clients). watermark is always present and is a timestamp
	 * indicating that all messages with a timestamp before watermark were
	 * delivered.
	 */
	private List<String> mids;

	/**
	 * All messages before this timestamp where seen.<br>
	 * <br>
	 * Both {@link #mids} and watermark fields are used to determine which
	 * messages were delivered. watermark is always present and mids is
	 * sometimes present. mids provides delivery receipts on a per-message basis
	 * but may not be present (due to backward compatibility reasons with older
	 * Messenger clients). watermark is always present and is a timestamp
	 * indicating that all messages with a timestamp before watermark were
	 * delivered.
	 */
	private Calendar watermark;

	/**
	 * Sequence number.
	 */
	private String seq;

	/**
	 * Gets the {@link #mids}.
	 *
	 * @return the {@link #mids}.
	 */
	public List<String> getMids() {
		return mids;
	}

	/**
	 * Sets the {@link #mids}.
	 *
	 * @param mids
	 *            the {@link #mids} to set.
	 */
	public void setMids(List<String> mids) {
		this.mids = mids;
	}

	/**
	 * Gets the {@link #watermark}.
	 *
	 * @return the {@link #watermark}.
	 */
	public Calendar getWatermark() {
		return watermark;
	}

	/**
	 * Sets the {@link #watermark}.
	 *
	 * @param watermark
	 *            the {@link #watermark} to set.
	 */
	public void setWatermark(Calendar watermark) {
		this.watermark = watermark;
	}

	/**
	 * Gets the {@link #seq}.
	 *
	 * @return the {@link #seq}.
	 */
	public String getSeq() {
		return seq;
	}

	/**
	 * Sets the {@link #seq}.
	 *
	 * @param seq
	 *            the {@link #seq} to set.
	 */
	public void setSeq(String seq) {
		this.seq = seq;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((mids == null) ? 0 : mids.hashCode());
		result = prime * result + ((seq == null) ? 0 : seq.hashCode());
		result = prime * result
				+ ((watermark == null) ? 0 : watermark.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		DeliveredMessage other = (DeliveredMessage) obj;
		if (mids == null) {
			if (other.mids != null)
				return false;
		} else if (!mids.equals(other.mids))
			return false;
		if (seq == null) {
			if (other.seq != null)
				return false;
		} else if (!seq.equals(other.seq))
			return false;
		if (watermark == null) {
			if (other.watermark != null)
				return false;
		} else if (!watermark.equals(other.watermark))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""DeliveredMessage [mids="" + mids + "", watermark="" + watermark
				+ "", seq="" + seq + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.incoming.callback; public class DeliveredMessage implements Serializable { private static final long serialVersionUID = 1L; private List<String> mids; private Calendar watermark; private String seq; public List<String> getMids() { return mids; } public void setMids(List<String> mids) { this.mids = mids; } public Calendar getWatermark() { return watermark; } public void setWatermark(Calendar watermark) { this.watermark = watermark; } public String getSeq() { return seq; } public void setSeq(String seq) { this.seq = seq; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((mids == null) ? 0 : mids.hashCode()); result = prime * result + ((seq == null) ? 0 : seq.hashCode()); result = prime * result
				+ ((watermark == null) ? 0 : watermark.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; DeliveredMessage other = (DeliveredMessage) obj; if (mids == null) { if (other.mids != null)
				return false; } else if (!mids.equals(other.mids))
			return false; if (seq == null) { if (other.seq != null)
				return false; } else if (!seq.equals(other.seq))
			return false; if (watermark == null) { if (other.watermark != null)
				return false; } else if (!watermark.equals(other.watermark))
			return false; return true; } @Override
	public String toString() { return ""DeliveredMessage [mids="" + mids + "", watermark="" + watermark
				+ "", seq="" + seq + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.incoming.callback; public class DeliveredMessage implements Serializable { private static final long serialVersionUID = 1L; private List<String> mids; private Calendar watermark; private String seq; public List<String> getMids() { return mids; } public void setMids(List<String> mids) { this.mids = mids; } public Calendar getWatermark() { return watermark; } public void setWatermark(Calendar watermark) { this.watermark = watermark; } public String getSeq() { return seq; } public void setSeq(String seq) { this.seq = seq; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((mids == null) ? 0 : mids.hashCode()); result = prime * result + ((seq == null) ? 0 : seq.hashCode()); result = prime * result
				+ ((watermark == null) ? 0 : watermark.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; DeliveredMessage other = (DeliveredMessage) obj; if (mids == null) { if (other.mids != null)
				return false; } else if (!mids.equals(other.mids))
			return false; if (seq == null) { if (other.seq != null)
				return false; } else if (!seq.equals(other.seq))
			return false; if (watermark == null) { if (other.watermark != null)
				return false; } else if (!watermark.equals(other.watermark))
			return false; return true; } @Override
	public String toString() { return ""DeliveredMessage [mids="" + mids + "", watermark="" + watermark
				+ "", seq="" + seq + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming.callback; 
import java.io.Serializable; import java.util.Calendar; import java.util.List; 
  public class DeliveredMessage implements Serializable { /**
 * Model for a delivered message callback. <br>
 * <br>
 * This callback will occur when a message a page has sent has been delivered.
 * You can subscribe to this callback by selecting the message_deliveries field
 * when <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 * >setting up</a> your webhook.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference/message-delivered""
 *      >Facebook's Messenger Platform Delivery Callback Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 *      >Facebook's Messenger Platform Webhook Setup Documentation</a>
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  private List<String> mids; /**
	 * Messages IDs. <br>
	 * <br>
	 * Both mids and {@link #watermark} fields are used to determine which
	 * messages were delivered. watermark is always present and mids is
	 * sometimes present. mids provides delivery receipts on a per-message basis
	 * but may not be present (due to backward compatibility reasons with older
	 * Messenger clients). watermark is always present and is a timestamp
	 * indicating that all messages with a timestamp before watermark were
	 * delivered.
	 */  private Calendar watermark; /**
	 * All messages before this timestamp where seen.<br>
	 * <br>
	 * Both {@link #mids} and watermark fields are used to determine which
	 * messages were delivered. watermark is always present and mids is
	 * sometimes present. mids provides delivery receipts on a per-message basis
	 * but may not be present (due to backward compatibility reasons with older
	 * Messenger clients). watermark is always present and is a timestamp
	 * indicating that all messages with a timestamp before watermark were
	 * delivered.
	 */  private String seq; /**
	 * Sequence number.
	 */  public List<String> getMids() { return mids; } /**
	 * Gets the {@link #mids}.
	 *
	 * @return the {@link #mids}.
	 */  public void setMids(List<String> mids) { this.mids = mids; } /**
	 * Sets the {@link #mids}.
	 *
	 * @param mids
	 *            the {@link #mids} to set.
	 */  public Calendar getWatermark() { return watermark; } /**
	 * Gets the {@link #watermark}.
	 *
	 * @return the {@link #watermark}.
	 */  public void setWatermark(Calendar watermark) { this.watermark = watermark; } /**
	 * Sets the {@link #watermark}.
	 *
	 * @param watermark
	 *            the {@link #watermark} to set.
	 */  public String getSeq() { return seq; } /**
	 * Gets the {@link #seq}.
	 *
	 * @return the {@link #seq}.
	 */  public void setSeq(String seq) { this.seq = seq; } /**
	 * Sets the {@link #seq}.
	 *
	 * @param seq
	 *            the {@link #seq} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((mids == null) ? 0 : mids.hashCode()); result = prime * result + ((seq == null) ? 0 : seq.hashCode()); result = prime * result
				+ ((watermark == null) ? 0 : watermark.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; DeliveredMessage other = (DeliveredMessage) obj; if (mids == null) { if (other.mids != null)
				return false; } else if (!mids.equals(other.mids))
			return false; if (seq == null) { if (other.seq != null)
				return false; } else if (!seq.equals(other.seq))
			return false; if (watermark == null) { if (other.watermark != null)
				return false; } else if (!watermark.equals(other.watermark))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""DeliveredMessage [mids="" + mids + "", watermark="" + watermark
				+ "", seq="" + seq + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/incoming/callback/EchoMessage.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming.callback;

import com.google.gson.annotations.SerializedName;


/**
 * Model for a message echo callback. <br>
 * <br>
 * This callback will occur when a message has been sent by your page. You may
 * receive text messsages or messages with attachments (image, video, audio,
 * template or fallback). The payload will also include an optional custom
 * metadata sent by the sender, and the corresponding app_id. You can subscribe
 * to this callback by selecting the message_echoes field when <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 * >setting up</a> your webhook. <br>
 * <br>
 * Multiple types of messages are supported:
 * 
 * <pre>
 * - Text message 
 * - Message with image, audio, video or file attachment 
 * - Message with template attachment 
 * - Message with fallback attachment (any unrecognized or unsupported attachment)
 * </pre>
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference/message-echo""
 *      >Facebook's Messenger Platform Message Echo Callback Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 *      >Facebook's Messenger Platform Webhook Setup Documentation</a>
 */
public class EchoMessage extends IncomingMessage {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Indicates the message sent from the page itself.
	 */
	@SerializedName(""is_echo"")
	private boolean isEcho;

	/**
	 * ID of the app from which the message was sent.
	 */
	@SerializedName(""app_id"")
	private String appId;

	/**
	 * Custom string passed to the Send API as the metadata field.
	 */
	private String metadata;

	/**
	 * Message ID.
	 */
	private String mid;

	/**
	 * Sequence number.
	 */
	private String seq;

	/**
	 * Checks if is echo.
	 *
	 * @return the {@link #isEcho}.
	 */
	public boolean isEcho() {
		return isEcho;
	}

	/**
	 * Sets the {@link #isEcho}.
	 *
	 * @param isEcho
	 *            the {@link #isEcho} to set.
	 */
	public void setIsEcho(boolean isEcho) {
		this.isEcho = isEcho;
	}

	/**
	 * Gets the {@link #appId}.
	 *
	 * @return the {@link #appId}.
	 */
	public String getAppId() {
		return appId;
	}

	/**
	 * Sets the {@link #appId}.
	 *
	 * @param appId
	 *            the {@link #appId} to set.
	 */
	public void setAppId(String appId) {
		this.appId = appId;
	}

	/**
	 * Gets the {@link #metadata}.
	 *
	 * @return the {@link #metadata}.
	 */
	public String getMetadata() {
		return metadata;
	}

	/**
	 * Sets the {@link #metadata}.
	 *
	 * @param metadata
	 *            the {@link #metadata} to set.
	 */
	public void setMetadata(String metadata) {
		this.metadata = metadata;
	}

	/**
	 * Gets the {@link #mid}.
	 *
	 * @return the {@link #mid}.
	 */
	public String getMid() {
		return mid;
	}

	/**
	 * Sets the {@link #mid}.
	 *
	 * @param mid
	 *            the {@link #mid} to set.
	 */
	public void setMid(String mid) {
		this.mid = mid;
	}

	/**
	 * Gets the {@link #seq}.
	 *
	 * @return the {@link #seq}.
	 */
	public String getSeq() {
		return seq;
	}

	/**
	 * Sets the {@link #seq}.
	 *
	 * @param seq
	 *            the {@link #seq} to set.
	 */
	public void setSeq(String seq) {
		this.seq = seq;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.incoming.callback.IncomingMessage#hashCode
	 * ()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((appId == null) ? 0 : appId.hashCode());
		result = prime * result + (isEcho ? 1231 : 1237);
		result = prime * result
				+ ((metadata == null) ? 0 : metadata.hashCode());
		result = prime * result + ((mid == null) ? 0 : mid.hashCode());
		result = prime * result + ((seq == null) ? 0 : seq.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.incoming.callback.IncomingMessage#equals
	 * (java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		EchoMessage other = (EchoMessage) obj;
		if (appId == null) {
			if (other.appId != null)
				return false;
		} else if (!appId.equals(other.appId))
			return false;
		if (isEcho != other.isEcho)
			return false;
		if (metadata == null) {
			if (other.metadata != null)
				return false;
		} else if (!metadata.equals(other.metadata))
			return false;
		if (mid == null) {
			if (other.mid != null)
				return false;
		} else if (!mid.equals(other.mid))
			return false;
		if (seq == null) {
			if (other.seq != null)
				return false;
		} else if (!seq.equals(other.seq))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.incoming.callback.IncomingMessage#toString
	 * ()
	 */
	@Override
	public String toString() {
		return ""EchoMessage [isEcho="" + isEcho + "", appId="" + appId
				+ "", metadata="" + metadata + "", mid="" + mid + "", seq="" + seq
				+ "", text="" + text + "", attachments="" + attachments
				+ "", quickReply="" + quickReply + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.incoming.callback; public class EchoMessage extends IncomingMessage { private static final long serialVersionUID = 1L; @SerializedName(""is_echo"")
	private boolean isEcho; @SerializedName(""app_id"")
	private String appId; private String metadata; private String mid; private String seq; public boolean isEcho() { return isEcho; } public void setIsEcho(boolean isEcho) { this.isEcho = isEcho; } public String getAppId() { return appId; } public void setAppId(String appId) { this.appId = appId; } public String getMetadata() { return metadata; } public void setMetadata(String metadata) { this.metadata = metadata; } public String getMid() { return mid; } public void setMid(String mid) { this.mid = mid; } public String getSeq() { return seq; } public void setSeq(String seq) { this.seq = seq; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((appId == null) ? 0 : appId.hashCode()); result = prime * result + (isEcho ? 1231 : 1237); result = prime * result
				+ ((metadata == null) ? 0 : metadata.hashCode()); result = prime * result + ((mid == null) ? 0 : mid.hashCode()); result = prime * result + ((seq == null) ? 0 : seq.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; EchoMessage other = (EchoMessage) obj; if (appId == null) { if (other.appId != null)
				return false; } else if (!appId.equals(other.appId))
			return false; if (isEcho != other.isEcho)
			return false; if (metadata == null) { if (other.metadata != null)
				return false; } else if (!metadata.equals(other.metadata))
			return false; if (mid == null) { if (other.mid != null)
				return false; } else if (!mid.equals(other.mid))
			return false; if (seq == null) { if (other.seq != null)
				return false; } else if (!seq.equals(other.seq))
			return false; return true; } @Override
	public String toString() { return ""EchoMessage [isEcho="" + isEcho + "", appId="" + appId
				+ "", metadata="" + metadata + "", mid="" + mid + "", seq="" + seq
				+ "", text="" + text + "", attachments="" + attachments
				+ "", quickReply="" + quickReply + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.incoming.callback; public class EchoMessage extends IncomingMessage { private static final long serialVersionUID = 1L; @SerializedName(""is_echo"")
	private boolean isEcho; @SerializedName(""app_id"")
	private String appId; private String metadata; private String mid; private String seq; public boolean isEcho() { return isEcho; } public void setIsEcho(boolean isEcho) { this.isEcho = isEcho; } public String getAppId() { return appId; } public void setAppId(String appId) { this.appId = appId; } public String getMetadata() { return metadata; } public void setMetadata(String metadata) { this.metadata = metadata; } public String getMid() { return mid; } public void setMid(String mid) { this.mid = mid; } public String getSeq() { return seq; } public void setSeq(String seq) { this.seq = seq; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((appId == null) ? 0 : appId.hashCode()); result = prime * result + (isEcho ? 1231 : 1237); result = prime * result
				+ ((metadata == null) ? 0 : metadata.hashCode()); result = prime * result + ((mid == null) ? 0 : mid.hashCode()); result = prime * result + ((seq == null) ? 0 : seq.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; EchoMessage other = (EchoMessage) obj; if (appId == null) { if (other.appId != null)
				return false; } else if (!appId.equals(other.appId))
			return false; if (isEcho != other.isEcho)
			return false; if (metadata == null) { if (other.metadata != null)
				return false; } else if (!metadata.equals(other.metadata))
			return false; if (mid == null) { if (other.mid != null)
				return false; } else if (!mid.equals(other.mid))
			return false; if (seq == null) { if (other.seq != null)
				return false; } else if (!seq.equals(other.seq))
			return false; return true; } @Override
	public String toString() { return ""EchoMessage [isEcho="" + isEcho + "", appId="" + appId
				+ "", metadata="" + metadata + "", mid="" + mid + "", seq="" + seq
				+ "", text="" + text + "", attachments="" + attachments
				+ "", quickReply="" + quickReply + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming.callback; 
import com.google.gson.annotations.SerializedName; 
  public class EchoMessage extends IncomingMessage { /**
 * Model for a message echo callback. <br>
 * <br>
 * This callback will occur when a message has been sent by your page. You may
 * receive text messsages or messages with attachments (image, video, audio,
 * template or fallback). The payload will also include an optional custom
 * metadata sent by the sender, and the corresponding app_id. You can subscribe
 * to this callback by selecting the message_echoes field when <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 * >setting up</a> your webhook. <br>
 * <br>
 * Multiple types of messages are supported:
 * 
 * <pre>
 * - Text message 
 * - Message with image, audio, video or file attachment 
 * - Message with template attachment 
 * - Message with fallback attachment (any unrecognized or unsupported attachment)
 * </pre>
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference/message-echo""
 *      >Facebook's Messenger Platform Message Echo Callback Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 *      >Facebook's Messenger Platform Webhook Setup Documentation</a>
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @SerializedName(""is_echo"")
	private boolean isEcho; /**
	 * Indicates the message sent from the page itself.
	 */  @SerializedName(""app_id"")
	private String appId; /**
	 * ID of the app from which the message was sent.
	 */  private String metadata; /**
	 * Custom string passed to the Send API as the metadata field.
	 */  private String mid; /**
	 * Message ID.
	 */  private String seq; /**
	 * Sequence number.
	 */  public boolean isEcho() { return isEcho; } /**
	 * Checks if is echo.
	 *
	 * @return the {@link #isEcho}.
	 */  public void setIsEcho(boolean isEcho) { this.isEcho = isEcho; } /**
	 * Sets the {@link #isEcho}.
	 *
	 * @param isEcho
	 *            the {@link #isEcho} to set.
	 */  public String getAppId() { return appId; } /**
	 * Gets the {@link #appId}.
	 *
	 * @return the {@link #appId}.
	 */  public void setAppId(String appId) { this.appId = appId; } /**
	 * Sets the {@link #appId}.
	 *
	 * @param appId
	 *            the {@link #appId} to set.
	 */  public String getMetadata() { return metadata; } /**
	 * Gets the {@link #metadata}.
	 *
	 * @return the {@link #metadata}.
	 */  public void setMetadata(String metadata) { this.metadata = metadata; } /**
	 * Sets the {@link #metadata}.
	 *
	 * @param metadata
	 *            the {@link #metadata} to set.
	 */  public String getMid() { return mid; } /**
	 * Gets the {@link #mid}.
	 *
	 * @return the {@link #mid}.
	 */  public void setMid(String mid) { this.mid = mid; } /**
	 * Sets the {@link #mid}.
	 *
	 * @param mid
	 *            the {@link #mid} to set.
	 */  public String getSeq() { return seq; } /**
	 * Gets the {@link #seq}.
	 *
	 * @return the {@link #seq}.
	 */  public void setSeq(String seq) { this.seq = seq; } /**
	 * Sets the {@link #seq}.
	 *
	 * @param seq
	 *            the {@link #seq} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((appId == null) ? 0 : appId.hashCode()); result = prime * result + (isEcho ? 1231 : 1237); result = prime * result
				+ ((metadata == null) ? 0 : metadata.hashCode()); result = prime * result + ((mid == null) ? 0 : mid.hashCode()); result = prime * result + ((seq == null) ? 0 : seq.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.incoming.callback.IncomingMessage#hashCode
	 * ()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; EchoMessage other = (EchoMessage) obj; if (appId == null) { if (other.appId != null)
				return false; } else if (!appId.equals(other.appId))
			return false; if (isEcho != other.isEcho)
			return false; if (metadata == null) { if (other.metadata != null)
				return false; } else if (!metadata.equals(other.metadata))
			return false; if (mid == null) { if (other.mid != null)
				return false; } else if (!mid.equals(other.mid))
			return false; if (seq == null) { if (other.seq != null)
				return false; } else if (!seq.equals(other.seq))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.incoming.callback.IncomingMessage#equals
	 * (java.lang.Object)
	 */  @Override
	public String toString() { return ""EchoMessage [isEcho="" + isEcho + "", appId="" + appId
				+ "", metadata="" + metadata + "", mid="" + mid + "", seq="" + seq
				+ "", text="" + text + "", attachments="" + attachments
				+ "", quickReply="" + quickReply + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.incoming.callback.IncomingMessage#toString
	 * ()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/incoming/callback/IncomingMessage.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming.callback;

import java.io.Serializable;
import java.util.List;

import co.aurasphere.botmill.fb.model.base.Attachment;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply;

import com.google.gson.annotations.SerializedName;


/**
 * Base class for an incoming message in a {@link MessageEnvelope}.
 * 
 * @author Donato Rimenti
 * @since 1.1.0
 */
public abstract class IncomingMessage implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Text message.
	 */
	protected String text;

	/**
	 * Attachments of the message.
	 */
	protected List<Attachment> attachments;

	/**
	 * Optional custom data provided by the sending app.
	 */
	@SerializedName(""quick_reply"")
	protected QuickReply quickReply;

	/**
	 * Gets the {@link #text}.
	 *
	 * @return the {@link #text}.
	 */
	public String getText() {
		return text;
	}

	/**
	 * Sets the {@link #text}.
	 *
	 * @param text
	 *            the {@link #text} to set.
	 */
	public void setText(String text) {
		this.text = text;
	}

	/**
	 * Gets the {@link #attachments}.
	 *
	 * @return the {@link #attachments}.
	 */
	public List<Attachment> getAttachments() {
		return attachments;
	}

	/**
	 * Sets the {@link #attachments}.
	 *
	 * @param attachments
	 *            the {@link #attachments} to set.
	 */
	public void setAttachments(List<Attachment> attachments) {
		this.attachments = attachments;
	}

	/**
	 * Gets the {@link #quickReply}.
	 *
	 * @return the {@link #quickReply}.
	 */
	public QuickReply getQuickReply() {
		return quickReply;
	}

	/**
	 * Sets the {@link #quickReply}.
	 *
	 * @param quickReply
	 *            the {@link #quickReply} to set.
	 */
	public void setQuickReply(QuickReply quickReply) {
		this.quickReply = quickReply;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((attachments == null) ? 0 : attachments.hashCode());
		result = prime * result
				+ ((quickReply == null) ? 0 : quickReply.hashCode());
		result = prime * result + ((text == null) ? 0 : text.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		IncomingMessage other = (IncomingMessage) obj;
		if (attachments == null) {
			if (other.attachments != null)
				return false;
		} else if (!attachments.equals(other.attachments))
			return false;
		if (quickReply == null) {
			if (other.quickReply != null)
				return false;
		} else if (!quickReply.equals(other.quickReply))
			return false;
		if (text == null) {
			if (other.text != null)
				return false;
		} else if (!text.equals(other.text))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""IncomingMessage [text="" + text + "", attachments="" + attachments
				+ "", quickReply="" + quickReply + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.incoming.callback; public abstract class IncomingMessage implements Serializable { private static final long serialVersionUID = 1L; protected String text; protected List<Attachment> attachments; @SerializedName(""quick_reply"")
	protected QuickReply quickReply; public String getText() { return text; } public void setText(String text) { this.text = text; } public List<Attachment> getAttachments() { return attachments; } public void setAttachments(List<Attachment> attachments) { this.attachments = attachments; } public QuickReply getQuickReply() { return quickReply; } public void setQuickReply(QuickReply quickReply) { this.quickReply = quickReply; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((attachments == null) ? 0 : attachments.hashCode()); result = prime * result
				+ ((quickReply == null) ? 0 : quickReply.hashCode()); result = prime * result + ((text == null) ? 0 : text.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; IncomingMessage other = (IncomingMessage) obj; if (attachments == null) { if (other.attachments != null)
				return false; } else if (!attachments.equals(other.attachments))
			return false; if (quickReply == null) { if (other.quickReply != null)
				return false; } else if (!quickReply.equals(other.quickReply))
			return false; if (text == null) { if (other.text != null)
				return false; } else if (!text.equals(other.text))
			return false; return true; } @Override
	public String toString() { return ""IncomingMessage [text="" + text + "", attachments="" + attachments
				+ "", quickReply="" + quickReply + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.incoming.callback; public abstract class IncomingMessage implements Serializable { private static final long serialVersionUID = 1L; protected String text; protected List<Attachment> attachments; @SerializedName(""quick_reply"")
	protected QuickReply quickReply; public String getText() { return text; } public void setText(String text) { this.text = text; } public List<Attachment> getAttachments() { return attachments; } public void setAttachments(List<Attachment> attachments) { this.attachments = attachments; } public QuickReply getQuickReply() { return quickReply; } public void setQuickReply(QuickReply quickReply) { this.quickReply = quickReply; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((attachments == null) ? 0 : attachments.hashCode()); result = prime * result
				+ ((quickReply == null) ? 0 : quickReply.hashCode()); result = prime * result + ((text == null) ? 0 : text.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; IncomingMessage other = (IncomingMessage) obj; if (attachments == null) { if (other.attachments != null)
				return false; } else if (!attachments.equals(other.attachments))
			return false; if (quickReply == null) { if (other.quickReply != null)
				return false; } else if (!quickReply.equals(other.quickReply))
			return false; if (text == null) { if (other.text != null)
				return false; } else if (!text.equals(other.text))
			return false; return true; } @Override
	public String toString() { return ""IncomingMessage [text="" + text + "", attachments="" + attachments
				+ "", quickReply="" + quickReply + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming.callback; 
import java.io.Serializable; import java.util.List; 
import co.aurasphere.botmill.fb.model.base.Attachment; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply; 
import com.google.gson.annotations.SerializedName; 
  public abstract class IncomingMessage implements Serializable { /**
 * Base class for an incoming message in a {@link MessageEnvelope}.
 * 
 * @author Donato Rimenti
 * @since 1.1.0
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  protected String text; /**
	 * Text message.
	 */  protected List<Attachment> attachments; /**
	 * Attachments of the message.
	 */  @SerializedName(""quick_reply"")
	protected QuickReply quickReply; /**
	 * Optional custom data provided by the sending app.
	 */  public String getText() { return text; } /**
	 * Gets the {@link #text}.
	 *
	 * @return the {@link #text}.
	 */  public void setText(String text) { this.text = text; } /**
	 * Sets the {@link #text}.
	 *
	 * @param text
	 *            the {@link #text} to set.
	 */  public List<Attachment> getAttachments() { return attachments; } /**
	 * Gets the {@link #attachments}.
	 *
	 * @return the {@link #attachments}.
	 */  public void setAttachments(List<Attachment> attachments) { this.attachments = attachments; } /**
	 * Sets the {@link #attachments}.
	 *
	 * @param attachments
	 *            the {@link #attachments} to set.
	 */  public QuickReply getQuickReply() { return quickReply; } /**
	 * Gets the {@link #quickReply}.
	 *
	 * @return the {@link #quickReply}.
	 */  public void setQuickReply(QuickReply quickReply) { this.quickReply = quickReply; } /**
	 * Sets the {@link #quickReply}.
	 *
	 * @param quickReply
	 *            the {@link #quickReply} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((attachments == null) ? 0 : attachments.hashCode()); result = prime * result
				+ ((quickReply == null) ? 0 : quickReply.hashCode()); result = prime * result + ((text == null) ? 0 : text.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; IncomingMessage other = (IncomingMessage) obj; if (attachments == null) { if (other.attachments != null)
				return false; } else if (!attachments.equals(other.attachments))
			return false; if (quickReply == null) { if (other.quickReply != null)
				return false; } else if (!quickReply.equals(other.quickReply))
			return false; if (text == null) { if (other.text != null)
				return false; } else if (!text.equals(other.text))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""IncomingMessage [text="" + text + "", attachments="" + attachments
				+ "", quickReply="" + quickReply + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/incoming/callback/LocationCoordinates.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming.callback;

import java.io.Serializable;

import com.google.gson.annotations.SerializedName;


/**
 * Model class for a location's coordinates.
 * 
 * @author Alvin Reyes
 */
public class LocationCoordinates implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The latitude.
	 */
	@SerializedName(""lat"")
	private String latitude;

	/**
	 * The longitude.
	 */
	@SerializedName(""long"")
	private String longitude;

	/**
	 * Gets the {@link #latitude}.
	 *
	 * @return the {@link #latitude}.
	 */
	public String getLatitude() {
		return latitude;
	}

	/**
	 * Sets the {@link #latitude}.
	 *
	 * @param latitude
	 *            the {@link #latitude} to set.
	 */
	public void setLatitude(String latitude) {
		this.latitude = latitude;
	}

	/**
	 * Gets the {@link #longitude}.
	 *
	 * @return the {@link #longitude}.
	 */
	public String getLongitude() {
		return longitude;
	}

	/**
	 * Sets the {@link #longitude}.
	 *
	 * @param longitude
	 *            the {@link #longitude} to set.
	 */
	public void setLongitude(String longitude) {
		this.longitude = longitude;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((latitude == null) ? 0 : latitude.hashCode());
		result = prime * result
				+ ((longitude == null) ? 0 : longitude.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		LocationCoordinates other = (LocationCoordinates) obj;
		if (latitude == null) {
			if (other.latitude != null)
				return false;
		} else if (!latitude.equals(other.latitude))
			return false;
		if (longitude == null) {
			if (other.longitude != null)
				return false;
		} else if (!longitude.equals(other.longitude))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""LocationCoordinates [latitude="" + latitude + "", longitude=""
				+ longitude + ""]"";
	}

}","package co.aurasphere.botmill.fb.model.incoming.callback; public class LocationCoordinates implements Serializable { private static final long serialVersionUID = 1L; @SerializedName(""lat"")
	private String latitude; @SerializedName(""long"")
	private String longitude; public String getLatitude() { return latitude; } public void setLatitude(String latitude) { this.latitude = latitude; } public String getLongitude() { return longitude; } public void setLongitude(String longitude) { this.longitude = longitude; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((latitude == null) ? 0 : latitude.hashCode()); result = prime * result
				+ ((longitude == null) ? 0 : longitude.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; LocationCoordinates other = (LocationCoordinates) obj; if (latitude == null) { if (other.latitude != null)
				return false; } else if (!latitude.equals(other.latitude))
			return false; if (longitude == null) { if (other.longitude != null)
				return false; } else if (!longitude.equals(other.longitude))
			return false; return true; } @Override
	public String toString() { return ""LocationCoordinates [latitude="" + latitude + "", longitude=""
				+ longitude + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.incoming.callback; public class LocationCoordinates implements Serializable { private static final long serialVersionUID = 1L; @SerializedName(""lat"")
	private String latitude; @SerializedName(""long"")
	private String longitude; public String getLatitude() { return latitude; } public void setLatitude(String latitude) { this.latitude = latitude; } public String getLongitude() { return longitude; } public void setLongitude(String longitude) { this.longitude = longitude; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((latitude == null) ? 0 : latitude.hashCode()); result = prime * result
				+ ((longitude == null) ? 0 : longitude.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; LocationCoordinates other = (LocationCoordinates) obj; if (latitude == null) { if (other.latitude != null)
				return false; } else if (!latitude.equals(other.latitude))
			return false; if (longitude == null) { if (other.longitude != null)
				return false; } else if (!longitude.equals(other.longitude))
			return false; return true; } @Override
	public String toString() { return ""LocationCoordinates [latitude="" + latitude + "", longitude=""
				+ longitude + ""]""; } }","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming.callback; 
import java.io.Serializable; 
import com.google.gson.annotations.SerializedName; 
  public class LocationCoordinates implements Serializable { /**
 * Model class for a location's coordinates.
 * 
 * @author Alvin Reyes
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @SerializedName(""lat"")
	private String latitude; /**
	 * The latitude.
	 */  @SerializedName(""long"")
	private String longitude; /**
	 * The longitude.
	 */  public String getLatitude() { return latitude; } /**
	 * Gets the {@link #latitude}.
	 *
	 * @return the {@link #latitude}.
	 */  public void setLatitude(String latitude) { this.latitude = latitude; } /**
	 * Sets the {@link #latitude}.
	 *
	 * @param latitude
	 *            the {@link #latitude} to set.
	 */  public String getLongitude() { return longitude; } /**
	 * Gets the {@link #longitude}.
	 *
	 * @return the {@link #longitude}.
	 */  public void setLongitude(String longitude) { this.longitude = longitude; } /**
	 * Sets the {@link #longitude}.
	 *
	 * @param longitude
	 *            the {@link #longitude} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((latitude == null) ? 0 : latitude.hashCode()); result = prime * result
				+ ((longitude == null) ? 0 : longitude.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; LocationCoordinates other = (LocationCoordinates) obj; if (latitude == null) { if (other.latitude != null)
				return false; } else if (!latitude.equals(other.latitude))
			return false; if (longitude == null) { if (other.longitude != null)
				return false; } else if (!longitude.equals(other.longitude))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""LocationCoordinates [latitude="" + latitude + "", longitude=""
				+ longitude + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }"
src/main/java/co/aurasphere/botmill/fb/model/incoming/callback/Optin.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming.callback;

import java.io.Serializable;


/**
 * Model for a plugin opt-in callback. <br>
 * <br>
 * This callback will occur when the <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/plugin-reference/send-to-messenger""
 * >Send-to-Messenger</a> plugin has been tapped. The optin.ref parameter is set
 * by the data-ref field on the ""Send to Messenger"" plugin. This field can be
 * used by the developer to associate a click event on the plugin with a
 * callback. You can subscribe to this callback by selecting the
 * messaging_optins field when <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 * >setting up</a> your webhook.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference/optins""
 *      >Facebook's Messenger Platform Plugin Opt-in Callback Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/plugin-reference/send-to-messenger""
 *      >Facebook's Messenger Platform Send-to-Messenger Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 *      >Facebook's Messenger Platform Webhook Setup Documentation</a>
 * 
 */
public class Optin implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Data-ref parameter that was defined with the entry point.
	 */
	private String ref;

	/**
	 * Gets the {@link #ref}.
	 *
	 * @return the {@link #ref}.
	 */
	public String getRef() {
		return ref;
	}

	/**
	 * Sets the {@link #ref}.
	 *
	 * @param ref
	 *            the {@link #ref} to set.
	 */
	public void setRef(String ref) {
		this.ref = ref;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((ref == null) ? 0 : ref.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Optin other = (Optin) obj;
		if (ref == null) {
			if (other.ref != null)
				return false;
		} else if (!ref.equals(other.ref))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""Optin [ref="" + ref + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.incoming.callback; public class Optin implements Serializable { private static final long serialVersionUID = 1L; private String ref; public String getRef() { return ref; } public void setRef(String ref) { this.ref = ref; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((ref == null) ? 0 : ref.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Optin other = (Optin) obj; if (ref == null) { if (other.ref != null)
				return false; } else if (!ref.equals(other.ref))
			return false; return true; } @Override
	public String toString() { return ""Optin [ref="" + ref + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.incoming.callback; public class Optin implements Serializable { private static final long serialVersionUID = 1L; private String ref; public String getRef() { return ref; } public void setRef(String ref) { this.ref = ref; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((ref == null) ? 0 : ref.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Optin other = (Optin) obj; if (ref == null) { if (other.ref != null)
				return false; } else if (!ref.equals(other.ref))
			return false; return true; } @Override
	public String toString() { return ""Optin [ref="" + ref + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming.callback; 
import java.io.Serializable; 
  public class Optin implements Serializable { /**
 * Model for a plugin opt-in callback. <br>
 * <br>
 * This callback will occur when the <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/plugin-reference/send-to-messenger""
 * >Send-to-Messenger</a> plugin has been tapped. The optin.ref parameter is set
 * by the data-ref field on the ""Send to Messenger"" plugin. This field can be
 * used by the developer to associate a click event on the plugin with a
 * callback. You can subscribe to this callback by selecting the
 * messaging_optins field when <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 * >setting up</a> your webhook.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference/optins""
 *      >Facebook's Messenger Platform Plugin Opt-in Callback Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/plugin-reference/send-to-messenger""
 *      >Facebook's Messenger Platform Send-to-Messenger Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 *      >Facebook's Messenger Platform Webhook Setup Documentation</a>
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  private String ref; /**
	 * Data-ref parameter that was defined with the entry point.
	 */  public String getRef() { return ref; } /**
	 * Gets the {@link #ref}.
	 *
	 * @return the {@link #ref}.
	 */  public void setRef(String ref) { this.ref = ref; } /**
	 * Sets the {@link #ref}.
	 *
	 * @param ref
	 *            the {@link #ref} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((ref == null) ? 0 : ref.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Optin other = (Optin) obj; if (ref == null) { if (other.ref != null)
				return false; } else if (!ref.equals(other.ref))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""Optin [ref="" + ref + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/incoming/callback/Postback.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming.callback;

import java.io.Serializable;


/**
 * Model for a postback callback. <br>
 * <br>
 * Postbacks occur when a Postback button, Get Started button, Persistent menu
 * or Structured Message is tapped. The payload field in the callback is defined
 * on the button. You can subscribe to this callback by selecting the
 * messaging_postbacks field when <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 * >setting up</a> your webhook.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference/postback""
 *      >Facebook's Messenger Platform Postback Callback Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 *      >Facebook's Messenger Platform Webhook Setup Documentation</a>
 * 
 */
public class Postback implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Payload parameter that was defined with the button.
	 */
	private String payload;

	/**
	 * Comes only with Get Started postback and if an optional ref param was
	 * passed from the entry point, such as <a href=
	 * ""https://developers.facebook.com/docs/messenger-platform/referral-params""
	 * >m.me link</a>.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/referral-params""
	 *      >Facebook's Messenger Platform m.me links Documentation</a>
	 */
	private Referral referral;

	/**
	 * Gets the {@link #payload}.
	 *
	 * @return the {@link #payload}.
	 */
	public String getPayload() {
		return payload;
	}

	/**
	 * Sets the {@link #payload}.
	 *
	 * @param payload
	 *            the {@link #payload} to set.
	 */
	public void setPayload(String payload) {
		this.payload = payload;
	}

	/**
	 * Gets the {@link #referral}.
	 *
	 * @return the {@link #referral}.
	 */
	public Referral getReferral() {
		return referral;
	}

	/**
	 * Sets the {@link #referral}.
	 *
	 * @param referral
	 *            the {@link #referral} to set.
	 */
	public void setReferral(Referral referral) {
		this.referral = referral;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((payload == null) ? 0 : payload.hashCode());
		result = prime * result
				+ ((referral == null) ? 0 : referral.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Postback other = (Postback) obj;
		if (payload == null) {
			if (other.payload != null)
				return false;
		} else if (!payload.equals(other.payload))
			return false;
		if (referral == null) {
			if (other.referral != null)
				return false;
		} else if (!referral.equals(other.referral))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""Postback [payload="" + payload + "", referral="" + referral + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.incoming.callback; public class Postback implements Serializable { private static final long serialVersionUID = 1L; private String payload; private Referral referral; public String getPayload() { return payload; } public void setPayload(String payload) { this.payload = payload; } public Referral getReferral() { return referral; } public void setReferral(Referral referral) { this.referral = referral; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((payload == null) ? 0 : payload.hashCode()); result = prime * result
				+ ((referral == null) ? 0 : referral.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Postback other = (Postback) obj; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; if (referral == null) { if (other.referral != null)
				return false; } else if (!referral.equals(other.referral))
			return false; return true; } @Override
	public String toString() { return ""Postback [payload="" + payload + "", referral="" + referral + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.incoming.callback; public class Postback implements Serializable { private static final long serialVersionUID = 1L; private String payload; private Referral referral; public String getPayload() { return payload; } public void setPayload(String payload) { this.payload = payload; } public Referral getReferral() { return referral; } public void setReferral(Referral referral) { this.referral = referral; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((payload == null) ? 0 : payload.hashCode()); result = prime * result
				+ ((referral == null) ? 0 : referral.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Postback other = (Postback) obj; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; if (referral == null) { if (other.referral != null)
				return false; } else if (!referral.equals(other.referral))
			return false; return true; } @Override
	public String toString() { return ""Postback [payload="" + payload + "", referral="" + referral + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming.callback; 
import java.io.Serializable; 
  public class Postback implements Serializable { /**
 * Model for a postback callback. <br>
 * <br>
 * Postbacks occur when a Postback button, Get Started button, Persistent menu
 * or Structured Message is tapped. The payload field in the callback is defined
 * on the button. You can subscribe to this callback by selecting the
 * messaging_postbacks field when <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 * >setting up</a> your webhook.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference/postback""
 *      >Facebook's Messenger Platform Postback Callback Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 *      >Facebook's Messenger Platform Webhook Setup Documentation</a>
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  private String payload; /**
	 * Payload parameter that was defined with the button.
	 */  private Referral referral; /**
	 * Comes only with Get Started postback and if an optional ref param was
	 * passed from the entry point, such as <a href=
	 * ""https://developers.facebook.com/docs/messenger-platform/referral-params""
	 * >m.me link</a>.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/referral-params""
	 *      >Facebook's Messenger Platform m.me links Documentation</a>
	 */  public String getPayload() { return payload; } /**
	 * Gets the {@link #payload}.
	 *
	 * @return the {@link #payload}.
	 */  public void setPayload(String payload) { this.payload = payload; } /**
	 * Sets the {@link #payload}.
	 *
	 * @param payload
	 *            the {@link #payload} to set.
	 */  public Referral getReferral() { return referral; } /**
	 * Gets the {@link #referral}.
	 *
	 * @return the {@link #referral}.
	 */  public void setReferral(Referral referral) { this.referral = referral; } /**
	 * Sets the {@link #referral}.
	 *
	 * @param referral
	 *            the {@link #referral} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((payload == null) ? 0 : payload.hashCode()); result = prime * result
				+ ((referral == null) ? 0 : referral.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Postback other = (Postback) obj; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; if (referral == null) { if (other.referral != null)
				return false; } else if (!referral.equals(other.referral))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""Postback [payload="" + payload + "", referral="" + referral + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/incoming/callback/PreCheckout.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming.callback;

import java.io.Serializable;

import co.aurasphere.botmill.fb.model.incoming.callback.payment.PaymentAmount;
import co.aurasphere.botmill.fb.model.outcoming.template.button.BuyButton;
import co.aurasphere.botmill.fb.model.outcoming.template.button.RequestedUserInfo;

import com.google.gson.annotations.SerializedName;


/**
 * Model for a pre-checkout callback. <br>
 * <br>
 * This callback will occur when a user clicks on Pay in the payment dialog, but
 * before the user's card is charged.<br>
 * <br>
 * This allows you to do any processing on your end before charging user's card.
 * You could check inventory levels or for price changes before accepting the
 * payment.<br>
 * <br>
 * Subscribe to this callback by selecting the messaging_pre_checkouts option
 * when <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 * >setting up</a> your webhook. If your app does not subscribe to this event,
 * after the user clicks on Pay we will process the payment directly.<br>
 * <br>
 * The event is only called for payments triggered via {@link BuyButton}, and
 * not for those triggered via webview.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference/pre-checkout""
 *      >Facebook's Messenger Platform Pre-Checkout Callback Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 *      >Facebook's Messenger Platform Webhook Setup Documentation</a>
 * @since 1.1.0
 */
public class PreCheckout implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Metadata defined in the {@link BuyButton}.
	 */
	private String payload;

	/**
	 * Information that was requested from the user by the {@link BuyButton}.
	 */
	@SerializedName(""requested_user_info"")
	private RequestedUserInfo requestedUserInfo;

	/**
	 * Total amount of transaction.
	 */
	private PaymentAmount amount;

	/**
	 * Gets the {@link #payload}.
	 *
	 * @return the {@link #payload}.
	 */
	public String getPayload() {
		return payload;
	}

	/**
	 * Sets the {@link #payload}.
	 *
	 * @param payload
	 *            the {@link #payload} to set.
	 */
	public void setPayload(String payload) {
		this.payload = payload;
	}

	/**
	 * Gets the {@link #requestedUserInfo}.
	 *
	 * @return the {@link #requestedUserInfo}.
	 */
	public RequestedUserInfo getRequestedUserInfo() {
		return requestedUserInfo;
	}

	/**
	 * Sets the {@link #requestedUserInfo}.
	 *
	 * @param requestedUserInfo
	 *            the {@link #requestedUserInfo} to set.
	 */
	public void setRequestedUserInfo(RequestedUserInfo requestedUserInfo) {
		this.requestedUserInfo = requestedUserInfo;
	}

	/**
	 * Gets the {@link #amount}.
	 *
	 * @return the {@link #amount}.
	 */
	public PaymentAmount getAmount() {
		return amount;
	}

	/**
	 * Sets the {@link #amount}.
	 *
	 * @param amount
	 *            the {@link #amount} to set.
	 */
	public void setAmount(PaymentAmount amount) {
		this.amount = amount;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((payload == null) ? 0 : payload.hashCode());
		result = prime
				* result
				+ ((requestedUserInfo == null) ? 0 : requestedUserInfo
						.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		PreCheckout other = (PreCheckout) obj;
		if (payload == null) {
			if (other.payload != null)
				return false;
		} else if (!payload.equals(other.payload))
			return false;
		if (requestedUserInfo == null) {
			if (other.requestedUserInfo != null)
				return false;
		} else if (!requestedUserInfo.equals(other.requestedUserInfo))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""PreCheckout [payload="" + payload + "", requestedUserInfo=""
				+ requestedUserInfo + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.incoming.callback; public class PreCheckout implements Serializable { private static final long serialVersionUID = 1L; private String payload; @SerializedName(""requested_user_info"")
	private RequestedUserInfo requestedUserInfo; private PaymentAmount amount; public String getPayload() { return payload; } public void setPayload(String payload) { this.payload = payload; } public RequestedUserInfo getRequestedUserInfo() { return requestedUserInfo; } public void setRequestedUserInfo(RequestedUserInfo requestedUserInfo) { this.requestedUserInfo = requestedUserInfo; } public PaymentAmount getAmount() { return amount; } public void setAmount(PaymentAmount amount) { this.amount = amount; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((payload == null) ? 0 : payload.hashCode()); result = prime
				* result
				+ ((requestedUserInfo == null) ? 0 : requestedUserInfo
						.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PreCheckout other = (PreCheckout) obj; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; if (requestedUserInfo == null) { if (other.requestedUserInfo != null)
				return false; } else if (!requestedUserInfo.equals(other.requestedUserInfo))
			return false; return true; } @Override
	public String toString() { return ""PreCheckout [payload="" + payload + "", requestedUserInfo=""
				+ requestedUserInfo + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.incoming.callback; public class PreCheckout implements Serializable { private static final long serialVersionUID = 1L; private String payload; @SerializedName(""requested_user_info"")
	private RequestedUserInfo requestedUserInfo; private PaymentAmount amount; public String getPayload() { return payload; } public void setPayload(String payload) { this.payload = payload; } public RequestedUserInfo getRequestedUserInfo() { return requestedUserInfo; } public void setRequestedUserInfo(RequestedUserInfo requestedUserInfo) { this.requestedUserInfo = requestedUserInfo; } public PaymentAmount getAmount() { return amount; } public void setAmount(PaymentAmount amount) { this.amount = amount; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((payload == null) ? 0 : payload.hashCode()); result = prime
				* result
				+ ((requestedUserInfo == null) ? 0 : requestedUserInfo
						.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PreCheckout other = (PreCheckout) obj; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; if (requestedUserInfo == null) { if (other.requestedUserInfo != null)
				return false; } else if (!requestedUserInfo.equals(other.requestedUserInfo))
			return false; return true; } @Override
	public String toString() { return ""PreCheckout [payload="" + payload + "", requestedUserInfo=""
				+ requestedUserInfo + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming.callback; 
import java.io.Serializable; 
import co.aurasphere.botmill.fb.model.incoming.callback.payment.PaymentAmount; import co.aurasphere.botmill.fb.model.outcoming.template.button.BuyButton; import co.aurasphere.botmill.fb.model.outcoming.template.button.RequestedUserInfo; 
import com.google.gson.annotations.SerializedName; 
  public class PreCheckout implements Serializable { /**
 * Model for a pre-checkout callback. <br>
 * <br>
 * This callback will occur when a user clicks on Pay in the payment dialog, but
 * before the user's card is charged.<br>
 * <br>
 * This allows you to do any processing on your end before charging user's card.
 * You could check inventory levels or for price changes before accepting the
 * payment.<br>
 * <br>
 * Subscribe to this callback by selecting the messaging_pre_checkouts option
 * when <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 * >setting up</a> your webhook. If your app does not subscribe to this event,
 * after the user clicks on Pay we will process the payment directly.<br>
 * <br>
 * The event is only called for payments triggered via {@link BuyButton}, and
 * not for those triggered via webview.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference/pre-checkout""
 *      >Facebook's Messenger Platform Pre-Checkout Callback Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 *      >Facebook's Messenger Platform Webhook Setup Documentation</a>
 * @since 1.1.0
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  private String payload; /**
	 * Metadata defined in the {@link BuyButton}.
	 */  @SerializedName(""requested_user_info"")
	private RequestedUserInfo requestedUserInfo; /**
	 * Information that was requested from the user by the {@link BuyButton}.
	 */  private PaymentAmount amount; /**
	 * Total amount of transaction.
	 */  public String getPayload() { return payload; } /**
	 * Gets the {@link #payload}.
	 *
	 * @return the {@link #payload}.
	 */  public void setPayload(String payload) { this.payload = payload; } /**
	 * Sets the {@link #payload}.
	 *
	 * @param payload
	 *            the {@link #payload} to set.
	 */  public RequestedUserInfo getRequestedUserInfo() { return requestedUserInfo; } /**
	 * Gets the {@link #requestedUserInfo}.
	 *
	 * @return the {@link #requestedUserInfo}.
	 */  public void setRequestedUserInfo(RequestedUserInfo requestedUserInfo) { this.requestedUserInfo = requestedUserInfo; } /**
	 * Sets the {@link #requestedUserInfo}.
	 *
	 * @param requestedUserInfo
	 *            the {@link #requestedUserInfo} to set.
	 */  public PaymentAmount getAmount() { return amount; } /**
	 * Gets the {@link #amount}.
	 *
	 * @return the {@link #amount}.
	 */  public void setAmount(PaymentAmount amount) { this.amount = amount; } /**
	 * Sets the {@link #amount}.
	 *
	 * @param amount
	 *            the {@link #amount} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((payload == null) ? 0 : payload.hashCode()); result = prime
				* result
				+ ((requestedUserInfo == null) ? 0 : requestedUserInfo
						.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PreCheckout other = (PreCheckout) obj; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; if (requestedUserInfo == null) { if (other.requestedUserInfo != null)
				return false; } else if (!requestedUserInfo.equals(other.requestedUserInfo))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""PreCheckout [payload="" + payload + "", requestedUserInfo=""
				+ requestedUserInfo + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/incoming/callback/Read.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming.callback;

import java.io.Serializable;


/**
 * Model for a read message callback. <br>
 * <br>
 * This callback will occur when a message a page has sent has been read by the
 * user. You can subscribe to this callback by selecting the message_reads field
 * when <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 * >setting up</a> your webhook.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference/message-read""
 *      >Facebook's Messenger Platform Read Message Callback Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 *      >Facebook's Messenger Platform Webhook Setup Documentation</a>
 * 
 */
public class Read implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * All messages that were sent before this timestamp were read. The
	 * watermark field is used to determine which messages were read. It
	 * represents a timestamp indicating that all messages with a timestamp
	 * before watermark were read by the recipient.
	 */
	private String watermark;

	/**
	 * Sequence number.
	 */
	private String seq;

	/**
	 * Gets the {@link #watermark}.
	 *
	 * @return the {@link #watermark}.
	 */
	public String getWatermark() {
		return watermark;
	}

	/**
	 * Sets the {@link #watermark}.
	 *
	 * @param watermark
	 *            the {@link #watermark} to set.
	 */
	public void setWatermark(String watermark) {
		this.watermark = watermark;
	}

	/**
	 * Gets the {@link #seq}.
	 *
	 * @return the {@link #seq}.
	 */
	public String getSeq() {
		return seq;
	}

	/**
	 * Sets the {@link #seq}.
	 *
	 * @param seq
	 *            the {@link #seq} to set.
	 */
	public void setSeq(String seq) {
		this.seq = seq;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((seq == null) ? 0 : seq.hashCode());
		result = prime * result
				+ ((watermark == null) ? 0 : watermark.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Read other = (Read) obj;
		if (seq == null) {
			if (other.seq != null)
				return false;
		} else if (!seq.equals(other.seq))
			return false;
		if (watermark == null) {
			if (other.watermark != null)
				return false;
		} else if (!watermark.equals(other.watermark))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""Read [watermark="" + watermark + "", seq="" + seq + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.incoming.callback; public class Read implements Serializable { private static final long serialVersionUID = 1L; private String watermark; private String seq; public String getWatermark() { return watermark; } public void setWatermark(String watermark) { this.watermark = watermark; } public String getSeq() { return seq; } public void setSeq(String seq) { this.seq = seq; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((seq == null) ? 0 : seq.hashCode()); result = prime * result
				+ ((watermark == null) ? 0 : watermark.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Read other = (Read) obj; if (seq == null) { if (other.seq != null)
				return false; } else if (!seq.equals(other.seq))
			return false; if (watermark == null) { if (other.watermark != null)
				return false; } else if (!watermark.equals(other.watermark))
			return false; return true; } @Override
	public String toString() { return ""Read [watermark="" + watermark + "", seq="" + seq + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.incoming.callback; public class Read implements Serializable { private static final long serialVersionUID = 1L; private String watermark; private String seq; public String getWatermark() { return watermark; } public void setWatermark(String watermark) { this.watermark = watermark; } public String getSeq() { return seq; } public void setSeq(String seq) { this.seq = seq; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((seq == null) ? 0 : seq.hashCode()); result = prime * result
				+ ((watermark == null) ? 0 : watermark.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Read other = (Read) obj; if (seq == null) { if (other.seq != null)
				return false; } else if (!seq.equals(other.seq))
			return false; if (watermark == null) { if (other.watermark != null)
				return false; } else if (!watermark.equals(other.watermark))
			return false; return true; } @Override
	public String toString() { return ""Read [watermark="" + watermark + "", seq="" + seq + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming.callback; 
import java.io.Serializable; 
  public class Read implements Serializable { /**
 * Model for a read message callback. <br>
 * <br>
 * This callback will occur when a message a page has sent has been read by the
 * user. You can subscribe to this callback by selecting the message_reads field
 * when <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 * >setting up</a> your webhook.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference/message-read""
 *      >Facebook's Messenger Platform Read Message Callback Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 *      >Facebook's Messenger Platform Webhook Setup Documentation</a>
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  private String watermark; /**
	 * All messages that were sent before this timestamp were read. The
	 * watermark field is used to determine which messages were read. It
	 * represents a timestamp indicating that all messages with a timestamp
	 * before watermark were read by the recipient.
	 */  private String seq; /**
	 * Sequence number.
	 */  public String getWatermark() { return watermark; } /**
	 * Gets the {@link #watermark}.
	 *
	 * @return the {@link #watermark}.
	 */  public void setWatermark(String watermark) { this.watermark = watermark; } /**
	 * Sets the {@link #watermark}.
	 *
	 * @param watermark
	 *            the {@link #watermark} to set.
	 */  public String getSeq() { return seq; } /**
	 * Gets the {@link #seq}.
	 *
	 * @return the {@link #seq}.
	 */  public void setSeq(String seq) { this.seq = seq; } /**
	 * Sets the {@link #seq}.
	 *
	 * @param seq
	 *            the {@link #seq} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((seq == null) ? 0 : seq.hashCode()); result = prime * result
				+ ((watermark == null) ? 0 : watermark.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Read other = (Read) obj; if (seq == null) { if (other.seq != null)
				return false; } else if (!seq.equals(other.seq))
			return false; if (watermark == null) { if (other.watermark != null)
				return false; } else if (!watermark.equals(other.watermark))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""Read [watermark="" + watermark + "", seq="" + seq + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/incoming/callback/ReceivedMessage.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming.callback;


/**
 * Model for a received message callback. <br>
 * <br>
 * This callback will occur when a message has been sent to your page. You may
 * receive text messages or messages with attachments (image, audio, video, file
 * or location). Callbacks contain a seq number which can be used to know the
 * sequence of a message in a conversation. Messages are always sent in order. <br>
 * <br>
 * You can subscribe to this callback by selecting the message field when <a
 * href=
 * ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 * >setting up</a> your webhook.
 * 
 * @author Donato Rimenti
 */
public class ReceivedMessage extends IncomingMessage {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Message ID.
	 */
	private String mid;

	/**
	 * Message sequence number.
	 */
	private String seq;

	/**
	 * Gets the {@link #mid}.
	 *
	 * @return the {@link #mid}.
	 */
	public String getMid() {
		return mid;
	}

	/**
	 * Sets the {@link #mid}.
	 *
	 * @param mid
	 *            the {@link #mid} to set.
	 */
	public void setMid(String mid) {
		this.mid = mid;
	}

	/**
	 * Gets the {@link #seq}.
	 *
	 * @return the {@link #seq}.
	 */
	public String getSeq() {
		return seq;
	}

	/**
	 * Sets the {@link #seq}.
	 *
	 * @param seq
	 *            the {@link #seq} to set.
	 */
	public void setSeq(String seq) {
		this.seq = seq;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.incoming.callback.IncomingMessage#hashCode
	 * ()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((mid == null) ? 0 : mid.hashCode());
		result = prime * result + ((seq == null) ? 0 : seq.hashCode());
		result = prime * result + ((text == null) ? 0 : text.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.incoming.callback.IncomingMessage#equals
	 * (java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		ReceivedMessage other = (ReceivedMessage) obj;
		if (mid == null) {
			if (other.mid != null)
				return false;
		} else if (!mid.equals(other.mid))
			return false;
		if (seq == null) {
			if (other.seq != null)
				return false;
		} else if (!seq.equals(other.seq))
			return false;
		if (text == null) {
			if (other.text != null)
				return false;
		} else if (!text.equals(other.text))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.incoming.callback.IncomingMessage#toString
	 * ()
	 */
	@Override
	public String toString() {
		return ""ReceivedMessage [mid="" + mid + "", seq="" + seq + "", text=""
				+ text + "", attachments="" + attachments + "", quickReply=""
				+ quickReply + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.incoming.callback; public class ReceivedMessage extends IncomingMessage { private static final long serialVersionUID = 1L; private String mid; private String seq; public String getMid() { return mid; } public void setMid(String mid) { this.mid = mid; } public String getSeq() { return seq; } public void setSeq(String seq) { this.seq = seq; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((mid == null) ? 0 : mid.hashCode()); result = prime * result + ((seq == null) ? 0 : seq.hashCode()); result = prime * result + ((text == null) ? 0 : text.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; ReceivedMessage other = (ReceivedMessage) obj; if (mid == null) { if (other.mid != null)
				return false; } else if (!mid.equals(other.mid))
			return false; if (seq == null) { if (other.seq != null)
				return false; } else if (!seq.equals(other.seq))
			return false; if (text == null) { if (other.text != null)
				return false; } else if (!text.equals(other.text))
			return false; return true; } @Override
	public String toString() { return ""ReceivedMessage [mid="" + mid + "", seq="" + seq + "", text=""
				+ text + "", attachments="" + attachments + "", quickReply=""
				+ quickReply + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.incoming.callback; public class ReceivedMessage extends IncomingMessage { private static final long serialVersionUID = 1L; private String mid; private String seq; public String getMid() { return mid; } public void setMid(String mid) { this.mid = mid; } public String getSeq() { return seq; } public void setSeq(String seq) { this.seq = seq; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((mid == null) ? 0 : mid.hashCode()); result = prime * result + ((seq == null) ? 0 : seq.hashCode()); result = prime * result + ((text == null) ? 0 : text.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; ReceivedMessage other = (ReceivedMessage) obj; if (mid == null) { if (other.mid != null)
				return false; } else if (!mid.equals(other.mid))
			return false; if (seq == null) { if (other.seq != null)
				return false; } else if (!seq.equals(other.seq))
			return false; if (text == null) { if (other.text != null)
				return false; } else if (!text.equals(other.text))
			return false; return true; } @Override
	public String toString() { return ""ReceivedMessage [mid="" + mid + "", seq="" + seq + "", text=""
				+ text + "", attachments="" + attachments + "", quickReply=""
				+ quickReply + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming.callback; 
  public class ReceivedMessage extends IncomingMessage { /**
 * Model for a received message callback. <br>
 * <br>
 * This callback will occur when a message has been sent to your page. You may
 * receive text messages or messages with attachments (image, audio, video, file
 * or location). Callbacks contain a seq number which can be used to know the
 * sequence of a message in a conversation. Messages are always sent in order. <br>
 * <br>
 * You can subscribe to this callback by selecting the message field when <a
 * href=
 * ""https://developers.facebook.com/docs/messenger-platform/webhook-reference#setup""
 * >setting up</a> your webhook.
 * 
 * @author Donato Rimenti
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  private String mid; /**
	 * Message ID.
	 */  private String seq; /**
	 * Message sequence number.
	 */  public String getMid() { return mid; } /**
	 * Gets the {@link #mid}.
	 *
	 * @return the {@link #mid}.
	 */  public void setMid(String mid) { this.mid = mid; } /**
	 * Sets the {@link #mid}.
	 *
	 * @param mid
	 *            the {@link #mid} to set.
	 */  public String getSeq() { return seq; } /**
	 * Gets the {@link #seq}.
	 *
	 * @return the {@link #seq}.
	 */  public void setSeq(String seq) { this.seq = seq; } /**
	 * Sets the {@link #seq}.
	 *
	 * @param seq
	 *            the {@link #seq} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((mid == null) ? 0 : mid.hashCode()); result = prime * result + ((seq == null) ? 0 : seq.hashCode()); result = prime * result + ((text == null) ? 0 : text.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.incoming.callback.IncomingMessage#hashCode
	 * ()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; ReceivedMessage other = (ReceivedMessage) obj; if (mid == null) { if (other.mid != null)
				return false; } else if (!mid.equals(other.mid))
			return false; if (seq == null) { if (other.seq != null)
				return false; } else if (!seq.equals(other.seq))
			return false; if (text == null) { if (other.text != null)
				return false; } else if (!text.equals(other.text))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.incoming.callback.IncomingMessage#equals
	 * (java.lang.Object)
	 */  @Override
	public String toString() { return ""ReceivedMessage [mid="" + mid + "", seq="" + seq + "", text=""
				+ text + "", attachments="" + attachments + "", quickReply=""
				+ quickReply + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.incoming.callback.IncomingMessage#toString
	 * ()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/incoming/callback/Referral.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming.callback;

import java.io.Serializable;


/**
 * Model for the Referral Callback. <br>
 * <br>
 * This callback will occur when an m.me link is used with a referral param and
 * only in a case this user already has a thread with this bot (for new threads
 * see <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/webhook-reference/postback-received""
 * >Postback Event</a>). See also the full guide on <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/referral-params"" >m.
 * me links</a>. <br>
 * <br>
 * To start receiving these events you need to subscribe to messaging_referral
 * in the webhook settings for your app. <br>
 * <br>
 * An m.me link with an an added parameter looks like this:
 * http://m.me/mybot?ref=myparam. The value of the ref parameter will be passed
 * to the server via webhook.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference/referral""
 *      > Facebook's Messenger Platform Referral Callback Documentation</a>
 * 
 */
public class Referral implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The arbitrary data that was originally passed in the ref param added to
	 * the m.me link.
	 */
	private String ref;

	/**
	 * The source of this referral. Currently, the only possible value is
	 * ""SHORTLINK"".
	 */
	private ReferralSource source;

	/**
	 * The identifier for the referral. For referrals coming from m.me links, it
	 * will always be ""OPEN_THREAD"".
	 */
	private ReferralType type;

	/**
	 * Gets the {@link #ref}.
	 *
	 * @return the {@link #ref}.
	 */
	public String getRef() {
		return ref;
	}

	/**
	 * Sets the {@link #ref}.
	 *
	 * @param ref
	 *            the {@link #ref} to set.
	 */
	public void setRef(String ref) {
		this.ref = ref;
	}

	/**
	 * Gets the {@link #source}.
	 *
	 * @return the {@link #source}.
	 */
	public ReferralSource getSource() {
		return source;
	}

	/**
	 * Sets the {@link #source}.
	 *
	 * @param source
	 *            the {@link #source} to set.
	 */
	public void setSource(ReferralSource source) {
		this.source = source;
	}

	/**
	 * Gets the {@link #type}.
	 *
	 * @return the {@link #type}.
	 */
	public ReferralType getType() {
		return type;
	}

	/**
	 * Sets the {@link #type}.
	 *
	 * @param type
	 *            the {@link #type} to set.
	 */
	public void setType(ReferralType type) {
		this.type = type;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((ref == null) ? 0 : ref.hashCode());
		result = prime * result + ((source == null) ? 0 : source.hashCode());
		result = prime * result + ((type == null) ? 0 : type.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Referral other = (Referral) obj;
		if (ref == null) {
			if (other.ref != null)
				return false;
		} else if (!ref.equals(other.ref))
			return false;
		if (source == null) {
			if (other.source != null)
				return false;
		} else if (!source.equals(other.source))
			return false;
		if (type == null) {
			if (other.type != null)
				return false;
		} else if (!type.equals(other.type))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""Referral [ref="" + ref + "", source="" + source + "", type="" + type
				+ ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.incoming.callback; public class Referral implements Serializable { private static final long serialVersionUID = 1L; private String ref; private ReferralSource source; private ReferralType type; public String getRef() { return ref; } public void setRef(String ref) { this.ref = ref; } public ReferralSource getSource() { return source; } public void setSource(ReferralSource source) { this.source = source; } public ReferralType getType() { return type; } public void setType(ReferralType type) { this.type = type; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((ref == null) ? 0 : ref.hashCode()); result = prime * result + ((source == null) ? 0 : source.hashCode()); result = prime * result + ((type == null) ? 0 : type.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Referral other = (Referral) obj; if (ref == null) { if (other.ref != null)
				return false; } else if (!ref.equals(other.ref))
			return false; if (source == null) { if (other.source != null)
				return false; } else if (!source.equals(other.source))
			return false; if (type == null) { if (other.type != null)
				return false; } else if (!type.equals(other.type))
			return false; return true; } @Override
	public String toString() { return ""Referral [ref="" + ref + "", source="" + source + "", type="" + type
				+ ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.incoming.callback; public class Referral implements Serializable { private static final long serialVersionUID = 1L; private String ref; private ReferralSource source; private ReferralType type; public String getRef() { return ref; } public void setRef(String ref) { this.ref = ref; } public ReferralSource getSource() { return source; } public void setSource(ReferralSource source) { this.source = source; } public ReferralType getType() { return type; } public void setType(ReferralType type) { this.type = type; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((ref == null) ? 0 : ref.hashCode()); result = prime * result + ((source == null) ? 0 : source.hashCode()); result = prime * result + ((type == null) ? 0 : type.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Referral other = (Referral) obj; if (ref == null) { if (other.ref != null)
				return false; } else if (!ref.equals(other.ref))
			return false; if (source == null) { if (other.source != null)
				return false; } else if (!source.equals(other.source))
			return false; if (type == null) { if (other.type != null)
				return false; } else if (!type.equals(other.type))
			return false; return true; } @Override
	public String toString() { return ""Referral [ref="" + ref + "", source="" + source + "", type="" + type
				+ ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming.callback; 
import java.io.Serializable; 
  public class Referral implements Serializable { /**
 * Model for the Referral Callback. <br>
 * <br>
 * This callback will occur when an m.me link is used with a referral param and
 * only in a case this user already has a thread with this bot (for new threads
 * see <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/webhook-reference/postback-received""
 * >Postback Event</a>). See also the full guide on <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/referral-params"" >m.
 * me links</a>. <br>
 * <br>
 * To start receiving these events you need to subscribe to messaging_referral
 * in the webhook settings for your app. <br>
 * <br>
 * An m.me link with an an added parameter looks like this:
 * http://m.me/mybot?ref=myparam. The value of the ref parameter will be passed
 * to the server via webhook.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference/referral""
 *      > Facebook's Messenger Platform Referral Callback Documentation</a>
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  private String ref; /**
	 * The arbitrary data that was originally passed in the ref param added to
	 * the m.me link.
	 */  private ReferralSource source; /**
	 * The source of this referral. Currently, the only possible value is
	 * ""SHORTLINK"".
	 */  private ReferralType type; /**
	 * The identifier for the referral. For referrals coming from m.me links, it
	 * will always be ""OPEN_THREAD"".
	 */  public String getRef() { return ref; } /**
	 * Gets the {@link #ref}.
	 *
	 * @return the {@link #ref}.
	 */  public void setRef(String ref) { this.ref = ref; } /**
	 * Sets the {@link #ref}.
	 *
	 * @param ref
	 *            the {@link #ref} to set.
	 */  public ReferralSource getSource() { return source; } /**
	 * Gets the {@link #source}.
	 *
	 * @return the {@link #source}.
	 */  public void setSource(ReferralSource source) { this.source = source; } /**
	 * Sets the {@link #source}.
	 *
	 * @param source
	 *            the {@link #source} to set.
	 */  public ReferralType getType() { return type; } /**
	 * Gets the {@link #type}.
	 *
	 * @return the {@link #type}.
	 */  public void setType(ReferralType type) { this.type = type; } /**
	 * Sets the {@link #type}.
	 *
	 * @param type
	 *            the {@link #type} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((ref == null) ? 0 : ref.hashCode()); result = prime * result + ((source == null) ? 0 : source.hashCode()); result = prime * result + ((type == null) ? 0 : type.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Referral other = (Referral) obj; if (ref == null) { if (other.ref != null)
				return false; } else if (!ref.equals(other.ref))
			return false; if (source == null) { if (other.source != null)
				return false; } else if (!source.equals(other.source))
			return false; if (type == null) { if (other.type != null)
				return false; } else if (!type.equals(other.type))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""Referral [ref="" + ref + "", source="" + source + "", type="" + type
				+ ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/incoming/callback/ReferralSource.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming.callback;


/**
 * Source for the {@link Referral} object.
 * 
 * @author Donato Rimenti
 */
public enum ReferralSource {

	/**
	 * The shortlink.
	 */
	SHORTLINK;

}
",package co.aurasphere.botmill.fb.model.incoming.callback; public enum ReferralSource { SHORTLINK; },0 0 0 0 0,package co.aurasphere.botmill.fb.model.incoming.callback; public enum ReferralSource { SHORTLINK; } ,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming.callback; 
  public enum ReferralSource { /**
 * Source for the {@link Referral} object.
 * 
 * @author Donato Rimenti
 */  SHORTLINK; /**
	 * The shortlink.
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/incoming/callback/ReferralType.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming.callback;


/**
 * The Enum ReferralType.
 */
public enum ReferralType {
	
	/**
	 * The open thread.
	 */
	OPEN_THREAD;

}
",package co.aurasphere.botmill.fb.model.incoming.callback; public enum ReferralType { OPEN_THREAD; },0 0 0 0 0,package co.aurasphere.botmill.fb.model.incoming.callback; public enum ReferralType { OPEN_THREAD; } ,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming.callback; 
  public enum ReferralType { /**
 * The Enum ReferralType.
 */ 	 OPEN_THREAD; /**
	 * The open thread.
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/incoming/callback/ShippingAddress.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming.callback;

import java.io.Serializable;

import com.google.gson.annotations.SerializedName;


/**
 * An object that represents the shipping address, used by the
 * {@link CheckoutUpdate} class.
 * 
 * @author Donato Rimenti
 * 
 */
public class ShippingAddress implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * ID of shipping address.
	 */
	private String id;

	/**
	 * Shipping address country.
	 */
	private String country;

	/**
	 * Shipping address city.
	 */
	private String city;

	/**
	 * Shipping address street, first line.
	 */
	private String street1;

	/**
	 * Shipping address street, second line.
	 */
	private String street2;

	/**
	 * Shipping address state.
	 */
	private String state;

	/**
	 * Shipping address postal code.
	 */
	@SerializedName(""postal_code"")
	private String postalCode;

	/**
	 * Gets the {@link #id}.
	 *
	 * @return the {@link #id}.
	 */
	public String getId() {
		return id;
	}

	/**
	 * Sets the {@link #id}.
	 *
	 * @param id
	 *            the {@link #id} to set.
	 */
	public void setId(String id) {
		this.id = id;
	}

	/**
	 * Gets the {@link #country}.
	 *
	 * @return the {@link #country}.
	 */
	public String getCountry() {
		return country;
	}

	/**
	 * Sets the {@link #country}.
	 *
	 * @param country
	 *            the {@link #country} to set.
	 */
	public void setCountry(String country) {
		this.country = country;
	}

	/**
	 * Gets the {@link #city}.
	 *
	 * @return the {@link #city}.
	 */
	public String getCity() {
		return city;
	}

	/**
	 * Sets the {@link #city}.
	 *
	 * @param city
	 *            the {@link #city} to set.
	 */
	public void setCity(String city) {
		this.city = city;
	}

	/**
	 * Gets the {@link #street1}.
	 *
	 * @return the {@link #street1}.
	 */
	public String getStreet1() {
		return street1;
	}

	/**
	 * Sets the {@link #street1}.
	 *
	 * @param street1
	 *            the {@link #street1} to set.
	 */
	public void setStreet1(String street1) {
		this.street1 = street1;
	}

	/**
	 * Gets the {@link #street2}.
	 *
	 * @return the {@link #street2}.
	 */
	public String getStreet2() {
		return street2;
	}

	/**
	 * Sets the {@link #street2}.
	 *
	 * @param street2
	 *            the {@link #street2} to set.
	 */
	public void setStreet2(String street2) {
		this.street2 = street2;
	}

	/**
	 * Gets the {@link #state}.
	 *
	 * @return the {@link #state}.
	 */
	public String getState() {
		return state;
	}

	/**
	 * Sets the {@link #state}.
	 *
	 * @param state
	 *            the {@link #state} to set.
	 */
	public void setState(String state) {
		this.state = state;
	}

	/**
	 * Gets the {@link #postalCode}.
	 *
	 * @return the {@link #postalCode}.
	 */
	public String getPostalCode() {
		return postalCode;
	}

	/**
	 * Sets the {@link #postalCode}.
	 *
	 * @param postalCode
	 *            the {@link #postalCode} to set.
	 */
	public void setPostalCode(String postalCode) {
		this.postalCode = postalCode;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((city == null) ? 0 : city.hashCode());
		result = prime * result + ((country == null) ? 0 : country.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result
				+ ((postalCode == null) ? 0 : postalCode.hashCode());
		result = prime * result + ((state == null) ? 0 : state.hashCode());
		result = prime * result + ((street1 == null) ? 0 : street1.hashCode());
		result = prime * result + ((street2 == null) ? 0 : street2.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ShippingAddress other = (ShippingAddress) obj;
		if (city == null) {
			if (other.city != null)
				return false;
		} else if (!city.equals(other.city))
			return false;
		if (country == null) {
			if (other.country != null)
				return false;
		} else if (!country.equals(other.country))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (postalCode == null) {
			if (other.postalCode != null)
				return false;
		} else if (!postalCode.equals(other.postalCode))
			return false;
		if (state == null) {
			if (other.state != null)
				return false;
		} else if (!state.equals(other.state))
			return false;
		if (street1 == null) {
			if (other.street1 != null)
				return false;
		} else if (!street1.equals(other.street1))
			return false;
		if (street2 == null) {
			if (other.street2 != null)
				return false;
		} else if (!street2.equals(other.street2))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""ShippingAddress [id="" + id + "", country="" + country + "", city=""
				+ city + "", street1="" + street1 + "", street2="" + street2
				+ "", state="" + state + "", postalCode="" + postalCode + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.incoming.callback; public class ShippingAddress implements Serializable { private static final long serialVersionUID = 1L; private String id; private String country; private String city; private String street1; private String street2; private String state; @SerializedName(""postal_code"")
	private String postalCode; public String getId() { return id; } public void setId(String id) { this.id = id; } public String getCountry() { return country; } public void setCountry(String country) { this.country = country; } public String getCity() { return city; } public void setCity(String city) { this.city = city; } public String getStreet1() { return street1; } public void setStreet1(String street1) { this.street1 = street1; } public String getStreet2() { return street2; } public void setStreet2(String street2) { this.street2 = street2; } public String getState() { return state; } public void setState(String state) { this.state = state; } public String getPostalCode() { return postalCode; } public void setPostalCode(String postalCode) { this.postalCode = postalCode; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((city == null) ? 0 : city.hashCode()); result = prime * result + ((country == null) ? 0 : country.hashCode()); result = prime * result + ((id == null) ? 0 : id.hashCode()); result = prime * result
				+ ((postalCode == null) ? 0 : postalCode.hashCode()); result = prime * result + ((state == null) ? 0 : state.hashCode()); result = prime * result + ((street1 == null) ? 0 : street1.hashCode()); result = prime * result + ((street2 == null) ? 0 : street2.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ShippingAddress other = (ShippingAddress) obj; if (city == null) { if (other.city != null)
				return false; } else if (!city.equals(other.city))
			return false; if (country == null) { if (other.country != null)
				return false; } else if (!country.equals(other.country))
			return false; if (id == null) { if (other.id != null)
				return false; } else if (!id.equals(other.id))
			return false; if (postalCode == null) { if (other.postalCode != null)
				return false; } else if (!postalCode.equals(other.postalCode))
			return false; if (state == null) { if (other.state != null)
				return false; } else if (!state.equals(other.state))
			return false; if (street1 == null) { if (other.street1 != null)
				return false; } else if (!street1.equals(other.street1))
			return false; if (street2 == null) { if (other.street2 != null)
				return false; } else if (!street2.equals(other.street2))
			return false; return true; } @Override
	public String toString() { return ""ShippingAddress [id="" + id + "", country="" + country + "", city=""
				+ city + "", street1="" + street1 + "", street2="" + street2
				+ "", state="" + state + "", postalCode="" + postalCode + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.incoming.callback; public class ShippingAddress implements Serializable { private static final long serialVersionUID = 1L; private String id; private String country; private String city; private String street1; private String street2; private String state; @SerializedName(""postal_code"")
	private String postalCode; public String getId() { return id; } public void setId(String id) { this.id = id; } public String getCountry() { return country; } public void setCountry(String country) { this.country = country; } public String getCity() { return city; } public void setCity(String city) { this.city = city; } public String getStreet1() { return street1; } public void setStreet1(String street1) { this.street1 = street1; } public String getStreet2() { return street2; } public void setStreet2(String street2) { this.street2 = street2; } public String getState() { return state; } public void setState(String state) { this.state = state; } public String getPostalCode() { return postalCode; } public void setPostalCode(String postalCode) { this.postalCode = postalCode; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((city == null) ? 0 : city.hashCode()); result = prime * result + ((country == null) ? 0 : country.hashCode()); result = prime * result + ((id == null) ? 0 : id.hashCode()); result = prime * result
				+ ((postalCode == null) ? 0 : postalCode.hashCode()); result = prime * result + ((state == null) ? 0 : state.hashCode()); result = prime * result + ((street1 == null) ? 0 : street1.hashCode()); result = prime * result + ((street2 == null) ? 0 : street2.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ShippingAddress other = (ShippingAddress) obj; if (city == null) { if (other.city != null)
				return false; } else if (!city.equals(other.city))
			return false; if (country == null) { if (other.country != null)
				return false; } else if (!country.equals(other.country))
			return false; if (id == null) { if (other.id != null)
				return false; } else if (!id.equals(other.id))
			return false; if (postalCode == null) { if (other.postalCode != null)
				return false; } else if (!postalCode.equals(other.postalCode))
			return false; if (state == null) { if (other.state != null)
				return false; } else if (!state.equals(other.state))
			return false; if (street1 == null) { if (other.street1 != null)
				return false; } else if (!street1.equals(other.street1))
			return false; if (street2 == null) { if (other.street2 != null)
				return false; } else if (!street2.equals(other.street2))
			return false; return true; } @Override
	public String toString() { return ""ShippingAddress [id="" + id + "", country="" + country + "", city=""
				+ city + "", street1="" + street1 + "", street2="" + street2
				+ "", state="" + state + "", postalCode="" + postalCode + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming.callback; 
import java.io.Serializable; 
import com.google.gson.annotations.SerializedName; 
  public class ShippingAddress implements Serializable { /**
 * An object that represents the shipping address, used by the
 * {@link CheckoutUpdate} class.
 * 
 * @author Donato Rimenti
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  private String id; /**
	 * ID of shipping address.
	 */  private String country; /**
	 * Shipping address country.
	 */  private String city; /**
	 * Shipping address city.
	 */  private String street1; /**
	 * Shipping address street, first line.
	 */  private String street2; /**
	 * Shipping address street, second line.
	 */  private String state; /**
	 * Shipping address state.
	 */  @SerializedName(""postal_code"")
	private String postalCode; /**
	 * Shipping address postal code.
	 */  public String getId() { return id; } /**
	 * Gets the {@link #id}.
	 *
	 * @return the {@link #id}.
	 */  public void setId(String id) { this.id = id; } /**
	 * Sets the {@link #id}.
	 *
	 * @param id
	 *            the {@link #id} to set.
	 */  public String getCountry() { return country; } /**
	 * Gets the {@link #country}.
	 *
	 * @return the {@link #country}.
	 */  public void setCountry(String country) { this.country = country; } /**
	 * Sets the {@link #country}.
	 *
	 * @param country
	 *            the {@link #country} to set.
	 */  public String getCity() { return city; } /**
	 * Gets the {@link #city}.
	 *
	 * @return the {@link #city}.
	 */  public void setCity(String city) { this.city = city; } /**
	 * Sets the {@link #city}.
	 *
	 * @param city
	 *            the {@link #city} to set.
	 */  public String getStreet1() { return street1; } /**
	 * Gets the {@link #street1}.
	 *
	 * @return the {@link #street1}.
	 */  public void setStreet1(String street1) { this.street1 = street1; } /**
	 * Sets the {@link #street1}.
	 *
	 * @param street1
	 *            the {@link #street1} to set.
	 */  public String getStreet2() { return street2; } /**
	 * Gets the {@link #street2}.
	 *
	 * @return the {@link #street2}.
	 */  public void setStreet2(String street2) { this.street2 = street2; } /**
	 * Sets the {@link #street2}.
	 *
	 * @param street2
	 *            the {@link #street2} to set.
	 */  public String getState() { return state; } /**
	 * Gets the {@link #state}.
	 *
	 * @return the {@link #state}.
	 */  public void setState(String state) { this.state = state; } /**
	 * Sets the {@link #state}.
	 *
	 * @param state
	 *            the {@link #state} to set.
	 */  public String getPostalCode() { return postalCode; } /**
	 * Gets the {@link #postalCode}.
	 *
	 * @return the {@link #postalCode}.
	 */  public void setPostalCode(String postalCode) { this.postalCode = postalCode; } /**
	 * Sets the {@link #postalCode}.
	 *
	 * @param postalCode
	 *            the {@link #postalCode} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((city == null) ? 0 : city.hashCode()); result = prime * result + ((country == null) ? 0 : country.hashCode()); result = prime * result + ((id == null) ? 0 : id.hashCode()); result = prime * result
				+ ((postalCode == null) ? 0 : postalCode.hashCode()); result = prime * result + ((state == null) ? 0 : state.hashCode()); result = prime * result + ((street1 == null) ? 0 : street1.hashCode()); result = prime * result + ((street2 == null) ? 0 : street2.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ShippingAddress other = (ShippingAddress) obj; if (city == null) { if (other.city != null)
				return false; } else if (!city.equals(other.city))
			return false; if (country == null) { if (other.country != null)
				return false; } else if (!country.equals(other.country))
			return false; if (id == null) { if (other.id != null)
				return false; } else if (!id.equals(other.id))
			return false; if (postalCode == null) { if (other.postalCode != null)
				return false; } else if (!postalCode.equals(other.postalCode))
			return false; if (state == null) { if (other.state != null)
				return false; } else if (!state.equals(other.state))
			return false; if (street1 == null) { if (other.street1 != null)
				return false; } else if (!street1.equals(other.street1))
			return false; if (street2 == null) { if (other.street2 != null)
				return false; } else if (!street2.equals(other.street2))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""ShippingAddress [id="" + id + "", country="" + country + "", city=""
				+ city + "", street1="" + street1 + "", street2="" + street2
				+ "", state="" + state + "", postalCode="" + postalCode + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/incoming/handler/IncomingToOutgoingMessageHandler.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming.handler;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;
import co.aurasphere.botmill.core.BotBeanState;
import co.aurasphere.botmill.core.BotDefinition;
import co.aurasphere.botmill.core.annotation.Bot;
import co.aurasphere.botmill.core.annotation.BotAuthorization;
import co.aurasphere.botmill.core.internal.exception.BotMillEventMismatchException;
import co.aurasphere.botmill.core.internal.util.ConfigurationUtils;
import co.aurasphere.botmill.fb.FbBotApi;
import co.aurasphere.botmill.fb.event.AnyEvent;
import co.aurasphere.botmill.fb.event.FbBotMillEvent;
import co.aurasphere.botmill.fb.event.FbBotMillEventType;
import co.aurasphere.botmill.fb.event.account.AccountLinkingEvent;
import co.aurasphere.botmill.fb.event.account.ReferralEvent;
import co.aurasphere.botmill.fb.event.media.AudioEvent;
import co.aurasphere.botmill.fb.event.media.FileEvent;
import co.aurasphere.botmill.fb.event.media.ImageEvent;
import co.aurasphere.botmill.fb.event.media.VideoEvent;
import co.aurasphere.botmill.fb.event.message.LocationEvent;
import co.aurasphere.botmill.fb.event.message.MessageEvent;
import co.aurasphere.botmill.fb.event.message.MessagePatternEvent;
import co.aurasphere.botmill.fb.event.message.QuickReplyMessageEvent;
import co.aurasphere.botmill.fb.event.message.QuickReplyMessagePatternEvent;
import co.aurasphere.botmill.fb.event.postback.PostbackEvent;
import co.aurasphere.botmill.fb.event.postback.PostbackPatternEvent;
import co.aurasphere.botmill.fb.model.annotation.FbBotMillController;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;

/**
 * The Class IncomingToOutgoingMessageHandler.
 * 
 * This is the main incoming to outgoing handler that handles the catching and
 * responses from Facebook.
 * 
 * @author Alvin Reyes
 */
public class IncomingToOutgoingMessageHandler {

	/** The instance. */
	private static IncomingToOutgoingMessageHandler instance;

	/** The Constant CONST_INCOMING_MSG_SETNAME. */
	private static final String CONST_INCOMING_MSG_SETNAME = ""setEnvelope"";

	/** The Constant CONST_EVENT_SETNAME. */
	private static final String CONST_EVENT_SETNAME = ""setEvent"";

	private List<FbBotClassMethod> methodMapCatchAll = new ArrayList<FbBotClassMethod>();

	/**
	 * Creates the handler.
	 *
	 * @return the incoming to outgoing message handler
	 */
	public static IncomingToOutgoingMessageHandler getInstance() {
		if (instance == null) {
			instance = new IncomingToOutgoingMessageHandler();
		}
		instance = new IncomingToOutgoingMessageHandler();
		return instance;
	}

	/**
	 * Process.
	 *
	 * @param message
	 *            the message
	 * @return the incoming to outgoing message handler
	 */
	public IncomingToOutgoingMessageHandler process(MessageEnvelope message) {
		this.handleOutgoingMessage(message);
		return this;
	}

	/**
	 * Handle outgoing message.
	 *
	 * @param message
	 *            the message
	 */
	private void handleOutgoingMessage(MessageEnvelope message) {
		methodMapCatchAll = new ArrayList<FbBotClassMethod>();
		boolean isAuthorized = false;
		for (BotDefinition defClass : ConfigurationUtils.getBotDefinitionInstances()) {

			if (defClass.getClass().isAnnotationPresent(Bot.class)) {
				Bot botClass = defClass.getClass().getAnnotation(Bot.class);
				if (botClass.state().equals(BotBeanState.PROTOTYPE)) {
					try {
						defClass = defClass.getClass().newInstance();
					} catch (InstantiationException e) {
						e.printStackTrace();
					} catch (IllegalAccessException e) {
						e.printStackTrace();
					}
				}

				// Check authorization first.
				boolean authorizationFound = false;
				for (Method authorizationMethod : defClass.getClass().getMethods()) {
					if (authorizationMethod.isAnnotationPresent(BotAuthorization.class)) {
						authorizationFound = true;
						Boolean ob = false;
						try {

							defClass.getClass().getSuperclass()
									.getDeclaredMethod(CONST_INCOMING_MSG_SETNAME, MessageEnvelope.class)
									.invoke(defClass, message);

							ob = (Boolean) authorizationMethod.invoke(defClass, message);

						} catch (IllegalArgumentException e) {
							e.printStackTrace();
						} catch (IllegalAccessException e) {
							e.printStackTrace();
						} catch (InvocationTargetException e) {
							e.printStackTrace();
						} catch (SecurityException e) {
							e.printStackTrace();
						} catch (NoSuchMethodException e) {
							e.printStackTrace();
						}
						if (ob) {
							isAuthorized = true;
							break;
						}
					}
				}
				
				if(!authorizationFound) {
					isAuthorized = true;
				}


				// if (isAuthorized) {
				for (Method method : defClass.getClass().getMethods()) {

					if (method.isAnnotationPresent(FbBotMillController.class)) {
						FbBotMillController botMillController = method.getAnnotation(FbBotMillController.class);
						if (isAuthorized || botMillController.skipAuthorization()) {
							try {
								if (botMillController.pattern().equals("".*."")
										|| botMillController.eventType().equals(FbBotMillEventType.ANY)) {
									FbBotClassMethod fbCm = new FbBotClassMethod();
									fbCm.setCls(defClass);
									fbCm.setMethod(method);
									methodMapCatchAll.add(fbCm);
								} else {
									FbBotMillEvent event = toEventActionFrame(botMillController);
									if (event.verifyEventCondition(message)) {

										defClass.getClass().getSuperclass()
												.getDeclaredMethod(CONST_INCOMING_MSG_SETNAME, MessageEnvelope.class)
												.invoke(defClass, message);

										defClass.getClass().getSuperclass()
												.getDeclaredMethod(CONST_EVENT_SETNAME, FbBotMillEvent.class)
												.invoke(defClass, event);

										FbBotApi.setFbBot(defClass);

										method.invoke(defClass, message);
										return;
									}
								}
							} catch (Exception e) {
								e.printStackTrace();
								return;
							}
						}
					}
				}
				// }
			}
		}

		// Run the catch all last. This is to ensure that every possible AI
		// logic within the source was
		// scanned and considered.
		// if (isAuthorized) {
		synchronized (this) {
			for (FbBotClassMethod catchAllMethod : methodMapCatchAll) {
				if (catchAllMethod.getMethod().isAnnotationPresent(FbBotMillController.class)) {
					FbBotMillController botMillController = catchAllMethod.getMethod()
							.getAnnotation(FbBotMillController.class);
					if (isAuthorized || botMillController.skipAuthorization()) {
						try {

							FbBotMillEvent event = toEventActionFrame(botMillController);
							if (event.verifyEventCondition(message)) {

								catchAllMethod.getCls().getClass().getSuperclass()
										.getDeclaredMethod(CONST_INCOMING_MSG_SETNAME, MessageEnvelope.class)
										.invoke(catchAllMethod.getCls(), message);

								catchAllMethod.getCls().getClass().getSuperclass()
										.getDeclaredMethod(CONST_EVENT_SETNAME, FbBotMillEvent.class)
										.invoke(catchAllMethod.getCls(), event);

								FbBotApi.setFbBot(catchAllMethod.getCls());
								catchAllMethod.getMethod().invoke(catchAllMethod.getCls(), message);
								return;

							}
						} catch (Exception e) {
							e.printStackTrace();
							return;
						}
					}
				}
			}
		}
		// }
	}

	/**
	 * To event action frame.
	 *
	 * @param botMillController
	 *            the bot mill controller
	 * @return the fb bot mill event
	 * @throws BotMillEventMismatchException
	 *             the bot mill event mismatch exception
	 */
	private FbBotMillEvent toEventActionFrame(FbBotMillController botMillController)
			throws BotMillEventMismatchException {
		boolean caseSensitive = botMillController.caseSensitive();

		switch (botMillController.eventType()) {
		case MESSAGE:
			if (!botMillController.text().equals("""")) {
				return new MessageEvent(botMillController.text(), caseSensitive);
			} else {
				throw new BotMillEventMismatchException(""text attribute missing"");
			}
		case MESSAGE_PATTERN:
			if (!botMillController.pattern().equals("""")) {
				return new MessagePatternEvent(Pattern.compile(botMillController.pattern()));
			} else {
				throw new BotMillEventMismatchException(""pattern attribute missing"");
			}
		case POSTBACK:
			if (!botMillController.postback().equals("""")) {
				return new PostbackEvent(botMillController.postback());
			} else {
				throw new BotMillEventMismatchException(""postback attribute missing"");
			}
		case POSTBACK_PATTERN:
			if (!botMillController.postbackPattern().equals("""")) {
				return new PostbackPatternEvent(Pattern.compile(botMillController.postbackPattern()));
			} else {
				throw new BotMillEventMismatchException(""postback pattern attribute missing"");
			}
		case QUICK_REPLY_MESSAGE:
			if (!botMillController.quickReplyPayload().equals("""")) {
				return new QuickReplyMessageEvent(botMillController.quickReplyPayload());
			} else {
				throw new BotMillEventMismatchException(""quickpayload attribute missing"");
			}
		case QUICK_REPLY_MESSAGE_PATTERN:
			if (!botMillController.quickReplyPayloadPattern().equals("""")) {
				return new QuickReplyMessagePatternEvent(Pattern.compile(botMillController.quickReplyPayloadPattern()));
			} else {
				throw new BotMillEventMismatchException(""quickpayload pattern attribute missing"");
			}
		case REFERRAL:
			return new ReferralEvent();
		case ACCOUNT_LINKING:
			return new AccountLinkingEvent();
		case LOCATION:
			return new LocationEvent();
		case IMAGE:
			return new ImageEvent();
		case VIDEO:
			return new VideoEvent();
		case AUDIO:
			return new AudioEvent();
		case FILE:
			return new FileEvent();
		case ANY:
			return new AnyEvent();
		default:
			throw new BotMillEventMismatchException(""Unsupported Event Type: "" + botMillController.eventType());
		}
	}

	class FbBotClassMethod {
		private BotDefinition cls;
		private Method method;

		public BotDefinition getCls() {
			return cls;
		}

		public void setCls(BotDefinition cls) {
			this.cls = cls;
		}

		public Method getMethod() {
			return method;
		}

		public void setMethod(Method method) {
			this.method = method;
		}

	}
}
","package co.aurasphere.botmill.fb.model.incoming.handler; public class IncomingToOutgoingMessageHandler { private static IncomingToOutgoingMessageHandler instance; private static final String CONST_INCOMING_MSG_SETNAME = ""setEnvelope""; private static final String CONST_EVENT_SETNAME = ""setEvent""; private List<FbBotClassMethod> methodMapCatchAll = new ArrayList<FbBotClassMethod>(); public static IncomingToOutgoingMessageHandler getInstance() { if (instance == null) { instance = new IncomingToOutgoingMessageHandler(); } instance = new IncomingToOutgoingMessageHandler(); return instance; } public IncomingToOutgoingMessageHandler process(MessageEnvelope message) { this.handleOutgoingMessage(message); return this; } private void handleOutgoingMessage(MessageEnvelope message) { methodMapCatchAll = new ArrayList<FbBotClassMethod>(); boolean isAuthorized = false; for (BotDefinition defClass : ConfigurationUtils.getBotDefinitionInstances()) { if (defClass.getClass().isAnnotationPresent(Bot.class)) { Bot botClass = defClass.getClass().getAnnotation(Bot.class); if (botClass.state().equals(BotBeanState.PROTOTYPE)) { try { defClass = defClass.getClass().newInstance(); } catch (InstantiationException e) { e.printStackTrace(); } catch (IllegalAccessException e) { e.printStackTrace(); } } boolean authorizationFound = false; for (Method authorizationMethod : defClass.getClass().getMethods()) { if (authorizationMethod.isAnnotationPresent(BotAuthorization.class)) { authorizationFound = true; Boolean ob = false; try { defClass.getClass().getSuperclass()
									.getDeclaredMethod(CONST_INCOMING_MSG_SETNAME, MessageEnvelope.class)
									.invoke(defClass, message); ob = (Boolean) authorizationMethod.invoke(defClass, message); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } catch (SecurityException e) { e.printStackTrace(); } catch (NoSuchMethodException e) { e.printStackTrace(); } if (ob) { isAuthorized = true; break; } } } if(!authorizationFound) { isAuthorized = true; } for (Method method : defClass.getClass().getMethods()) { if (method.isAnnotationPresent(FbBotMillController.class)) { FbBotMillController botMillController = method.getAnnotation(FbBotMillController.class); if (isAuthorized || botMillController.skipAuthorization()) { try { if (botMillController.pattern().equals("".*."")
										|| botMillController.eventType().equals(FbBotMillEventType.ANY)) { FbBotClassMethod fbCm = new FbBotClassMethod(); fbCm.setCls(defClass); fbCm.setMethod(method); methodMapCatchAll.add(fbCm); } else { FbBotMillEvent event = toEventActionFrame(botMillController); if (event.verifyEventCondition(message)) { defClass.getClass().getSuperclass()
												.getDeclaredMethod(CONST_INCOMING_MSG_SETNAME, MessageEnvelope.class)
												.invoke(defClass, message); defClass.getClass().getSuperclass()
												.getDeclaredMethod(CONST_EVENT_SETNAME, FbBotMillEvent.class)
												.invoke(defClass, event); FbBotApi.setFbBot(defClass); method.invoke(defClass, message); return; } } } catch (Exception e) { e.printStackTrace(); return; } } } } } } synchronized (this) { for (FbBotClassMethod catchAllMethod : methodMapCatchAll) { if (catchAllMethod.getMethod().isAnnotationPresent(FbBotMillController.class)) { FbBotMillController botMillController = catchAllMethod.getMethod()
							.getAnnotation(FbBotMillController.class); if (isAuthorized || botMillController.skipAuthorization()) { try { FbBotMillEvent event = toEventActionFrame(botMillController); if (event.verifyEventCondition(message)) { catchAllMethod.getCls().getClass().getSuperclass()
										.getDeclaredMethod(CONST_INCOMING_MSG_SETNAME, MessageEnvelope.class)
										.invoke(catchAllMethod.getCls(), message); catchAllMethod.getCls().getClass().getSuperclass()
										.getDeclaredMethod(CONST_EVENT_SETNAME, FbBotMillEvent.class)
										.invoke(catchAllMethod.getCls(), event); FbBotApi.setFbBot(catchAllMethod.getCls()); catchAllMethod.getMethod().invoke(catchAllMethod.getCls(), message); return; } } catch (Exception e) { e.printStackTrace(); return; } } } } } } private FbBotMillEvent toEventActionFrame(FbBotMillController botMillController)
			throws BotMillEventMismatchException { boolean caseSensitive = botMillController.caseSensitive(); switch (botMillController.eventType()) { case MESSAGE:
			if (!botMillController.text().equals("""")) { return new MessageEvent(botMillController.text(), caseSensitive); } else { throw new BotMillEventMismatchException(""text attribute missing""); } case MESSAGE_PATTERN:
			if (!botMillController.pattern().equals("""")) { return new MessagePatternEvent(Pattern.compile(botMillController.pattern())); } else { throw new BotMillEventMismatchException(""pattern attribute missing""); } case POSTBACK:
			if (!botMillController.postback().equals("""")) { return new PostbackEvent(botMillController.postback()); } else { throw new BotMillEventMismatchException(""postback attribute missing""); } case POSTBACK_PATTERN:
			if (!botMillController.postbackPattern().equals("""")) { return new PostbackPatternEvent(Pattern.compile(botMillController.postbackPattern())); } else { throw new BotMillEventMismatchException(""postback pattern attribute missing""); } case QUICK_REPLY_MESSAGE:
			if (!botMillController.quickReplyPayload().equals("""")) { return new QuickReplyMessageEvent(botMillController.quickReplyPayload()); } else { throw new BotMillEventMismatchException(""quickpayload attribute missing""); } case QUICK_REPLY_MESSAGE_PATTERN:
			if (!botMillController.quickReplyPayloadPattern().equals("""")) { return new QuickReplyMessagePatternEvent(Pattern.compile(botMillController.quickReplyPayloadPattern())); } else { throw new BotMillEventMismatchException(""quickpayload pattern attribute missing""); } case REFERRAL:
			return new ReferralEvent(); case ACCOUNT_LINKING:
			return new AccountLinkingEvent(); case LOCATION:
			return new LocationEvent(); case IMAGE:
			return new ImageEvent(); case VIDEO:
			return new VideoEvent(); case AUDIO:
			return new AudioEvent(); case FILE:
			return new FileEvent(); case ANY:
			return new AnyEvent(); default:
			throw new BotMillEventMismatchException(""Unsupported Event Type: "" + botMillController.eventType()); } } class FbBotClassMethod { private BotDefinition cls; private Method method; public BotDefinition getCls() { return cls; } public void setCls(BotDefinition cls) { this.cls = cls; } public Method getMethod() { return method; } public void setMethod(Method method) { this.method = method; } } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.incoming.handler; public class IncomingToOutgoingMessageHandler { private static IncomingToOutgoingMessageHandler instance; private static final String CONST_INCOMING_MSG_SETNAME = ""setEnvelope""; private static final String CONST_EVENT_SETNAME = ""setEvent""; private List<FbBotClassMethod> methodMapCatchAll = new ArrayList<FbBotClassMethod>(); public static IncomingToOutgoingMessageHandler getInstance() { if (instance == null) { instance = new IncomingToOutgoingMessageHandler(); } instance = new IncomingToOutgoingMessageHandler(); return instance; } public IncomingToOutgoingMessageHandler process(MessageEnvelope message) { this.handleOutgoingMessage(message); return this; } private void handleOutgoingMessage(MessageEnvelope message) { methodMapCatchAll = new ArrayList<FbBotClassMethod>(); boolean isAuthorized = false; for (BotDefinition defClass : ConfigurationUtils.getBotDefinitionInstances()) { if (defClass.getClass().isAnnotationPresent(Bot.class)) { Bot botClass = defClass.getClass().getAnnotation(Bot.class); if (botClass.state().equals(BotBeanState.PROTOTYPE)) { try { defClass = defClass.getClass().newInstance(); } catch (InstantiationException e) { e.printStackTrace(); } catch (IllegalAccessException e) { e.printStackTrace(); } } boolean authorizationFound = false; for (Method authorizationMethod : defClass.getClass().getMethods()) { if (authorizationMethod.isAnnotationPresent(BotAuthorization.class)) { authorizationFound = true; Boolean ob = false; try { defClass.getClass().getSuperclass()
									.getDeclaredMethod(CONST_INCOMING_MSG_SETNAME, MessageEnvelope.class)
									.invoke(defClass, message); ob = (Boolean) authorizationMethod.invoke(defClass, message); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } catch (SecurityException e) { e.printStackTrace(); } catch (NoSuchMethodException e) { e.printStackTrace(); } if (ob) { isAuthorized = true; break; } } } if(!authorizationFound) { isAuthorized = true; } for (Method method : defClass.getClass().getMethods()) { if (method.isAnnotationPresent(FbBotMillController.class)) { FbBotMillController botMillController = method.getAnnotation(FbBotMillController.class); if (isAuthorized || botMillController.skipAuthorization()) { try { if (botMillController.pattern().equals("".*."")
										|| botMillController.eventType().equals(FbBotMillEventType.ANY)) { FbBotClassMethod fbCm = new FbBotClassMethod(); fbCm.setCls(defClass); fbCm.setMethod(method); methodMapCatchAll.add(fbCm); } else { FbBotMillEvent event = toEventActionFrame(botMillController); if (event.verifyEventCondition(message)) { defClass.getClass().getSuperclass()
												.getDeclaredMethod(CONST_INCOMING_MSG_SETNAME, MessageEnvelope.class)
												.invoke(defClass, message); defClass.getClass().getSuperclass()
												.getDeclaredMethod(CONST_EVENT_SETNAME, FbBotMillEvent.class)
												.invoke(defClass, event); FbBotApi.setFbBot(defClass); method.invoke(defClass, message); return; } } } catch (Exception e) { e.printStackTrace(); return; } } } } } } synchronized (this) { for (FbBotClassMethod catchAllMethod : methodMapCatchAll) { if (catchAllMethod.getMethod().isAnnotationPresent(FbBotMillController.class)) { FbBotMillController botMillController = catchAllMethod.getMethod()
							.getAnnotation(FbBotMillController.class); if (isAuthorized || botMillController.skipAuthorization()) { try { FbBotMillEvent event = toEventActionFrame(botMillController); if (event.verifyEventCondition(message)) { catchAllMethod.getCls().getClass().getSuperclass()
										.getDeclaredMethod(CONST_INCOMING_MSG_SETNAME, MessageEnvelope.class)
										.invoke(catchAllMethod.getCls(), message); catchAllMethod.getCls().getClass().getSuperclass()
										.getDeclaredMethod(CONST_EVENT_SETNAME, FbBotMillEvent.class)
										.invoke(catchAllMethod.getCls(), event); FbBotApi.setFbBot(catchAllMethod.getCls()); catchAllMethod.getMethod().invoke(catchAllMethod.getCls(), message); return; } } catch (Exception e) { e.printStackTrace(); return; } } } } } } private FbBotMillEvent toEventActionFrame(FbBotMillController botMillController)
			throws BotMillEventMismatchException { boolean caseSensitive = botMillController.caseSensitive(); switch (botMillController.eventType()) { case MESSAGE:
			if (!botMillController.text().equals("""")) { return new MessageEvent(botMillController.text(), caseSensitive); } else { throw new BotMillEventMismatchException(""text attribute missing""); } case MESSAGE_PATTERN:
			if (!botMillController.pattern().equals("""")) { return new MessagePatternEvent(Pattern.compile(botMillController.pattern())); } else { throw new BotMillEventMismatchException(""pattern attribute missing""); } case POSTBACK:
			if (!botMillController.postback().equals("""")) { return new PostbackEvent(botMillController.postback()); } else { throw new BotMillEventMismatchException(""postback attribute missing""); } case POSTBACK_PATTERN:
			if (!botMillController.postbackPattern().equals("""")) { return new PostbackPatternEvent(Pattern.compile(botMillController.postbackPattern())); } else { throw new BotMillEventMismatchException(""postback pattern attribute missing""); } case QUICK_REPLY_MESSAGE:
			if (!botMillController.quickReplyPayload().equals("""")) { return new QuickReplyMessageEvent(botMillController.quickReplyPayload()); } else { throw new BotMillEventMismatchException(""quickpayload attribute missing""); } case QUICK_REPLY_MESSAGE_PATTERN:
			if (!botMillController.quickReplyPayloadPattern().equals("""")) { return new QuickReplyMessagePatternEvent(Pattern.compile(botMillController.quickReplyPayloadPattern())); } else { throw new BotMillEventMismatchException(""quickpayload pattern attribute missing""); } case REFERRAL:
			return new ReferralEvent(); case ACCOUNT_LINKING:
			return new AccountLinkingEvent(); case LOCATION:
			return new LocationEvent(); case IMAGE:
			return new ImageEvent(); case VIDEO:
			return new VideoEvent(); case AUDIO:
			return new AudioEvent(); case FILE:
			return new FileEvent(); case ANY:
			return new AnyEvent(); default:
			throw new BotMillEventMismatchException(""Unsupported Event Type: "" + botMillController.eventType()); } } class FbBotClassMethod { private BotDefinition cls; private Method method; public BotDefinition getCls() { return cls; } public void setCls(BotDefinition cls) { this.cls = cls; } public Method getMethod() { return method; } public void setMethod(Method method) { this.method = method; } } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming.handler; 
import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; import java.util.ArrayList; import java.util.List; import java.util.regex.Pattern; import co.aurasphere.botmill.core.BotBeanState; import co.aurasphere.botmill.core.BotDefinition; import co.aurasphere.botmill.core.annotation.Bot; import co.aurasphere.botmill.core.annotation.BotAuthorization; import co.aurasphere.botmill.core.internal.exception.BotMillEventMismatchException; import co.aurasphere.botmill.core.internal.util.ConfigurationUtils; import co.aurasphere.botmill.fb.FbBotApi; import co.aurasphere.botmill.fb.event.AnyEvent; import co.aurasphere.botmill.fb.event.FbBotMillEvent; import co.aurasphere.botmill.fb.event.FbBotMillEventType; import co.aurasphere.botmill.fb.event.account.AccountLinkingEvent; import co.aurasphere.botmill.fb.event.account.ReferralEvent; import co.aurasphere.botmill.fb.event.media.AudioEvent; import co.aurasphere.botmill.fb.event.media.FileEvent; import co.aurasphere.botmill.fb.event.media.ImageEvent; import co.aurasphere.botmill.fb.event.media.VideoEvent; import co.aurasphere.botmill.fb.event.message.LocationEvent; import co.aurasphere.botmill.fb.event.message.MessageEvent; import co.aurasphere.botmill.fb.event.message.MessagePatternEvent; import co.aurasphere.botmill.fb.event.message.QuickReplyMessageEvent; import co.aurasphere.botmill.fb.event.message.QuickReplyMessagePatternEvent; import co.aurasphere.botmill.fb.event.postback.PostbackEvent; import co.aurasphere.botmill.fb.event.postback.PostbackPatternEvent; import co.aurasphere.botmill.fb.model.annotation.FbBotMillController; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;  /**
 * The Class IncomingToOutgoingMessageHandler.
 * 
 * This is the main incoming to outgoing handler that handles the catching and
 * responses from Facebook.
 * 
 * @author Alvin Reyes
 */ public class IncomingToOutgoingMessageHandler {  /** The instance. */ private static IncomingToOutgoingMessageHandler instance;  /** The Constant CONST_INCOMING_MSG_SETNAME. */ private static final String CONST_INCOMING_MSG_SETNAME = ""setEnvelope"";  /** The Constant CONST_EVENT_SETNAME. */ private static final String CONST_EVENT_SETNAME = ""setEvent"";  private List<FbBotClassMethod> methodMapCatchAll = new ArrayList<FbBotClassMethod>();  /**
	 * Creates the handler.
	 *
	 * @return the incoming to outgoing message handler
	 */ public static IncomingToOutgoingMessageHandler getInstance() { if (instance == null) { instance = new IncomingToOutgoingMessageHandler(); } instance = new IncomingToOutgoingMessageHandler(); return instance; }  /**
	 * Process.
	 *
	 * @param message
	 *            the message
	 * @return the incoming to outgoing message handler
	 */ public IncomingToOutgoingMessageHandler process(MessageEnvelope message) { this.handleOutgoingMessage(message); return this; }  /**
	 * Handle outgoing message.
	 *
	 * @param message
	 *            the message
	 */ private void handleOutgoingMessage(MessageEnvelope message) { methodMapCatchAll = new ArrayList<FbBotClassMethod>(); boolean isAuthorized = false; for (BotDefinition defClass : ConfigurationUtils.getBotDefinitionInstances()) {  if (defClass.getClass().isAnnotationPresent(Bot.class)) { Bot botClass = defClass.getClass().getAnnotation(Bot.class); if (botClass.state().equals(BotBeanState.PROTOTYPE)) { try { defClass = defClass.getClass().newInstance(); } catch (InstantiationException e) { e.printStackTrace(); } catch (IllegalAccessException e) { e.printStackTrace(); } }  // Check authorization first. boolean authorizationFound = false; for (Method authorizationMethod : defClass.getClass().getMethods()) { if (authorizationMethod.isAnnotationPresent(BotAuthorization.class)) { authorizationFound = true; Boolean ob = false; try {  defClass.getClass().getSuperclass()
									.getDeclaredMethod(CONST_INCOMING_MSG_SETNAME, MessageEnvelope.class)
									.invoke(defClass, message);  ob = (Boolean) authorizationMethod.invoke(defClass, message);  } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } catch (SecurityException e) { e.printStackTrace(); } catch (NoSuchMethodException e) { e.printStackTrace(); } if (ob) { isAuthorized = true; break; } } } 				 if(!authorizationFound) { isAuthorized = true; } 
  for (Method method : defClass.getClass().getMethods()) { // if (isAuthorized) { if (method.isAnnotationPresent(FbBotMillController.class)) { FbBotMillController botMillController = method.getAnnotation(FbBotMillController.class); if (isAuthorized || botMillController.skipAuthorization()) { try { if (botMillController.pattern().equals("".*."")
										|| botMillController.eventType().equals(FbBotMillEventType.ANY)) { FbBotClassMethod fbCm = new FbBotClassMethod(); fbCm.setCls(defClass); fbCm.setMethod(method); methodMapCatchAll.add(fbCm); } else { FbBotMillEvent event = toEventActionFrame(botMillController); if (event.verifyEventCondition(message)) {  defClass.getClass().getSuperclass()
												.getDeclaredMethod(CONST_INCOMING_MSG_SETNAME, MessageEnvelope.class)
												.invoke(defClass, message);  defClass.getClass().getSuperclass()
												.getDeclaredMethod(CONST_EVENT_SETNAME, FbBotMillEvent.class)
												.invoke(defClass, event);  FbBotApi.setFbBot(defClass);  method.invoke(defClass, message); return; } } } catch (Exception e) { e.printStackTrace(); return; } } } }  } } // }  // Run the catch all last. This is to ensure that every possible AI // logic within the source was // scanned and considered. synchronized (this) { for (FbBotClassMethod catchAllMethod : methodMapCatchAll) { if (catchAllMethod.getMethod().isAnnotationPresent(FbBotMillController.class)) { FbBotMillController botMillController = catchAllMethod.getMethod()
							.getAnnotation(FbBotMillController.class); if (isAuthorized || botMillController.skipAuthorization()) { try { // if (isAuthorized) { FbBotMillEvent event = toEventActionFrame(botMillController); if (event.verifyEventCondition(message)) {  catchAllMethod.getCls().getClass().getSuperclass()
										.getDeclaredMethod(CONST_INCOMING_MSG_SETNAME, MessageEnvelope.class)
										.invoke(catchAllMethod.getCls(), message);  catchAllMethod.getCls().getClass().getSuperclass()
										.getDeclaredMethod(CONST_EVENT_SETNAME, FbBotMillEvent.class)
										.invoke(catchAllMethod.getCls(), event);  FbBotApi.setFbBot(catchAllMethod.getCls()); catchAllMethod.getMethod().invoke(catchAllMethod.getCls(), message); return;  } } catch (Exception e) { e.printStackTrace(); return; } } } } }  } // }  private FbBotMillEvent toEventActionFrame(FbBotMillController botMillController)
			throws BotMillEventMismatchException { boolean caseSensitive = botMillController.caseSensitive(); /**
	 * To event action frame.
	 *
	 * @param botMillController
	 *            the bot mill controller
	 * @return the fb bot mill event
	 * @throws BotMillEventMismatchException
	 *             the bot mill event mismatch exception
	 */ switch (botMillController.eventType()) { case MESSAGE:
			if (!botMillController.text().equals("""")) { return new MessageEvent(botMillController.text(), caseSensitive); } else { throw new BotMillEventMismatchException(""text attribute missing""); } case MESSAGE_PATTERN:
			if (!botMillController.pattern().equals("""")) { return new MessagePatternEvent(Pattern.compile(botMillController.pattern())); } else { throw new BotMillEventMismatchException(""pattern attribute missing""); } case POSTBACK:
			if (!botMillController.postback().equals("""")) { return new PostbackEvent(botMillController.postback()); } else { throw new BotMillEventMismatchException(""postback attribute missing""); } case POSTBACK_PATTERN:
			if (!botMillController.postbackPattern().equals("""")) { return new PostbackPatternEvent(Pattern.compile(botMillController.postbackPattern())); } else { throw new BotMillEventMismatchException(""postback pattern attribute missing""); } case QUICK_REPLY_MESSAGE:
			if (!botMillController.quickReplyPayload().equals("""")) { return new QuickReplyMessageEvent(botMillController.quickReplyPayload()); } else { throw new BotMillEventMismatchException(""quickpayload attribute missing""); } case QUICK_REPLY_MESSAGE_PATTERN:
			if (!botMillController.quickReplyPayloadPattern().equals("""")) { return new QuickReplyMessagePatternEvent(Pattern.compile(botMillController.quickReplyPayloadPattern())); } else { throw new BotMillEventMismatchException(""quickpayload pattern attribute missing""); } case REFERRAL:
			return new ReferralEvent(); case ACCOUNT_LINKING:
			return new AccountLinkingEvent(); case LOCATION:
			return new LocationEvent(); case IMAGE:
			return new ImageEvent(); case VIDEO:
			return new VideoEvent(); case AUDIO:
			return new AudioEvent(); case FILE:
			return new FileEvent(); case ANY:
			return new AnyEvent(); default:
			throw new BotMillEventMismatchException(""Unsupported Event Type: "" + botMillController.eventType()); } }  class FbBotClassMethod { private BotDefinition cls; private Method method;  public BotDefinition getCls() { return cls; }  public void setCls(BotDefinition cls) { this.cls = cls; }  public Method getMethod() { return method; }  public void setMethod(Method method) { this.method = method; }  } }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/action/FbBotMillActionResponse.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.action;

import javax.validation.constraints.NotNull;

import co.aurasphere.botmill.fb.model.base.User;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;

import com.google.gson.annotations.SerializedName;


/**
 * A {@link FbBotMillResponse} which replies with a {@link TypingAction}.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 */
public class FbBotMillActionResponse extends FbBotMillResponse {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The typing action to send.
	 */
	@NotNull
	@SerializedName(""sender_action"")
	private TypingAction action;

	/**
	 * Instantiates a new fb bot mill action response.
	 *
	 * @param recipient
	 *            the {@link FbBotMillResponse#recipient}.
	 * @param action
	 *            the {@link #action}.
	 */
	public FbBotMillActionResponse(User recipient, TypingAction action) {
		this.recipient = recipient;
		this.action = action;
	}

	/**
	 * Gets the {@link #action}.
	 *
	 * @return the {@link #action}.
	 */
	public TypingAction getAction() {
		return action;
	}

	/**
	 * Sets the {@link #action}.
	 *
	 * @param action
	 *            the {@link #action} to set.
	 */
	public void setAction(TypingAction action) {
		this.action = action;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((action == null) ? 0 : action.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse#equals(java
	 * .lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		FbBotMillActionResponse other = (FbBotMillActionResponse) obj;
		if (action != other.action)
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse#toString()
	 */
	@Override
	public String toString() {
		return ""FbBotMillActionResponse [action="" + action + "", recipient=""
				+ recipient + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.action; public class FbBotMillActionResponse extends FbBotMillResponse { private static final long serialVersionUID = 1L; @NotNull
	@SerializedName(""sender_action"")
	private TypingAction action; public FbBotMillActionResponse(User recipient, TypingAction action) { this.recipient = recipient; this.action = action; } public TypingAction getAction() { return action; } public void setAction(TypingAction action) { this.action = action; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((action == null) ? 0 : action.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; FbBotMillActionResponse other = (FbBotMillActionResponse) obj; if (action != other.action)
			return false; return true; } @Override
	public String toString() { return ""FbBotMillActionResponse [action="" + action + "", recipient=""
				+ recipient + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.action; public class FbBotMillActionResponse extends FbBotMillResponse { private static final long serialVersionUID = 1L; @NotNull
	@SerializedName(""sender_action"")
	private TypingAction action; public FbBotMillActionResponse(User recipient, TypingAction action) { this.recipient = recipient; this.action = action; } public TypingAction getAction() { return action; } public void setAction(TypingAction action) { this.action = action; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((action == null) ? 0 : action.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; FbBotMillActionResponse other = (FbBotMillActionResponse) obj; if (action != other.action)
			return false; return true; } @Override
	public String toString() { return ""FbBotMillActionResponse [action="" + action + "", recipient=""
				+ recipient + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.action; 
import javax.validation.constraints.NotNull; 
import co.aurasphere.botmill.fb.model.base.User; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; 
import com.google.gson.annotations.SerializedName; 
  public class FbBotMillActionResponse extends FbBotMillResponse { /**
 * A {@link FbBotMillResponse} which replies with a {@link TypingAction}.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @NotNull
	@SerializedName(""sender_action"")
	private TypingAction action; /**
	 * The typing action to send.
	 */  public FbBotMillActionResponse(User recipient, TypingAction action) { this.recipient = recipient; this.action = action; } /**
	 * Instantiates a new fb bot mill action response.
	 *
	 * @param recipient
	 *            the {@link FbBotMillResponse#recipient}.
	 * @param action
	 *            the {@link #action}.
	 */  public TypingAction getAction() { return action; } /**
	 * Gets the {@link #action}.
	 *
	 * @return the {@link #action}.
	 */  public void setAction(TypingAction action) { this.action = action; } /**
	 * Sets the {@link #action}.
	 *
	 * @param action
	 *            the {@link #action} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((action == null) ? 0 : action.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; FbBotMillActionResponse other = (FbBotMillActionResponse) obj; if (action != other.action)
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse#equals(java
	 * .lang.Object)
	 */  @Override
	public String toString() { return ""FbBotMillActionResponse [action="" + action + "", recipient=""
				+ recipient + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/action/TypingAction.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.action;


/**
 * Enum that represents the non-message actions that a bot can perform. They are
 * used in conjunction with {@link FbBotMillActionResponse}.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 */
public enum TypingAction {

	/**
	 * Marks the message as seen.
	 */
	MARK_SEEN,

	/**
	 * Brings up the ""is writing..."" label. This label is turned off
	 * automatically after 20 seconds or when a {@link #TYPING_OFF} action is
	 * sent.
	 */
	TYPING_ON,

	/**
	 * Removes the ""is writing..."" label if present.
	 */
	TYPING_OFF;

}",package co.aurasphere.botmill.fb.model.outcoming.action; public enum TypingAction { TYPING_OFF; },0 0 0 0,package co.aurasphere.botmill.fb.model.outcoming.action; public enum TypingAction { TYPING_OFF; },"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.action; 
  public enum TypingAction { /**
 * Enum that represents the non-message actions that a bot can perform. They are
 * used in conjunction with {@link FbBotMillActionResponse}.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 * 
 */  /**
	 * Marks the message as seen.
	 */  /**
	 * Brings up the ""is writing..."" label. This label is turned off
	 * automatically after 20 seconds or when a {@link #TYPING_OFF} action is
	 * sent.
	 */  TYPING_OFF; /**
	 * Removes the ""is writing..."" label if present.
	 */ }"
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/ActionResponseBuilder.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import co.aurasphere.botmill.fb.model.base.User;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;
import co.aurasphere.botmill.fb.model.outcoming.action.FbBotMillActionResponse;
import co.aurasphere.botmill.fb.model.outcoming.action.TypingAction;


/**
 * A builder for a response which contains and performs a {@link TypingAction}.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/sender-actions""
 *      > Facebook's Messenger Platform Sender Actions Documentation</a>
 * 
 */
public class ActionResponseBuilder extends FbBotMillResponseBuilder {

	/**
	 * The action to perform.
	 */
	private TypingAction action;

	/**
	 * Instantiates a new action response builder.
	 *
	 * @param action
	 *            the {@link #action}.
	 */
	ActionResponseBuilder(TypingAction action) {
		this.action = action;
	}

	/**
	 * {@inheritDoc} It returns a {@link FbBotMillActionResponse} with the
	 * {@link TypingAction} to perform.
	 */
	public FbBotMillResponse build(MessageEnvelope envelope) {
		User recipient = getRecipient(envelope);
		return new FbBotMillActionResponse(recipient, action);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.bean.FbBotMillBean#toString()
	 */
	@Override
	public String toString() {
		return ""ActionResponseBuilder [action="" + action + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public class ActionResponseBuilder extends FbBotMillResponseBuilder { private TypingAction action; ActionResponseBuilder(TypingAction action) { this.action = action; } public FbBotMillResponse build(MessageEnvelope envelope) { User recipient = getRecipient(envelope); return new FbBotMillActionResponse(recipient, action); } @Override
	public String toString() { return ""ActionResponseBuilder [action="" + action + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public class ActionResponseBuilder extends FbBotMillResponseBuilder { private TypingAction action; ActionResponseBuilder(TypingAction action) { this.action = action; } public FbBotMillResponse build(MessageEnvelope envelope) { User recipient = getRecipient(envelope); return new FbBotMillActionResponse(recipient, action); } @Override
	public String toString() { return ""ActionResponseBuilder [action="" + action + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import co.aurasphere.botmill.fb.model.base.User; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; import co.aurasphere.botmill.fb.model.outcoming.action.FbBotMillActionResponse; import co.aurasphere.botmill.fb.model.outcoming.action.TypingAction; 
  public class ActionResponseBuilder extends FbBotMillResponseBuilder { /**
 * A builder for a response which contains and performs a {@link TypingAction}.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/sender-actions""
 *      > Facebook's Messenger Platform Sender Actions Documentation</a>
 * 
 */  private TypingAction action; /**
	 * The action to perform.
	 */  ActionResponseBuilder(TypingAction action) { this.action = action; } /**
	 * Instantiates a new action response builder.
	 *
	 * @param action
	 *            the {@link #action}.
	 */  public FbBotMillResponse build(MessageEnvelope envelope) { User recipient = getRecipient(envelope); return new FbBotMillActionResponse(recipient, action); } /**
	 * {@inheritDoc} It returns a {@link FbBotMillActionResponse} with the
	 * {@link TypingAction} to perform.
	 */  @Override
	public String toString() { return ""ActionResponseBuilder [action="" + action + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.bean.FbBotMillBean#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/AddressBuilder.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import co.aurasphere.botmill.fb.model.outcoming.template.receipt.Address;


/**
 * Builder for an {@link Address}.
 * 
 * @author Donato Rimenti
 * 
 */
public class AddressBuilder {

	/**
	 * The parent builder of this builder.
	 */
	private ReceiptTemplateBuilder parentBuilder;

	/**
	 * The element managed by this builder.
	 */
	private Address address;

	/**
	 * Instantiates a new address builder.
	 *
	 * @param parentBuilder
	 *            the {@link #parentBuilder}.
	 */
	public AddressBuilder(ReceiptTemplateBuilder parentBuilder) {
		this.parentBuilder = parentBuilder;
		this.address = new Address();
	}

	/**
	 * Sets the Street address, line 1. This field is mandatory and it can't be
	 * null or empty.
	 * 
	 * @param street1
	 *            the first line of the street address to set.
	 * @return this builder.
	 */
	public AddressBuilder setStreet1(String street1) {
		this.address.setStreet1(street1);
		return this;
	}

	/**
	 * Sets the Street address, line 2.
	 * 
	 * @param street2
	 *            the second line of the street address to set.
	 * @return this builder.
	 */
	public AddressBuilder setStreet2(String street2) {
		this.address.setStreet2(street2);
		return this;
	}

	/**
	 * Sets the city. This field is mandatory and it can't be null or empty.
	 * 
	 * @param city
	 *            the city to set.
	 * @return this builder.
	 */
	public AddressBuilder setCity(String city) {
		this.address.setCity(city);
		return this;
	}

	/**
	 * Sets the postal code. This field is mandatory and it can't be null or
	 * empty.
	 * 
	 * @param postalCode
	 *            the postal code to set.
	 * @return this builder.
	 */
	public AddressBuilder setPostalCode(String postalCode) {
		this.address.setPostalCode(postalCode);
		return this;
	}

	/**
	 * Sets the state abbreviation or Region/Province (international). This
	 * field is mandatory and it can't be null or empty.
	 * 
	 * @param state
	 *            the state to set.
	 * @return this builder.
	 */
	public AddressBuilder setState(String state) {
		this.address.setState(state);
		return this;
	}

	/**
	 * Sets the two-letter country abbreviation. This field is mandatory and it
	 * can't be null or empty.
	 * 
	 * @param country
	 *            the country to set.
	 * @return this builder.
	 */
	public AddressBuilder setCountry(String country) {
		this.address.setCountry(country);
		return this;
	}

	/**
	 * Builds the current object, adds it to the parent builder and returns the
	 * parent builder.
	 * 
	 * @return the parent builder of this builder.
	 */
	public ReceiptTemplateBuilder endAddress() {
		this.parentBuilder.setAddress(this.address);
		return this.parentBuilder;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""AddressBuilder [parentBuilder="" + parentBuilder + "", address=""
				+ address + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public class AddressBuilder { private ReceiptTemplateBuilder parentBuilder; private Address address; public AddressBuilder(ReceiptTemplateBuilder parentBuilder) { this.parentBuilder = parentBuilder; this.address = new Address(); } public AddressBuilder setStreet1(String street1) { this.address.setStreet1(street1); return this; } public AddressBuilder setStreet2(String street2) { this.address.setStreet2(street2); return this; } public AddressBuilder setCity(String city) { this.address.setCity(city); return this; } public AddressBuilder setPostalCode(String postalCode) { this.address.setPostalCode(postalCode); return this; } public AddressBuilder setState(String state) { this.address.setState(state); return this; } public AddressBuilder setCountry(String country) { this.address.setCountry(country); return this; } public ReceiptTemplateBuilder endAddress() { this.parentBuilder.setAddress(this.address); return this.parentBuilder; } @Override
	public String toString() { return ""AddressBuilder [parentBuilder="" + parentBuilder + "", address=""
				+ address + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public class AddressBuilder { private ReceiptTemplateBuilder parentBuilder; private Address address; public AddressBuilder(ReceiptTemplateBuilder parentBuilder) { this.parentBuilder = parentBuilder; this.address = new Address(); } public AddressBuilder setStreet1(String street1) { this.address.setStreet1(street1); return this; } public AddressBuilder setStreet2(String street2) { this.address.setStreet2(street2); return this; } public AddressBuilder setCity(String city) { this.address.setCity(city); return this; } public AddressBuilder setPostalCode(String postalCode) { this.address.setPostalCode(postalCode); return this; } public AddressBuilder setState(String state) { this.address.setState(state); return this; } public AddressBuilder setCountry(String country) { this.address.setCountry(country); return this; } public ReceiptTemplateBuilder endAddress() { this.parentBuilder.setAddress(this.address); return this.parentBuilder; } @Override
	public String toString() { return ""AddressBuilder [parentBuilder="" + parentBuilder + "", address=""
				+ address + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import co.aurasphere.botmill.fb.model.outcoming.template.receipt.Address; 
  public class AddressBuilder { /**
 * Builder for an {@link Address}.
 * 
 * @author Donato Rimenti
 * 
 */  private ReceiptTemplateBuilder parentBuilder; /**
	 * The parent builder of this builder.
	 */  private Address address; /**
	 * The element managed by this builder.
	 */  public AddressBuilder(ReceiptTemplateBuilder parentBuilder) { this.parentBuilder = parentBuilder; this.address = new Address(); } /**
	 * Instantiates a new address builder.
	 *
	 * @param parentBuilder
	 *            the {@link #parentBuilder}.
	 */  public AddressBuilder setStreet1(String street1) { this.address.setStreet1(street1); return this; } /**
	 * Sets the Street address, line 1. This field is mandatory and it can't be
	 * null or empty.
	 * 
	 * @param street1
	 *            the first line of the street address to set.
	 * @return this builder.
	 */  public AddressBuilder setStreet2(String street2) { this.address.setStreet2(street2); return this; } /**
	 * Sets the Street address, line 2.
	 * 
	 * @param street2
	 *            the second line of the street address to set.
	 * @return this builder.
	 */  public AddressBuilder setCity(String city) { this.address.setCity(city); return this; } /**
	 * Sets the city. This field is mandatory and it can't be null or empty.
	 * 
	 * @param city
	 *            the city to set.
	 * @return this builder.
	 */  public AddressBuilder setPostalCode(String postalCode) { this.address.setPostalCode(postalCode); return this; } /**
	 * Sets the postal code. This field is mandatory and it can't be null or
	 * empty.
	 * 
	 * @param postalCode
	 *            the postal code to set.
	 * @return this builder.
	 */  public AddressBuilder setState(String state) { this.address.setState(state); return this; } /**
	 * Sets the state abbreviation or Region/Province (international). This
	 * field is mandatory and it can't be null or empty.
	 * 
	 * @param state
	 *            the state to set.
	 * @return this builder.
	 */  public AddressBuilder setCountry(String country) { this.address.setCountry(country); return this; } /**
	 * Sets the two-letter country abbreviation. This field is mandatory and it
	 * can't be null or empty.
	 * 
	 * @param country
	 *            the country to set.
	 * @return this builder.
	 */  public ReceiptTemplateBuilder endAddress() { this.parentBuilder.setAddress(this.address); return this.parentBuilder; } /**
	 * Builds the current object, adds it to the parent builder and returns the
	 * parent builder.
	 * 
	 * @return the parent builder of this builder.
	 */  @Override
	public String toString() { return ""AddressBuilder [parentBuilder="" + parentBuilder + "", address=""
				+ address + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/AirlineBaseTemplateBuilder.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;


/**
 * Base Airline Template builder. It doesn't contain any method nor field.
 * 
 * @author Donato Rimenti
 * 
 */
public abstract class AirlineBaseTemplateBuilder extends TemplateBaseBuilder {

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.bean.FbBotMillBean#toString()
	 */
	@Override
	public String toString() {
		return ""AirlineBaseTemplateBuilder [messageBuilder="" + messageBuilder
				+ ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public abstract class AirlineBaseTemplateBuilder extends TemplateBaseBuilder { @Override
	public String toString() { return ""AirlineBaseTemplateBuilder [messageBuilder="" + messageBuilder
				+ ""]""; } }",0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public abstract class AirlineBaseTemplateBuilder extends TemplateBaseBuilder { @Override
	public String toString() { return ""AirlineBaseTemplateBuilder [messageBuilder="" + messageBuilder
				+ ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
  public abstract class AirlineBaseTemplateBuilder extends TemplateBaseBuilder { /**
 * Base Airline Template builder. It doesn't contain any method nor field.
 * 
 * @author Donato Rimenti
 * 
 */  @Override
	public String toString() { return ""AirlineBaseTemplateBuilder [messageBuilder="" + messageBuilder
				+ ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.bean.FbBotMillBean#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/AirlineBoardingPassTemplateBuilder.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import co.aurasphere.botmill.fb.model.base.AttachmentType;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;
import co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.AirlineBoardingPassTemplatePayload;
import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.BoardingPass;


/**
 * A builder for an Airline Boarding Pass Template.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-boardingpass-template""
 *      > Facebook's Messenger Platform Airline Boarding Pass Template
 *      Documentation</a>
 * 
 */
public class AirlineBoardingPassTemplateBuilder extends
		AirlineBaseTemplateBuilder {

	/**
	 * The payload of the current builder.
	 */
	private AirlineBoardingPassTemplatePayload payload;

	/**
	 * Default constructor. Creates a builder for an Airline Boarding Pass
	 * Template.
	 * 
	 * @param introMessage
	 *            the message to send before the template. Can't be empty.
	 * @param locale
	 *            the current locale. Can't be empty and must be in format
	 *            [a-z]{2}_[A-Z]{2}. Locale must be in format [a-z]{2}_[A-Z]{2}.
	 *            For more information see<a href=
	 *            ""https://developers.facebook.com/docs/internationalization#locales""
	 *            > Facebook's locale support</a>.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-boardingpass-template""
	 *      > Facebook's Messenger Platform Airline Boarding Pass Template
	 *      Documentation</a>
	 */
	AirlineBoardingPassTemplateBuilder(String introMessage, String locale) {
		this.payload = new AirlineBoardingPassTemplatePayload(introMessage,
				locale);
		this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload);
	}

	/**
	 * Adds a {@link BoardingPass} object to this template. This field is
	 * mandatory for this template and should contain at least one element.
	 * 
	 * @param passengerName
	 *            the passenger name. It can't be empty.
	 * @param pnrNumber
	 *            the Passenger Name Record number (Booking Number). It can't be
	 *            empty.
	 * @param logoImageUrl
	 *            the URL of the logo. It can't be empty.
	 * @param aboveBarCodeImageUrl
	 *            the URL of the image to be shown above the bar code in the
	 *            center of the pass. It can't be empty.
	 * @return a builder for a {@link BoardingPass} object.
	 */
	public BoardingPassBuilder addBoardingPass(String passengerName,
			String pnrNumber, String logoImageUrl, String aboveBarCodeImageUrl) {
		return new BoardingPassBuilder(this, passengerName, pnrNumber,
				logoImageUrl, aboveBarCodeImageUrl);
	}

	/**
	 * Adds a {@link BoardingPass} object to this template. This field is
	 * mandatory for this template and should contain at least one element.
	 * 
	 * @param boardingPass
	 *            the boarding pass object to add. It can't be null.
	 * @return this builder.
	 */
	public AirlineBoardingPassTemplateBuilder addBoardingPass(
			BoardingPass boardingPass) {
		this.payload.addBoardingPass(boardingPass);
		return this;
	}

	/**
	 * Sets the theme color for this template. This field is optional. If not
	 * specified, the template will use Facebook's default theme (light blue).
	 * 
	 * @param themeColor
	 *            the color for this template. The Color must be a valid RGB
	 *            color in the format #RRGGBB.
	 * @return this builder.
	 */
	public AirlineBoardingPassTemplateBuilder setThemeColor(String themeColor) {
		this.payload.setThemeColor(themeColor);
		return this;
	}

	/**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param title
	 *            the quick reply button label. It can't be empty.
	 * @param payload
	 *            the payload sent back when the button is pressed. It can't be
	 *            empty.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */
	public AirlineBoardingPassTemplateBuilder addQuickReply(String title,
			String payload) {
		this.messageBuilder.addQuickReply(title, payload);
		return this;
	}

	/**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param reply
	 *            a quick reply object.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */
	public AirlineBoardingPassTemplateBuilder addQuickReply(QuickReply reply) {
		this.messageBuilder.addQuickReply(reply);
		return this;
	}

	/**
	 * Builds the {@link FbBotMillResponse} that the bot should return. The
	 * template builders, like this, delegate an
	 * {@link AttachmentMessageBuilder} to build the message.
	 * 
	 * @param envelope
	 *            a {@link MessageEnvelope} object representing the incoming
	 *            message.
	 * @return the {@link FbBotMillResponse} of this bot.
	 */
	@Override
	public FbBotMillResponse build(MessageEnvelope envelope) {
		return this.messageBuilder.build(envelope);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.factory.AirlineBaseTemplateBuilder
	 * #toString()
	 */
	@Override
	public String toString() {
		return ""AirlineBoardingPassTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public class AirlineBoardingPassTemplateBuilder extends
		AirlineBaseTemplateBuilder { private AirlineBoardingPassTemplatePayload payload; AirlineBoardingPassTemplateBuilder(String introMessage, String locale) { this.payload = new AirlineBoardingPassTemplatePayload(introMessage,
				locale); this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload); } public BoardingPassBuilder addBoardingPass(String passengerName,
			String pnrNumber, String logoImageUrl, String aboveBarCodeImageUrl) { return new BoardingPassBuilder(this, passengerName, pnrNumber,
				logoImageUrl, aboveBarCodeImageUrl); } public AirlineBoardingPassTemplateBuilder addBoardingPass(
			BoardingPass boardingPass) { this.payload.addBoardingPass(boardingPass); return this; } public AirlineBoardingPassTemplateBuilder setThemeColor(String themeColor) { this.payload.setThemeColor(themeColor); return this; } public AirlineBoardingPassTemplateBuilder addQuickReply(String title,
			String payload) { this.messageBuilder.addQuickReply(title, payload); return this; } public AirlineBoardingPassTemplateBuilder addQuickReply(QuickReply reply) { this.messageBuilder.addQuickReply(reply); return this; } @Override
	public FbBotMillResponse build(MessageEnvelope envelope) { return this.messageBuilder.build(envelope); } @Override
	public String toString() { return ""AirlineBoardingPassTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public class AirlineBoardingPassTemplateBuilder extends
		AirlineBaseTemplateBuilder { private AirlineBoardingPassTemplatePayload payload; AirlineBoardingPassTemplateBuilder(String introMessage, String locale) { this.payload = new AirlineBoardingPassTemplatePayload(introMessage,
				locale); this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload); } public BoardingPassBuilder addBoardingPass(String passengerName,
			String pnrNumber, String logoImageUrl, String aboveBarCodeImageUrl) { return new BoardingPassBuilder(this, passengerName, pnrNumber,
				logoImageUrl, aboveBarCodeImageUrl); } public AirlineBoardingPassTemplateBuilder addBoardingPass(
			BoardingPass boardingPass) { this.payload.addBoardingPass(boardingPass); return this; } public AirlineBoardingPassTemplateBuilder setThemeColor(String themeColor) { this.payload.setThemeColor(themeColor); return this; } public AirlineBoardingPassTemplateBuilder addQuickReply(String title,
			String payload) { this.messageBuilder.addQuickReply(title, payload); return this; } public AirlineBoardingPassTemplateBuilder addQuickReply(QuickReply reply) { this.messageBuilder.addQuickReply(reply); return this; } @Override
	public FbBotMillResponse build(MessageEnvelope envelope) { return this.messageBuilder.build(envelope); } @Override
	public String toString() { return ""AirlineBoardingPassTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import co.aurasphere.botmill.fb.model.base.AttachmentType; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; import co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.AirlineBoardingPassTemplatePayload; import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply; import co.aurasphere.botmill.fb.model.outcoming.template.airline.BoardingPass; 
  public class AirlineBoardingPassTemplateBuilder extends
		AirlineBaseTemplateBuilder { /**
 * A builder for an Airline Boarding Pass Template.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-boardingpass-template""
 *      > Facebook's Messenger Platform Airline Boarding Pass Template
 *      Documentation</a>
 * 
 */  private AirlineBoardingPassTemplatePayload payload; /**
	 * The payload of the current builder.
	 */  AirlineBoardingPassTemplateBuilder(String introMessage, String locale) { this.payload = new AirlineBoardingPassTemplatePayload(introMessage,
				locale); this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload); } /**
	 * Default constructor. Creates a builder for an Airline Boarding Pass
	 * Template.
	 * 
	 * @param introMessage
	 *            the message to send before the template. Can't be empty.
	 * @param locale
	 *            the current locale. Can't be empty and must be in format
	 *            [a-z]{2}_[A-Z]{2}. Locale must be in format [a-z]{2}_[A-Z]{2}.
	 *            For more information see<a href=
	 *            ""https://developers.facebook.com/docs/internationalization#locales""
	 *            > Facebook's locale support</a>.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-boardingpass-template""
	 *      > Facebook's Messenger Platform Airline Boarding Pass Template
	 *      Documentation</a>
	 */  public BoardingPassBuilder addBoardingPass(String passengerName,
			String pnrNumber, String logoImageUrl, String aboveBarCodeImageUrl) { return new BoardingPassBuilder(this, passengerName, pnrNumber,
				logoImageUrl, aboveBarCodeImageUrl); } /**
	 * Adds a {@link BoardingPass} object to this template. This field is
	 * mandatory for this template and should contain at least one element.
	 * 
	 * @param passengerName
	 *            the passenger name. It can't be empty.
	 * @param pnrNumber
	 *            the Passenger Name Record number (Booking Number). It can't be
	 *            empty.
	 * @param logoImageUrl
	 *            the URL of the logo. It can't be empty.
	 * @param aboveBarCodeImageUrl
	 *            the URL of the image to be shown above the bar code in the
	 *            center of the pass. It can't be empty.
	 * @return a builder for a {@link BoardingPass} object.
	 */  public AirlineBoardingPassTemplateBuilder addBoardingPass(
			BoardingPass boardingPass) { this.payload.addBoardingPass(boardingPass); return this; } /**
	 * Adds a {@link BoardingPass} object to this template. This field is
	 * mandatory for this template and should contain at least one element.
	 * 
	 * @param boardingPass
	 *            the boarding pass object to add. It can't be null.
	 * @return this builder.
	 */  public AirlineBoardingPassTemplateBuilder setThemeColor(String themeColor) { this.payload.setThemeColor(themeColor); return this; } /**
	 * Sets the theme color for this template. This field is optional. If not
	 * specified, the template will use Facebook's default theme (light blue).
	 * 
	 * @param themeColor
	 *            the color for this template. The Color must be a valid RGB
	 *            color in the format #RRGGBB.
	 * @return this builder.
	 */  public AirlineBoardingPassTemplateBuilder addQuickReply(String title,
			String payload) { this.messageBuilder.addQuickReply(title, payload); return this; } /**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param title
	 *            the quick reply button label. It can't be empty.
	 * @param payload
	 *            the payload sent back when the button is pressed. It can't be
	 *            empty.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */  public AirlineBoardingPassTemplateBuilder addQuickReply(QuickReply reply) { this.messageBuilder.addQuickReply(reply); return this; } /**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param reply
	 *            a quick reply object.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */  @Override
	public FbBotMillResponse build(MessageEnvelope envelope) { return this.messageBuilder.build(envelope); } /**
	 * Builds the {@link FbBotMillResponse} that the bot should return. The
	 * template builders, like this, delegate an
	 * {@link AttachmentMessageBuilder} to build the message.
	 * 
	 * @param envelope
	 *            a {@link MessageEnvelope} object representing the incoming
	 *            message.
	 * @return the {@link FbBotMillResponse} of this bot.
	 */  @Override
	public String toString() { return ""AirlineBoardingPassTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.factory.AirlineBaseTemplateBuilder
	 * #toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/AirlineCheckinTemplateBuilder.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import co.aurasphere.botmill.fb.model.base.AttachmentType;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;
import co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.AirlineCheckinTemplatePayload;
import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfo;


/**
 * A builder for an Airline Checkin Template.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-checkin-template""
 *      > Facebook's Messenger Platform Airline Checkin Template
 *      Documentation</a>
 * 
 */
public class AirlineCheckinTemplateBuilder extends FlightInfoBuilderDelegator {

	/**
	 * The payload managed by this builder.
	 */
	private AirlineCheckinTemplatePayload payload;

	/**
	 * Default constructor. Creates a builder for an Airline Flight Update
	 * Template.
	 *
	 * @param introMessage
	 *            the message to send before the template. Can't be empty.
	 * @param locale
	 *            the current locale. Can't be empty and must be in format
	 *            [a-z]{2}_[A-Z]{2}. Locale must be in format [a-z]{2}_[A-Z]{2}.
	 *            For more information see<a href=
	 *            ""https://developers.facebook.com/docs/internationalization#locales""
	 *            > Facebook's locale support</a>. param pnrNumber the Passenger
	 *            Name Record number (Booking Number). It can't be empty.
	 * @param pnrNumber
	 *            the pnr number
	 * @param checkinUrl
	 *            the URL for passengers to check-in. It can't be empty.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-checkin-template""
	 *      > Facebook's Messenger Platform Airline Checkin Template
	 *      Documentation</a>
	 */
	AirlineCheckinTemplateBuilder(String introMessage, String locale,
			String pnrNumber, String checkinUrl) {
		this.payload = new AirlineCheckinTemplatePayload(introMessage, locale,
				pnrNumber, checkinUrl);
		this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload);
	}

	/**
	 * Adds a {@link FlightInfo} object to this template. This object is
	 * mandatory and can't be null for Airline templates. There can be multiple
	 * flight info object but there must be at least one.
	 * 
	 * @param flightNumber
	 *            the flight number. It can't be empty.
	 * @return a builder for the {@link FlightInfo} object.
	 */
	public FlightInfoBuilder<AirlineCheckinTemplateBuilder> addFlightInfo(
			String flightNumber) {
		return new FlightInfoBuilder<AirlineCheckinTemplateBuilder>(this,
				flightNumber);
	}

	/**
	 * Adds a {@link FlightInfo} object to this template. This object is
	 * mandatory and can't be null for Airline templates. There can be multiple
	 * flight info object but there must be at least one. Used only by delegated
	 * classes. Should not be called directly. Use
	 * {@link #addFlightInfo(String)} instead.
	 * 
	 * @param flightInfo
	 *            the flight info to add. It can't be null.
	 */
	@Override
	void addFlightInfo(FlightInfo flightInfo) {
		this.payload.addFlightInfo(flightInfo);
	}

	/**
	 * Sets the theme color for this template. This field is optional. If not
	 * specified, the template will use Facebook's default theme (light blue).
	 * 
	 * @param themeColor
	 *            the color for this template. The Color must be a valid RGB
	 *            color in the format #RRGGBB.
	 * 
	 * @return this builder.
	 */
	public AirlineCheckinTemplateBuilder setThemeColor(String themeColor) {
		this.payload.setThemeColor(themeColor);
		return this;
	}

	/**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param title
	 *            the quick reply button label. It can't be empty.
	 * @param payload
	 *            the payload sent back when the button is pressed. It can't be
	 *            empty.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */
	public AirlineCheckinTemplateBuilder addQuickReply(String title,
			String payload) {
		this.messageBuilder.addQuickReply(title, payload);
		return this;
	}

	/**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param reply
	 *            a quick reply object.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */
	public AirlineCheckinTemplateBuilder addQuickReply(QuickReply reply) {
		this.messageBuilder.addQuickReply(reply);
		return this;
	}

	/**
	 * Builds the {@link FbBotMillResponse} that the bot should return. The
	 * template builders, like this, delegate an
	 * {@link AttachmentMessageBuilder} to build the message.
	 * 
	 * @param envelope
	 *            a {@link MessageEnvelope} object representing the incoming
	 *            message.
	 * @return the {@link FbBotMillResponse} of this bot.
	 */
	@Override
	public FbBotMillResponse build(MessageEnvelope envelope) {
		return this.messageBuilder.build(envelope);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.factory.AirlineBaseTemplateBuilder
	 * #toString()
	 */
	@Override
	public String toString() {
		return ""AirlineCheckinTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public class AirlineCheckinTemplateBuilder extends FlightInfoBuilderDelegator { private AirlineCheckinTemplatePayload payload; AirlineCheckinTemplateBuilder(String introMessage, String locale,
			String pnrNumber, String checkinUrl) { this.payload = new AirlineCheckinTemplatePayload(introMessage, locale,
				pnrNumber, checkinUrl); this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload); } public FlightInfoBuilder<AirlineCheckinTemplateBuilder> addFlightInfo(
			String flightNumber) { return new FlightInfoBuilder<AirlineCheckinTemplateBuilder>(this,
				flightNumber); } @Override
	void addFlightInfo(FlightInfo flightInfo) { this.payload.addFlightInfo(flightInfo); } public AirlineCheckinTemplateBuilder setThemeColor(String themeColor) { this.payload.setThemeColor(themeColor); return this; } public AirlineCheckinTemplateBuilder addQuickReply(String title,
			String payload) { this.messageBuilder.addQuickReply(title, payload); return this; } public AirlineCheckinTemplateBuilder addQuickReply(QuickReply reply) { this.messageBuilder.addQuickReply(reply); return this; } @Override
	public FbBotMillResponse build(MessageEnvelope envelope) { return this.messageBuilder.build(envelope); } @Override
	public String toString() { return ""AirlineCheckinTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public class AirlineCheckinTemplateBuilder extends FlightInfoBuilderDelegator { private AirlineCheckinTemplatePayload payload; AirlineCheckinTemplateBuilder(String introMessage, String locale,
			String pnrNumber, String checkinUrl) { this.payload = new AirlineCheckinTemplatePayload(introMessage, locale,
				pnrNumber, checkinUrl); this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload); } public FlightInfoBuilder<AirlineCheckinTemplateBuilder> addFlightInfo(
			String flightNumber) { return new FlightInfoBuilder<AirlineCheckinTemplateBuilder>(this,
				flightNumber); } @Override
	void addFlightInfo(FlightInfo flightInfo) { this.payload.addFlightInfo(flightInfo); } public AirlineCheckinTemplateBuilder setThemeColor(String themeColor) { this.payload.setThemeColor(themeColor); return this; } public AirlineCheckinTemplateBuilder addQuickReply(String title,
			String payload) { this.messageBuilder.addQuickReply(title, payload); return this; } public AirlineCheckinTemplateBuilder addQuickReply(QuickReply reply) { this.messageBuilder.addQuickReply(reply); return this; } @Override
	public FbBotMillResponse build(MessageEnvelope envelope) { return this.messageBuilder.build(envelope); } @Override
	public String toString() { return ""AirlineCheckinTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import co.aurasphere.botmill.fb.model.base.AttachmentType; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; import co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.AirlineCheckinTemplatePayload; import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply; import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfo; 
  public class AirlineCheckinTemplateBuilder extends FlightInfoBuilderDelegator { /**
 * A builder for an Airline Checkin Template.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-checkin-template""
 *      > Facebook's Messenger Platform Airline Checkin Template
 *      Documentation</a>
 * 
 */  private AirlineCheckinTemplatePayload payload; /**
	 * The payload managed by this builder.
	 */  AirlineCheckinTemplateBuilder(String introMessage, String locale,
			String pnrNumber, String checkinUrl) { this.payload = new AirlineCheckinTemplatePayload(introMessage, locale,
				pnrNumber, checkinUrl); this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload); } /**
	 * Default constructor. Creates a builder for an Airline Flight Update
	 * Template.
	 *
	 * @param introMessage
	 *            the message to send before the template. Can't be empty.
	 * @param locale
	 *            the current locale. Can't be empty and must be in format
	 *            [a-z]{2}_[A-Z]{2}. Locale must be in format [a-z]{2}_[A-Z]{2}.
	 *            For more information see<a href=
	 *            ""https://developers.facebook.com/docs/internationalization#locales""
	 *            > Facebook's locale support</a>. param pnrNumber the Passenger
	 *            Name Record number (Booking Number). It can't be empty.
	 * @param pnrNumber
	 *            the pnr number
	 * @param checkinUrl
	 *            the URL for passengers to check-in. It can't be empty.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-checkin-template""
	 *      > Facebook's Messenger Platform Airline Checkin Template
	 *      Documentation</a>
	 */  public FlightInfoBuilder<AirlineCheckinTemplateBuilder> addFlightInfo(
			String flightNumber) { return new FlightInfoBuilder<AirlineCheckinTemplateBuilder>(this,
				flightNumber); } /**
	 * Adds a {@link FlightInfo} object to this template. This object is
	 * mandatory and can't be null for Airline templates. There can be multiple
	 * flight info object but there must be at least one.
	 * 
	 * @param flightNumber
	 *            the flight number. It can't be empty.
	 * @return a builder for the {@link FlightInfo} object.
	 */  @Override
	void addFlightInfo(FlightInfo flightInfo) { this.payload.addFlightInfo(flightInfo); } /**
	 * Adds a {@link FlightInfo} object to this template. This object is
	 * mandatory and can't be null for Airline templates. There can be multiple
	 * flight info object but there must be at least one. Used only by delegated
	 * classes. Should not be called directly. Use
	 * {@link #addFlightInfo(String)} instead.
	 * 
	 * @param flightInfo
	 *            the flight info to add. It can't be null.
	 */  public AirlineCheckinTemplateBuilder setThemeColor(String themeColor) { this.payload.setThemeColor(themeColor); return this; } /**
	 * Sets the theme color for this template. This field is optional. If not
	 * specified, the template will use Facebook's default theme (light blue).
	 * 
	 * @param themeColor
	 *            the color for this template. The Color must be a valid RGB
	 *            color in the format #RRGGBB.
	 * 
	 * @return this builder.
	 */  public AirlineCheckinTemplateBuilder addQuickReply(String title,
			String payload) { this.messageBuilder.addQuickReply(title, payload); return this; } /**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param title
	 *            the quick reply button label. It can't be empty.
	 * @param payload
	 *            the payload sent back when the button is pressed. It can't be
	 *            empty.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */  public AirlineCheckinTemplateBuilder addQuickReply(QuickReply reply) { this.messageBuilder.addQuickReply(reply); return this; } /**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param reply
	 *            a quick reply object.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */  @Override
	public FbBotMillResponse build(MessageEnvelope envelope) { return this.messageBuilder.build(envelope); } /**
	 * Builds the {@link FbBotMillResponse} that the bot should return. The
	 * template builders, like this, delegate an
	 * {@link AttachmentMessageBuilder} to build the message.
	 * 
	 * @param envelope
	 *            a {@link MessageEnvelope} object representing the incoming
	 *            message.
	 * @return the {@link FbBotMillResponse} of this bot.
	 */  @Override
	public String toString() { return ""AirlineCheckinTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.factory.AirlineBaseTemplateBuilder
	 * #toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/AirlineFlightUpdateTemplateBuilder.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import co.aurasphere.botmill.fb.model.base.AttachmentType;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;
import co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.AirlineFlightUpdateTemplatePayload;
import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfo;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.UpdateType;


/**
 * Builder for an Airline Flight Update Template.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-itinerary-template""
 *      > Facebook's Messenger Platform Airline Itinerary Template
 *      Documentation</a>
 * 
 */
public class AirlineFlightUpdateTemplateBuilder extends
		FlightInfoBuilderDelegator {

	/**
	 * The payload managed by this builder.
	 */
	private AirlineFlightUpdateTemplatePayload payload;

	/**
	 * Default constructor. Creates a builder for an Airline Flight Update
	 * Template.
	 * 
	 * @param introMessage
	 *            the message to send before the template. Can't be empty.
	 * @param locale
	 *            the current locale. Can't be empty and must be in format
	 *            [a-z]{2}_[A-Z]{2}. Locale must be in format [a-z]{2}_[A-Z]{2}.
	 *            For more information see<a href=
	 *            ""https://developers.facebook.com/docs/internationalization#locales""
	 *            > Facebook's locale support</a>.
	 * @param pnrNumber
	 *            the Passenger Name Record number (Booking Number). It can't be
	 *            empty.
	 * @param updateType
	 *            an {@link UpdateType} object that represents the kind of
	 *            status update of the flight. Can't be null.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-update-template""
	 *      > Facebook's Messenger Platform Airline Flight Update Template
	 *      Documentation</a>
	 */
	AirlineFlightUpdateTemplateBuilder(String introMessage, String locale,
			String pnrNumber, UpdateType updateType) {
		this.payload = new AirlineFlightUpdateTemplatePayload(introMessage,
				locale, pnrNumber, updateType);
		this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload);
	}

	/**
	 * Adds a {@link FlightInfo} object to this template. This object is
	 * mandatory and can't be null for Airline templates.
	 * 
	 * @param flightNumber
	 *            the flight number.
	 * @return a builder for the {@link FlightInfo} object.
	 */
	public FlightInfoBuilder<AirlineFlightUpdateTemplateBuilder> addFlightInfo(
			String flightNumber) {
		return new FlightInfoBuilder<AirlineFlightUpdateTemplateBuilder>(this,
				flightNumber);
	}

	/**
	 * Adds a {@link FlightInfo} object to this template. This object is
	 * mandatory and can't be null for Airline templates. Used only by delegated
	 * classes. Should not be called directly. Use
	 * {@link #addFlightInfo(String)} instead.
	 * 
	 * @param flightInfo
	 *            the {@link FlightInfo} object to add.
	 */
	@Override
	void addFlightInfo(FlightInfo flightInfo) {
		this.payload.setUpdateFlightInfo(flightInfo);
	}

	/**
	 * Sets the theme color for this template. This field is optional. If not
	 * specified, the template will use Facebook's default theme (light blue).
	 * 
	 * @param themeColor
	 *            the color for this template. The Color must be a valid RGB
	 *            color in the format #RRGGBB.
	 * 
	 * @return this builder.
	 */
	public AirlineFlightUpdateTemplateBuilder setThemeColor(String themeColor) {
		this.payload.setThemeColor(themeColor);
		return this;
	}

	/**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param title
	 *            the quick reply button label. It can't be empty.
	 * @param payload
	 *            the payload sent back when the button is pressed. It can't be
	 *            empty.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */
	public AirlineFlightUpdateTemplateBuilder addQuickReply(String title,
			String payload) {
		this.messageBuilder.addQuickReply(title, payload);
		return this;
	}

	/**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param reply
	 *            a quick reply object.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */
	public AirlineFlightUpdateTemplateBuilder addQuickReply(QuickReply reply) {
		this.messageBuilder.addQuickReply(reply);
		return this;
	}

	/**
	 * Builds the {@link FbBotMillResponse} that the bot should return. The
	 * template builders, like this, delegate an
	 * {@link AttachmentMessageBuilder} to build the message.
	 * 
	 * @param envelope
	 *            a {@link MessageEnvelope} object representing the incoming
	 *            message.
	 * @return the {@link FbBotMillResponse} of this bot.
	 */
	@Override
	public FbBotMillResponse build(MessageEnvelope envelope) {
		return this.messageBuilder.build(envelope);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.factory.AirlineBaseTemplateBuilder
	 * #toString()
	 */
	@Override
	public String toString() {
		return ""AirlineFlightUpdateTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public class AirlineFlightUpdateTemplateBuilder extends
		FlightInfoBuilderDelegator { private AirlineFlightUpdateTemplatePayload payload; AirlineFlightUpdateTemplateBuilder(String introMessage, String locale,
			String pnrNumber, UpdateType updateType) { this.payload = new AirlineFlightUpdateTemplatePayload(introMessage,
				locale, pnrNumber, updateType); this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload); } public FlightInfoBuilder<AirlineFlightUpdateTemplateBuilder> addFlightInfo(
			String flightNumber) { return new FlightInfoBuilder<AirlineFlightUpdateTemplateBuilder>(this,
				flightNumber); } @Override
	void addFlightInfo(FlightInfo flightInfo) { this.payload.setUpdateFlightInfo(flightInfo); } public AirlineFlightUpdateTemplateBuilder setThemeColor(String themeColor) { this.payload.setThemeColor(themeColor); return this; } public AirlineFlightUpdateTemplateBuilder addQuickReply(String title,
			String payload) { this.messageBuilder.addQuickReply(title, payload); return this; } public AirlineFlightUpdateTemplateBuilder addQuickReply(QuickReply reply) { this.messageBuilder.addQuickReply(reply); return this; } @Override
	public FbBotMillResponse build(MessageEnvelope envelope) { return this.messageBuilder.build(envelope); } @Override
	public String toString() { return ""AirlineFlightUpdateTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public class AirlineFlightUpdateTemplateBuilder extends
		FlightInfoBuilderDelegator { private AirlineFlightUpdateTemplatePayload payload; AirlineFlightUpdateTemplateBuilder(String introMessage, String locale,
			String pnrNumber, UpdateType updateType) { this.payload = new AirlineFlightUpdateTemplatePayload(introMessage,
				locale, pnrNumber, updateType); this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload); } public FlightInfoBuilder<AirlineFlightUpdateTemplateBuilder> addFlightInfo(
			String flightNumber) { return new FlightInfoBuilder<AirlineFlightUpdateTemplateBuilder>(this,
				flightNumber); } @Override
	void addFlightInfo(FlightInfo flightInfo) { this.payload.setUpdateFlightInfo(flightInfo); } public AirlineFlightUpdateTemplateBuilder setThemeColor(String themeColor) { this.payload.setThemeColor(themeColor); return this; } public AirlineFlightUpdateTemplateBuilder addQuickReply(String title,
			String payload) { this.messageBuilder.addQuickReply(title, payload); return this; } public AirlineFlightUpdateTemplateBuilder addQuickReply(QuickReply reply) { this.messageBuilder.addQuickReply(reply); return this; } @Override
	public FbBotMillResponse build(MessageEnvelope envelope) { return this.messageBuilder.build(envelope); } @Override
	public String toString() { return ""AirlineFlightUpdateTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import co.aurasphere.botmill.fb.model.base.AttachmentType; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; import co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.AirlineFlightUpdateTemplatePayload; import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply; import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfo; import co.aurasphere.botmill.fb.model.outcoming.template.airline.UpdateType; 
  public class AirlineFlightUpdateTemplateBuilder extends
		FlightInfoBuilderDelegator { /**
 * Builder for an Airline Flight Update Template.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-itinerary-template""
 *      > Facebook's Messenger Platform Airline Itinerary Template
 *      Documentation</a>
 * 
 */  private AirlineFlightUpdateTemplatePayload payload; /**
	 * The payload managed by this builder.
	 */  AirlineFlightUpdateTemplateBuilder(String introMessage, String locale,
			String pnrNumber, UpdateType updateType) { this.payload = new AirlineFlightUpdateTemplatePayload(introMessage,
				locale, pnrNumber, updateType); this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload); } /**
	 * Default constructor. Creates a builder for an Airline Flight Update
	 * Template.
	 * 
	 * @param introMessage
	 *            the message to send before the template. Can't be empty.
	 * @param locale
	 *            the current locale. Can't be empty and must be in format
	 *            [a-z]{2}_[A-Z]{2}. Locale must be in format [a-z]{2}_[A-Z]{2}.
	 *            For more information see<a href=
	 *            ""https://developers.facebook.com/docs/internationalization#locales""
	 *            > Facebook's locale support</a>.
	 * @param pnrNumber
	 *            the Passenger Name Record number (Booking Number). It can't be
	 *            empty.
	 * @param updateType
	 *            an {@link UpdateType} object that represents the kind of
	 *            status update of the flight. Can't be null.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-update-template""
	 *      > Facebook's Messenger Platform Airline Flight Update Template
	 *      Documentation</a>
	 */  public FlightInfoBuilder<AirlineFlightUpdateTemplateBuilder> addFlightInfo(
			String flightNumber) { return new FlightInfoBuilder<AirlineFlightUpdateTemplateBuilder>(this,
				flightNumber); } /**
	 * Adds a {@link FlightInfo} object to this template. This object is
	 * mandatory and can't be null for Airline templates.
	 * 
	 * @param flightNumber
	 *            the flight number.
	 * @return a builder for the {@link FlightInfo} object.
	 */  @Override
	void addFlightInfo(FlightInfo flightInfo) { this.payload.setUpdateFlightInfo(flightInfo); } /**
	 * Adds a {@link FlightInfo} object to this template. This object is
	 * mandatory and can't be null for Airline templates. Used only by delegated
	 * classes. Should not be called directly. Use
	 * {@link #addFlightInfo(String)} instead.
	 * 
	 * @param flightInfo
	 *            the {@link FlightInfo} object to add.
	 */  public AirlineFlightUpdateTemplateBuilder setThemeColor(String themeColor) { this.payload.setThemeColor(themeColor); return this; } /**
	 * Sets the theme color for this template. This field is optional. If not
	 * specified, the template will use Facebook's default theme (light blue).
	 * 
	 * @param themeColor
	 *            the color for this template. The Color must be a valid RGB
	 *            color in the format #RRGGBB.
	 * 
	 * @return this builder.
	 */  public AirlineFlightUpdateTemplateBuilder addQuickReply(String title,
			String payload) { this.messageBuilder.addQuickReply(title, payload); return this; } /**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param title
	 *            the quick reply button label. It can't be empty.
	 * @param payload
	 *            the payload sent back when the button is pressed. It can't be
	 *            empty.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */  public AirlineFlightUpdateTemplateBuilder addQuickReply(QuickReply reply) { this.messageBuilder.addQuickReply(reply); return this; } /**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param reply
	 *            a quick reply object.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */  @Override
	public FbBotMillResponse build(MessageEnvelope envelope) { return this.messageBuilder.build(envelope); } /**
	 * Builds the {@link FbBotMillResponse} that the bot should return. The
	 * template builders, like this, delegate an
	 * {@link AttachmentMessageBuilder} to build the message.
	 * 
	 * @param envelope
	 *            a {@link MessageEnvelope} object representing the incoming
	 *            message.
	 * @return the {@link FbBotMillResponse} of this bot.
	 */  @Override
	public String toString() { return ""AirlineFlightUpdateTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.factory.AirlineBaseTemplateBuilder
	 * #toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/AirlineItineraryTemplateBuilder.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import java.math.BigDecimal;

import co.aurasphere.botmill.fb.model.base.AttachmentType;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;
import co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.AirlineItineraryTemplatePayload;
import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfo;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfoExtended;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.PassengerInfo;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.PassengerSegmentInfo;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.PriceInfo;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.TravelClass;


/**
 * Builder for an Airline Itinerary Template.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-itinerary-template""
 *      > Facebook's Messenger Platform Airline Itinerary Template
 *      Documentation</a>
 * 
 */
public class AirlineItineraryTemplateBuilder extends FlightInfoBuilderDelegator {

	/**
	 * The payload managed by this builder.
	 */
	private AirlineItineraryTemplatePayload payload;

	/**
	 * Default constructor. Creates a builder for an Airline Itinerary Template.
	 * 
	 * @param introMessage
	 *            the message to send before the template. Can't be empty.
	 * @param locale
	 *            the current locale. Can't be empty and must be in format
	 *            [a-z]{2}_[A-Z]{2}. Locale must be in format [a-z]{2}_[A-Z]{2}.
	 *            For more information see<a href=
	 *            ""https://developers.facebook.com/docs/internationalization#locales""
	 *            > Facebook's locale support</a>.
	 * @param pnrNumber
	 *            the Passenger Name Record number (Booking Number). It can't be
	 *            empty.
	 * @param totalPrice
	 *            the total price of the itinerary.
	 * @param currency
	 *            the currency for the price. Currency must be a three digit
	 *            ISO-4217-3 code in format [A-Z]{3}. For more information see
	 *            <a href=
	 *            ""https://developers.facebook.com/docs/payments/reference/supportedcurrencies""
	 *            > Facebook's currency support</a>
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-itinerary-template""
	 *      > Facebook's Messenger Platform Airline Itinerary Template
	 *      Documentation</a>
	 */
	AirlineItineraryTemplateBuilder(String introMessage, String locale,
			String pnrNumber, BigDecimal totalPrice, String currency) {
		this.payload = new AirlineItineraryTemplatePayload(introMessage,
				locale, pnrNumber, totalPrice, currency);
		this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload);
	}

	/**
	 * Sets the tax amount for this itinerary. This field is optional.
	 * 
	 * @param tax
	 *            the tax amount.
	 * @return this builder.
	 */
	public AirlineItineraryTemplateBuilder setTax(BigDecimal tax) {
		this.payload.setTax(tax);
		return this;
	}

	/**
	 * Sets the base price for this itinerary. This field is optional.
	 * 
	 * @param basePrice
	 *            the base price.
	 * @return this builder.
	 */
	public AirlineItineraryTemplateBuilder setBasePrice(BigDecimal basePrice) {
		this.payload.setBasePrice(basePrice);
		return this;
	}

	/**
	 * Adds a {@link PassengerInfo} object to this template. This field is
	 * mandatory for this template. There must be at least one element.
	 * 
	 * @param passengerId
	 *            the passenger ID. It can't be empty.
	 * @param name
	 *            the passenger name. It can't be empty.
	 * @param ticketNumber
	 *            the ticket number. This field is optional.
	 * @return this builder.
	 */
	public AirlineItineraryTemplateBuilder addPassengerInfo(String passengerId,
			String name, String ticketNumber) {
		PassengerInfo passengerInfo = new PassengerInfo(passengerId, name,
				ticketNumber);
		this.payload.addPassengerInfo(passengerInfo);
		return this;
	}

	/**
	 * Adds a {@link PassengerInfo} object to this template. This field is
	 * mandatory for this template. There must be at least one element.
	 * 
	 * @param passengerId
	 *            the passenger ID. It can't be empty.
	 * @param name
	 *            the passenger name. It can't be empty.
	 * @return this builder.
	 */
	public AirlineItineraryTemplateBuilder addPassengerInfo(String passengerId,
			String name) {
		PassengerInfo passengerInfo = new PassengerInfo(passengerId, name);
		this.payload.addPassengerInfo(passengerInfo);
		return this;
	}

	/**
	 * Adds a {@link PassengerInfo} object to this template. This field is
	 * mandatory for this template. There must be at least one element.
	 *
	 * @param passengerInfo
	 *            the passenger info
	 * @return this builder.
	 */
	public AirlineItineraryTemplateBuilder addPassengerInfo(
			PassengerInfo passengerInfo) {
		this.payload.addPassengerInfo(passengerInfo);
		return this;
	}

	/**
	 * Adds a {@link PassengerSegmentInfo} object to this template. This field
	 * is mandatory for this template. There must be at least one element.
	 *
	 * @param segmentId
	 *            used to identify a flight segment. It can't be empty and must
	 *            be unique within the itinerary.
	 * @param passengerId
	 *            the passengerId of {@link PassengerInfo} object. It can't be
	 *            empty and it must match an actual passenger.
	 * @param seat
	 *            the seat number for the passenger. It can't be empty.
	 * @param seatType
	 *            the seat type for the passenger (e.g. Economy comfort). It
	 *            can't be empty.
	 * @return the passenger segment info builder
	 */
	public PassengerSegmentInfoBuilder addPassengerSegmentInfo(
			String segmentId, String passengerId, String seat, String seatType) {
		return new PassengerSegmentInfoBuilder(this, segmentId, passengerId,
				seat, seatType);
	}

	/**
	 * Adds a {@link PassengerSegmentInfo} object to this template. This field
	 * is mandatory for this template. There must be at least one element.
	 * 
	 * @param segmentInfo
	 *            the segment info to add.
	 * @return this builder.
	 */
	public AirlineItineraryTemplateBuilder addPassengerSegmentInfo(
			PassengerSegmentInfo segmentInfo) {
		this.payload.addPassengerSegmentInfo(segmentInfo);
		return this;
	}

	/**
	 * Adds a {@link PriceInfo} object to this template. This field is optional.
	 * There can be at most 4 price info objects per template.
	 * 
	 * @param title
	 *            the price info title. It can't be empty.
	 * @param amount
	 *            the price amount.
	 * @return this builder.
	 */
	public AirlineItineraryTemplateBuilder addPriceInfo(String title,
			BigDecimal amount) {
		PriceInfo priceInfo = new PriceInfo(title, amount);
		this.payload.addPriceInfo(priceInfo);
		return this;
	}

	/**
	 * Adds a {@link PriceInfo} object to this template. This field is optional.
	 * There can be at most 4 price info objects per template.
	 * 
	 * @param title
	 *            the price info title. It can't be empty.
	 * @param amount
	 *            the price amount.
	 * @param currency
	 *            the pricing currency. This field is optional. Currency must be
	 *            a three digit ISO-4217-3 code in format [A-Z]{3}. For more
	 *            information see<a href=
	 *            ""https://developers.facebook.com/docs/payments/reference/supportedcurrencies""
	 *            > Facebook's currency support</a>
	 * @return this builder.
	 */
	public AirlineItineraryTemplateBuilder addPriceInfo(String title,
			BigDecimal amount, String currency) {
		PriceInfo priceInfo = new PriceInfo(title, amount, currency);
		this.payload.addPriceInfo(priceInfo);
		return this;
	}

	/**
	 * Adds a {@link PriceInfo} object to this template. This field is optional.
	 * There can be at most 4 price info objects per template.
	 * 
	 * @param priceInfo
	 *            the price info object to add.
	 * @return this builder.
	 */
	public AirlineItineraryTemplateBuilder addPriceInfo(PriceInfo priceInfo) {
		this.payload.addPriceInfo(priceInfo);
		return this;
	}

	/**
	 * Adds a {@link FlightInfoExtended} object to this template. This object is
	 * mandatory and can't be null for Airline templates. There can be multiple
	 * flight info object but there must be at least one.
	 * 
	 * @param flightNumber
	 *            the flight number. It can't be empty.
	 * @param connectionId
	 *            the connection ID, used to group together segments. It can't
	 *            be empty.
	 * @param segmentId
	 *            the segment ID. It must match the segment ID.
	 * @param travelClass
	 *            the travel class. It can't be null.
	 * @return a builder for the {@link FlightInfoExtended} object.
	 */
	public FlightInfoExtendedBuilder addFlightInfo(String flightNumber,
			String connectionId, String segmentId, TravelClass travelClass) {
		return new FlightInfoExtendedBuilder(this, flightNumber, connectionId,
				segmentId, travelClass);
	}

	/**
	 * Adds a {@link FlightInfoExtended} object to this template. This object is
	 * mandatory and can't be null for Airline templates. There can be multiple
	 * flight info object but there must be at least one.
	 * 
	 * @param flightInfo
	 *            the flight info to add.
	 * @return this builder.
	 */
	public AirlineItineraryTemplateBuilder addFlightInfo(
			FlightInfoExtended flightInfo) {
		this.payload.addFlightInfo(flightInfo);
		return this;
	}

	/**
	 * Adds a {@link FlightInfo} object to this template. This object is
	 * mandatory and can't be null for Airline templates. Used only by delegated
	 * classes. Should not be called directly. Use
	 * {@link #addFlightInfo(FlightInfoExtended)} instead.
	 * 
	 * @param flightInfo
	 *            the {@link FlightInfo} object to add.
	 */
	@Override
	@Deprecated
	void addFlightInfo(FlightInfo flightInfo) {
		addFlightInfo(flightInfo);
	}

	/**
	 * Sets the theme color for this template. This field is optional. If not
	 * specified, the template will use Facebook's default theme (light blue).
	 * 
	 * @param themeColor
	 *            the color for this template. The Color must be a valid RGB
	 *            color in the format #RRGGBB.
	 * @return this builder.
	 */
	public AirlineItineraryTemplateBuilder setThemeColor(String themeColor) {
		this.payload.setThemeColor(themeColor);
		return this;
	}

	/**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param title
	 *            the quick reply button label. It can't be empty.
	 * @param payload
	 *            the payload sent back when the button is pressed. It can't be
	 *            empty.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      >Facebook's Messenger Platform Quick Replies Documentation</a>
	 */
	public AirlineItineraryTemplateBuilder addQuickReply(String title,
			String payload) {
		this.messageBuilder.addQuickReply(title, payload);
		return this;
	}

	/**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param reply
	 *            a quick reply object.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      >Facebook's Messenger Platform Quick Replies Documentation</a>
	 */
	public AirlineItineraryTemplateBuilder addQuickReply(QuickReply reply) {
		this.messageBuilder.addQuickReply(reply);
		return this;
	}

	/**
	 * Builds the {@link FbBotMillResponse} that the bot should return. The
	 * template builders, like this, delegate an
	 * {@link AttachmentMessageBuilder} to build the message.
	 * 
	 * @param envelope
	 *            a {@link MessageEnvelope} object representing the incoming
	 *            message.
	 * @return the {@link FbBotMillResponse} of this bot.
	 */
	@Override
	public FbBotMillResponse build(MessageEnvelope envelope) {
		return this.messageBuilder.build(envelope);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.factory.AirlineBaseTemplateBuilder
	 * #toString()
	 */
	@Override
	public String toString() {
		return ""AirlineItineraryTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public class AirlineItineraryTemplateBuilder extends FlightInfoBuilderDelegator { private AirlineItineraryTemplatePayload payload; AirlineItineraryTemplateBuilder(String introMessage, String locale,
			String pnrNumber, BigDecimal totalPrice, String currency) { this.payload = new AirlineItineraryTemplatePayload(introMessage,
				locale, pnrNumber, totalPrice, currency); this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload); } public AirlineItineraryTemplateBuilder setTax(BigDecimal tax) { this.payload.setTax(tax); return this; } public AirlineItineraryTemplateBuilder setBasePrice(BigDecimal basePrice) { this.payload.setBasePrice(basePrice); return this; } public AirlineItineraryTemplateBuilder addPassengerInfo(String passengerId,
			String name, String ticketNumber) { PassengerInfo passengerInfo = new PassengerInfo(passengerId, name,
				ticketNumber); this.payload.addPassengerInfo(passengerInfo); return this; } public AirlineItineraryTemplateBuilder addPassengerInfo(String passengerId,
			String name) { PassengerInfo passengerInfo = new PassengerInfo(passengerId, name); this.payload.addPassengerInfo(passengerInfo); return this; } public AirlineItineraryTemplateBuilder addPassengerInfo(
			PassengerInfo passengerInfo) { this.payload.addPassengerInfo(passengerInfo); return this; } public PassengerSegmentInfoBuilder addPassengerSegmentInfo(
			String segmentId, String passengerId, String seat, String seatType) { return new PassengerSegmentInfoBuilder(this, segmentId, passengerId,
				seat, seatType); } public AirlineItineraryTemplateBuilder addPassengerSegmentInfo(
			PassengerSegmentInfo segmentInfo) { this.payload.addPassengerSegmentInfo(segmentInfo); return this; } public AirlineItineraryTemplateBuilder addPriceInfo(String title,
			BigDecimal amount) { PriceInfo priceInfo = new PriceInfo(title, amount); this.payload.addPriceInfo(priceInfo); return this; } public AirlineItineraryTemplateBuilder addPriceInfo(String title,
			BigDecimal amount, String currency) { PriceInfo priceInfo = new PriceInfo(title, amount, currency); this.payload.addPriceInfo(priceInfo); return this; } public AirlineItineraryTemplateBuilder addPriceInfo(PriceInfo priceInfo) { this.payload.addPriceInfo(priceInfo); return this; } public FlightInfoExtendedBuilder addFlightInfo(String flightNumber,
			String connectionId, String segmentId, TravelClass travelClass) { return new FlightInfoExtendedBuilder(this, flightNumber, connectionId,
				segmentId, travelClass); } public AirlineItineraryTemplateBuilder addFlightInfo(
			FlightInfoExtended flightInfo) { this.payload.addFlightInfo(flightInfo); return this; } @Override
	@Deprecated
	void addFlightInfo(FlightInfo flightInfo) { addFlightInfo(flightInfo); } public AirlineItineraryTemplateBuilder setThemeColor(String themeColor) { this.payload.setThemeColor(themeColor); return this; } public AirlineItineraryTemplateBuilder addQuickReply(String title,
			String payload) { this.messageBuilder.addQuickReply(title, payload); return this; } public AirlineItineraryTemplateBuilder addQuickReply(QuickReply reply) { this.messageBuilder.addQuickReply(reply); return this; } @Override
	public FbBotMillResponse build(MessageEnvelope envelope) { return this.messageBuilder.build(envelope); } @Override
	public String toString() { return ""AirlineItineraryTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public class AirlineItineraryTemplateBuilder extends FlightInfoBuilderDelegator { private AirlineItineraryTemplatePayload payload; AirlineItineraryTemplateBuilder(String introMessage, String locale,
			String pnrNumber, BigDecimal totalPrice, String currency) { this.payload = new AirlineItineraryTemplatePayload(introMessage,
				locale, pnrNumber, totalPrice, currency); this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload); } public AirlineItineraryTemplateBuilder setTax(BigDecimal tax) { this.payload.setTax(tax); return this; } public AirlineItineraryTemplateBuilder setBasePrice(BigDecimal basePrice) { this.payload.setBasePrice(basePrice); return this; } public AirlineItineraryTemplateBuilder addPassengerInfo(String passengerId,
			String name, String ticketNumber) { PassengerInfo passengerInfo = new PassengerInfo(passengerId, name,
				ticketNumber); this.payload.addPassengerInfo(passengerInfo); return this; } public AirlineItineraryTemplateBuilder addPassengerInfo(String passengerId,
			String name) { PassengerInfo passengerInfo = new PassengerInfo(passengerId, name); this.payload.addPassengerInfo(passengerInfo); return this; } public AirlineItineraryTemplateBuilder addPassengerInfo(
			PassengerInfo passengerInfo) { this.payload.addPassengerInfo(passengerInfo); return this; } public PassengerSegmentInfoBuilder addPassengerSegmentInfo(
			String segmentId, String passengerId, String seat, String seatType) { return new PassengerSegmentInfoBuilder(this, segmentId, passengerId,
				seat, seatType); } public AirlineItineraryTemplateBuilder addPassengerSegmentInfo(
			PassengerSegmentInfo segmentInfo) { this.payload.addPassengerSegmentInfo(segmentInfo); return this; } public AirlineItineraryTemplateBuilder addPriceInfo(String title,
			BigDecimal amount) { PriceInfo priceInfo = new PriceInfo(title, amount); this.payload.addPriceInfo(priceInfo); return this; } public AirlineItineraryTemplateBuilder addPriceInfo(String title,
			BigDecimal amount, String currency) { PriceInfo priceInfo = new PriceInfo(title, amount, currency); this.payload.addPriceInfo(priceInfo); return this; } public AirlineItineraryTemplateBuilder addPriceInfo(PriceInfo priceInfo) { this.payload.addPriceInfo(priceInfo); return this; } public FlightInfoExtendedBuilder addFlightInfo(String flightNumber,
			String connectionId, String segmentId, TravelClass travelClass) { return new FlightInfoExtendedBuilder(this, flightNumber, connectionId,
				segmentId, travelClass); } public AirlineItineraryTemplateBuilder addFlightInfo(
			FlightInfoExtended flightInfo) { this.payload.addFlightInfo(flightInfo); return this; } @Override
	@Deprecated
	void addFlightInfo(FlightInfo flightInfo) { addFlightInfo(flightInfo); } public AirlineItineraryTemplateBuilder setThemeColor(String themeColor) { this.payload.setThemeColor(themeColor); return this; } public AirlineItineraryTemplateBuilder addQuickReply(String title,
			String payload) { this.messageBuilder.addQuickReply(title, payload); return this; } public AirlineItineraryTemplateBuilder addQuickReply(QuickReply reply) { this.messageBuilder.addQuickReply(reply); return this; } @Override
	public FbBotMillResponse build(MessageEnvelope envelope) { return this.messageBuilder.build(envelope); } @Override
	public String toString() { return ""AirlineItineraryTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import java.math.BigDecimal; 
import co.aurasphere.botmill.fb.model.base.AttachmentType; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; import co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.AirlineItineraryTemplatePayload; import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply; import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfo; import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfoExtended; import co.aurasphere.botmill.fb.model.outcoming.template.airline.PassengerInfo; import co.aurasphere.botmill.fb.model.outcoming.template.airline.PassengerSegmentInfo; import co.aurasphere.botmill.fb.model.outcoming.template.airline.PriceInfo; import co.aurasphere.botmill.fb.model.outcoming.template.airline.TravelClass; 
  public class AirlineItineraryTemplateBuilder extends FlightInfoBuilderDelegator { /**
 * Builder for an Airline Itinerary Template.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-itinerary-template""
 *      > Facebook's Messenger Platform Airline Itinerary Template
 *      Documentation</a>
 * 
 */  private AirlineItineraryTemplatePayload payload; /**
	 * The payload managed by this builder.
	 */  AirlineItineraryTemplateBuilder(String introMessage, String locale,
			String pnrNumber, BigDecimal totalPrice, String currency) { this.payload = new AirlineItineraryTemplatePayload(introMessage,
				locale, pnrNumber, totalPrice, currency); this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload); } /**
	 * Default constructor. Creates a builder for an Airline Itinerary Template.
	 * 
	 * @param introMessage
	 *            the message to send before the template. Can't be empty.
	 * @param locale
	 *            the current locale. Can't be empty and must be in format
	 *            [a-z]{2}_[A-Z]{2}. Locale must be in format [a-z]{2}_[A-Z]{2}.
	 *            For more information see<a href=
	 *            ""https://developers.facebook.com/docs/internationalization#locales""
	 *            > Facebook's locale support</a>.
	 * @param pnrNumber
	 *            the Passenger Name Record number (Booking Number). It can't be
	 *            empty.
	 * @param totalPrice
	 *            the total price of the itinerary.
	 * @param currency
	 *            the currency for the price. Currency must be a three digit
	 *            ISO-4217-3 code in format [A-Z]{3}. For more information see
	 *            <a href=
	 *            ""https://developers.facebook.com/docs/payments/reference/supportedcurrencies""
	 *            > Facebook's currency support</a>
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-itinerary-template""
	 *      > Facebook's Messenger Platform Airline Itinerary Template
	 *      Documentation</a>
	 */  public AirlineItineraryTemplateBuilder setTax(BigDecimal tax) { this.payload.setTax(tax); return this; } /**
	 * Sets the tax amount for this itinerary. This field is optional.
	 * 
	 * @param tax
	 *            the tax amount.
	 * @return this builder.
	 */  public AirlineItineraryTemplateBuilder setBasePrice(BigDecimal basePrice) { this.payload.setBasePrice(basePrice); return this; } /**
	 * Sets the base price for this itinerary. This field is optional.
	 * 
	 * @param basePrice
	 *            the base price.
	 * @return this builder.
	 */  public AirlineItineraryTemplateBuilder addPassengerInfo(String passengerId,
			String name, String ticketNumber) { PassengerInfo passengerInfo = new PassengerInfo(passengerId, name,
				ticketNumber); this.payload.addPassengerInfo(passengerInfo); return this; } /**
	 * Adds a {@link PassengerInfo} object to this template. This field is
	 * mandatory for this template. There must be at least one element.
	 * 
	 * @param passengerId
	 *            the passenger ID. It can't be empty.
	 * @param name
	 *            the passenger name. It can't be empty.
	 * @param ticketNumber
	 *            the ticket number. This field is optional.
	 * @return this builder.
	 */  public AirlineItineraryTemplateBuilder addPassengerInfo(String passengerId,
			String name) { PassengerInfo passengerInfo = new PassengerInfo(passengerId, name); this.payload.addPassengerInfo(passengerInfo); return this; } /**
	 * Adds a {@link PassengerInfo} object to this template. This field is
	 * mandatory for this template. There must be at least one element.
	 * 
	 * @param passengerId
	 *            the passenger ID. It can't be empty.
	 * @param name
	 *            the passenger name. It can't be empty.
	 * @return this builder.
	 */  public AirlineItineraryTemplateBuilder addPassengerInfo(
			PassengerInfo passengerInfo) { this.payload.addPassengerInfo(passengerInfo); return this; } /**
	 * Adds a {@link PassengerInfo} object to this template. This field is
	 * mandatory for this template. There must be at least one element.
	 *
	 * @param passengerInfo
	 *            the passenger info
	 * @return this builder.
	 */  public PassengerSegmentInfoBuilder addPassengerSegmentInfo(
			String segmentId, String passengerId, String seat, String seatType) { return new PassengerSegmentInfoBuilder(this, segmentId, passengerId,
				seat, seatType); } /**
	 * Adds a {@link PassengerSegmentInfo} object to this template. This field
	 * is mandatory for this template. There must be at least one element.
	 *
	 * @param segmentId
	 *            used to identify a flight segment. It can't be empty and must
	 *            be unique within the itinerary.
	 * @param passengerId
	 *            the passengerId of {@link PassengerInfo} object. It can't be
	 *            empty and it must match an actual passenger.
	 * @param seat
	 *            the seat number for the passenger. It can't be empty.
	 * @param seatType
	 *            the seat type for the passenger (e.g. Economy comfort). It
	 *            can't be empty.
	 * @return the passenger segment info builder
	 */  public AirlineItineraryTemplateBuilder addPassengerSegmentInfo(
			PassengerSegmentInfo segmentInfo) { this.payload.addPassengerSegmentInfo(segmentInfo); return this; } /**
	 * Adds a {@link PassengerSegmentInfo} object to this template. This field
	 * is mandatory for this template. There must be at least one element.
	 * 
	 * @param segmentInfo
	 *            the segment info to add.
	 * @return this builder.
	 */  public AirlineItineraryTemplateBuilder addPriceInfo(String title,
			BigDecimal amount) { PriceInfo priceInfo = new PriceInfo(title, amount); this.payload.addPriceInfo(priceInfo); return this; } /**
	 * Adds a {@link PriceInfo} object to this template. This field is optional.
	 * There can be at most 4 price info objects per template.
	 * 
	 * @param title
	 *            the price info title. It can't be empty.
	 * @param amount
	 *            the price amount.
	 * @return this builder.
	 */  public AirlineItineraryTemplateBuilder addPriceInfo(String title,
			BigDecimal amount, String currency) { PriceInfo priceInfo = new PriceInfo(title, amount, currency); this.payload.addPriceInfo(priceInfo); return this; } /**
	 * Adds a {@link PriceInfo} object to this template. This field is optional.
	 * There can be at most 4 price info objects per template.
	 * 
	 * @param title
	 *            the price info title. It can't be empty.
	 * @param amount
	 *            the price amount.
	 * @param currency
	 *            the pricing currency. This field is optional. Currency must be
	 *            a three digit ISO-4217-3 code in format [A-Z]{3}. For more
	 *            information see<a href=
	 *            ""https://developers.facebook.com/docs/payments/reference/supportedcurrencies""
	 *            > Facebook's currency support</a>
	 * @return this builder.
	 */  public AirlineItineraryTemplateBuilder addPriceInfo(PriceInfo priceInfo) { this.payload.addPriceInfo(priceInfo); return this; } /**
	 * Adds a {@link PriceInfo} object to this template. This field is optional.
	 * There can be at most 4 price info objects per template.
	 * 
	 * @param priceInfo
	 *            the price info object to add.
	 * @return this builder.
	 */  public FlightInfoExtendedBuilder addFlightInfo(String flightNumber,
			String connectionId, String segmentId, TravelClass travelClass) { return new FlightInfoExtendedBuilder(this, flightNumber, connectionId,
				segmentId, travelClass); } /**
	 * Adds a {@link FlightInfoExtended} object to this template. This object is
	 * mandatory and can't be null for Airline templates. There can be multiple
	 * flight info object but there must be at least one.
	 * 
	 * @param flightNumber
	 *            the flight number. It can't be empty.
	 * @param connectionId
	 *            the connection ID, used to group together segments. It can't
	 *            be empty.
	 * @param segmentId
	 *            the segment ID. It must match the segment ID.
	 * @param travelClass
	 *            the travel class. It can't be null.
	 * @return a builder for the {@link FlightInfoExtended} object.
	 */  public AirlineItineraryTemplateBuilder addFlightInfo(
			FlightInfoExtended flightInfo) { this.payload.addFlightInfo(flightInfo); return this; } /**
	 * Adds a {@link FlightInfoExtended} object to this template. This object is
	 * mandatory and can't be null for Airline templates. There can be multiple
	 * flight info object but there must be at least one.
	 * 
	 * @param flightInfo
	 *            the flight info to add.
	 * @return this builder.
	 */  @Override
	@Deprecated
	void addFlightInfo(FlightInfo flightInfo) { addFlightInfo(flightInfo); } /**
	 * Adds a {@link FlightInfo} object to this template. This object is
	 * mandatory and can't be null for Airline templates. Used only by delegated
	 * classes. Should not be called directly. Use
	 * {@link #addFlightInfo(FlightInfoExtended)} instead.
	 * 
	 * @param flightInfo
	 *            the {@link FlightInfo} object to add.
	 */  public AirlineItineraryTemplateBuilder setThemeColor(String themeColor) { this.payload.setThemeColor(themeColor); return this; } /**
	 * Sets the theme color for this template. This field is optional. If not
	 * specified, the template will use Facebook's default theme (light blue).
	 * 
	 * @param themeColor
	 *            the color for this template. The Color must be a valid RGB
	 *            color in the format #RRGGBB.
	 * @return this builder.
	 */  public AirlineItineraryTemplateBuilder addQuickReply(String title,
			String payload) { this.messageBuilder.addQuickReply(title, payload); return this; } /**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param title
	 *            the quick reply button label. It can't be empty.
	 * @param payload
	 *            the payload sent back when the button is pressed. It can't be
	 *            empty.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      >Facebook's Messenger Platform Quick Replies Documentation</a>
	 */  public AirlineItineraryTemplateBuilder addQuickReply(QuickReply reply) { this.messageBuilder.addQuickReply(reply); return this; } /**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param reply
	 *            a quick reply object.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      >Facebook's Messenger Platform Quick Replies Documentation</a>
	 */  @Override
	public FbBotMillResponse build(MessageEnvelope envelope) { return this.messageBuilder.build(envelope); } /**
	 * Builds the {@link FbBotMillResponse} that the bot should return. The
	 * template builders, like this, delegate an
	 * {@link AttachmentMessageBuilder} to build the message.
	 * 
	 * @param envelope
	 *            a {@link MessageEnvelope} object representing the incoming
	 *            message.
	 * @return the {@link FbBotMillResponse} of this bot.
	 */  @Override
	public String toString() { return ""AirlineItineraryTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.factory.AirlineBaseTemplateBuilder
	 * #toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/AttachmentMessageBuilder.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import java.util.ArrayList;

import co.aurasphere.botmill.fb.model.base.Attachment;
import co.aurasphere.botmill.fb.model.base.AttachmentType;
import co.aurasphere.botmill.fb.model.base.Payload;
import co.aurasphere.botmill.fb.model.base.User;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;
import co.aurasphere.botmill.fb.model.outcoming.message.AttachmentMessage;
import co.aurasphere.botmill.fb.model.outcoming.message.FbBotMillMessageResponse;
import co.aurasphere.botmill.fb.model.outcoming.message.Message;
import co.aurasphere.botmill.fb.model.outcoming.payload.AttachmentPayload;
import co.aurasphere.botmill.fb.model.outcoming.payload.UrlPayload;
import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply;


/**
 * Builder for a {@link Message} that contains an {@link Attachment}.
 * 
 * @author Donato Rimenti
 * 
 */
public class AttachmentMessageBuilder extends MessageBaseBuilder {

	/**
	 * The attachment of the current builder.
	 */
	private Attachment attachment;

	/**
	 * Creates a builder for a {@link Message} that contains an
	 * {@link Attachment}.
	 * 
	 * @param type
	 *            the attachment type.
	 * @param url
	 *            the url of the attachment content.
	 */
	AttachmentMessageBuilder(AttachmentType type, String url) {
		UrlPayload payload = new AttachmentPayload(url);
		this.attachment = new Attachment(type, payload);
	}

	/**
	 * Creates a builder for a {@link Message} that contains an
	 * {@link Attachment}.
	 * 
	 * @param type
	 *            the attachment type.
	 * @param payload
	 *            the attachment {@link Payload}.
	 */
	AttachmentMessageBuilder(AttachmentType type, Payload payload) {
		this.attachment = new Attachment(type, payload);
	}

	/**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param title
	 *            the quick reply button label. It can't be empty.
	 * @param payload
	 *            the payload sent back when the button is pressed. It can't be
	 *            empty.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */
	public AttachmentMessageBuilder addQuickReply(String title, String payload) {
		if (this.quickReplies == null) {
			this.quickReplies = new ArrayList<QuickReply>();
		}
		this.quickReplies.add(new QuickReply(title, payload));
		return this;
	}

	/**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param reply
	 *            a quick reply object.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */
	public AttachmentMessageBuilder addQuickReply(QuickReply reply) {
		if (this.quickReplies == null) {
			this.quickReplies = new ArrayList<QuickReply>();
		}
		this.quickReplies.add(reply);
		return this;
	}

	/**
	 * {@inheritDoc} Returns a response containing an {@link Attachment}.
	 */
	public FbBotMillResponse build(MessageEnvelope envelope) {
		User recipient = getRecipient(envelope);
		Message message = new AttachmentMessage(attachment);
		message.setQuickReplies(quickReplies);
		return new FbBotMillMessageResponse(recipient, message);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.bean.FbBotMillBean#toString()
	 */
	@Override
	public String toString() {
		return ""AttachmentMessageBuilder [attachment="" + attachment
				+ "", quickReplies="" + quickReplies + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public class AttachmentMessageBuilder extends MessageBaseBuilder { private Attachment attachment; AttachmentMessageBuilder(AttachmentType type, String url) { UrlPayload payload = new AttachmentPayload(url); this.attachment = new Attachment(type, payload); } AttachmentMessageBuilder(AttachmentType type, Payload payload) { this.attachment = new Attachment(type, payload); } public AttachmentMessageBuilder addQuickReply(String title, String payload) { if (this.quickReplies == null) { this.quickReplies = new ArrayList<QuickReply>(); } this.quickReplies.add(new QuickReply(title, payload)); return this; } public AttachmentMessageBuilder addQuickReply(QuickReply reply) { if (this.quickReplies == null) { this.quickReplies = new ArrayList<QuickReply>(); } this.quickReplies.add(reply); return this; } public FbBotMillResponse build(MessageEnvelope envelope) { User recipient = getRecipient(envelope); Message message = new AttachmentMessage(attachment); message.setQuickReplies(quickReplies); return new FbBotMillMessageResponse(recipient, message); } @Override
	public String toString() { return ""AttachmentMessageBuilder [attachment="" + attachment
				+ "", quickReplies="" + quickReplies + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public class AttachmentMessageBuilder extends MessageBaseBuilder { private Attachment attachment; AttachmentMessageBuilder(AttachmentType type, String url) { UrlPayload payload = new AttachmentPayload(url); this.attachment = new Attachment(type, payload); } AttachmentMessageBuilder(AttachmentType type, Payload payload) { this.attachment = new Attachment(type, payload); } public AttachmentMessageBuilder addQuickReply(String title, String payload) { if (this.quickReplies == null) { this.quickReplies = new ArrayList<QuickReply>(); } this.quickReplies.add(new QuickReply(title, payload)); return this; } public AttachmentMessageBuilder addQuickReply(QuickReply reply) { if (this.quickReplies == null) { this.quickReplies = new ArrayList<QuickReply>(); } this.quickReplies.add(reply); return this; } public FbBotMillResponse build(MessageEnvelope envelope) { User recipient = getRecipient(envelope); Message message = new AttachmentMessage(attachment); message.setQuickReplies(quickReplies); return new FbBotMillMessageResponse(recipient, message); } @Override
	public String toString() { return ""AttachmentMessageBuilder [attachment="" + attachment
				+ "", quickReplies="" + quickReplies + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import java.util.ArrayList; 
import co.aurasphere.botmill.fb.model.base.Attachment; import co.aurasphere.botmill.fb.model.base.AttachmentType; import co.aurasphere.botmill.fb.model.base.Payload; import co.aurasphere.botmill.fb.model.base.User; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; import co.aurasphere.botmill.fb.model.outcoming.message.AttachmentMessage; import co.aurasphere.botmill.fb.model.outcoming.message.FbBotMillMessageResponse; import co.aurasphere.botmill.fb.model.outcoming.message.Message; import co.aurasphere.botmill.fb.model.outcoming.payload.AttachmentPayload; import co.aurasphere.botmill.fb.model.outcoming.payload.UrlPayload; import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply; 
  public class AttachmentMessageBuilder extends MessageBaseBuilder { /**
 * Builder for a {@link Message} that contains an {@link Attachment}.
 * 
 * @author Donato Rimenti
 * 
 */  private Attachment attachment; /**
	 * The attachment of the current builder.
	 */  AttachmentMessageBuilder(AttachmentType type, String url) { UrlPayload payload = new AttachmentPayload(url); this.attachment = new Attachment(type, payload); } /**
	 * Creates a builder for a {@link Message} that contains an
	 * {@link Attachment}.
	 * 
	 * @param type
	 *            the attachment type.
	 * @param url
	 *            the url of the attachment content.
	 */  AttachmentMessageBuilder(AttachmentType type, Payload payload) { this.attachment = new Attachment(type, payload); } /**
	 * Creates a builder for a {@link Message} that contains an
	 * {@link Attachment}.
	 * 
	 * @param type
	 *            the attachment type.
	 * @param payload
	 *            the attachment {@link Payload}.
	 */  public AttachmentMessageBuilder addQuickReply(String title, String payload) { if (this.quickReplies == null) { this.quickReplies = new ArrayList<QuickReply>(); } this.quickReplies.add(new QuickReply(title, payload)); return this; } /**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param title
	 *            the quick reply button label. It can't be empty.
	 * @param payload
	 *            the payload sent back when the button is pressed. It can't be
	 *            empty.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */  public AttachmentMessageBuilder addQuickReply(QuickReply reply) { if (this.quickReplies == null) { this.quickReplies = new ArrayList<QuickReply>(); } this.quickReplies.add(reply); return this; } /**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param reply
	 *            a quick reply object.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */  public FbBotMillResponse build(MessageEnvelope envelope) { User recipient = getRecipient(envelope); Message message = new AttachmentMessage(attachment); message.setQuickReplies(quickReplies); return new FbBotMillMessageResponse(recipient, message); } /**
	 * {@inheritDoc} Returns a response containing an {@link Attachment}.
	 */  @Override
	public String toString() { return ""AttachmentMessageBuilder [attachment="" + attachment
				+ "", quickReplies="" + quickReplies + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.bean.FbBotMillBean#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/BoardingPassBuilder.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.BoardingPass;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.Field;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfo;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.TravelClass;


/**
 * Builder for a {@link BoardingPass} object.
 * 
 * @author Donato Rimenti
 * 
 */
public class BoardingPassBuilder extends FlightInfoBuilderDelegator {

	/**
	 * The parent builder of this one. Used to return to the parent once the
	 * build is finished calling {@link #endBoardingPass()}.
	 */
	private AirlineBoardingPassTemplateBuilder parentBuilder;

	/**
	 * The object managed by this builder.
	 */
	private BoardingPass boardingPass;

	/**
	 * Default constructor. Creates a builder for a {@link BoardingPass} object.
	 *
	 * @param parentBuilder
	 *            the parent builder of this one. It can't be null. * @param
	 *            passengerName the passenger name. It can't be empty.
	 * @param passengerName
	 *            the passenger name
	 * @param pnrNumber
	 *            the Passenger Name Record number (Booking Number). It can't be
	 *            empty.
	 * @param logoImageUrl
	 *            the URL of the logo. It can't be empty.
	 * @param aboveBarCodeImageUrl
	 *            the URL of the image to be shown above the bar code in the
	 *            center of the pass. It can't be empty.
	 */
	BoardingPassBuilder(AirlineBoardingPassTemplateBuilder parentBuilder,
			String passengerName, String pnrNumber, String logoImageUrl,
			String aboveBarCodeImageUrl) {
		this.boardingPass = new BoardingPass(passengerName, pnrNumber,
				logoImageUrl, aboveBarCodeImageUrl);
		this.parentBuilder = parentBuilder;
	}

	/**
	 * Sets the {@link TravelClass} for the current {@link BoardingPass} object.
	 * This field is optional.
	 * 
	 * @param travelClass
	 *            the travel class to set.
	 * @return this builder.
	 */
	public BoardingPassBuilder setTravelClass(TravelClass travelClass) {
		this.boardingPass.setTravelClass(travelClass);
		return this;
	}

	/**
	 * Sets the seat for the current {@link BoardingPass} object. This field is
	 * optional.
	 * 
	 * @param seat
	 *            the seat to set.
	 * @return this builder.
	 */
	public BoardingPassBuilder setSeat(String seat) {
		this.boardingPass.setSeat(seat);
		return this;
	}

	/**
	 * Adds an auxiliary field for the current {@link BoardingPass} object. This
	 * field is optional. There can be at most 5 auxiliary fields per boarding
	 * pass.
	 * 
	 * @param label
	 *            the label for the additional field. It can't be empty.
	 * @param value
	 *            the value for the additional field. It can't be empty.
	 * @return this builder.
	 */
	public BoardingPassBuilder addAuxiliaryField(String label, String value) {
		Field field = new Field(label, value);
		this.boardingPass.addAuxiliaryField(field);
		return this;
	}

	/**
	 * Adds an auxiliary field for the current {@link BoardingPass} object. This
	 * field is optional. There can be at most 5 auxiliary fields per boarding
	 * pass.
	 * 
	 * @param auxiliaryField
	 *            the field to add. It can't be null.
	 * @return this builder.
	 */
	public BoardingPassBuilder addAuxiliaryField(Field auxiliaryField) {
		this.boardingPass.addAuxiliaryField(auxiliaryField);
		return this;
	}

	/**
	 * Adds a secondary field for the current {@link BoardingPass} object. This
	 * field is optional. There can be at most 5 secondary fields per boarding
	 * pass.
	 * 
	 * @param label
	 *            the label for the additional field. It can't be empty.
	 * @param value
	 *            the value for the additional field. It can't be empty.
	 * @return this builder.
	 */
	public BoardingPassBuilder addSecondaryField(String label, String value) {
		Field field = new Field(label, value);
		this.boardingPass.addSecondaryField(field);
		return this;
	}

	/**
	 * Adds a secondary field for the current {@link BoardingPass} object. This
	 * field is optional. There can be at most 5 secondary fields per boarding
	 * pass.
	 * 
	 * @param secondaryField
	 *            the field to add. It can't be null.
	 * @return this builder.
	 */
	public BoardingPassBuilder addSecondaryField(Field secondaryField) {
		this.boardingPass.addAuxiliaryField(secondaryField);
		return this;
	}

	/**
	 * Sets the header image URL for the current {@link BoardingPass} object.
	 * This field is optional.
	 *
	 * @param headerImageUrl
	 *            the URL of the header image.
	 * @return the boarding pass builder
	 */
	public BoardingPassBuilder setHeaderImageUrl(String headerImageUrl) {
		this.boardingPass.setHeaderImageUrl(headerImageUrl);
		return this;
	}

	/**
	 * Sets the header text for the current {@link BoardingPass} object. This
	 * field is optional.
	 *
	 * @param headerTextField
	 *            the text of the header.
	 * @return the boarding pass builder
	 */
	public BoardingPassBuilder setHeaderTextField(String headerTextField) {
		this.boardingPass.setHeaderTextField(headerTextField);
		return this;
	}

	/**
	 * Sets the Aztec or QR code for the current {@link BoardingPass} object.
	 * This field or the barcode image URL must be set.
	 *
	 * @param qrCode
	 *            the Aztec or QR code. It can't be empty unless the barcode
	 *            image URL is set.
	 * @return the boarding pass builder
	 * @see #setBarcodeImageUrl(String)
	 */
	public BoardingPassBuilder setQrCode(String qrCode) {
		this.boardingPass.setQrCode(qrCode);
		return this;
	}

	/**
	 * Sets the URL of the barcode image for the current {@link BoardingPass}
	 * object. This field or the QR code must be set.
	 *
	 * @param barcodeImageUrl
	 *            the URL of the barcode image. It can't be empty unless the QR
	 *            code is set.
	 * @return the boarding pass builder
	 * @see #setQrCode(String)
	 */
	public BoardingPassBuilder setBarcodeImageUrl(String barcodeImageUrl) {
		this.boardingPass.setBarcodeImageUrl(barcodeImageUrl);
		return this;
	}

	/**
	 * Adds a {@link FlightInfo} object to this {@link BoardingPass}. This
	 * object is mandatory and can't be null for Airline templates.
	 * 
	 * @param flightNumber
	 *            the flight number. It can't be empty.
	 * @return a builder for the {@link FlightInfo} object.
	 */
	public FlightInfoBuilder<BoardingPassBuilder> addFlightInfo(
			String flightNumber) {
		return new FlightInfoBuilder<BoardingPassBuilder>(this, flightNumber);
	}

	/**
	 * Adds a {@link FlightInfo} object to this {@link BoardingPass}. This
	 * object is mandatory and can't be null for Airline templates. Used only by
	 * delegated classes. Should not be called directly. Use
	 * {@link #addFlightInfo(String)} instead.
	 * 
	 * @param flightInfo
	 *            the flight info to add. It can't be null.
	 */
	@Override
	void addFlightInfo(FlightInfo flightInfo) {
		this.boardingPass.setFlightInfo(flightInfo);
	}

	/**
	 * Builds the current object, adds it to the parent builder and returns the
	 * parent builder.
	 * 
	 * @return the parent builder of this builder.
	 */
	public AirlineBoardingPassTemplateBuilder endBoardingPass() {
		parentBuilder.addBoardingPass(boardingPass);
		return parentBuilder;
	}

	/**
	 * {@inheritDoc} This method should not be called for this object. Use
	 * {@link #endBoardingPass()} instead.
	 */
	@Override
	@Deprecated
	FbBotMillResponse build(MessageEnvelope envelope) {
		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.factory.AirlineBaseTemplateBuilder
	 * #toString()
	 */
	@Override
	public String toString() {
		return ""BoardingPassBuilder [parentBuilder="" + parentBuilder
				+ "", boardingPass="" + boardingPass + "", messageBuilder=""
				+ messageBuilder + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public class BoardingPassBuilder extends FlightInfoBuilderDelegator { private AirlineBoardingPassTemplateBuilder parentBuilder; private BoardingPass boardingPass; BoardingPassBuilder(AirlineBoardingPassTemplateBuilder parentBuilder,
			String passengerName, String pnrNumber, String logoImageUrl,
			String aboveBarCodeImageUrl) { this.boardingPass = new BoardingPass(passengerName, pnrNumber,
				logoImageUrl, aboveBarCodeImageUrl); this.parentBuilder = parentBuilder; } public BoardingPassBuilder setTravelClass(TravelClass travelClass) { this.boardingPass.setTravelClass(travelClass); return this; } public BoardingPassBuilder setSeat(String seat) { this.boardingPass.setSeat(seat); return this; } public BoardingPassBuilder addAuxiliaryField(String label, String value) { Field field = new Field(label, value); this.boardingPass.addAuxiliaryField(field); return this; } public BoardingPassBuilder addAuxiliaryField(Field auxiliaryField) { this.boardingPass.addAuxiliaryField(auxiliaryField); return this; } public BoardingPassBuilder addSecondaryField(String label, String value) { Field field = new Field(label, value); this.boardingPass.addSecondaryField(field); return this; } public BoardingPassBuilder addSecondaryField(Field secondaryField) { this.boardingPass.addAuxiliaryField(secondaryField); return this; } public BoardingPassBuilder setHeaderImageUrl(String headerImageUrl) { this.boardingPass.setHeaderImageUrl(headerImageUrl); return this; } public BoardingPassBuilder setHeaderTextField(String headerTextField) { this.boardingPass.setHeaderTextField(headerTextField); return this; } public BoardingPassBuilder setQrCode(String qrCode) { this.boardingPass.setQrCode(qrCode); return this; } public BoardingPassBuilder setBarcodeImageUrl(String barcodeImageUrl) { this.boardingPass.setBarcodeImageUrl(barcodeImageUrl); return this; } public FlightInfoBuilder<BoardingPassBuilder> addFlightInfo(
			String flightNumber) { return new FlightInfoBuilder<BoardingPassBuilder>(this, flightNumber); } @Override
	void addFlightInfo(FlightInfo flightInfo) { this.boardingPass.setFlightInfo(flightInfo); } public AirlineBoardingPassTemplateBuilder endBoardingPass() { parentBuilder.addBoardingPass(boardingPass); return parentBuilder; } @Override
	@Deprecated
	FbBotMillResponse build(MessageEnvelope envelope) { return null; } @Override
	public String toString() { return ""BoardingPassBuilder [parentBuilder="" + parentBuilder
				+ "", boardingPass="" + boardingPass + "", messageBuilder=""
				+ messageBuilder + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public class BoardingPassBuilder extends FlightInfoBuilderDelegator { private AirlineBoardingPassTemplateBuilder parentBuilder; private BoardingPass boardingPass; BoardingPassBuilder(AirlineBoardingPassTemplateBuilder parentBuilder,
			String passengerName, String pnrNumber, String logoImageUrl,
			String aboveBarCodeImageUrl) { this.boardingPass = new BoardingPass(passengerName, pnrNumber,
				logoImageUrl, aboveBarCodeImageUrl); this.parentBuilder = parentBuilder; } public BoardingPassBuilder setTravelClass(TravelClass travelClass) { this.boardingPass.setTravelClass(travelClass); return this; } public BoardingPassBuilder setSeat(String seat) { this.boardingPass.setSeat(seat); return this; } public BoardingPassBuilder addAuxiliaryField(String label, String value) { Field field = new Field(label, value); this.boardingPass.addAuxiliaryField(field); return this; } public BoardingPassBuilder addAuxiliaryField(Field auxiliaryField) { this.boardingPass.addAuxiliaryField(auxiliaryField); return this; } public BoardingPassBuilder addSecondaryField(String label, String value) { Field field = new Field(label, value); this.boardingPass.addSecondaryField(field); return this; } public BoardingPassBuilder addSecondaryField(Field secondaryField) { this.boardingPass.addAuxiliaryField(secondaryField); return this; } public BoardingPassBuilder setHeaderImageUrl(String headerImageUrl) { this.boardingPass.setHeaderImageUrl(headerImageUrl); return this; } public BoardingPassBuilder setHeaderTextField(String headerTextField) { this.boardingPass.setHeaderTextField(headerTextField); return this; } public BoardingPassBuilder setQrCode(String qrCode) { this.boardingPass.setQrCode(qrCode); return this; } public BoardingPassBuilder setBarcodeImageUrl(String barcodeImageUrl) { this.boardingPass.setBarcodeImageUrl(barcodeImageUrl); return this; } public FlightInfoBuilder<BoardingPassBuilder> addFlightInfo(
			String flightNumber) { return new FlightInfoBuilder<BoardingPassBuilder>(this, flightNumber); } @Override
	void addFlightInfo(FlightInfo flightInfo) { this.boardingPass.setFlightInfo(flightInfo); } public AirlineBoardingPassTemplateBuilder endBoardingPass() { parentBuilder.addBoardingPass(boardingPass); return parentBuilder; } @Override
	@Deprecated
	FbBotMillResponse build(MessageEnvelope envelope) { return null; } @Override
	public String toString() { return ""BoardingPassBuilder [parentBuilder="" + parentBuilder
				+ "", boardingPass="" + boardingPass + "", messageBuilder=""
				+ messageBuilder + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; import co.aurasphere.botmill.fb.model.outcoming.template.airline.BoardingPass; import co.aurasphere.botmill.fb.model.outcoming.template.airline.Field; import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfo; import co.aurasphere.botmill.fb.model.outcoming.template.airline.TravelClass; 
  public class BoardingPassBuilder extends FlightInfoBuilderDelegator { /**
 * Builder for a {@link BoardingPass} object.
 * 
 * @author Donato Rimenti
 * 
 */  private AirlineBoardingPassTemplateBuilder parentBuilder; /**
	 * The parent builder of this one. Used to return to the parent once the
	 * build is finished calling {@link #endBoardingPass()}.
	 */  private BoardingPass boardingPass; /**
	 * The object managed by this builder.
	 */  BoardingPassBuilder(AirlineBoardingPassTemplateBuilder parentBuilder,
			String passengerName, String pnrNumber, String logoImageUrl,
			String aboveBarCodeImageUrl) { this.boardingPass = new BoardingPass(passengerName, pnrNumber,
				logoImageUrl, aboveBarCodeImageUrl); this.parentBuilder = parentBuilder; } /**
	 * Default constructor. Creates a builder for a {@link BoardingPass} object.
	 *
	 * @param parentBuilder
	 *            the parent builder of this one. It can't be null. * @param
	 *            passengerName the passenger name. It can't be empty.
	 * @param passengerName
	 *            the passenger name
	 * @param pnrNumber
	 *            the Passenger Name Record number (Booking Number). It can't be
	 *            empty.
	 * @param logoImageUrl
	 *            the URL of the logo. It can't be empty.
	 * @param aboveBarCodeImageUrl
	 *            the URL of the image to be shown above the bar code in the
	 *            center of the pass. It can't be empty.
	 */  public BoardingPassBuilder setTravelClass(TravelClass travelClass) { this.boardingPass.setTravelClass(travelClass); return this; } /**
	 * Sets the {@link TravelClass} for the current {@link BoardingPass} object.
	 * This field is optional.
	 * 
	 * @param travelClass
	 *            the travel class to set.
	 * @return this builder.
	 */  public BoardingPassBuilder setSeat(String seat) { this.boardingPass.setSeat(seat); return this; } /**
	 * Sets the seat for the current {@link BoardingPass} object. This field is
	 * optional.
	 * 
	 * @param seat
	 *            the seat to set.
	 * @return this builder.
	 */  public BoardingPassBuilder addAuxiliaryField(String label, String value) { Field field = new Field(label, value); this.boardingPass.addAuxiliaryField(field); return this; } /**
	 * Adds an auxiliary field for the current {@link BoardingPass} object. This
	 * field is optional. There can be at most 5 auxiliary fields per boarding
	 * pass.
	 * 
	 * @param label
	 *            the label for the additional field. It can't be empty.
	 * @param value
	 *            the value for the additional field. It can't be empty.
	 * @return this builder.
	 */  public BoardingPassBuilder addAuxiliaryField(Field auxiliaryField) { this.boardingPass.addAuxiliaryField(auxiliaryField); return this; } /**
	 * Adds an auxiliary field for the current {@link BoardingPass} object. This
	 * field is optional. There can be at most 5 auxiliary fields per boarding
	 * pass.
	 * 
	 * @param auxiliaryField
	 *            the field to add. It can't be null.
	 * @return this builder.
	 */  public BoardingPassBuilder addSecondaryField(String label, String value) { Field field = new Field(label, value); this.boardingPass.addSecondaryField(field); return this; } /**
	 * Adds a secondary field for the current {@link BoardingPass} object. This
	 * field is optional. There can be at most 5 secondary fields per boarding
	 * pass.
	 * 
	 * @param label
	 *            the label for the additional field. It can't be empty.
	 * @param value
	 *            the value for the additional field. It can't be empty.
	 * @return this builder.
	 */  public BoardingPassBuilder addSecondaryField(Field secondaryField) { this.boardingPass.addAuxiliaryField(secondaryField); return this; } /**
	 * Adds a secondary field for the current {@link BoardingPass} object. This
	 * field is optional. There can be at most 5 secondary fields per boarding
	 * pass.
	 * 
	 * @param secondaryField
	 *            the field to add. It can't be null.
	 * @return this builder.
	 */  public BoardingPassBuilder setHeaderImageUrl(String headerImageUrl) { this.boardingPass.setHeaderImageUrl(headerImageUrl); return this; } /**
	 * Sets the header image URL for the current {@link BoardingPass} object.
	 * This field is optional.
	 *
	 * @param headerImageUrl
	 *            the URL of the header image.
	 * @return the boarding pass builder
	 */  public BoardingPassBuilder setHeaderTextField(String headerTextField) { this.boardingPass.setHeaderTextField(headerTextField); return this; } /**
	 * Sets the header text for the current {@link BoardingPass} object. This
	 * field is optional.
	 *
	 * @param headerTextField
	 *            the text of the header.
	 * @return the boarding pass builder
	 */  public BoardingPassBuilder setQrCode(String qrCode) { this.boardingPass.setQrCode(qrCode); return this; } /**
	 * Sets the Aztec or QR code for the current {@link BoardingPass} object.
	 * This field or the barcode image URL must be set.
	 *
	 * @param qrCode
	 *            the Aztec or QR code. It can't be empty unless the barcode
	 *            image URL is set.
	 * @return the boarding pass builder
	 * @see #setBarcodeImageUrl(String)
	 */  public BoardingPassBuilder setBarcodeImageUrl(String barcodeImageUrl) { this.boardingPass.setBarcodeImageUrl(barcodeImageUrl); return this; } /**
	 * Sets the URL of the barcode image for the current {@link BoardingPass}
	 * object. This field or the QR code must be set.
	 *
	 * @param barcodeImageUrl
	 *            the URL of the barcode image. It can't be empty unless the QR
	 *            code is set.
	 * @return the boarding pass builder
	 * @see #setQrCode(String)
	 */  public FlightInfoBuilder<BoardingPassBuilder> addFlightInfo(
			String flightNumber) { return new FlightInfoBuilder<BoardingPassBuilder>(this, flightNumber); } /**
	 * Adds a {@link FlightInfo} object to this {@link BoardingPass}. This
	 * object is mandatory and can't be null for Airline templates.
	 * 
	 * @param flightNumber
	 *            the flight number. It can't be empty.
	 * @return a builder for the {@link FlightInfo} object.
	 */  @Override
	void addFlightInfo(FlightInfo flightInfo) { this.boardingPass.setFlightInfo(flightInfo); } /**
	 * Adds a {@link FlightInfo} object to this {@link BoardingPass}. This
	 * object is mandatory and can't be null for Airline templates. Used only by
	 * delegated classes. Should not be called directly. Use
	 * {@link #addFlightInfo(String)} instead.
	 * 
	 * @param flightInfo
	 *            the flight info to add. It can't be null.
	 */  public AirlineBoardingPassTemplateBuilder endBoardingPass() { parentBuilder.addBoardingPass(boardingPass); return parentBuilder; } /**
	 * Builds the current object, adds it to the parent builder and returns the
	 * parent builder.
	 * 
	 * @return the parent builder of this builder.
	 */  @Override
	@Deprecated
	FbBotMillResponse build(MessageEnvelope envelope) { return null; } /**
	 * {@inheritDoc} This method should not be called for this object. Use
	 * {@link #endBoardingPass()} instead.
	 */  @Override
	public String toString() { return ""BoardingPassBuilder [parentBuilder="" + parentBuilder
				+ "", boardingPass="" + boardingPass + "", messageBuilder=""
				+ messageBuilder + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.factory.AirlineBaseTemplateBuilder
	 * #toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/ButtonFactory.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import co.aurasphere.botmill.fb.model.outcoming.template.button.Button;
import co.aurasphere.botmill.fb.model.outcoming.template.button.ButtonType;
import co.aurasphere.botmill.fb.model.outcoming.template.button.BuyButton;
import co.aurasphere.botmill.fb.model.outcoming.template.button.LoginButton;
import co.aurasphere.botmill.fb.model.outcoming.template.button.LogoutButton;
import co.aurasphere.botmill.fb.model.outcoming.template.button.PaymentSummary;
import co.aurasphere.botmill.fb.model.outcoming.template.button.PostbackButton;
import co.aurasphere.botmill.fb.model.outcoming.template.button.ShareButton;
import co.aurasphere.botmill.fb.model.outcoming.template.button.WebUrlButton;
import co.aurasphere.botmill.fb.model.outcoming.template.button.WebViewHeightRatioType;
import co.aurasphere.botmill.fb.model.outcoming.template.list.DefaultAction;


/**
 * Factory class for building {@link Button} objects.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */
public class ButtonFactory {

	/**
	 * Instantiates a new ButtonFactory.
	 */
	private ButtonFactory() {
	}

	/**
	 * Creates a button which redirects to an URL when clicked.
	 * 
	 * @param title
	 *            the button label.
	 * @param url
	 *            the URL to whom redirect when clicked.
	 * @return a {@link WebUrlButton}.
	 */
	public static Button createUrlButton(String title, String url) {
		return new WebUrlButton(title, url);
	}

	/**
	 * Creates a default action button (based on Web URL) for list template.
	 * 
	 * @param url
	 *            the redirect URL.
	 * @return a {@link DefaultAction}.
	 */
	public static DefaultAction createDefaultActionButton(String url) {
		return new DefaultAction(url);
	}

	/**
	 * Creates a web view button.
	 *
	 * @param title
	 *            the button label.
	 * @param url
	 *            the URL to whom redirect when clicked.
	 * @param ratioType
	 *            the web view ratio type.
	 * @return the button
	 */
	public static Button createUrlButton(String title, String url,
			WebViewHeightRatioType ratioType) {
		return new WebUrlButton(title, url, ratioType);
	}

	/**
	 * Creates a button which sends a payload back when clicked.
	 * 
	 * @param title
	 *            the button label.
	 * @param payload
	 *            the payload to send back when clicked.
	 * @return a {@link PostbackButton}.
	 */
	public static Button createPostbackButton(String title, String payload) {
		return new PostbackButton(title, ButtonType.POSTBACK, payload);
	}

	/**
	 * Creates a button with a phone number.
	 * 
	 * @param title
	 *            the button label.
	 * @param phoneNumber
	 *            a phone number. Must be in the format '+' prefix followed by
	 *            the country code, area code and local number.
	 * @return a {@link PostbackButton}.
	 */
	public static Button createPhoneNumberButton(String title,
			String phoneNumber) {
		return new PostbackButton(title, ButtonType.PHONE_NUMBER, phoneNumber);
	}

	/**
	 * Creates a default action (which is based off from Url Button) which
	 * redirects to an URL when clicked.
	 * 
	 * @return a {@link Button}.
	 */
	public static Button createShareButton() {
		return new ShareButton();
	}

	/**
	 * Creates a new {@link BuyButton} object.
	 *
	 * @param payload
	 *            the payload data
	 * @param paymentSummary
	 *            the payment summary that will be displayed.
	 * @return a {@link Button}
	 */
	public static Button createBuyButton(String payload,
			PaymentSummary paymentSummary) {
		return new BuyButton(payload, paymentSummary);
	}

	/**
	 * Creates a new {@link BuyButton} object.
	 *
	 * @param payload
	 *            the payload data.
	 * @return a builder for the {@link BuyButton}.
	 */
	public static BuyButtonBuilder createBuyButton(String payload) {
		return new BuyButtonBuilder(payload);
	}

	/**
	 * Creates a login button (which is based off from Url Button) which
	 * redirects to an URL when clicked.
	 * 
	 * @param url
	 *            the url on which the user will be authenticated.
	 * @return a {@link Button}
	 */
	public static Button createLoginButton(String url) {
		return new LoginButton(url);
	}

	/**
	 * Creates a logout button which redirects to an URL when clicked.
	 * 
	 * @return a {@link Button}.
	 */
	public static Button createLogoutButton() {
		return new LogoutButton();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""ButtonFactory []"";
	}
}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public class ButtonFactory { private ButtonFactory() { } public static Button createUrlButton(String title, String url) { return new WebUrlButton(title, url); } public static DefaultAction createDefaultActionButton(String url) { return new DefaultAction(url); } public static Button createUrlButton(String title, String url,
			WebViewHeightRatioType ratioType) { return new WebUrlButton(title, url, ratioType); } public static Button createPostbackButton(String title, String payload) { return new PostbackButton(title, ButtonType.POSTBACK, payload); } public static Button createPhoneNumberButton(String title,
			String phoneNumber) { return new PostbackButton(title, ButtonType.PHONE_NUMBER, phoneNumber); } public static Button createShareButton() { return new ShareButton(); } public static Button createBuyButton(String payload,
			PaymentSummary paymentSummary) { return new BuyButton(payload, paymentSummary); } public static BuyButtonBuilder createBuyButton(String payload) { return new BuyButtonBuilder(payload); } public static Button createLoginButton(String url) { return new LoginButton(url); } public static Button createLogoutButton() { return new LogoutButton(); } @Override
	public String toString() { return ""ButtonFactory []""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public class ButtonFactory { private ButtonFactory() { } public static Button createUrlButton(String title, String url) { return new WebUrlButton(title, url); } public static DefaultAction createDefaultActionButton(String url) { return new DefaultAction(url); } public static Button createUrlButton(String title, String url,
			WebViewHeightRatioType ratioType) { return new WebUrlButton(title, url, ratioType); } public static Button createPostbackButton(String title, String payload) { return new PostbackButton(title, ButtonType.POSTBACK, payload); } public static Button createPhoneNumberButton(String title,
			String phoneNumber) { return new PostbackButton(title, ButtonType.PHONE_NUMBER, phoneNumber); } public static Button createShareButton() { return new ShareButton(); } public static Button createBuyButton(String payload,
			PaymentSummary paymentSummary) { return new BuyButton(payload, paymentSummary); } public static BuyButtonBuilder createBuyButton(String payload) { return new BuyButtonBuilder(payload); } public static Button createLoginButton(String url) { return new LoginButton(url); } public static Button createLogoutButton() { return new LogoutButton(); } @Override
	public String toString() { return ""ButtonFactory []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import co.aurasphere.botmill.fb.model.outcoming.template.button.Button; import co.aurasphere.botmill.fb.model.outcoming.template.button.ButtonType; import co.aurasphere.botmill.fb.model.outcoming.template.button.BuyButton; import co.aurasphere.botmill.fb.model.outcoming.template.button.LoginButton; import co.aurasphere.botmill.fb.model.outcoming.template.button.LogoutButton; import co.aurasphere.botmill.fb.model.outcoming.template.button.PaymentSummary; import co.aurasphere.botmill.fb.model.outcoming.template.button.PostbackButton; import co.aurasphere.botmill.fb.model.outcoming.template.button.ShareButton; import co.aurasphere.botmill.fb.model.outcoming.template.button.WebUrlButton; import co.aurasphere.botmill.fb.model.outcoming.template.button.WebViewHeightRatioType; import co.aurasphere.botmill.fb.model.outcoming.template.list.DefaultAction; 
  public class ButtonFactory { /**
 * Factory class for building {@link Button} objects.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */  private ButtonFactory() { } /**
	 * Instantiates a new ButtonFactory.
	 */  public static Button createUrlButton(String title, String url) { return new WebUrlButton(title, url); } /**
	 * Creates a button which redirects to an URL when clicked.
	 * 
	 * @param title
	 *            the button label.
	 * @param url
	 *            the URL to whom redirect when clicked.
	 * @return a {@link WebUrlButton}.
	 */  public static DefaultAction createDefaultActionButton(String url) { return new DefaultAction(url); } /**
	 * Creates a default action button (based on Web URL) for list template.
	 * 
	 * @param url
	 *            the redirect URL.
	 * @return a {@link DefaultAction}.
	 */  public static Button createUrlButton(String title, String url,
			WebViewHeightRatioType ratioType) { return new WebUrlButton(title, url, ratioType); } /**
	 * Creates a web view button.
	 *
	 * @param title
	 *            the button label.
	 * @param url
	 *            the URL to whom redirect when clicked.
	 * @param ratioType
	 *            the web view ratio type.
	 * @return the button
	 */  public static Button createPostbackButton(String title, String payload) { return new PostbackButton(title, ButtonType.POSTBACK, payload); } /**
	 * Creates a button which sends a payload back when clicked.
	 * 
	 * @param title
	 *            the button label.
	 * @param payload
	 *            the payload to send back when clicked.
	 * @return a {@link PostbackButton}.
	 */  public static Button createPhoneNumberButton(String title,
			String phoneNumber) { return new PostbackButton(title, ButtonType.PHONE_NUMBER, phoneNumber); } /**
	 * Creates a button with a phone number.
	 * 
	 * @param title
	 *            the button label.
	 * @param phoneNumber
	 *            a phone number. Must be in the format '+' prefix followed by
	 *            the country code, area code and local number.
	 * @return a {@link PostbackButton}.
	 */  public static Button createShareButton() { return new ShareButton(); } /**
	 * Creates a default action (which is based off from Url Button) which
	 * redirects to an URL when clicked.
	 * 
	 * @return a {@link Button}.
	 */  public static Button createBuyButton(String payload,
			PaymentSummary paymentSummary) { return new BuyButton(payload, paymentSummary); } /**
	 * Creates a new {@link BuyButton} object.
	 *
	 * @param payload
	 *            the payload data
	 * @param paymentSummary
	 *            the payment summary that will be displayed.
	 * @return a {@link Button}
	 */  public static BuyButtonBuilder createBuyButton(String payload) { return new BuyButtonBuilder(payload); } /**
	 * Creates a new {@link BuyButton} object.
	 *
	 * @param payload
	 *            the payload data.
	 * @return a builder for the {@link BuyButton}.
	 */  public static Button createLoginButton(String url) { return new LoginButton(url); } /**
	 * Creates a login button (which is based off from Url Button) which
	 * redirects to an URL when clicked.
	 * 
	 * @param url
	 *            the url on which the user will be authenticated.
	 * @return a {@link Button}
	 */  public static Button createLogoutButton() { return new LogoutButton(); } /**
	 * Creates a logout button which redirects to an URL when clicked.
	 * 
	 * @return a {@link Button}.
	 */  @Override
	public String toString() { return ""ButtonFactory []""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/ButtonTemplateBuilder.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import co.aurasphere.botmill.fb.model.base.AttachmentType;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;
import co.aurasphere.botmill.fb.model.outcoming.payload.template.ButtonTemplatePayload;
import co.aurasphere.botmill.fb.model.outcoming.template.button.Button;
import co.aurasphere.botmill.fb.model.outcoming.template.button.WebViewHeightRatioType;

/**
 * A builder for a Button Template.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/button-template""
 *      > Facebook's Messenger Platform Button Template Documentation</a>
 */
public class ButtonTemplateBuilder extends TemplateBaseBuilder {

	/**
	 * The payload of the current builder.
	 */
	private ButtonTemplatePayload payload;

	/**
	 * Default constructor. Creates a builder for a Button Template.
	 *
	 * @param text
	 *            the Button Template main text.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/button-template""
	 *      > Facebook's Messenger Platform Button Template Documentation</a>
	 * 
	 */
	ButtonTemplateBuilder(String text) {
		this.payload = new ButtonTemplatePayload(text);
		this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload);
	}

	/**
	 * Adds a button which redirects to an URL when clicked to the current
	 * template. There can be at most 3 buttons.
	 * 
	 * @param title
	 *            the button label.
	 * @param url
	 *            the URL to whom redirect when clicked.
	 * @return this builder.
	 */
	public ButtonTemplateBuilder addUrlButton(String title, String url) {
		Button button = ButtonFactory.createUrlButton(title, url);
		this.payload.addButton(button);
		return this;
	}

	/**
	 * Adds a button which redirects to an URL when clicked to the current
	 * template. There can be at most 3 buttons.
	 * 
	 * @param title 
	 * 			the title of the url button
	 * @param url
	 * 			the actual link of the this url button
	 * @param ratioType
	 * 			the size of the web view url.
	 * @return
	 * 		this builder
	 */
	public ButtonTemplateBuilder addUrlButton(String title, String url,
			WebViewHeightRatioType ratioType) {
		Button button = ButtonFactory.createUrlButton(title, url, ratioType);
		this.payload.addButton(button);
		return this;
	}

	/**
	 * Adds a button with a phone number to the current template. There can be
	 * at most 3 buttons.
	 * 
	 * @param title
	 *            the button label.
	 * @param phoneNumber
	 *            a phone number.
	 * @return this builder.
	 */
	public ButtonTemplateBuilder addPhoneNumberButton(String title,
			String phoneNumber) {
		Button button = ButtonFactory.createPhoneNumberButton(title,
				phoneNumber);
		this.payload.addButton(button);
		return this;
	}

	/**
	 * Adds a button which sends a payload back when clicked to the current
	 * template. There can be at most 3 buttons.
	 * 
	 * @param title
	 *            the button label.
	 * @param payload
	 *            the payload to send back when clicked.
	 * @return this builder.
	 */
	public ButtonTemplateBuilder addPostbackButton(String title, String payload) {
		Button button = ButtonFactory.createPostbackButton(title, payload);
		this.payload.addButton(button);
		return this;
	}

	/**
	 * Adds a button to the current template. There can be at most 3 buttons per
	 * element.
	 * 
	 * @param button
	 *            the button to add.
	 * @return this builder.
	 */
	public ButtonTemplateBuilder addButton(Button button) {
		this.payload.addButton(button);
		return this;
	}

	/**
	 * {@inheritDoc} Creates a response that contains a Button Template.
	 */
	public FbBotMillResponse build(MessageEnvelope envelope) {
		return this.messageBuilder.build(envelope);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.bean.FbBotMillBean#toString()
	 */
	@Override
	public String toString() {
		return ""ButtonTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public class ButtonTemplateBuilder extends TemplateBaseBuilder { private ButtonTemplatePayload payload; ButtonTemplateBuilder(String text) { this.payload = new ButtonTemplatePayload(text); this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload); } public ButtonTemplateBuilder addUrlButton(String title, String url) { Button button = ButtonFactory.createUrlButton(title, url); this.payload.addButton(button); return this; } public ButtonTemplateBuilder addUrlButton(String title, String url,
			WebViewHeightRatioType ratioType) { Button button = ButtonFactory.createUrlButton(title, url, ratioType); this.payload.addButton(button); return this; } public ButtonTemplateBuilder addPhoneNumberButton(String title,
			String phoneNumber) { Button button = ButtonFactory.createPhoneNumberButton(title,
				phoneNumber); this.payload.addButton(button); return this; } public ButtonTemplateBuilder addPostbackButton(String title, String payload) { Button button = ButtonFactory.createPostbackButton(title, payload); this.payload.addButton(button); return this; } public ButtonTemplateBuilder addButton(Button button) { this.payload.addButton(button); return this; } public FbBotMillResponse build(MessageEnvelope envelope) { return this.messageBuilder.build(envelope); } @Override
	public String toString() { return ""ButtonTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public class ButtonTemplateBuilder extends TemplateBaseBuilder { private ButtonTemplatePayload payload; ButtonTemplateBuilder(String text) { this.payload = new ButtonTemplatePayload(text); this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload); } public ButtonTemplateBuilder addUrlButton(String title, String url) { Button button = ButtonFactory.createUrlButton(title, url); this.payload.addButton(button); return this; } public ButtonTemplateBuilder addUrlButton(String title, String url,
			WebViewHeightRatioType ratioType) { Button button = ButtonFactory.createUrlButton(title, url, ratioType); this.payload.addButton(button); return this; } public ButtonTemplateBuilder addPhoneNumberButton(String title,
			String phoneNumber) { Button button = ButtonFactory.createPhoneNumberButton(title,
				phoneNumber); this.payload.addButton(button); return this; } public ButtonTemplateBuilder addPostbackButton(String title, String payload) { Button button = ButtonFactory.createPostbackButton(title, payload); this.payload.addButton(button); return this; } public ButtonTemplateBuilder addButton(Button button) { this.payload.addButton(button); return this; } public FbBotMillResponse build(MessageEnvelope envelope) { return this.messageBuilder.build(envelope); } @Override
	public String toString() { return ""ButtonTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import co.aurasphere.botmill.fb.model.base.AttachmentType; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; import co.aurasphere.botmill.fb.model.outcoming.payload.template.ButtonTemplatePayload; import co.aurasphere.botmill.fb.model.outcoming.template.button.Button; import co.aurasphere.botmill.fb.model.outcoming.template.button.WebViewHeightRatioType;  /**
 * A builder for a Button Template.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/button-template""
 *      > Facebook's Messenger Platform Button Template Documentation</a>
 */ public class ButtonTemplateBuilder extends TemplateBaseBuilder {  /**
	 * The payload of the current builder.
	 */ private ButtonTemplatePayload payload;  /**
	 * Default constructor. Creates a builder for a Button Template.
	 *
	 * @param text
	 *            the Button Template main text.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/button-template""
	 *      > Facebook's Messenger Platform Button Template Documentation</a>
	 * 
	 */ ButtonTemplateBuilder(String text) { this.payload = new ButtonTemplatePayload(text); this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload); }  /**
	 * Adds a button which redirects to an URL when clicked to the current
	 * template. There can be at most 3 buttons.
	 * 
	 * @param title
	 *            the button label.
	 * @param url
	 *            the URL to whom redirect when clicked.
	 * @return this builder.
	 */ public ButtonTemplateBuilder addUrlButton(String title, String url) { Button button = ButtonFactory.createUrlButton(title, url); this.payload.addButton(button); return this; }  /**
	 * Adds a button which redirects to an URL when clicked to the current
	 * template. There can be at most 3 buttons.
	 * 
	 * @param title 
	 * 			the title of the url button
	 * @param url
	 * 			the actual link of the this url button
	 * @param ratioType
	 * 			the size of the web view url.
	 * @return
	 * 		this builder
	 */ public ButtonTemplateBuilder addUrlButton(String title, String url,
			WebViewHeightRatioType ratioType) { Button button = ButtonFactory.createUrlButton(title, url, ratioType); this.payload.addButton(button); return this; }  /**
	 * Adds a button with a phone number to the current template. There can be
	 * at most 3 buttons.
	 * 
	 * @param title
	 *            the button label.
	 * @param phoneNumber
	 *            a phone number.
	 * @return this builder.
	 */ public ButtonTemplateBuilder addPhoneNumberButton(String title,
			String phoneNumber) { Button button = ButtonFactory.createPhoneNumberButton(title,
				phoneNumber); this.payload.addButton(button); return this; }  /**
	 * Adds a button which sends a payload back when clicked to the current
	 * template. There can be at most 3 buttons.
	 * 
	 * @param title
	 *            the button label.
	 * @param payload
	 *            the payload to send back when clicked.
	 * @return this builder.
	 */ public ButtonTemplateBuilder addPostbackButton(String title, String payload) { Button button = ButtonFactory.createPostbackButton(title, payload); this.payload.addButton(button); return this; }  /**
	 * Adds a button to the current template. There can be at most 3 buttons per
	 * element.
	 * 
	 * @param button
	 *            the button to add.
	 * @return this builder.
	 */ public ButtonTemplateBuilder addButton(Button button) { this.payload.addButton(button); return this; }  /**
	 * {@inheritDoc} Creates a response that contains a Button Template.
	 */ public FbBotMillResponse build(MessageEnvelope envelope) { return this.messageBuilder.build(envelope); }  /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.bean.FbBotMillBean#toString()
	 */ @Override
	public String toString() { return ""ButtonTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]""; }  }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/BuyButtonBuilder.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import co.aurasphere.botmill.fb.model.outcoming.template.button.BuyButton;
import co.aurasphere.botmill.fb.model.outcoming.template.button.PaymentSummary;
import co.aurasphere.botmill.fb.model.outcoming.template.button.PaymentType;


/**
 * Builder for a {@link BuyButton}.
 * 
 * @author Donato Rimenti
 * @since 1.1.0
 */
public class BuyButtonBuilder {

	/**
	 * The {@link BuyButton} created with this builder.
	 */
	private BuyButton buyButton;

	/**
	 * Instantiates a new BuyButtonBuilder.
	 *
	 * @param payload
	 *            the {@link BuyButton#payload}.
	 */
	BuyButtonBuilder(String payload) {
		this.buyButton = new BuyButton(payload);
	}

	/**
	 * Sets the {@link PaymentSummary} for the current {@link BuyButton}.
	 * 
	 * @param paymentSummary
	 *            the {@link BuyButton#paymentSummary}.
	 * @return this builder.
	 */
	public BuyButtonBuilder setPaymentSummary(PaymentSummary paymentSummary) {
		this.buyButton.setPaymentSummary(paymentSummary);
		return this;
	}

	/**
	 * Sets the {@link PaymentSummary} for the current {@link BuyButton}.
	 * 
	 * @param currency
	 *            the {@link PaymentSummary#currency}.
	 * @param paymentType
	 *            the {@link PaymentSummary#paymentType}.
	 * @param merchantName
	 *            the {@link PaymentSummary#merchantName}.
	 * @return this builder.
	 */
	public PaymentSummaryBuilder setPaymentSummary(String currency,
			PaymentType paymentType, String merchantName) {
		return new PaymentSummaryBuilder(currency, paymentType, merchantName,
				this);
	}

	/**
	 * Builds the {@link BuyButton}.
	 * 
	 * @return the {@link #buyButton}.
	 */
	public BuyButton build() {
		return this.buyButton;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""BuyButtonBuilder [buyButton="" + buyButton + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public class BuyButtonBuilder { private BuyButton buyButton; BuyButtonBuilder(String payload) { this.buyButton = new BuyButton(payload); } public BuyButtonBuilder setPaymentSummary(PaymentSummary paymentSummary) { this.buyButton.setPaymentSummary(paymentSummary); return this; } public PaymentSummaryBuilder setPaymentSummary(String currency,
			PaymentType paymentType, String merchantName) { return new PaymentSummaryBuilder(currency, paymentType, merchantName,
				this); } public BuyButton build() { return this.buyButton; } @Override
	public String toString() { return ""BuyButtonBuilder [buyButton="" + buyButton + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public class BuyButtonBuilder { private BuyButton buyButton; BuyButtonBuilder(String payload) { this.buyButton = new BuyButton(payload); } public BuyButtonBuilder setPaymentSummary(PaymentSummary paymentSummary) { this.buyButton.setPaymentSummary(paymentSummary); return this; } public PaymentSummaryBuilder setPaymentSummary(String currency,
			PaymentType paymentType, String merchantName) { return new PaymentSummaryBuilder(currency, paymentType, merchantName,
				this); } public BuyButton build() { return this.buyButton; } @Override
	public String toString() { return ""BuyButtonBuilder [buyButton="" + buyButton + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import co.aurasphere.botmill.fb.model.outcoming.template.button.BuyButton; import co.aurasphere.botmill.fb.model.outcoming.template.button.PaymentSummary; import co.aurasphere.botmill.fb.model.outcoming.template.button.PaymentType; 
  public class BuyButtonBuilder { /**
 * Builder for a {@link BuyButton}.
 * 
 * @author Donato Rimenti
 * @since 1.1.0
 */  private BuyButton buyButton; /**
	 * The {@link BuyButton} created with this builder.
	 */  BuyButtonBuilder(String payload) { this.buyButton = new BuyButton(payload); } /**
	 * Instantiates a new BuyButtonBuilder.
	 *
	 * @param payload
	 *            the {@link BuyButton#payload}.
	 */  public BuyButtonBuilder setPaymentSummary(PaymentSummary paymentSummary) { this.buyButton.setPaymentSummary(paymentSummary); return this; } /**
	 * Sets the {@link PaymentSummary} for the current {@link BuyButton}.
	 * 
	 * @param paymentSummary
	 *            the {@link BuyButton#paymentSummary}.
	 * @return this builder.
	 */  public PaymentSummaryBuilder setPaymentSummary(String currency,
			PaymentType paymentType, String merchantName) { return new PaymentSummaryBuilder(currency, paymentType, merchantName,
				this); } /**
	 * Sets the {@link PaymentSummary} for the current {@link BuyButton}.
	 * 
	 * @param currency
	 *            the {@link PaymentSummary#currency}.
	 * @param paymentType
	 *            the {@link PaymentSummary#paymentType}.
	 * @param merchantName
	 *            the {@link PaymentSummary#merchantName}.
	 * @return this builder.
	 */  public BuyButton build() { return this.buyButton; } /**
	 * Builds the {@link BuyButton}.
	 * 
	 * @return the {@link #buyButton}.
	 */  @Override
	public String toString() { return ""BuyButtonBuilder [buyButton="" + buyButton + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/FbBotMillResponseBuilder.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import co.aurasphere.botmill.fb.bean.FbBotMillBean;
import co.aurasphere.botmill.fb.model.base.User;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;


/**
 * Abstract class for the response builders. Defines how a bot should build the
 * {@link FbBotMillResponse} object representing its response.
 * 
 * @author Donato Rimenti
 * 
 */
public abstract class FbBotMillResponseBuilder extends FbBotMillBean {

	/**
	 * Builds the {@link FbBotMillResponse} that the bot should return.
	 * 
	 * @param envelope
	 *            a {@link MessageEnvelope} object representing the incoming
	 *            message.
	 * @return the {@link FbBotMillResponse} of this bot.
	 */
	abstract FbBotMillResponse build(MessageEnvelope envelope);
	
	/**
	 * Returns the recipient of the envelope which is the sender of the previous
	 * one.
	 * 
	 * @param envelope
	 *            the incoming envelope.
	 * @return the recipient.
	 */
	protected User getRecipient(MessageEnvelope envelope) {
		return safeGetSender(envelope);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.bean.FbBotMillBean#toString()
	 */
	@Override
	public String toString() {
		return ""FbBotMillResponseBuilder []"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public abstract class FbBotMillResponseBuilder extends FbBotMillBean { abstract FbBotMillResponse build(MessageEnvelope envelope); protected User getRecipient(MessageEnvelope envelope) { return safeGetSender(envelope); } @Override
	public String toString() { return ""FbBotMillResponseBuilder []""; } }",0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public abstract class FbBotMillResponseBuilder extends FbBotMillBean { abstract FbBotMillResponse build(MessageEnvelope envelope); protected User getRecipient(MessageEnvelope envelope) { return safeGetSender(envelope); } @Override
	public String toString() { return ""FbBotMillResponseBuilder []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import co.aurasphere.botmill.fb.bean.FbBotMillBean; import co.aurasphere.botmill.fb.model.base.User; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; 
  public abstract class FbBotMillResponseBuilder extends FbBotMillBean { /**
 * Abstract class for the response builders. Defines how a bot should build the
 * {@link FbBotMillResponse} object representing its response.
 * 
 * @author Donato Rimenti
 * 
 */  abstract FbBotMillResponse build(MessageEnvelope envelope); /**
	 * Builds the {@link FbBotMillResponse} that the bot should return.
	 * 
	 * @param envelope
	 *            a {@link MessageEnvelope} object representing the incoming
	 *            message.
	 * @return the {@link FbBotMillResponse} of this bot.
	 */ 	 protected User getRecipient(MessageEnvelope envelope) { return safeGetSender(envelope); } /**
	 * Returns the recipient of the envelope which is the sender of the previous
	 * one.
	 * 
	 * @param envelope
	 *            the incoming envelope.
	 * @return the recipient.
	 */  @Override
	public String toString() { return ""FbBotMillResponseBuilder []""; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.bean.FbBotMillBean#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/FlightInfoBuilder.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import java.util.Calendar;

import co.aurasphere.botmill.fb.model.outcoming.template.airline.Airport;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfo;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightSchedule;


/**
 * Builder for a {@link FlightInfo} object.
 *
 * @author Donato Rimenti
 * @param <T>
 *            the class of the parent builder. Used for casting before returning
 *            it.
 * 
 */
public class FlightInfoBuilder<T extends FlightInfoBuilderDelegator> {

	/**
	 * The parent builder of this one. Used to return to the parent once the
	 * build is finished calling {@link #endFlightInfo()}.
	 */
	private T parentBuilder;

	/**
	 * The object managed by this builder.
	 */
	private FlightInfo flightInfo;

	/**
	 * Default constructor. Creates a builder for a {@link FlightInfo} object.
	 * 
	 * @param parentBuilder
	 *            the parent builder of this one. It can't be null.
	 * @param flightNumber
	 *            the flight number. It can't be empty.
	 */
	FlightInfoBuilder(T parentBuilder, String flightNumber) {
		this.parentBuilder = parentBuilder;
		this.flightInfo = new FlightInfo(flightNumber);
	}

	/**
	 * Sets the departure {@link Airport} for the current {@link FlightInfo}
	 * object. This field is mandatory for this object and can't be null.
	 * 
	 * @param airportCode
	 *            the airport code. It can't be empty.
	 * @param city
	 *            the city name. The city will be displayed over the airport
	 *            code in the template. It can't be empty.
	 * @param gate
	 *            the airport gate. This field is optional.
	 * @param terminal
	 *            the airport terminal. This field is optional.
	 * @return this builder.
	 */
	public FlightInfoBuilder<T> setDepartureAirport(String airportCode,
			String city, String gate, String terminal) {
		Airport departureAirport = new Airport(airportCode, city, gate,
				terminal);
		this.flightInfo.setDepartureAirport(departureAirport);
		return this;
	}

	/**
	 * Sets the departure {@link Airport} for the current {@link FlightInfo}
	 * object. This field is mandatory for this object and can't be null.
	 * 
	 * @param airportCode
	 *            the airport code. It can't be empty.
	 * @param city
	 *            the city name. The city will be displayed over the airport
	 *            code in the template. It can't be empty.
	 * @return this builder.
	 */
	public FlightInfoBuilder<T> setDepartureAirport(String airportCode,
			String city) {
		Airport departureAirport = new Airport(airportCode, city);
		this.flightInfo.setDepartureAirport(departureAirport);
		return this;
	}

	/**
	 * Sets the departure {@link Airport} for the current {@link FlightInfo}
	 * object. This field is mandatory for this object and can't be null.
	 * 
	 * @param airport
	 *            the departure airport. It can't be null.
	 * @return this builder.
	 */
	public FlightInfoBuilder<T> setDepartureAirport(Airport airport) {
		this.flightInfo.setDepartureAirport(airport);
		return this;
	}

	/**
	 * Sets the arrival {@link Airport} for the current {@link FlightInfo}
	 * object. This field is mandatory for this object and can't be null.
	 * 
	 * @param airportCode
	 *            the airport code. It can't be empty.
	 * @param city
	 *            the city name. The city will be displayed over the airport
	 *            code in the template. It can't be empty.
	 * @param gate
	 *            the airport gate. This field is optional.
	 * @param terminal
	 *            the airport terminal. This field is optional.
	 * @return this builder.
	 */
	public FlightInfoBuilder<T> setArrivalAirport(String airportCode,
			String city, String gate, String terminal) {
		Airport arrivalAirport = new Airport(airportCode, city, gate, terminal);
		this.flightInfo.setArrivalAirport(arrivalAirport);
		return this;
	}

	/**
	 * Sets the arrival {@link Airport} for the current {@link FlightInfo}
	 * object. This field is mandatory for this object and can't be null.
	 * 
	 * @param airportCode
	 *            the airport code. It can't be empty.
	 * @param city
	 *            the city name. The city will be displayed over the airport
	 *            code in the template. It can't be empty.
	 * @return this builder.
	 */
	public FlightInfoBuilder<T> setArrivalAirport(String airportCode,
			String city) {
		Airport arrivalAirport = new Airport(airportCode, city);
		this.flightInfo.setArrivalAirport(arrivalAirport);
		return this;
	}

	/**
	 * Sets the arrival {@link Airport} for the current {@link FlightInfo}
	 * object. This field is mandatory for this object and can't be null.
	 * 
	 * @param airport
	 *            the arrival airport. It can't be null.
	 * @return this builder.
	 */
	public FlightInfoBuilder<T> setArrivalAirport(Airport airport) {
		this.flightInfo.setArrivalAirport(airport);
		return this;
	}

	/**
	 * Sets the {@link FlightSchedule} object for the current {@link FlightInfo}
	 * object. This field is mandatory for this object and can't be null.
	 * 
	 * @param departureTime
	 *            the departure time. It can't be null.
	 * @param arrivalTime
	 *            the arrival time. It can't be null.
	 * @return this builder.
	 */
	public FlightInfoBuilder<T> setFlightSchedule(Calendar departureTime,
			Calendar arrivalTime) {
		FlightSchedule flightSchedule = new FlightSchedule(departureTime,
				arrivalTime);
		this.flightInfo.setFlightSchedule(flightSchedule);
		return this;
	}

	/**
	 * Sets the {@link FlightSchedule} object for the current {@link FlightInfo}
	 * object. This field is mandatory for this object and can't be null.
	 * 
	 * @param departureTime
	 *            the departure time. It can't be null.
	 * @param arrivalTime
	 *            the arrival time. It can't be null.
	 * @param boardingTime
	 *            the boarding time. This field is optional.
	 * @return this builder.
	 */
	public FlightInfoBuilder<T> setFlightSchedule(Calendar departureTime,
			Calendar arrivalTime, Calendar boardingTime) {
		FlightSchedule flightSchedule = new FlightSchedule(departureTime,
				arrivalTime, boardingTime);
		this.flightInfo.setFlightSchedule(flightSchedule);
		return this;
	}

	/**
	 * Sets the {@link FlightSchedule} object for the current {@link FlightInfo}
	 * object. This field is mandatory for this object and can't be null.
	 * 
	 * @param flightSchedule
	 *            the flight schedule to set. It can't be null.
	 * @return this builder.
	 */
	public FlightInfoBuilder<T> setFlightSchedule(FlightSchedule flightSchedule) {
		this.flightInfo.setFlightSchedule(flightSchedule);
		return this;
	}

	/**
	 * Builds the current object, adds it to the parent builder and returns the
	 * parent builder.
	 * 
	 * @return the parent builder of this builder.
	 */
	public T endFlightInfo() {
		parentBuilder.addFlightInfo(flightInfo);
		return parentBuilder;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""FlightInfoBuilder [parentBuilder="" + parentBuilder
				+ "", flightInfo="" + flightInfo + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public class FlightInfoBuilder<T extends FlightInfoBuilderDelegator> { private T parentBuilder; private FlightInfo flightInfo; FlightInfoBuilder(T parentBuilder, String flightNumber) { this.parentBuilder = parentBuilder; this.flightInfo = new FlightInfo(flightNumber); } public FlightInfoBuilder<T> setDepartureAirport(String airportCode,
			String city, String gate, String terminal) { Airport departureAirport = new Airport(airportCode, city, gate,
				terminal); this.flightInfo.setDepartureAirport(departureAirport); return this; } public FlightInfoBuilder<T> setDepartureAirport(String airportCode,
			String city) { Airport departureAirport = new Airport(airportCode, city); this.flightInfo.setDepartureAirport(departureAirport); return this; } public FlightInfoBuilder<T> setDepartureAirport(Airport airport) { this.flightInfo.setDepartureAirport(airport); return this; } public FlightInfoBuilder<T> setArrivalAirport(String airportCode,
			String city, String gate, String terminal) { Airport arrivalAirport = new Airport(airportCode, city, gate, terminal); this.flightInfo.setArrivalAirport(arrivalAirport); return this; } public FlightInfoBuilder<T> setArrivalAirport(String airportCode,
			String city) { Airport arrivalAirport = new Airport(airportCode, city); this.flightInfo.setArrivalAirport(arrivalAirport); return this; } public FlightInfoBuilder<T> setArrivalAirport(Airport airport) { this.flightInfo.setArrivalAirport(airport); return this; } public FlightInfoBuilder<T> setFlightSchedule(Calendar departureTime,
			Calendar arrivalTime) { FlightSchedule flightSchedule = new FlightSchedule(departureTime,
				arrivalTime); this.flightInfo.setFlightSchedule(flightSchedule); return this; } public FlightInfoBuilder<T> setFlightSchedule(Calendar departureTime,
			Calendar arrivalTime, Calendar boardingTime) { FlightSchedule flightSchedule = new FlightSchedule(departureTime,
				arrivalTime, boardingTime); this.flightInfo.setFlightSchedule(flightSchedule); return this; } public FlightInfoBuilder<T> setFlightSchedule(FlightSchedule flightSchedule) { this.flightInfo.setFlightSchedule(flightSchedule); return this; } public T endFlightInfo() { parentBuilder.addFlightInfo(flightInfo); return parentBuilder; } @Override
	public String toString() { return ""FlightInfoBuilder [parentBuilder="" + parentBuilder
				+ "", flightInfo="" + flightInfo + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public class FlightInfoBuilder<T extends FlightInfoBuilderDelegator> { private T parentBuilder; private FlightInfo flightInfo; FlightInfoBuilder(T parentBuilder, String flightNumber) { this.parentBuilder = parentBuilder; this.flightInfo = new FlightInfo(flightNumber); } public FlightInfoBuilder<T> setDepartureAirport(String airportCode,
			String city, String gate, String terminal) { Airport departureAirport = new Airport(airportCode, city, gate,
				terminal); this.flightInfo.setDepartureAirport(departureAirport); return this; } public FlightInfoBuilder<T> setDepartureAirport(String airportCode,
			String city) { Airport departureAirport = new Airport(airportCode, city); this.flightInfo.setDepartureAirport(departureAirport); return this; } public FlightInfoBuilder<T> setDepartureAirport(Airport airport) { this.flightInfo.setDepartureAirport(airport); return this; } public FlightInfoBuilder<T> setArrivalAirport(String airportCode,
			String city, String gate, String terminal) { Airport arrivalAirport = new Airport(airportCode, city, gate, terminal); this.flightInfo.setArrivalAirport(arrivalAirport); return this; } public FlightInfoBuilder<T> setArrivalAirport(String airportCode,
			String city) { Airport arrivalAirport = new Airport(airportCode, city); this.flightInfo.setArrivalAirport(arrivalAirport); return this; } public FlightInfoBuilder<T> setArrivalAirport(Airport airport) { this.flightInfo.setArrivalAirport(airport); return this; } public FlightInfoBuilder<T> setFlightSchedule(Calendar departureTime,
			Calendar arrivalTime) { FlightSchedule flightSchedule = new FlightSchedule(departureTime,
				arrivalTime); this.flightInfo.setFlightSchedule(flightSchedule); return this; } public FlightInfoBuilder<T> setFlightSchedule(Calendar departureTime,
			Calendar arrivalTime, Calendar boardingTime) { FlightSchedule flightSchedule = new FlightSchedule(departureTime,
				arrivalTime, boardingTime); this.flightInfo.setFlightSchedule(flightSchedule); return this; } public FlightInfoBuilder<T> setFlightSchedule(FlightSchedule flightSchedule) { this.flightInfo.setFlightSchedule(flightSchedule); return this; } public T endFlightInfo() { parentBuilder.addFlightInfo(flightInfo); return parentBuilder; } @Override
	public String toString() { return ""FlightInfoBuilder [parentBuilder="" + parentBuilder
				+ "", flightInfo="" + flightInfo + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import java.util.Calendar; 
import co.aurasphere.botmill.fb.model.outcoming.template.airline.Airport; import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfo; import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightSchedule; 
  public class FlightInfoBuilder<T extends FlightInfoBuilderDelegator> { /**
 * Builder for a {@link FlightInfo} object.
 *
 * @author Donato Rimenti
 * @param <T>
 *            the class of the parent builder. Used for casting before returning
 *            it.
 * 
 */  private T parentBuilder; /**
	 * The parent builder of this one. Used to return to the parent once the
	 * build is finished calling {@link #endFlightInfo()}.
	 */  private FlightInfo flightInfo; /**
	 * The object managed by this builder.
	 */  FlightInfoBuilder(T parentBuilder, String flightNumber) { this.parentBuilder = parentBuilder; this.flightInfo = new FlightInfo(flightNumber); } /**
	 * Default constructor. Creates a builder for a {@link FlightInfo} object.
	 * 
	 * @param parentBuilder
	 *            the parent builder of this one. It can't be null.
	 * @param flightNumber
	 *            the flight number. It can't be empty.
	 */  public FlightInfoBuilder<T> setDepartureAirport(String airportCode,
			String city, String gate, String terminal) { Airport departureAirport = new Airport(airportCode, city, gate,
				terminal); this.flightInfo.setDepartureAirport(departureAirport); return this; } /**
	 * Sets the departure {@link Airport} for the current {@link FlightInfo}
	 * object. This field is mandatory for this object and can't be null.
	 * 
	 * @param airportCode
	 *            the airport code. It can't be empty.
	 * @param city
	 *            the city name. The city will be displayed over the airport
	 *            code in the template. It can't be empty.
	 * @param gate
	 *            the airport gate. This field is optional.
	 * @param terminal
	 *            the airport terminal. This field is optional.
	 * @return this builder.
	 */  public FlightInfoBuilder<T> setDepartureAirport(String airportCode,
			String city) { Airport departureAirport = new Airport(airportCode, city); this.flightInfo.setDepartureAirport(departureAirport); return this; } /**
	 * Sets the departure {@link Airport} for the current {@link FlightInfo}
	 * object. This field is mandatory for this object and can't be null.
	 * 
	 * @param airportCode
	 *            the airport code. It can't be empty.
	 * @param city
	 *            the city name. The city will be displayed over the airport
	 *            code in the template. It can't be empty.
	 * @return this builder.
	 */  public FlightInfoBuilder<T> setDepartureAirport(Airport airport) { this.flightInfo.setDepartureAirport(airport); return this; } /**
	 * Sets the departure {@link Airport} for the current {@link FlightInfo}
	 * object. This field is mandatory for this object and can't be null.
	 * 
	 * @param airport
	 *            the departure airport. It can't be null.
	 * @return this builder.
	 */  public FlightInfoBuilder<T> setArrivalAirport(String airportCode,
			String city, String gate, String terminal) { Airport arrivalAirport = new Airport(airportCode, city, gate, terminal); this.flightInfo.setArrivalAirport(arrivalAirport); return this; } /**
	 * Sets the arrival {@link Airport} for the current {@link FlightInfo}
	 * object. This field is mandatory for this object and can't be null.
	 * 
	 * @param airportCode
	 *            the airport code. It can't be empty.
	 * @param city
	 *            the city name. The city will be displayed over the airport
	 *            code in the template. It can't be empty.
	 * @param gate
	 *            the airport gate. This field is optional.
	 * @param terminal
	 *            the airport terminal. This field is optional.
	 * @return this builder.
	 */  public FlightInfoBuilder<T> setArrivalAirport(String airportCode,
			String city) { Airport arrivalAirport = new Airport(airportCode, city); this.flightInfo.setArrivalAirport(arrivalAirport); return this; } /**
	 * Sets the arrival {@link Airport} for the current {@link FlightInfo}
	 * object. This field is mandatory for this object and can't be null.
	 * 
	 * @param airportCode
	 *            the airport code. It can't be empty.
	 * @param city
	 *            the city name. The city will be displayed over the airport
	 *            code in the template. It can't be empty.
	 * @return this builder.
	 */  public FlightInfoBuilder<T> setArrivalAirport(Airport airport) { this.flightInfo.setArrivalAirport(airport); return this; } /**
	 * Sets the arrival {@link Airport} for the current {@link FlightInfo}
	 * object. This field is mandatory for this object and can't be null.
	 * 
	 * @param airport
	 *            the arrival airport. It can't be null.
	 * @return this builder.
	 */  public FlightInfoBuilder<T> setFlightSchedule(Calendar departureTime,
			Calendar arrivalTime) { FlightSchedule flightSchedule = new FlightSchedule(departureTime,
				arrivalTime); this.flightInfo.setFlightSchedule(flightSchedule); return this; } /**
	 * Sets the {@link FlightSchedule} object for the current {@link FlightInfo}
	 * object. This field is mandatory for this object and can't be null.
	 * 
	 * @param departureTime
	 *            the departure time. It can't be null.
	 * @param arrivalTime
	 *            the arrival time. It can't be null.
	 * @return this builder.
	 */  public FlightInfoBuilder<T> setFlightSchedule(Calendar departureTime,
			Calendar arrivalTime, Calendar boardingTime) { FlightSchedule flightSchedule = new FlightSchedule(departureTime,
				arrivalTime, boardingTime); this.flightInfo.setFlightSchedule(flightSchedule); return this; } /**
	 * Sets the {@link FlightSchedule} object for the current {@link FlightInfo}
	 * object. This field is mandatory for this object and can't be null.
	 * 
	 * @param departureTime
	 *            the departure time. It can't be null.
	 * @param arrivalTime
	 *            the arrival time. It can't be null.
	 * @param boardingTime
	 *            the boarding time. This field is optional.
	 * @return this builder.
	 */  public FlightInfoBuilder<T> setFlightSchedule(FlightSchedule flightSchedule) { this.flightInfo.setFlightSchedule(flightSchedule); return this; } /**
	 * Sets the {@link FlightSchedule} object for the current {@link FlightInfo}
	 * object. This field is mandatory for this object and can't be null.
	 * 
	 * @param flightSchedule
	 *            the flight schedule to set. It can't be null.
	 * @return this builder.
	 */  public T endFlightInfo() { parentBuilder.addFlightInfo(flightInfo); return parentBuilder; } /**
	 * Builds the current object, adds it to the parent builder and returns the
	 * parent builder.
	 * 
	 * @return the parent builder of this builder.
	 */  @Override
	public String toString() { return ""FlightInfoBuilder [parentBuilder="" + parentBuilder
				+ "", flightInfo="" + flightInfo + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/FlightInfoBuilderDelegator.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfo;


/**
 * An interface that represents a builder which uses a {@link FlightInfoBuilder}
 * object to populate its {@link FlightInfo} field.
 * 
 * @author Donato Rimenti
 * 
 */
public abstract class FlightInfoBuilderDelegator extends
		AirlineBaseTemplateBuilder {

	/**
	 * Adds a flight info object to the builder's payload.
	 * 
	 * @param flightInfo
	 *            the flight info to add.
	 */
	abstract void addFlightInfo(FlightInfo flightInfo);

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.factory.AirlineBaseTemplateBuilder
	 * #toString()
	 */
	@Override
	public String toString() {
		return ""FlightInfoBuilderDelegator [messageBuilder="" + messageBuilder
				+ ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public abstract class FlightInfoBuilderDelegator extends
		AirlineBaseTemplateBuilder { abstract void addFlightInfo(FlightInfo flightInfo); @Override
	public String toString() { return ""FlightInfoBuilderDelegator [messageBuilder="" + messageBuilder
				+ ""]""; } }",0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public abstract class FlightInfoBuilderDelegator extends
		AirlineBaseTemplateBuilder { abstract void addFlightInfo(FlightInfo flightInfo); @Override
	public String toString() { return ""FlightInfoBuilderDelegator [messageBuilder="" + messageBuilder
				+ ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfo; 
  public abstract class FlightInfoBuilderDelegator extends
		AirlineBaseTemplateBuilder { /**
 * An interface that represents a builder which uses a {@link FlightInfoBuilder}
 * object to populate its {@link FlightInfo} field.
 * 
 * @author Donato Rimenti
 * 
 */  abstract void addFlightInfo(FlightInfo flightInfo); /**
	 * Adds a flight info object to the builder's payload.
	 * 
	 * @param flightInfo
	 *            the flight info to add.
	 */  @Override
	public String toString() { return ""FlightInfoBuilderDelegator [messageBuilder="" + messageBuilder
				+ ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.factory.AirlineBaseTemplateBuilder
	 * #toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/FlightInfoExtendedBuilder.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import java.util.Calendar;

import co.aurasphere.botmill.fb.model.outcoming.template.airline.Airport;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfo;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfoExtended;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightSchedule;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.PassengerSegmentInfo;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.TravelClass;


/**
 * Builder for a {@link FlightInfoExtended} object.
 * 
 * @author Donato Rimenti
 * 
 */
public class FlightInfoExtendedBuilder {

	/**
	 * The parent builder of this one. Used to return to the parent once the
	 * build is finished calling {@link #endFlightInfo()}.
	 */
	private AirlineItineraryTemplateBuilder parentBuilder;

	/**
	 * The object managed by this builder.
	 */
	private FlightInfoExtended flightInfo;

	/**
	 * Default constructor. Creates a builder for a {@link FlightInfoExtended}
	 * object.
	 * 
	 * @param parentBuilder
	 *            the parent builder of this one. It can't be null.
	 * @param flightNumber
	 *            the flight number. It can't be empty.
	 * @param connectionId
	 *            used to group segments of a connection together. It can't be
	 *            empty.
	 * @param segmentId
	 *            segmentId of {@link PassengerSegmentInfo} object. It can't be
	 *            empty.
	 * @param travelClass
	 *            the travel class. It can't be null.
	 */
	FlightInfoExtendedBuilder(AirlineItineraryTemplateBuilder parentBuilder,
			String flightNumber, String connectionId, String segmentId,
			TravelClass travelClass) {
		this.flightInfo = new FlightInfoExtended(flightNumber, connectionId,
				segmentId, travelClass);
		this.parentBuilder = parentBuilder;
	}

	/**
	 * Sets the departure {@link Airport} for the current
	 * {@link FlightInfoExtended} object. This field is mandatory for this
	 * object and can't be null.
	 * 
	 * @param airportCode
	 *            the airport code. It can't be empty.
	 * @param city
	 *            the city name. The city will be displayed over the airport
	 *            code in the template. It can't be empty.
	 * @param gate
	 *            the airport gate. This field is optional.
	 * @param terminal
	 *            the airport terminal. This field is optional.
	 * @return this builder.
	 */
	public FlightInfoExtendedBuilder setDepartureAirport(String airportCode,
			String city, String gate, String terminal) {
		Airport departureAirport = new Airport(airportCode, city, gate,
				terminal);
		this.flightInfo.setDepartureAirport(departureAirport);
		return this;
	}

	/**
	 * Sets the departure {@link Airport} for the current
	 * {@link FlightInfoExtended} object. This field is mandatory for this
	 * object and can't be null.
	 * 
	 * @param airportCode
	 *            the airport code. It can't be empty.
	 * @param city
	 *            the city name. The city will be displayed over the airport
	 *            code in the template. It can't be empty.
	 * @return this builder.
	 */
	public FlightInfoExtendedBuilder setDepartureAirport(String airportCode,
			String city) {
		Airport departureAirport = new Airport(airportCode, city);
		this.flightInfo.setDepartureAirport(departureAirport);
		return this;
	}

	/**
	 * Sets the departure {@link Airport} for the current
	 * {@link FlightInfoExtended} object. This field is mandatory for this
	 * object and can't be null.
	 * 
	 * @param airport
	 *            the departure airport. It can't be null.
	 * @return this builder.
	 */
	public FlightInfoExtendedBuilder setDepartureAirport(Airport airport) {
		this.flightInfo.setDepartureAirport(airport);
		return this;
	}

	/**
	 * Sets the arrival {@link Airport} for the current
	 * {@link FlightInfoExtended} object. This field is mandatory for this
	 * object and can't be null.
	 * 
	 * @param airportCode
	 *            the airport code. It can't be empty.
	 * @param city
	 *            the city name. The city will be displayed over the airport
	 *            code in the template. It can't be empty.
	 * @param gate
	 *            the airport gate. This field is optional.
	 * @param terminal
	 *            the airport terminal. This field is optional.
	 * @return this builder.
	 */
	public FlightInfoExtendedBuilder setArrivalAirport(String airportCode,
			String city, String gate, String terminal) {
		Airport arrivalAirport = new Airport(airportCode, city, gate, terminal);
		this.flightInfo.setArrivalAirport(arrivalAirport);
		return this;
	}

	/**
	 * Sets the arrival {@link Airport} for the current
	 * {@link FlightInfoExtended} object. This field is mandatory for this
	 * object and can't be null.
	 * 
	 * @param airportCode
	 *            the airport code. It can't be empty.
	 * @param city
	 *            the city name. The city will be displayed over the airport
	 *            code in the template. It can't be empty.
	 * @return this builder.
	 */
	public FlightInfoExtendedBuilder setArrivalAirport(String airportCode,
			String city) {
		Airport arrivalAirport = new Airport(airportCode, city);
		this.flightInfo.setArrivalAirport(arrivalAirport);
		return this;
	}

	/**
	 * Sets the arrival {@link Airport} for the current
	 * {@link FlightInfoExtended} object. This field is mandatory for this
	 * object and can't be null.
	 * 
	 * @param airport
	 *            the arrival airport. It can't be null.
	 * @return this builder.
	 */
	public FlightInfoExtendedBuilder setArrivalAirport(Airport airport) {
		this.flightInfo.setArrivalAirport(airport);
		return this;
	}

	/**
	 * Sets the {@link FlightSchedule} object for the current
	 * {@link FlightInfoExtended} object. This field is mandatory for this
	 * object and can't be null.
	 * 
	 * @param departureTime
	 *            the departure time. It can't be null.
	 * @param arrivalTime
	 *            the arrival time. It can't be null.
	 * @return this builder.
	 */
	public FlightInfoExtendedBuilder setFlightSchedule(Calendar departureTime,
			Calendar arrivalTime) {
		FlightSchedule flightSchedule = new FlightSchedule(departureTime,
				arrivalTime);
		this.flightInfo.setFlightSchedule(flightSchedule);
		return this;
	}

	/**
	 * Sets the {@link FlightSchedule} object for the current
	 * {@link FlightInfoExtended} object. This field is mandatory for this
	 * object and can't be null.
	 * 
	 * @param departureTime
	 *            the departure time. It can't be null.
	 * @param arrivalTime
	 *            the arrival time. It can't be null.
	 * @param boardingTime
	 *            the boarding time. This field is optional.
	 * @return this builder.
	 */
	public FlightInfoExtendedBuilder setFlightSchedule(Calendar departureTime,
			Calendar arrivalTime, Calendar boardingTime) {
		FlightSchedule flightSchedule = new FlightSchedule(departureTime,
				arrivalTime, boardingTime);
		this.flightInfo.setFlightSchedule(flightSchedule);
		return this;
	}

	/**
	 * Sets the {@link FlightSchedule} object for the current
	 * {@link FlightInfoExtended} object. This field is mandatory for this
	 * object and can't be null.
	 * 
	 * @param flightSchedule
	 *            the flight schedule to set. It can't be null.
	 * @return this builder.
	 */
	public FlightInfoExtendedBuilder setFlightSchedule(
			FlightSchedule flightSchedule) {
		this.flightInfo.setFlightSchedule(flightSchedule);
		return this;
	}

	/**
	 * Sets the aircraft type for the current {@link FlightInfo} object. This
	 * field is optional.
	 * 
	 * @param aircraftType
	 *            the aircraft type.
	 * @return this builder.
	 */
	public FlightInfoExtendedBuilder setAircraftType(String aircraftType) {
		this.flightInfo.setAircraftType(aircraftType);
		return this;
	}

	/**
	 * Builds the current object, adds it to the parent builder and returns the
	 * parent builder.
	 * 
	 * @return the parent builder of this builder.
	 */
	public AirlineItineraryTemplateBuilder endFlightInfo() {
		parentBuilder.addFlightInfo(flightInfo);
		return parentBuilder;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""FlightInfoExtendedBuilder [parentBuilder="" + parentBuilder
				+ "", flightInfo="" + flightInfo + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public class FlightInfoExtendedBuilder { private AirlineItineraryTemplateBuilder parentBuilder; private FlightInfoExtended flightInfo; FlightInfoExtendedBuilder(AirlineItineraryTemplateBuilder parentBuilder,
			String flightNumber, String connectionId, String segmentId,
			TravelClass travelClass) { this.flightInfo = new FlightInfoExtended(flightNumber, connectionId,
				segmentId, travelClass); this.parentBuilder = parentBuilder; } public FlightInfoExtendedBuilder setDepartureAirport(String airportCode,
			String city, String gate, String terminal) { Airport departureAirport = new Airport(airportCode, city, gate,
				terminal); this.flightInfo.setDepartureAirport(departureAirport); return this; } public FlightInfoExtendedBuilder setDepartureAirport(String airportCode,
			String city) { Airport departureAirport = new Airport(airportCode, city); this.flightInfo.setDepartureAirport(departureAirport); return this; } public FlightInfoExtendedBuilder setDepartureAirport(Airport airport) { this.flightInfo.setDepartureAirport(airport); return this; } public FlightInfoExtendedBuilder setArrivalAirport(String airportCode,
			String city, String gate, String terminal) { Airport arrivalAirport = new Airport(airportCode, city, gate, terminal); this.flightInfo.setArrivalAirport(arrivalAirport); return this; } public FlightInfoExtendedBuilder setArrivalAirport(String airportCode,
			String city) { Airport arrivalAirport = new Airport(airportCode, city); this.flightInfo.setArrivalAirport(arrivalAirport); return this; } public FlightInfoExtendedBuilder setArrivalAirport(Airport airport) { this.flightInfo.setArrivalAirport(airport); return this; } public FlightInfoExtendedBuilder setFlightSchedule(Calendar departureTime,
			Calendar arrivalTime) { FlightSchedule flightSchedule = new FlightSchedule(departureTime,
				arrivalTime); this.flightInfo.setFlightSchedule(flightSchedule); return this; } public FlightInfoExtendedBuilder setFlightSchedule(Calendar departureTime,
			Calendar arrivalTime, Calendar boardingTime) { FlightSchedule flightSchedule = new FlightSchedule(departureTime,
				arrivalTime, boardingTime); this.flightInfo.setFlightSchedule(flightSchedule); return this; } public FlightInfoExtendedBuilder setFlightSchedule(
			FlightSchedule flightSchedule) { this.flightInfo.setFlightSchedule(flightSchedule); return this; } public FlightInfoExtendedBuilder setAircraftType(String aircraftType) { this.flightInfo.setAircraftType(aircraftType); return this; } public AirlineItineraryTemplateBuilder endFlightInfo() { parentBuilder.addFlightInfo(flightInfo); return parentBuilder; } @Override
	public String toString() { return ""FlightInfoExtendedBuilder [parentBuilder="" + parentBuilder
				+ "", flightInfo="" + flightInfo + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public class FlightInfoExtendedBuilder { private AirlineItineraryTemplateBuilder parentBuilder; private FlightInfoExtended flightInfo; FlightInfoExtendedBuilder(AirlineItineraryTemplateBuilder parentBuilder,
			String flightNumber, String connectionId, String segmentId,
			TravelClass travelClass) { this.flightInfo = new FlightInfoExtended(flightNumber, connectionId,
				segmentId, travelClass); this.parentBuilder = parentBuilder; } public FlightInfoExtendedBuilder setDepartureAirport(String airportCode,
			String city, String gate, String terminal) { Airport departureAirport = new Airport(airportCode, city, gate,
				terminal); this.flightInfo.setDepartureAirport(departureAirport); return this; } public FlightInfoExtendedBuilder setDepartureAirport(String airportCode,
			String city) { Airport departureAirport = new Airport(airportCode, city); this.flightInfo.setDepartureAirport(departureAirport); return this; } public FlightInfoExtendedBuilder setDepartureAirport(Airport airport) { this.flightInfo.setDepartureAirport(airport); return this; } public FlightInfoExtendedBuilder setArrivalAirport(String airportCode,
			String city, String gate, String terminal) { Airport arrivalAirport = new Airport(airportCode, city, gate, terminal); this.flightInfo.setArrivalAirport(arrivalAirport); return this; } public FlightInfoExtendedBuilder setArrivalAirport(String airportCode,
			String city) { Airport arrivalAirport = new Airport(airportCode, city); this.flightInfo.setArrivalAirport(arrivalAirport); return this; } public FlightInfoExtendedBuilder setArrivalAirport(Airport airport) { this.flightInfo.setArrivalAirport(airport); return this; } public FlightInfoExtendedBuilder setFlightSchedule(Calendar departureTime,
			Calendar arrivalTime) { FlightSchedule flightSchedule = new FlightSchedule(departureTime,
				arrivalTime); this.flightInfo.setFlightSchedule(flightSchedule); return this; } public FlightInfoExtendedBuilder setFlightSchedule(Calendar departureTime,
			Calendar arrivalTime, Calendar boardingTime) { FlightSchedule flightSchedule = new FlightSchedule(departureTime,
				arrivalTime, boardingTime); this.flightInfo.setFlightSchedule(flightSchedule); return this; } public FlightInfoExtendedBuilder setFlightSchedule(
			FlightSchedule flightSchedule) { this.flightInfo.setFlightSchedule(flightSchedule); return this; } public FlightInfoExtendedBuilder setAircraftType(String aircraftType) { this.flightInfo.setAircraftType(aircraftType); return this; } public AirlineItineraryTemplateBuilder endFlightInfo() { parentBuilder.addFlightInfo(flightInfo); return parentBuilder; } @Override
	public String toString() { return ""FlightInfoExtendedBuilder [parentBuilder="" + parentBuilder
				+ "", flightInfo="" + flightInfo + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import java.util.Calendar; 
import co.aurasphere.botmill.fb.model.outcoming.template.airline.Airport; import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfo; import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfoExtended; import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightSchedule; import co.aurasphere.botmill.fb.model.outcoming.template.airline.PassengerSegmentInfo; import co.aurasphere.botmill.fb.model.outcoming.template.airline.TravelClass; 
  public class FlightInfoExtendedBuilder { /**
 * Builder for a {@link FlightInfoExtended} object.
 * 
 * @author Donato Rimenti
 * 
 */  private AirlineItineraryTemplateBuilder parentBuilder; /**
	 * The parent builder of this one. Used to return to the parent once the
	 * build is finished calling {@link #endFlightInfo()}.
	 */  private FlightInfoExtended flightInfo; /**
	 * The object managed by this builder.
	 */  FlightInfoExtendedBuilder(AirlineItineraryTemplateBuilder parentBuilder,
			String flightNumber, String connectionId, String segmentId,
			TravelClass travelClass) { this.flightInfo = new FlightInfoExtended(flightNumber, connectionId,
				segmentId, travelClass); this.parentBuilder = parentBuilder; } /**
	 * Default constructor. Creates a builder for a {@link FlightInfoExtended}
	 * object.
	 * 
	 * @param parentBuilder
	 *            the parent builder of this one. It can't be null.
	 * @param flightNumber
	 *            the flight number. It can't be empty.
	 * @param connectionId
	 *            used to group segments of a connection together. It can't be
	 *            empty.
	 * @param segmentId
	 *            segmentId of {@link PassengerSegmentInfo} object. It can't be
	 *            empty.
	 * @param travelClass
	 *            the travel class. It can't be null.
	 */  public FlightInfoExtendedBuilder setDepartureAirport(String airportCode,
			String city, String gate, String terminal) { Airport departureAirport = new Airport(airportCode, city, gate,
				terminal); this.flightInfo.setDepartureAirport(departureAirport); return this; } /**
	 * Sets the departure {@link Airport} for the current
	 * {@link FlightInfoExtended} object. This field is mandatory for this
	 * object and can't be null.
	 * 
	 * @param airportCode
	 *            the airport code. It can't be empty.
	 * @param city
	 *            the city name. The city will be displayed over the airport
	 *            code in the template. It can't be empty.
	 * @param gate
	 *            the airport gate. This field is optional.
	 * @param terminal
	 *            the airport terminal. This field is optional.
	 * @return this builder.
	 */  public FlightInfoExtendedBuilder setDepartureAirport(String airportCode,
			String city) { Airport departureAirport = new Airport(airportCode, city); this.flightInfo.setDepartureAirport(departureAirport); return this; } /**
	 * Sets the departure {@link Airport} for the current
	 * {@link FlightInfoExtended} object. This field is mandatory for this
	 * object and can't be null.
	 * 
	 * @param airportCode
	 *            the airport code. It can't be empty.
	 * @param city
	 *            the city name. The city will be displayed over the airport
	 *            code in the template. It can't be empty.
	 * @return this builder.
	 */  public FlightInfoExtendedBuilder setDepartureAirport(Airport airport) { this.flightInfo.setDepartureAirport(airport); return this; } /**
	 * Sets the departure {@link Airport} for the current
	 * {@link FlightInfoExtended} object. This field is mandatory for this
	 * object and can't be null.
	 * 
	 * @param airport
	 *            the departure airport. It can't be null.
	 * @return this builder.
	 */  public FlightInfoExtendedBuilder setArrivalAirport(String airportCode,
			String city, String gate, String terminal) { Airport arrivalAirport = new Airport(airportCode, city, gate, terminal); this.flightInfo.setArrivalAirport(arrivalAirport); return this; } /**
	 * Sets the arrival {@link Airport} for the current
	 * {@link FlightInfoExtended} object. This field is mandatory for this
	 * object and can't be null.
	 * 
	 * @param airportCode
	 *            the airport code. It can't be empty.
	 * @param city
	 *            the city name. The city will be displayed over the airport
	 *            code in the template. It can't be empty.
	 * @param gate
	 *            the airport gate. This field is optional.
	 * @param terminal
	 *            the airport terminal. This field is optional.
	 * @return this builder.
	 */  public FlightInfoExtendedBuilder setArrivalAirport(String airportCode,
			String city) { Airport arrivalAirport = new Airport(airportCode, city); this.flightInfo.setArrivalAirport(arrivalAirport); return this; } /**
	 * Sets the arrival {@link Airport} for the current
	 * {@link FlightInfoExtended} object. This field is mandatory for this
	 * object and can't be null.
	 * 
	 * @param airportCode
	 *            the airport code. It can't be empty.
	 * @param city
	 *            the city name. The city will be displayed over the airport
	 *            code in the template. It can't be empty.
	 * @return this builder.
	 */  public FlightInfoExtendedBuilder setArrivalAirport(Airport airport) { this.flightInfo.setArrivalAirport(airport); return this; } /**
	 * Sets the arrival {@link Airport} for the current
	 * {@link FlightInfoExtended} object. This field is mandatory for this
	 * object and can't be null.
	 * 
	 * @param airport
	 *            the arrival airport. It can't be null.
	 * @return this builder.
	 */  public FlightInfoExtendedBuilder setFlightSchedule(Calendar departureTime,
			Calendar arrivalTime) { FlightSchedule flightSchedule = new FlightSchedule(departureTime,
				arrivalTime); this.flightInfo.setFlightSchedule(flightSchedule); return this; } /**
	 * Sets the {@link FlightSchedule} object for the current
	 * {@link FlightInfoExtended} object. This field is mandatory for this
	 * object and can't be null.
	 * 
	 * @param departureTime
	 *            the departure time. It can't be null.
	 * @param arrivalTime
	 *            the arrival time. It can't be null.
	 * @return this builder.
	 */  public FlightInfoExtendedBuilder setFlightSchedule(Calendar departureTime,
			Calendar arrivalTime, Calendar boardingTime) { FlightSchedule flightSchedule = new FlightSchedule(departureTime,
				arrivalTime, boardingTime); this.flightInfo.setFlightSchedule(flightSchedule); return this; } /**
	 * Sets the {@link FlightSchedule} object for the current
	 * {@link FlightInfoExtended} object. This field is mandatory for this
	 * object and can't be null.
	 * 
	 * @param departureTime
	 *            the departure time. It can't be null.
	 * @param arrivalTime
	 *            the arrival time. It can't be null.
	 * @param boardingTime
	 *            the boarding time. This field is optional.
	 * @return this builder.
	 */  public FlightInfoExtendedBuilder setFlightSchedule(
			FlightSchedule flightSchedule) { this.flightInfo.setFlightSchedule(flightSchedule); return this; } /**
	 * Sets the {@link FlightSchedule} object for the current
	 * {@link FlightInfoExtended} object. This field is mandatory for this
	 * object and can't be null.
	 * 
	 * @param flightSchedule
	 *            the flight schedule to set. It can't be null.
	 * @return this builder.
	 */  public FlightInfoExtendedBuilder setAircraftType(String aircraftType) { this.flightInfo.setAircraftType(aircraftType); return this; } /**
	 * Sets the aircraft type for the current {@link FlightInfo} object. This
	 * field is optional.
	 * 
	 * @param aircraftType
	 *            the aircraft type.
	 * @return this builder.
	 */  public AirlineItineraryTemplateBuilder endFlightInfo() { parentBuilder.addFlightInfo(flightInfo); return parentBuilder; } /**
	 * Builds the current object, adds it to the parent builder and returns the
	 * parent builder.
	 * 
	 * @return the parent builder of this builder.
	 */  @Override
	public String toString() { return ""FlightInfoExtendedBuilder [parentBuilder="" + parentBuilder
				+ "", flightInfo="" + flightInfo + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/GenericTemplateBuilder.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import co.aurasphere.botmill.fb.model.base.AttachmentType;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;
import co.aurasphere.botmill.fb.model.outcoming.payload.template.GenericTemplatePayload;
import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply;
import co.aurasphere.botmill.fb.model.outcoming.template.generic.GenericTemplateElement;


/**
 * A builder for a Generic Template.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/generic-template""
 *      > Facebook's Messenger Platform Generic Template Documentation</a>
 */
public class GenericTemplateBuilder extends TemplateBaseBuilder {

	/**
	 * The payload of the current builder.
	 */
	private GenericTemplatePayload payload;

	/**
	 * Default constructor. Creates a builder for a Generic Template.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/generic-template""
	 *      > Facebook's Messenger Platform Generic Template Documentation</a>
	 * 
	 */
	GenericTemplateBuilder() {
		this.payload = new GenericTemplatePayload();
		this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload);
	}

	/**
	 * Adds a {@link GenericTemplateElement} to this template.
	 * 
	 * @param title
	 *            the title of the element to add.
	 * @return a builder for the element.
	 */
	public GenericTemplateElementBuilder addElement(String title) {
		return new GenericTemplateElementBuilder(title, this);
	}

	/**
	 * Adds a {@link GenericTemplateElement} to this template.
	 * 
	 * @param element
	 *            the element to add.
	 * @return this builder.
	 */
	public GenericTemplateBuilder addElement(GenericTemplateElement element) {
		this.payload.addElement(element);
		return this;
	}

	/**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param title
	 *            the quick reply button label. It can't be empty.
	 * @param payload
	 *            the payload sent back when the button is pressed. It can't be
	 *            empty.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */
	public GenericTemplateBuilder addQuickReply(String title, String payload) {
		this.messageBuilder.addQuickReply(title, payload);
		return this;
	}

	/**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param reply
	 *            a quick reply object.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */
	public GenericTemplateBuilder addQuickReply(QuickReply reply) {
		this.messageBuilder.addQuickReply(reply);
		return this;
	}

	/**
	 * {@inheritDoc} Creates a response containing a Generic Template.
	 */
	public FbBotMillResponse build(MessageEnvelope envelope) {
		return this.messageBuilder.build(envelope);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.factory.TemplateBaseBuilder#
	 * toString()
	 */
	@Override
	public String toString() {
		return ""GenericTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public class GenericTemplateBuilder extends TemplateBaseBuilder { private GenericTemplatePayload payload; GenericTemplateBuilder() { this.payload = new GenericTemplatePayload(); this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload); } public GenericTemplateElementBuilder addElement(String title) { return new GenericTemplateElementBuilder(title, this); } public GenericTemplateBuilder addElement(GenericTemplateElement element) { this.payload.addElement(element); return this; } public GenericTemplateBuilder addQuickReply(String title, String payload) { this.messageBuilder.addQuickReply(title, payload); return this; } public GenericTemplateBuilder addQuickReply(QuickReply reply) { this.messageBuilder.addQuickReply(reply); return this; } public FbBotMillResponse build(MessageEnvelope envelope) { return this.messageBuilder.build(envelope); } @Override
	public String toString() { return ""GenericTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public class GenericTemplateBuilder extends TemplateBaseBuilder { private GenericTemplatePayload payload; GenericTemplateBuilder() { this.payload = new GenericTemplatePayload(); this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload); } public GenericTemplateElementBuilder addElement(String title) { return new GenericTemplateElementBuilder(title, this); } public GenericTemplateBuilder addElement(GenericTemplateElement element) { this.payload.addElement(element); return this; } public GenericTemplateBuilder addQuickReply(String title, String payload) { this.messageBuilder.addQuickReply(title, payload); return this; } public GenericTemplateBuilder addQuickReply(QuickReply reply) { this.messageBuilder.addQuickReply(reply); return this; } public FbBotMillResponse build(MessageEnvelope envelope) { return this.messageBuilder.build(envelope); } @Override
	public String toString() { return ""GenericTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import co.aurasphere.botmill.fb.model.base.AttachmentType; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; import co.aurasphere.botmill.fb.model.outcoming.payload.template.GenericTemplatePayload; import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply; import co.aurasphere.botmill.fb.model.outcoming.template.generic.GenericTemplateElement; 
  public class GenericTemplateBuilder extends TemplateBaseBuilder { /**
 * A builder for a Generic Template.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/generic-template""
 *      > Facebook's Messenger Platform Generic Template Documentation</a>
 */  private GenericTemplatePayload payload; /**
	 * The payload of the current builder.
	 */  GenericTemplateBuilder() { this.payload = new GenericTemplatePayload(); this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload); } /**
	 * Default constructor. Creates a builder for a Generic Template.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/generic-template""
	 *      > Facebook's Messenger Platform Generic Template Documentation</a>
	 * 
	 */  public GenericTemplateElementBuilder addElement(String title) { return new GenericTemplateElementBuilder(title, this); } /**
	 * Adds a {@link GenericTemplateElement} to this template.
	 * 
	 * @param title
	 *            the title of the element to add.
	 * @return a builder for the element.
	 */  public GenericTemplateBuilder addElement(GenericTemplateElement element) { this.payload.addElement(element); return this; } /**
	 * Adds a {@link GenericTemplateElement} to this template.
	 * 
	 * @param element
	 *            the element to add.
	 * @return this builder.
	 */  public GenericTemplateBuilder addQuickReply(String title, String payload) { this.messageBuilder.addQuickReply(title, payload); return this; } /**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param title
	 *            the quick reply button label. It can't be empty.
	 * @param payload
	 *            the payload sent back when the button is pressed. It can't be
	 *            empty.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */  public GenericTemplateBuilder addQuickReply(QuickReply reply) { this.messageBuilder.addQuickReply(reply); return this; } /**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param reply
	 *            a quick reply object.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */  public FbBotMillResponse build(MessageEnvelope envelope) { return this.messageBuilder.build(envelope); } /**
	 * {@inheritDoc} Creates a response containing a Generic Template.
	 */  @Override
	public String toString() { return ""GenericTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.factory.TemplateBaseBuilder#
	 * toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/GenericTemplateElementBuilder.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import co.aurasphere.botmill.fb.model.outcoming.template.button.Button;
import co.aurasphere.botmill.fb.model.outcoming.template.button.PaymentSummary;
import co.aurasphere.botmill.fb.model.outcoming.template.button.WebViewHeightRatioType;
import co.aurasphere.botmill.fb.model.outcoming.template.generic.GenericTemplateElement;

/**
 * Builder for a {@link GenericTemplateElement}.
 * 
 * @author Donato Rimenti
 * 
 */
public class GenericTemplateElementBuilder {

	/**
	 * The parent builder of this builder.
	 */
	private GenericTemplateBuilder parentBuilder;

	/**
	 * The element managed by this builder.
	 */
	private GenericTemplateElement element;

	/**
	 * Default constructor. Creates a builder for a
	 * {@link GenericTemplateElement}.
	 * 
	 * @param title
	 *            the title of the element.
	 * @param parentBuilder
	 *            the parent builder of this builder.
	 */
	GenericTemplateElementBuilder(String title,
			GenericTemplateBuilder parentBuilder) {
		this.parentBuilder = parentBuilder;
		this.element = new GenericTemplateElement(title);
	}

	/**
	 * Sets a subtitle for the current {@link GenericTemplateElement}.
	 * 
	 * @param subtitle
	 *            the subtitle to set.
	 * @return this builder.
	 */
	public GenericTemplateElementBuilder setSubtitle(String subtitle) {
		element.setSubtitle(subtitle);
		return this;
	}

	/**
	 * Sets an image for the current {@link GenericTemplateElement}.
	 *
	 * @param imageUrl
	 *            the image url
	 * @return this builder.
	 */
	public GenericTemplateElementBuilder setImage(String imageUrl) {
		element.setImageUrl(imageUrl);
		return this;
	}

	/**
	 * Sets an URL for the current {@link GenericTemplateElement}. The URL will
	 * be used to redirect the user when the element is clicked.
	 *
	 * @param itemUrl
	 *            the item url
	 * @return this builder.
	 */
	public GenericTemplateElementBuilder setRedirectUrl(String itemUrl) {
		element.setItemUrl(itemUrl);
		return this;
	}

	/**
	 * Adds a button which redirects to an URL when clicked to the current
	 * {@link GenericTemplateElement}. There can be at most 3 buttons per
	 * element.
	 * 
	 * @param title
	 *            the button label.
	 * @param url
	 *            the URL to whom redirect when clicked.
	 * @return this builder.
	 */
	public GenericTemplateElementBuilder addUrlButton(String title, String url) {
		Button button = ButtonFactory.createUrlButton(title, url);
		this.element.addButton(button);
		return this;
	}

	/**
	 * Adds a button which redirects to an URL when clicked to the current
	 * {@link GenericTemplateElement}. There can be at most 3 buttons per
	 * element.
	 * 
	 * @param title
	 *            the button label.
	 * @param url
	 *            the URL to whom redirect when clicked.
	 * @param ratioType
	 *            the ratioType.
	 * @return this builder.
	 */
	public GenericTemplateElementBuilder addUrlButton(String title, String url,
			WebViewHeightRatioType ratioType) {
		Button button = ButtonFactory.createUrlButton(title, url, ratioType);
		this.element.addButton(button);
		return this;
	}

	/**
	 * Adds a button with a phone number to the current
	 * {@link GenericTemplateElement}. There can be at most 3 buttons per
	 * element.
	 * 
	 * @param title
	 *            the button label.
	 * @param phoneNumber
	 *            a phone number. Must be in the format '+' prefix followed by
	 *            the country code, area code and local number.
	 * @return this builder.
	 */
	public GenericTemplateElementBuilder addPhoneNumberButton(String title,
			String phoneNumber) {
		Button button = ButtonFactory.createPhoneNumberButton(title,
				phoneNumber);
		this.element.addButton(button);
		return this;
	}

	/**
	 * Adds a button which sends a payload back when clicked to the current
	 * {@link GenericTemplateElement}. There can be at most 3 buttons per
	 * element.
	 * 
	 * @param title
	 *            the button label.
	 * @param payload
	 *            the payload to send back when clicked.
	 * @return this builder.
	 */
	public GenericTemplateElementBuilder addPostbackButton(String title,
			String payload) {
		Button button = ButtonFactory.createPostbackButton(title, payload);
		this.element.addButton(button);
		return this;
	}

	/**
	 * Adds a button to the current {@link GenericTemplateElement}. There can be
	 * at most 3 buttons per element.
	 * 
	 * @param button
	 *            the button to add.
	 * @return this builder.
	 */
	public GenericTemplateElementBuilder addButton(Button button) {
		this.element.addButton(button);
		return this;
	}

	/**
	 * Adds a share button on a generic template.
	 *
	 * @return this builder.
	 */
	public GenericTemplateElementBuilder addShareButton() {
		Button button = ButtonFactory.createShareButton();
		this.element.addButton(button);
		return this;
	}

	/**
	 * Adds a login button on a generic template.
	 *
	 * @param url
	 *            the url
	 * @return this builder.
	 */
	public GenericTemplateElementBuilder addLoginButton(String url) {
		Button button = ButtonFactory.createLoginButton(url);
		this.element.addButton(button);
		return this;
	}

	/**
	 * Adds a logout button on a generic template.
	 *
	 * @return this builder.
	 */
	public GenericTemplateElementBuilder addLogoutButton() {
		Button button = ButtonFactory.createLogoutButton();
		this.element.addButton(button);
		return this;
	}

	/**
	 * Adds a buy button on a generic template.
	 * 
	 * @param payload
	 *            the payload
	 * @param paymentSummary
	 *            the payment summary
	 * @return this builder.
	 */
	public GenericTemplateElementBuilder addBuyButton(String payload,
			PaymentSummary paymentSummary) {
		Button button = ButtonFactory.createBuyButton(payload, paymentSummary);
		this.element.addButton(button);
		return this;
	}

	/**
	 * Builds the current object, adds it to the parent builder and returns the
	 * parent builder.
	 * 
	 * @return the parent builder of this builder.
	 */
	public GenericTemplateBuilder endElement() {
		parentBuilder.addElement(element);
		return parentBuilder;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""GenericTemplateElementBuilder [parentBuilder="" + parentBuilder
				+ "", element="" + element + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public class GenericTemplateElementBuilder { private GenericTemplateBuilder parentBuilder; private GenericTemplateElement element; GenericTemplateElementBuilder(String title,
			GenericTemplateBuilder parentBuilder) { this.parentBuilder = parentBuilder; this.element = new GenericTemplateElement(title); } public GenericTemplateElementBuilder setSubtitle(String subtitle) { element.setSubtitle(subtitle); return this; } public GenericTemplateElementBuilder setImage(String imageUrl) { element.setImageUrl(imageUrl); return this; } public GenericTemplateElementBuilder setRedirectUrl(String itemUrl) { element.setItemUrl(itemUrl); return this; } public GenericTemplateElementBuilder addUrlButton(String title, String url) { Button button = ButtonFactory.createUrlButton(title, url); this.element.addButton(button); return this; } public GenericTemplateElementBuilder addUrlButton(String title, String url,
			WebViewHeightRatioType ratioType) { Button button = ButtonFactory.createUrlButton(title, url, ratioType); this.element.addButton(button); return this; } public GenericTemplateElementBuilder addPhoneNumberButton(String title,
			String phoneNumber) { Button button = ButtonFactory.createPhoneNumberButton(title,
				phoneNumber); this.element.addButton(button); return this; } public GenericTemplateElementBuilder addPostbackButton(String title,
			String payload) { Button button = ButtonFactory.createPostbackButton(title, payload); this.element.addButton(button); return this; } public GenericTemplateElementBuilder addButton(Button button) { this.element.addButton(button); return this; } public GenericTemplateElementBuilder addShareButton() { Button button = ButtonFactory.createShareButton(); this.element.addButton(button); return this; } public GenericTemplateElementBuilder addLoginButton(String url) { Button button = ButtonFactory.createLoginButton(url); this.element.addButton(button); return this; } public GenericTemplateElementBuilder addLogoutButton() { Button button = ButtonFactory.createLogoutButton(); this.element.addButton(button); return this; } public GenericTemplateElementBuilder addBuyButton(String payload,
			PaymentSummary paymentSummary) { Button button = ButtonFactory.createBuyButton(payload, paymentSummary); this.element.addButton(button); return this; } public GenericTemplateBuilder endElement() { parentBuilder.addElement(element); return parentBuilder; } @Override
	public String toString() { return ""GenericTemplateElementBuilder [parentBuilder="" + parentBuilder
				+ "", element="" + element + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public class GenericTemplateElementBuilder { private GenericTemplateBuilder parentBuilder; private GenericTemplateElement element; GenericTemplateElementBuilder(String title,
			GenericTemplateBuilder parentBuilder) { this.parentBuilder = parentBuilder; this.element = new GenericTemplateElement(title); } public GenericTemplateElementBuilder setSubtitle(String subtitle) { element.setSubtitle(subtitle); return this; } public GenericTemplateElementBuilder setImage(String imageUrl) { element.setImageUrl(imageUrl); return this; } public GenericTemplateElementBuilder setRedirectUrl(String itemUrl) { element.setItemUrl(itemUrl); return this; } public GenericTemplateElementBuilder addUrlButton(String title, String url) { Button button = ButtonFactory.createUrlButton(title, url); this.element.addButton(button); return this; } public GenericTemplateElementBuilder addUrlButton(String title, String url,
			WebViewHeightRatioType ratioType) { Button button = ButtonFactory.createUrlButton(title, url, ratioType); this.element.addButton(button); return this; } public GenericTemplateElementBuilder addPhoneNumberButton(String title,
			String phoneNumber) { Button button = ButtonFactory.createPhoneNumberButton(title,
				phoneNumber); this.element.addButton(button); return this; } public GenericTemplateElementBuilder addPostbackButton(String title,
			String payload) { Button button = ButtonFactory.createPostbackButton(title, payload); this.element.addButton(button); return this; } public GenericTemplateElementBuilder addButton(Button button) { this.element.addButton(button); return this; } public GenericTemplateElementBuilder addShareButton() { Button button = ButtonFactory.createShareButton(); this.element.addButton(button); return this; } public GenericTemplateElementBuilder addLoginButton(String url) { Button button = ButtonFactory.createLoginButton(url); this.element.addButton(button); return this; } public GenericTemplateElementBuilder addLogoutButton() { Button button = ButtonFactory.createLogoutButton(); this.element.addButton(button); return this; } public GenericTemplateElementBuilder addBuyButton(String payload,
			PaymentSummary paymentSummary) { Button button = ButtonFactory.createBuyButton(payload, paymentSummary); this.element.addButton(button); return this; } public GenericTemplateBuilder endElement() { parentBuilder.addElement(element); return parentBuilder; } @Override
	public String toString() { return ""GenericTemplateElementBuilder [parentBuilder="" + parentBuilder
				+ "", element="" + element + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import co.aurasphere.botmill.fb.model.outcoming.template.button.Button; import co.aurasphere.botmill.fb.model.outcoming.template.button.PaymentSummary; import co.aurasphere.botmill.fb.model.outcoming.template.button.WebViewHeightRatioType; import co.aurasphere.botmill.fb.model.outcoming.template.generic.GenericTemplateElement;  /**
 * Builder for a {@link GenericTemplateElement}.
 * 
 * @author Donato Rimenti
 * 
 */ public class GenericTemplateElementBuilder {  /**
	 * The parent builder of this builder.
	 */ private GenericTemplateBuilder parentBuilder;  /**
	 * The element managed by this builder.
	 */ private GenericTemplateElement element;  /**
	 * Default constructor. Creates a builder for a
	 * {@link GenericTemplateElement}.
	 * 
	 * @param title
	 *            the title of the element.
	 * @param parentBuilder
	 *            the parent builder of this builder.
	 */ GenericTemplateElementBuilder(String title,
			GenericTemplateBuilder parentBuilder) { this.parentBuilder = parentBuilder; this.element = new GenericTemplateElement(title); }  /**
	 * Sets a subtitle for the current {@link GenericTemplateElement}.
	 * 
	 * @param subtitle
	 *            the subtitle to set.
	 * @return this builder.
	 */ public GenericTemplateElementBuilder setSubtitle(String subtitle) { element.setSubtitle(subtitle); return this; }  /**
	 * Sets an image for the current {@link GenericTemplateElement}.
	 *
	 * @param imageUrl
	 *            the image url
	 * @return this builder.
	 */ public GenericTemplateElementBuilder setImage(String imageUrl) { element.setImageUrl(imageUrl); return this; }  /**
	 * Sets an URL for the current {@link GenericTemplateElement}. The URL will
	 * be used to redirect the user when the element is clicked.
	 *
	 * @param itemUrl
	 *            the item url
	 * @return this builder.
	 */ public GenericTemplateElementBuilder setRedirectUrl(String itemUrl) { element.setItemUrl(itemUrl); return this; }  /**
	 * Adds a button which redirects to an URL when clicked to the current
	 * {@link GenericTemplateElement}. There can be at most 3 buttons per
	 * element.
	 * 
	 * @param title
	 *            the button label.
	 * @param url
	 *            the URL to whom redirect when clicked.
	 * @return this builder.
	 */ public GenericTemplateElementBuilder addUrlButton(String title, String url) { Button button = ButtonFactory.createUrlButton(title, url); this.element.addButton(button); return this; }  /**
	 * Adds a button which redirects to an URL when clicked to the current
	 * {@link GenericTemplateElement}. There can be at most 3 buttons per
	 * element.
	 * 
	 * @param title
	 *            the button label.
	 * @param url
	 *            the URL to whom redirect when clicked.
	 * @param ratioType
	 *            the ratioType.
	 * @return this builder.
	 */ public GenericTemplateElementBuilder addUrlButton(String title, String url,
			WebViewHeightRatioType ratioType) { Button button = ButtonFactory.createUrlButton(title, url, ratioType); this.element.addButton(button); return this; }  /**
	 * Adds a button with a phone number to the current
	 * {@link GenericTemplateElement}. There can be at most 3 buttons per
	 * element.
	 * 
	 * @param title
	 *            the button label.
	 * @param phoneNumber
	 *            a phone number. Must be in the format '+' prefix followed by
	 *            the country code, area code and local number.
	 * @return this builder.
	 */ public GenericTemplateElementBuilder addPhoneNumberButton(String title,
			String phoneNumber) { Button button = ButtonFactory.createPhoneNumberButton(title,
				phoneNumber); this.element.addButton(button); return this; }  /**
	 * Adds a button which sends a payload back when clicked to the current
	 * {@link GenericTemplateElement}. There can be at most 3 buttons per
	 * element.
	 * 
	 * @param title
	 *            the button label.
	 * @param payload
	 *            the payload to send back when clicked.
	 * @return this builder.
	 */ public GenericTemplateElementBuilder addPostbackButton(String title,
			String payload) { Button button = ButtonFactory.createPostbackButton(title, payload); this.element.addButton(button); return this; }  /**
	 * Adds a button to the current {@link GenericTemplateElement}. There can be
	 * at most 3 buttons per element.
	 * 
	 * @param button
	 *            the button to add.
	 * @return this builder.
	 */ public GenericTemplateElementBuilder addButton(Button button) { this.element.addButton(button); return this; }  /**
	 * Adds a share button on a generic template.
	 *
	 * @return this builder.
	 */ public GenericTemplateElementBuilder addShareButton() { Button button = ButtonFactory.createShareButton(); this.element.addButton(button); return this; }  /**
	 * Adds a login button on a generic template.
	 *
	 * @param url
	 *            the url
	 * @return this builder.
	 */ public GenericTemplateElementBuilder addLoginButton(String url) { Button button = ButtonFactory.createLoginButton(url); this.element.addButton(button); return this; }  /**
	 * Adds a logout button on a generic template.
	 *
	 * @return this builder.
	 */ public GenericTemplateElementBuilder addLogoutButton() { Button button = ButtonFactory.createLogoutButton(); this.element.addButton(button); return this; }  /**
	 * Adds a buy button on a generic template.
	 * 
	 * @param payload
	 *            the payload
	 * @param paymentSummary
	 *            the payment summary
	 * @return this builder.
	 */ public GenericTemplateElementBuilder addBuyButton(String payload,
			PaymentSummary paymentSummary) { Button button = ButtonFactory.createBuyButton(payload, paymentSummary); this.element.addButton(button); return this; }  /**
	 * Builds the current object, adds it to the parent builder and returns the
	 * parent builder.
	 * 
	 * @return the parent builder of this builder.
	 */ public GenericTemplateBuilder endElement() { parentBuilder.addElement(element); return parentBuilder; }  /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ @Override
	public String toString() { return ""GenericTemplateElementBuilder [parentBuilder="" + parentBuilder
				+ "", element="" + element + ""]""; }  }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/ListTemplateBuilder.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import co.aurasphere.botmill.fb.model.base.AttachmentType;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;
import co.aurasphere.botmill.fb.model.outcoming.payload.template.ListTemplatePayload;
import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply;
import co.aurasphere.botmill.fb.model.outcoming.template.button.Button;
import co.aurasphere.botmill.fb.model.outcoming.template.list.ListTemplateElement;
import co.aurasphere.botmill.fb.model.outcoming.template.list.TopElementStyle;


/**
 * A builder for a List Template.
 *
 * @author Alvin Reyes
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/list-template""
 *      > Facebook's Messenger Platform List Template Documentation</a>
 * 
 */
public class ListTemplateBuilder extends TemplateBaseBuilder {

	/**
	 * The payload of the current builder.
	 */
	private ListTemplatePayload payload;

	/**
	 * Default constructor. Creates a builder for a List Template.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/list-template""
	 *      > Facebook's Messenger Platform List Template Documentation</a>
	 * 
	 */
	ListTemplateBuilder() {
		this.payload = new ListTemplatePayload();
		this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload);
	}

	/**
	 * Sets/Adds a {@link TopElementStyle} to the list template payload.
	 * 
	 * @param topElementStyle
	 *            the top element style
	 * @return this builder
	 */
	public ListTemplateBuilder setTopElementStyle(
			TopElementStyle topElementStyle) {
		this.payload.setTopElementStyle(topElementStyle);
		return this;
	}

	/**
	 * Adds a {@link ListTemplateElement} to this template.
	 * 
	 * @param title
	 *            the title of the element to add.
	 * @return a builder for the element.
	 */
	public ListTemplateElementBuilder addElement(String title) {
		return new ListTemplateElementBuilder(title, this);
	}

	/**
	 * Adds a {@link ListTemplateElement} to this template.
	 * 
	 * @param element
	 *            the element to add.
	 * @return this builder.
	 */
	public ListTemplateBuilder addElement(ListTemplateElement element) {
		this.payload.addElement(element);
		return this;
	}

	/**
	 * Add a {@link Button} to this template.
	 *
	 * @param button
	 *            the button to add
	 * @return this builder.
	 */
	public ListTemplateBuilder addButton(Button button) {
		this.payload.addButton(button);
		return this;
	}

	/**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param title
	 *            the quick reply button label. It can't be empty.
	 * @param payload
	 *            the payload sent back when the button is pressed. It can't be
	 *            empty.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */
	public ListTemplateBuilder addQuickReply(String title, String payload) {
		this.messageBuilder.addQuickReply(title, payload);
		return this;
	}

	/**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param reply
	 *            a quick reply object.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */
	public ListTemplateBuilder addQuickReply(QuickReply reply) {
		this.messageBuilder.addQuickReply(reply);
		return this;
	}

	/**
	 * {@inheritDoc} Creates a response containing a List Template.
	 */
	public FbBotMillResponse build(MessageEnvelope envelope) {
		return this.messageBuilder.build(envelope);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.factory.TemplateBaseBuilder#
	 * toString()
	 */
	@Override
	public String toString() {
		return ""ListTemplateBuilder [payload="" + payload + "", messageBuilder=""
				+ messageBuilder + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public class ListTemplateBuilder extends TemplateBaseBuilder { private ListTemplatePayload payload; ListTemplateBuilder() { this.payload = new ListTemplatePayload(); this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload); } public ListTemplateBuilder setTopElementStyle(
			TopElementStyle topElementStyle) { this.payload.setTopElementStyle(topElementStyle); return this; } public ListTemplateElementBuilder addElement(String title) { return new ListTemplateElementBuilder(title, this); } public ListTemplateBuilder addElement(ListTemplateElement element) { this.payload.addElement(element); return this; } public ListTemplateBuilder addButton(Button button) { this.payload.addButton(button); return this; } public ListTemplateBuilder addQuickReply(String title, String payload) { this.messageBuilder.addQuickReply(title, payload); return this; } public ListTemplateBuilder addQuickReply(QuickReply reply) { this.messageBuilder.addQuickReply(reply); return this; } public FbBotMillResponse build(MessageEnvelope envelope) { return this.messageBuilder.build(envelope); } @Override
	public String toString() { return ""ListTemplateBuilder [payload="" + payload + "", messageBuilder=""
				+ messageBuilder + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public class ListTemplateBuilder extends TemplateBaseBuilder { private ListTemplatePayload payload; ListTemplateBuilder() { this.payload = new ListTemplatePayload(); this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload); } public ListTemplateBuilder setTopElementStyle(
			TopElementStyle topElementStyle) { this.payload.setTopElementStyle(topElementStyle); return this; } public ListTemplateElementBuilder addElement(String title) { return new ListTemplateElementBuilder(title, this); } public ListTemplateBuilder addElement(ListTemplateElement element) { this.payload.addElement(element); return this; } public ListTemplateBuilder addButton(Button button) { this.payload.addButton(button); return this; } public ListTemplateBuilder addQuickReply(String title, String payload) { this.messageBuilder.addQuickReply(title, payload); return this; } public ListTemplateBuilder addQuickReply(QuickReply reply) { this.messageBuilder.addQuickReply(reply); return this; } public FbBotMillResponse build(MessageEnvelope envelope) { return this.messageBuilder.build(envelope); } @Override
	public String toString() { return ""ListTemplateBuilder [payload="" + payload + "", messageBuilder=""
				+ messageBuilder + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import co.aurasphere.botmill.fb.model.base.AttachmentType; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; import co.aurasphere.botmill.fb.model.outcoming.payload.template.ListTemplatePayload; import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply; import co.aurasphere.botmill.fb.model.outcoming.template.button.Button; import co.aurasphere.botmill.fb.model.outcoming.template.list.ListTemplateElement; import co.aurasphere.botmill.fb.model.outcoming.template.list.TopElementStyle; 
  public class ListTemplateBuilder extends TemplateBaseBuilder { /**
 * A builder for a List Template.
 *
 * @author Alvin Reyes
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/list-template""
 *      > Facebook's Messenger Platform List Template Documentation</a>
 * 
 */  private ListTemplatePayload payload; /**
	 * The payload of the current builder.
	 */  ListTemplateBuilder() { this.payload = new ListTemplatePayload(); this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload); } /**
	 * Default constructor. Creates a builder for a List Template.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/list-template""
	 *      > Facebook's Messenger Platform List Template Documentation</a>
	 * 
	 */  public ListTemplateBuilder setTopElementStyle(
			TopElementStyle topElementStyle) { this.payload.setTopElementStyle(topElementStyle); return this; } /**
	 * Sets/Adds a {@link TopElementStyle} to the list template payload.
	 * 
	 * @param topElementStyle
	 *            the top element style
	 * @return this builder
	 */  public ListTemplateElementBuilder addElement(String title) { return new ListTemplateElementBuilder(title, this); } /**
	 * Adds a {@link ListTemplateElement} to this template.
	 * 
	 * @param title
	 *            the title of the element to add.
	 * @return a builder for the element.
	 */  public ListTemplateBuilder addElement(ListTemplateElement element) { this.payload.addElement(element); return this; } /**
	 * Adds a {@link ListTemplateElement} to this template.
	 * 
	 * @param element
	 *            the element to add.
	 * @return this builder.
	 */  public ListTemplateBuilder addButton(Button button) { this.payload.addButton(button); return this; } /**
	 * Add a {@link Button} to this template.
	 *
	 * @param button
	 *            the button to add
	 * @return this builder.
	 */  public ListTemplateBuilder addQuickReply(String title, String payload) { this.messageBuilder.addQuickReply(title, payload); return this; } /**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param title
	 *            the quick reply button label. It can't be empty.
	 * @param payload
	 *            the payload sent back when the button is pressed. It can't be
	 *            empty.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */  public ListTemplateBuilder addQuickReply(QuickReply reply) { this.messageBuilder.addQuickReply(reply); return this; } /**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param reply
	 *            a quick reply object.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */  public FbBotMillResponse build(MessageEnvelope envelope) { return this.messageBuilder.build(envelope); } /**
	 * {@inheritDoc} Creates a response containing a List Template.
	 */  @Override
	public String toString() { return ""ListTemplateBuilder [payload="" + payload + "", messageBuilder=""
				+ messageBuilder + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.factory.TemplateBaseBuilder#
	 * toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/ListTemplateElementBuilder.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import co.aurasphere.botmill.fb.model.outcoming.template.button.Button;
import co.aurasphere.botmill.fb.model.outcoming.template.list.DefaultAction;
import co.aurasphere.botmill.fb.model.outcoming.template.list.ListTemplateElement;


/**
 * Builder for a {@link ListTemplateElement}.
 * 
 * @author Alvin Reyes
 * 
 */
public class ListTemplateElementBuilder {

	/**
	 * The parent builder of this builder.
	 */
	private ListTemplateBuilder parentBuilder;

	/**
	 * The element managed by this builder.
	 */
	private ListTemplateElement element;

	/**
	 * Default constructor. Creates a builder for a {@link ListTemplateElement}.
	 * 
	 * @param title
	 *            the title of the element.
	 * @param parentBuilder
	 *            the parent builder of this builder.
	 */
	ListTemplateElementBuilder(String title, ListTemplateBuilder parentBuilder) {
		this.parentBuilder = parentBuilder;
		this.element = new ListTemplateElement(title);
	}

	/**
	 * Sets a subtitle for the current {@link ListTemplateElement}.
	 * 
	 * @param subtitle
	 *            the subtitle to set.
	 * @return this builder.
	 */
	public ListTemplateElementBuilder setSubtitle(String subtitle) {
		element.setSubtitle(subtitle);
		return this;
	}

	/**
	 * Sets an image for the current {@link ListTemplateElement}.
	 *
	 * @param imageUrl
	 *            the image url
	 * @return this builder.
	 */
	public ListTemplateElementBuilder setImageUrl(String imageUrl) {
		element.setImageUrl(imageUrl);
		return this;
	}

	/**
	 * Sets a DefaultAction for the current {@link ListTemplateElement}. You can
	 * use the {@link ButtonFactory#createDefaultActionButton(String)} method to
	 * create one.
	 *
	 * @param defaultAction
	 *            the default action
	 * @return this builder.
	 */
	public ListTemplateElementBuilder setDefaultAction(
			DefaultAction defaultAction) {
		element.setDefaultAction(defaultAction);
		return this;
	}

	/**
	 * Adds a button which redirects to an URL when clicked to the current
	 * {@link ListTemplateElement}. There can be at most 3 buttons per element.
	 * 
	 * @param title
	 *            the button label.
	 * @param url
	 *            the URL to whom redirect when clicked.
	 * @return this builder.
	 */
	public ListTemplateElementBuilder addUrlButton(String title, String url) {
		Button button = ButtonFactory.createUrlButton(title, url);
		this.element.addButton(button);
		return this;
	}

	/**
	 * Adds a button with a phone number to the current
	 * {@link ListTemplateElement}. There can be at most 3 buttons per element.
	 * 
	 * @param title
	 *            the button label.
	 * @param phoneNumber
	 *            a phone number. Must be in the format '+' prefix followed by
	 *            the country code, area code and local number.
	 * @return this builder.
	 */
	public ListTemplateElementBuilder addPhoneNumberButton(String title,
			String phoneNumber) {
		Button button = ButtonFactory.createPhoneNumberButton(title,
				phoneNumber);
		this.element.addButton(button);
		return this;
	}

	/**
	 * Adds a button which sends a payload back when clicked to the current
	 * {@link ListTemplateElement}. There can be at most 3 buttons per element.
	 * 
	 * @param title
	 *            the button label.
	 * @param payload
	 *            the payload to send back when clicked.
	 * @return this builder.
	 */
	public ListTemplateElementBuilder addPostbackButton(String title,
			String payload) {
		Button button = ButtonFactory.createPostbackButton(title, payload);
		this.element.addButton(button);
		return this;
	}

	/**
	 * Adds a button to the current {@link ListTemplateElement}. There can be at
	 * most 3 buttons per element.
	 * 
	 * @param button
	 *            the button to add.
	 * @return this builder.
	 */
	public ListTemplateElementBuilder addButton(Button button) {
		this.element.addButton(button);
		return this;
	}

	/**
	 * Builds the current object, adds it to the parent builder and returns the
	 * parent builder.
	 * 
	 * @return the parent builder of this builder.
	 */
	public ListTemplateBuilder endElement() {
		parentBuilder.addElement(element);
		return parentBuilder;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""ListTemplateElementBuilder [parentBuilder="" + parentBuilder
				+ "", element="" + element + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public class ListTemplateElementBuilder { private ListTemplateBuilder parentBuilder; private ListTemplateElement element; ListTemplateElementBuilder(String title, ListTemplateBuilder parentBuilder) { this.parentBuilder = parentBuilder; this.element = new ListTemplateElement(title); } public ListTemplateElementBuilder setSubtitle(String subtitle) { element.setSubtitle(subtitle); return this; } public ListTemplateElementBuilder setImageUrl(String imageUrl) { element.setImageUrl(imageUrl); return this; } public ListTemplateElementBuilder setDefaultAction(
			DefaultAction defaultAction) { element.setDefaultAction(defaultAction); return this; } public ListTemplateElementBuilder addUrlButton(String title, String url) { Button button = ButtonFactory.createUrlButton(title, url); this.element.addButton(button); return this; } public ListTemplateElementBuilder addPhoneNumberButton(String title,
			String phoneNumber) { Button button = ButtonFactory.createPhoneNumberButton(title,
				phoneNumber); this.element.addButton(button); return this; } public ListTemplateElementBuilder addPostbackButton(String title,
			String payload) { Button button = ButtonFactory.createPostbackButton(title, payload); this.element.addButton(button); return this; } public ListTemplateElementBuilder addButton(Button button) { this.element.addButton(button); return this; } public ListTemplateBuilder endElement() { parentBuilder.addElement(element); return parentBuilder; } @Override
	public String toString() { return ""ListTemplateElementBuilder [parentBuilder="" + parentBuilder
				+ "", element="" + element + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public class ListTemplateElementBuilder { private ListTemplateBuilder parentBuilder; private ListTemplateElement element; ListTemplateElementBuilder(String title, ListTemplateBuilder parentBuilder) { this.parentBuilder = parentBuilder; this.element = new ListTemplateElement(title); } public ListTemplateElementBuilder setSubtitle(String subtitle) { element.setSubtitle(subtitle); return this; } public ListTemplateElementBuilder setImageUrl(String imageUrl) { element.setImageUrl(imageUrl); return this; } public ListTemplateElementBuilder setDefaultAction(
			DefaultAction defaultAction) { element.setDefaultAction(defaultAction); return this; } public ListTemplateElementBuilder addUrlButton(String title, String url) { Button button = ButtonFactory.createUrlButton(title, url); this.element.addButton(button); return this; } public ListTemplateElementBuilder addPhoneNumberButton(String title,
			String phoneNumber) { Button button = ButtonFactory.createPhoneNumberButton(title,
				phoneNumber); this.element.addButton(button); return this; } public ListTemplateElementBuilder addPostbackButton(String title,
			String payload) { Button button = ButtonFactory.createPostbackButton(title, payload); this.element.addButton(button); return this; } public ListTemplateElementBuilder addButton(Button button) { this.element.addButton(button); return this; } public ListTemplateBuilder endElement() { parentBuilder.addElement(element); return parentBuilder; } @Override
	public String toString() { return ""ListTemplateElementBuilder [parentBuilder="" + parentBuilder
				+ "", element="" + element + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import co.aurasphere.botmill.fb.model.outcoming.template.button.Button; import co.aurasphere.botmill.fb.model.outcoming.template.list.DefaultAction; import co.aurasphere.botmill.fb.model.outcoming.template.list.ListTemplateElement; 
  public class ListTemplateElementBuilder { /**
 * Builder for a {@link ListTemplateElement}.
 * 
 * @author Alvin Reyes
 * 
 */  private ListTemplateBuilder parentBuilder; /**
	 * The parent builder of this builder.
	 */  private ListTemplateElement element; /**
	 * The element managed by this builder.
	 */  ListTemplateElementBuilder(String title, ListTemplateBuilder parentBuilder) { this.parentBuilder = parentBuilder; this.element = new ListTemplateElement(title); } /**
	 * Default constructor. Creates a builder for a {@link ListTemplateElement}.
	 * 
	 * @param title
	 *            the title of the element.
	 * @param parentBuilder
	 *            the parent builder of this builder.
	 */  public ListTemplateElementBuilder setSubtitle(String subtitle) { element.setSubtitle(subtitle); return this; } /**
	 * Sets a subtitle for the current {@link ListTemplateElement}.
	 * 
	 * @param subtitle
	 *            the subtitle to set.
	 * @return this builder.
	 */  public ListTemplateElementBuilder setImageUrl(String imageUrl) { element.setImageUrl(imageUrl); return this; } /**
	 * Sets an image for the current {@link ListTemplateElement}.
	 *
	 * @param imageUrl
	 *            the image url
	 * @return this builder.
	 */  public ListTemplateElementBuilder setDefaultAction(
			DefaultAction defaultAction) { element.setDefaultAction(defaultAction); return this; } /**
	 * Sets a DefaultAction for the current {@link ListTemplateElement}. You can
	 * use the {@link ButtonFactory#createDefaultActionButton(String)} method to
	 * create one.
	 *
	 * @param defaultAction
	 *            the default action
	 * @return this builder.
	 */  public ListTemplateElementBuilder addUrlButton(String title, String url) { Button button = ButtonFactory.createUrlButton(title, url); this.element.addButton(button); return this; } /**
	 * Adds a button which redirects to an URL when clicked to the current
	 * {@link ListTemplateElement}. There can be at most 3 buttons per element.
	 * 
	 * @param title
	 *            the button label.
	 * @param url
	 *            the URL to whom redirect when clicked.
	 * @return this builder.
	 */  public ListTemplateElementBuilder addPhoneNumberButton(String title,
			String phoneNumber) { Button button = ButtonFactory.createPhoneNumberButton(title,
				phoneNumber); this.element.addButton(button); return this; } /**
	 * Adds a button with a phone number to the current
	 * {@link ListTemplateElement}. There can be at most 3 buttons per element.
	 * 
	 * @param title
	 *            the button label.
	 * @param phoneNumber
	 *            a phone number. Must be in the format '+' prefix followed by
	 *            the country code, area code and local number.
	 * @return this builder.
	 */  public ListTemplateElementBuilder addPostbackButton(String title,
			String payload) { Button button = ButtonFactory.createPostbackButton(title, payload); this.element.addButton(button); return this; } /**
	 * Adds a button which sends a payload back when clicked to the current
	 * {@link ListTemplateElement}. There can be at most 3 buttons per element.
	 * 
	 * @param title
	 *            the button label.
	 * @param payload
	 *            the payload to send back when clicked.
	 * @return this builder.
	 */  public ListTemplateElementBuilder addButton(Button button) { this.element.addButton(button); return this; } /**
	 * Adds a button to the current {@link ListTemplateElement}. There can be at
	 * most 3 buttons per element.
	 * 
	 * @param button
	 *            the button to add.
	 * @return this builder.
	 */  public ListTemplateBuilder endElement() { parentBuilder.addElement(element); return parentBuilder; } /**
	 * Builds the current object, adds it to the parent builder and returns the
	 * parent builder.
	 * 
	 * @return the parent builder of this builder.
	 */  @Override
	public String toString() { return ""ListTemplateElementBuilder [parentBuilder="" + parentBuilder
				+ "", element="" + element + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/MessageBaseBuilder.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import java.util.List;

import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply;


/**
 * Base class for a {@link FbBotMillResponseBuilder} that builds a message.
 * 
 * @author Donato Rimenti
 * 
 */
public abstract class MessageBaseBuilder extends FbBotMillResponseBuilder {

	/**
	 * The quick replies of this message. It's initialized lazily.
	 */
	protected List<QuickReply> quickReplies;

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.factory.TemplateBaseBuilder#
	 * toString()
	 */
	@Override
	public String toString() {
		return ""MessageBaseBuilder [quickReplies="" + quickReplies + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public abstract class MessageBaseBuilder extends FbBotMillResponseBuilder { protected List<QuickReply> quickReplies; @Override
	public String toString() { return ""MessageBaseBuilder [quickReplies="" + quickReplies + ""]""; } }",0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public abstract class MessageBaseBuilder extends FbBotMillResponseBuilder { protected List<QuickReply> quickReplies; @Override
	public String toString() { return ""MessageBaseBuilder [quickReplies="" + quickReplies + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import java.util.List; 
import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply; 
  public abstract class MessageBaseBuilder extends FbBotMillResponseBuilder { /**
 * Base class for a {@link FbBotMillResponseBuilder} that builds a message.
 * 
 * @author Donato Rimenti
 * 
 */  protected List<QuickReply> quickReplies; /**
	 * The quick replies of this message. It's initialized lazily.
	 */  @Override
	public String toString() { return ""MessageBaseBuilder [quickReplies="" + quickReplies + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.factory.TemplateBaseBuilder#
	 * toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/PassengerSegmentInfoBuilder.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import co.aurasphere.botmill.fb.model.outcoming.template.airline.PassengerInfo;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.PassengerSegmentInfo;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.ProductInfo;


/**
 * Builder for a {@link PassengerSegmentInfo} object.
 * 
 * @author Donato Rimenti
 * 
 */
public class PassengerSegmentInfoBuilder {

	/**
	 * The parent builder of this one. Used to return to the parent once the
	 * build is finished calling {@link #endFlightInfo()}.
	 */
	private AirlineItineraryTemplateBuilder parentBuilder;

	/**
	 * The object managed by this builder.
	 */
	private PassengerSegmentInfo segmentInfo;

	/**
	 * Default constructor. Creates a builder for a {@link PassengerInfo}
	 * object.
	 * 
	 * @param parentBuilder
	 *            the parent builder of this one. It can't be null.
	 * @param segmentId
	 *            used to identify a flight segment. It can't be empty and must
	 *            be unique within the itinerary.
	 * @param passengerId
	 *            the passengerId of {@link PassengerInfo} object. It can't be
	 *            empty.
	 * @param seat
	 *            the seat number for the passenger. It can't be empty.
	 * @param seatType
	 *            the seat type for the passenger (e.g. Economy comfort). It
	 *            can't be empty.
	 */
	PassengerSegmentInfoBuilder(AirlineItineraryTemplateBuilder parentBuilder,
			String segmentId, String passengerId, String seat, String seatType) {
		this.segmentInfo = new PassengerSegmentInfo(segmentId, passengerId,
				seat, seatType);
		this.parentBuilder = parentBuilder;
	}

	/**
	 * Adds a {@link ProductInfo} object to the list of products the passenger
	 * purchased in the current {@link PassengerSegmentInfo}. This field is
	 * mandatory and there must be at least one element.
	 * 
	 * @param title
	 *            the product title. It can't be empty.
	 * @param value
	 *            the product description. It can't be empty.
	 * @return this builder.
	 */
	public PassengerSegmentInfoBuilder addProductInfo(String title, String value) {
		ProductInfo productInfo = new ProductInfo(title, value);
		segmentInfo.addProductInfo(productInfo);
		return this;
	}

	/**
	 * Builds the current object, adds it to the parent builder and returns the
	 * parent builder.
	 * 
	 * @return the parent builder of this builder.
	 */
	public AirlineItineraryTemplateBuilder endPassengerSegmentInfo() {
		parentBuilder.addPassengerSegmentInfo(segmentInfo);
		return parentBuilder;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""PassengerSegmentInfoBuilder [parentBuilder="" + parentBuilder
				+ "", segmentInfo="" + segmentInfo + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public class PassengerSegmentInfoBuilder { private AirlineItineraryTemplateBuilder parentBuilder; private PassengerSegmentInfo segmentInfo; PassengerSegmentInfoBuilder(AirlineItineraryTemplateBuilder parentBuilder,
			String segmentId, String passengerId, String seat, String seatType) { this.segmentInfo = new PassengerSegmentInfo(segmentId, passengerId,
				seat, seatType); this.parentBuilder = parentBuilder; } public PassengerSegmentInfoBuilder addProductInfo(String title, String value) { ProductInfo productInfo = new ProductInfo(title, value); segmentInfo.addProductInfo(productInfo); return this; } public AirlineItineraryTemplateBuilder endPassengerSegmentInfo() { parentBuilder.addPassengerSegmentInfo(segmentInfo); return parentBuilder; } @Override
	public String toString() { return ""PassengerSegmentInfoBuilder [parentBuilder="" + parentBuilder
				+ "", segmentInfo="" + segmentInfo + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public class PassengerSegmentInfoBuilder { private AirlineItineraryTemplateBuilder parentBuilder; private PassengerSegmentInfo segmentInfo; PassengerSegmentInfoBuilder(AirlineItineraryTemplateBuilder parentBuilder,
			String segmentId, String passengerId, String seat, String seatType) { this.segmentInfo = new PassengerSegmentInfo(segmentId, passengerId,
				seat, seatType); this.parentBuilder = parentBuilder; } public PassengerSegmentInfoBuilder addProductInfo(String title, String value) { ProductInfo productInfo = new ProductInfo(title, value); segmentInfo.addProductInfo(productInfo); return this; } public AirlineItineraryTemplateBuilder endPassengerSegmentInfo() { parentBuilder.addPassengerSegmentInfo(segmentInfo); return parentBuilder; } @Override
	public String toString() { return ""PassengerSegmentInfoBuilder [parentBuilder="" + parentBuilder
				+ "", segmentInfo="" + segmentInfo + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import co.aurasphere.botmill.fb.model.outcoming.template.airline.PassengerInfo; import co.aurasphere.botmill.fb.model.outcoming.template.airline.PassengerSegmentInfo; import co.aurasphere.botmill.fb.model.outcoming.template.airline.ProductInfo; 
  public class PassengerSegmentInfoBuilder { /**
 * Builder for a {@link PassengerSegmentInfo} object.
 * 
 * @author Donato Rimenti
 * 
 */  private AirlineItineraryTemplateBuilder parentBuilder; /**
	 * The parent builder of this one. Used to return to the parent once the
	 * build is finished calling {@link #endFlightInfo()}.
	 */  private PassengerSegmentInfo segmentInfo; /**
	 * The object managed by this builder.
	 */  PassengerSegmentInfoBuilder(AirlineItineraryTemplateBuilder parentBuilder,
			String segmentId, String passengerId, String seat, String seatType) { this.segmentInfo = new PassengerSegmentInfo(segmentId, passengerId,
				seat, seatType); this.parentBuilder = parentBuilder; } /**
	 * Default constructor. Creates a builder for a {@link PassengerInfo}
	 * object.
	 * 
	 * @param parentBuilder
	 *            the parent builder of this one. It can't be null.
	 * @param segmentId
	 *            used to identify a flight segment. It can't be empty and must
	 *            be unique within the itinerary.
	 * @param passengerId
	 *            the passengerId of {@link PassengerInfo} object. It can't be
	 *            empty.
	 * @param seat
	 *            the seat number for the passenger. It can't be empty.
	 * @param seatType
	 *            the seat type for the passenger (e.g. Economy comfort). It
	 *            can't be empty.
	 */  public PassengerSegmentInfoBuilder addProductInfo(String title, String value) { ProductInfo productInfo = new ProductInfo(title, value); segmentInfo.addProductInfo(productInfo); return this; } /**
	 * Adds a {@link ProductInfo} object to the list of products the passenger
	 * purchased in the current {@link PassengerSegmentInfo}. This field is
	 * mandatory and there must be at least one element.
	 * 
	 * @param title
	 *            the product title. It can't be empty.
	 * @param value
	 *            the product description. It can't be empty.
	 * @return this builder.
	 */  public AirlineItineraryTemplateBuilder endPassengerSegmentInfo() { parentBuilder.addPassengerSegmentInfo(segmentInfo); return parentBuilder; } /**
	 * Builds the current object, adds it to the parent builder and returns the
	 * parent builder.
	 * 
	 * @return the parent builder of this builder.
	 */  @Override
	public String toString() { return ""PassengerSegmentInfoBuilder [parentBuilder="" + parentBuilder
				+ "", segmentInfo="" + segmentInfo + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/PaymentSummaryBuilder.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import co.aurasphere.botmill.fb.model.outcoming.template.button.BuyButton;
import co.aurasphere.botmill.fb.model.outcoming.template.button.PaymentSummary;
import co.aurasphere.botmill.fb.model.outcoming.template.button.PaymentType;
import co.aurasphere.botmill.fb.model.outcoming.template.button.PriceLabel;
import co.aurasphere.botmill.fb.model.outcoming.template.button.RequestedUserInfo;


/**
 * Builder for a {@link BuyButton}'s {@link PaymentSummary}.
 * 
 * @author Donato Rimenti
 * @since 1.1.0
 */
public class PaymentSummaryBuilder {

	/**
	 * The {@link PaymentSummary} created with this builder.
	 */
	private PaymentSummary paymentSummary;

	/**
	 * The parent builder of this builder.
	 */
	private BuyButtonBuilder parentBuilder;

	/**
	 * Instantiates a new PaymentSummaryBuilder.
	 *
	 * @param currency
	 *            the {@link PaymentSummary#currency}.
	 * @param paymentType
	 *            the {@link PaymentSummary#paymentType}.
	 * @param merchantName
	 *            the {@link PaymentSummary#merchantName}.
	 * @param parentBuilder
	 *            the {@link #parentBuilder}.
	 */
	public PaymentSummaryBuilder(String currency, PaymentType paymentType,
			String merchantName, BuyButtonBuilder parentBuilder) {
		this.parentBuilder = parentBuilder;
		this.paymentSummary = new PaymentSummary();
		this.paymentSummary.setCurrency(currency);
		this.paymentSummary.setPaymentType(paymentType);
		this.paymentSummary.setMerchantName(merchantName);
	}

	/**
	 * Sets the {@link PaymentSummary#isTestPayment}.
	 * 
	 * @param isTestPayment
	 *            the {@link PaymentSummary#isTestPayment} to set.
	 * @return this builder.
	 */
	public PaymentSummaryBuilder setTestPayment(boolean isTestPayment) {
		this.paymentSummary.setTestPayment(isTestPayment);
		return this;
	}

	/**
	 * Adds a {@link PriceLabel} to the {@link PaymentSummary}.
	 * 
	 * @param label
	 *            the {@link PriceLabel#label}.
	 * @param amount
	 *            the {@link PriceLabel#amount}.
	 * @return this builder.
	 */
	public PaymentSummaryBuilder addPriceLabel(String label, String amount) {
		PriceLabel priceLabel = new PriceLabel(label, amount);
		return addPriceLabel(priceLabel);
	}

	/**
	 * Adds a {@link PriceLabel} to the {@link PaymentSummary}.
	 * 
	 * @param priceLabel
	 *            the {@link PriceLabel} to add to the
	 *            {@link PaymentSummary#priceList}.
	 * @return this builder.
	 */
	public PaymentSummaryBuilder addPriceLabel(PriceLabel priceLabel) {
		this.paymentSummary.addPriceLabel(priceLabel);
		return this;
	}

	/**
	 * Adds a {@link RequestedUserInfo} to the {@link PaymentSummary}.
	 * 
	 * @param requestedUserInfo
	 *            the {@link RequestedUserInfo} to add to the
	 *            {@link PaymentSummary#requestedUserInfo}.
	 * @return this builder.
	 */
	public PaymentSummaryBuilder addRequestedUserInfo(
			RequestedUserInfo requestedUserInfo) {
		this.paymentSummary.addRequestedUserInfo(requestedUserInfo);
		return this;
	}

	/**
	 * Builds the {@link BuyButton}.
	 * 
	 * @return the {@link BuyButtonBuilder#buyButton}.
	 */
	public BuyButton build() {
		this.parentBuilder.setPaymentSummary(paymentSummary);
		return parentBuilder.build();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""PaymentSummaryBuilder [paymentSummary="" + paymentSummary
				+ "", parentBuilder="" + parentBuilder + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public class PaymentSummaryBuilder { private PaymentSummary paymentSummary; private BuyButtonBuilder parentBuilder; public PaymentSummaryBuilder(String currency, PaymentType paymentType,
			String merchantName, BuyButtonBuilder parentBuilder) { this.parentBuilder = parentBuilder; this.paymentSummary = new PaymentSummary(); this.paymentSummary.setCurrency(currency); this.paymentSummary.setPaymentType(paymentType); this.paymentSummary.setMerchantName(merchantName); } public PaymentSummaryBuilder setTestPayment(boolean isTestPayment) { this.paymentSummary.setTestPayment(isTestPayment); return this; } public PaymentSummaryBuilder addPriceLabel(String label, String amount) { PriceLabel priceLabel = new PriceLabel(label, amount); return addPriceLabel(priceLabel); } public PaymentSummaryBuilder addPriceLabel(PriceLabel priceLabel) { this.paymentSummary.addPriceLabel(priceLabel); return this; } public PaymentSummaryBuilder addRequestedUserInfo(
			RequestedUserInfo requestedUserInfo) { this.paymentSummary.addRequestedUserInfo(requestedUserInfo); return this; } public BuyButton build() { this.parentBuilder.setPaymentSummary(paymentSummary); return parentBuilder.build(); } @Override
	public String toString() { return ""PaymentSummaryBuilder [paymentSummary="" + paymentSummary
				+ "", parentBuilder="" + parentBuilder + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public class PaymentSummaryBuilder { private PaymentSummary paymentSummary; private BuyButtonBuilder parentBuilder; public PaymentSummaryBuilder(String currency, PaymentType paymentType,
			String merchantName, BuyButtonBuilder parentBuilder) { this.parentBuilder = parentBuilder; this.paymentSummary = new PaymentSummary(); this.paymentSummary.setCurrency(currency); this.paymentSummary.setPaymentType(paymentType); this.paymentSummary.setMerchantName(merchantName); } public PaymentSummaryBuilder setTestPayment(boolean isTestPayment) { this.paymentSummary.setTestPayment(isTestPayment); return this; } public PaymentSummaryBuilder addPriceLabel(String label, String amount) { PriceLabel priceLabel = new PriceLabel(label, amount); return addPriceLabel(priceLabel); } public PaymentSummaryBuilder addPriceLabel(PriceLabel priceLabel) { this.paymentSummary.addPriceLabel(priceLabel); return this; } public PaymentSummaryBuilder addRequestedUserInfo(
			RequestedUserInfo requestedUserInfo) { this.paymentSummary.addRequestedUserInfo(requestedUserInfo); return this; } public BuyButton build() { this.parentBuilder.setPaymentSummary(paymentSummary); return parentBuilder.build(); } @Override
	public String toString() { return ""PaymentSummaryBuilder [paymentSummary="" + paymentSummary
				+ "", parentBuilder="" + parentBuilder + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import co.aurasphere.botmill.fb.model.outcoming.template.button.BuyButton; import co.aurasphere.botmill.fb.model.outcoming.template.button.PaymentSummary; import co.aurasphere.botmill.fb.model.outcoming.template.button.PaymentType; import co.aurasphere.botmill.fb.model.outcoming.template.button.PriceLabel; import co.aurasphere.botmill.fb.model.outcoming.template.button.RequestedUserInfo; 
  public class PaymentSummaryBuilder { /**
 * Builder for a {@link BuyButton}'s {@link PaymentSummary}.
 * 
 * @author Donato Rimenti
 * @since 1.1.0
 */  private PaymentSummary paymentSummary; /**
	 * The {@link PaymentSummary} created with this builder.
	 */  private BuyButtonBuilder parentBuilder; /**
	 * The parent builder of this builder.
	 */  public PaymentSummaryBuilder(String currency, PaymentType paymentType,
			String merchantName, BuyButtonBuilder parentBuilder) { this.parentBuilder = parentBuilder; this.paymentSummary = new PaymentSummary(); this.paymentSummary.setCurrency(currency); this.paymentSummary.setPaymentType(paymentType); this.paymentSummary.setMerchantName(merchantName); } /**
	 * Instantiates a new PaymentSummaryBuilder.
	 *
	 * @param currency
	 *            the {@link PaymentSummary#currency}.
	 * @param paymentType
	 *            the {@link PaymentSummary#paymentType}.
	 * @param merchantName
	 *            the {@link PaymentSummary#merchantName}.
	 * @param parentBuilder
	 *            the {@link #parentBuilder}.
	 */  public PaymentSummaryBuilder setTestPayment(boolean isTestPayment) { this.paymentSummary.setTestPayment(isTestPayment); return this; } /**
	 * Sets the {@link PaymentSummary#isTestPayment}.
	 * 
	 * @param isTestPayment
	 *            the {@link PaymentSummary#isTestPayment} to set.
	 * @return this builder.
	 */  public PaymentSummaryBuilder addPriceLabel(String label, String amount) { PriceLabel priceLabel = new PriceLabel(label, amount); return addPriceLabel(priceLabel); } /**
	 * Adds a {@link PriceLabel} to the {@link PaymentSummary}.
	 * 
	 * @param label
	 *            the {@link PriceLabel#label}.
	 * @param amount
	 *            the {@link PriceLabel#amount}.
	 * @return this builder.
	 */  public PaymentSummaryBuilder addPriceLabel(PriceLabel priceLabel) { this.paymentSummary.addPriceLabel(priceLabel); return this; } /**
	 * Adds a {@link PriceLabel} to the {@link PaymentSummary}.
	 * 
	 * @param priceLabel
	 *            the {@link PriceLabel} to add to the
	 *            {@link PaymentSummary#priceList}.
	 * @return this builder.
	 */  public PaymentSummaryBuilder addRequestedUserInfo(
			RequestedUserInfo requestedUserInfo) { this.paymentSummary.addRequestedUserInfo(requestedUserInfo); return this; } /**
	 * Adds a {@link RequestedUserInfo} to the {@link PaymentSummary}.
	 * 
	 * @param requestedUserInfo
	 *            the {@link RequestedUserInfo} to add to the
	 *            {@link PaymentSummary#requestedUserInfo}.
	 * @return this builder.
	 */  public BuyButton build() { this.parentBuilder.setPaymentSummary(paymentSummary); return parentBuilder.build(); } /**
	 * Builds the {@link BuyButton}.
	 * 
	 * @return the {@link BuyButtonBuilder#buyButton}.
	 */  @Override
	public String toString() { return ""PaymentSummaryBuilder [paymentSummary="" + paymentSummary
				+ "", parentBuilder="" + parentBuilder + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/QuickReplyFactory.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply;


/**
 * Factory class for building {@link QuickReply} objects.
 * 
 * @author Alvin Reyes
 */
public class QuickReplyFactory {

	/**
	 * Instantiates a new QuickReplyFactory.
	 */
	private QuickReplyFactory() {
	}

	/**
	 * Creates a {@link QuickReply}.
	 * 
	 * @param title
	 *            the {@link QuickReply#title}.
	 * @param payload
	 *            the {@link QuickReply#payload}.
	 * @return a {@link QuickReply} object.
	 */
	public static QuickReply createQuickReply(String title, String payload) {
		return new QuickReply(title, payload);
	}

	/**
	 * Creates a {@link QuickReply} with a location.
	 * 
	 * @param location
	 *            the {@link QuickReply#title}.
	 * @return a {@link QuickReply} object.
	 */
	public static QuickReply createQuickReplyLocation(String location) {
		return new QuickReply(location);
	}

	/**
	 * Creates a {@link QuickReply} with a location.
	 * 
	 * @param title
	 *            the {@link QuickReply#title}.
	 * @param payload
	 *            the {@link QuickReply#payload}.
	 * @param imageUrl
	 *            the {@link QuickReply#imageUrl}.
	 * @return a {@link QuickReply} object.
	 */
	public static QuickReply createQuickReplyLocation(String title,
			String payload, String imageUrl) {
		return new QuickReply(title, payload, imageUrl);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""QuickReplyFactory []"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public class QuickReplyFactory { private QuickReplyFactory() { } public static QuickReply createQuickReply(String title, String payload) { return new QuickReply(title, payload); } public static QuickReply createQuickReplyLocation(String location) { return new QuickReply(location); } public static QuickReply createQuickReplyLocation(String title,
			String payload, String imageUrl) { return new QuickReply(title, payload, imageUrl); } @Override
	public String toString() { return ""QuickReplyFactory []""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public class QuickReplyFactory { private QuickReplyFactory() { } public static QuickReply createQuickReply(String title, String payload) { return new QuickReply(title, payload); } public static QuickReply createQuickReplyLocation(String location) { return new QuickReply(location); } public static QuickReply createQuickReplyLocation(String title,
			String payload, String imageUrl) { return new QuickReply(title, payload, imageUrl); } @Override
	public String toString() { return ""QuickReplyFactory []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply; 
  public class QuickReplyFactory { /**
 * Factory class for building {@link QuickReply} objects.
 * 
 * @author Alvin Reyes
 */  private QuickReplyFactory() { } /**
	 * Instantiates a new QuickReplyFactory.
	 */  public static QuickReply createQuickReply(String title, String payload) { return new QuickReply(title, payload); } /**
	 * Creates a {@link QuickReply}.
	 * 
	 * @param title
	 *            the {@link QuickReply#title}.
	 * @param payload
	 *            the {@link QuickReply#payload}.
	 * @return a {@link QuickReply} object.
	 */  public static QuickReply createQuickReplyLocation(String location) { return new QuickReply(location); } /**
	 * Creates a {@link QuickReply} with a location.
	 * 
	 * @param location
	 *            the {@link QuickReply#title}.
	 * @return a {@link QuickReply} object.
	 */  public static QuickReply createQuickReplyLocation(String title,
			String payload, String imageUrl) { return new QuickReply(title, payload, imageUrl); } /**
	 * Creates a {@link QuickReply} with a location.
	 * 
	 * @param title
	 *            the {@link QuickReply#title}.
	 * @param payload
	 *            the {@link QuickReply#payload}.
	 * @param imageUrl
	 *            the {@link QuickReply#imageUrl}.
	 * @return a {@link QuickReply} object.
	 */  @Override
	public String toString() { return ""QuickReplyFactory []""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/ReceiptTemplateBuilder.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import java.math.BigDecimal;

import co.aurasphere.botmill.fb.model.base.AttachmentType;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;
import co.aurasphere.botmill.fb.model.outcoming.payload.template.ReceiptTemplatePayload;
import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply;
import co.aurasphere.botmill.fb.model.outcoming.template.receipt.Address;
import co.aurasphere.botmill.fb.model.outcoming.template.receipt.Adjustment;
import co.aurasphere.botmill.fb.model.outcoming.template.receipt.ReceiptTemplateElement;
import co.aurasphere.botmill.fb.model.outcoming.template.receipt.Summary;


/**
 * A builder for a Receipt Template.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/receipt-template""
 *      > Facebook's Messenger Platform Receipt Template Documentation</a>
 * 
 */
public class ReceiptTemplateBuilder extends TemplateBaseBuilder {

	/**
	 * The payload of the current builder.
	 */
	private ReceiptTemplatePayload payload;

	/**
	 * Default constructor. Creates a builder for a Receipt Template.
	 *
	 * @param recipientName
	 *            the recipient name
	 * @param orderNumber
	 *            the order number
	 * @param currency
	 *            the currency
	 * @param paymentMethod
	 *            the payment method
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/receipt-template""
	 *      > Facebook's Messenger Platform Generic Receipt Documentation</a>
	 */
	ReceiptTemplateBuilder(String recipientName, String orderNumber,
			String currency, String paymentMethod) {
		this.payload = new ReceiptTemplatePayload();
		this.payload.setRecipientName(recipientName);
		this.payload.setOrderNumber(orderNumber);
		this.payload.setCurrency(currency);
		this.payload.setPaymentMethod(paymentMethod);
		this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload);
	}

	/**
	 * Sets the merchant name. If present this is shown as logo text.
	 * 
	 * @param merchantName
	 *            the merchant name to set.
	 * @return this builder.
	 */
	public ReceiptTemplateBuilder setMerchantName(String merchantName) {
		this.payload.setMerchantName(merchantName);
		return this;
	}

	/**
	 * Sets the timestamp of the order, in seconds.
	 * 
	 * @param timestamp
	 *            the timestamp to set.
	 * @return this builder.
	 */
	public ReceiptTemplateBuilder setTimestamp(String timestamp) {
		this.payload.setTimestamp(timestamp);
		return this;
	}

	/**
	 * Sets the URL of order.
	 * 
	 * @param orderUrl
	 *            the URL of order to set.
	 * @return this builder.
	 */
	public ReceiptTemplateBuilder setOrderUrl(String orderUrl) {
		this.payload.setOrderUrl(orderUrl);
		return this;
	}

	/**
	 * Adds a {@link ReceiptTemplateElement} to this template. This field can't
	 * be empty. The elements must be at most 100 and the sorting is not
	 * guaranteed.
	 * 
	 * @param element
	 *            the element to add.
	 * @return this builder.
	 */
	public ReceiptTemplateBuilder addElement(ReceiptTemplateElement element) {
		this.payload.addElement(element);
		return this;
	}

	/**
	 * Adds a {@link ReceiptTemplateElement} to this template. This field can't
	 * be empty. The elements must be at most 100 and the sorting is not
	 * guaranteed.
	 * 
	 * @param title
	 *            the title of the item. This field is mandatory and can't be
	 *            empty or null.
	 * @return a {@link ReceiptTemplateElementBuilder} for building the element.
	 */
	public ReceiptTemplateElementBuilder addElement(String title) {
		return new ReceiptTemplateElementBuilder(title, this);
	}

	/**
	 * The shipping address. The address is optional. If you do not ship an
	 * item, you may omit these fields.
	 * 
	 * @param address
	 *            the address to set.
	 * @return this builder.
	 */
	public ReceiptTemplateBuilder setAddress(Address address) {
		this.payload.setAddress(address);
		return this;
	}

	/**
	 * The shipping address. The address is optional. If you do not ship an
	 * item, you may omit these fields.
	 * 
	 * @return an {@link AddressBuilder} to build the address.
	 */
	public AddressBuilder setAddress() {
		return new AddressBuilder(this);
	}

	/**
	 * Sets the payment {@link Summary}. This field is required and can't be
	 * null.
	 * 
	 * @param summary
	 *            the summary to set.
	 * @return this builder.
	 */
	public ReceiptTemplateBuilder setSummary(Summary summary) {
		this.payload.setSummary(summary);
		return this;
	}

	/**
	 * Sets the payment {@link Summary}. This field is required and can't be
	 * null. These numbers should be valid and well formatted decimal numbers,
	 * using '.' (dot) as the decimal separator. Note that most currencies only
	 * accept up to 2 decimal places.
	 * 
	 * @param subtotal
	 *            the subtotal.
	 * @param shippingCost
	 *            the cost of the shipping.
	 * @param totalTax
	 *            the total tax.
	 * @param totalCost
	 *            the total cost.
	 * @return this builder.
	 */
	public ReceiptTemplateBuilder setSummary(BigDecimal subtotal,
			BigDecimal shippingCost, BigDecimal totalTax, BigDecimal totalCost) {
		Summary summary = new Summary(subtotal, shippingCost, totalTax,
				totalCost);
		return this.setSummary(summary);
	}

	/**
	 * Adds an {@link Adjustment} to this builder. Adjustments allow a way to
	 * insert adjusted pricing (e.g., sales). Adjustments are optional.
	 * 
	 * @param adjustment
	 *            the adjustment to add.
	 * @return this builder.
	 */
	public ReceiptTemplateBuilder addAdjustment(Adjustment adjustment) {
		this.payload.addAdjustment(adjustment);
		return this;
	}

	/**
	 * Adds an {@link Adjustment} to this builder. Adjustments allow a way to
	 * insert adjusted pricing (e.g., sales). Adjustments are optional.
	 * 
	 * @param name
	 *            the name of the adjustment.
	 * @param amount
	 *            the amount of the adjustment.
	 * @return this builder.
	 */
	public ReceiptTemplateBuilder addAdjustment(String name, BigDecimal amount) {
		Adjustment adjustment = new Adjustment(name, amount);
		return this.addAdjustment(adjustment);
	}

	/**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param title
	 *            the quick reply button label. It can't be empty.
	 * @param payload
	 *            the payload sent back when the button is pressed. It can't be
	 *            empty.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */
	public ReceiptTemplateBuilder addQuickReply(String title, String payload) {
		this.messageBuilder.addQuickReply(title, payload);
		return this;
	}

	/**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param reply
	 *            a quick reply object.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */
	public ReceiptTemplateBuilder addQuickReply(QuickReply reply) {
		this.messageBuilder.addQuickReply(reply);
		return this;
	}

	/**
	 * {@inheritDoc} Creates a response containing a Receipt Template.
	 */
	@Override
	public FbBotMillResponse build(MessageEnvelope envelope) {
		return this.messageBuilder.build(envelope);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.factory.TemplateBaseBuilder#
	 * toString()
	 */
	@Override
	public String toString() {
		return ""ReceiptTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public class ReceiptTemplateBuilder extends TemplateBaseBuilder { private ReceiptTemplatePayload payload; ReceiptTemplateBuilder(String recipientName, String orderNumber,
			String currency, String paymentMethod) { this.payload = new ReceiptTemplatePayload(); this.payload.setRecipientName(recipientName); this.payload.setOrderNumber(orderNumber); this.payload.setCurrency(currency); this.payload.setPaymentMethod(paymentMethod); this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload); } public ReceiptTemplateBuilder setMerchantName(String merchantName) { this.payload.setMerchantName(merchantName); return this; } public ReceiptTemplateBuilder setTimestamp(String timestamp) { this.payload.setTimestamp(timestamp); return this; } public ReceiptTemplateBuilder setOrderUrl(String orderUrl) { this.payload.setOrderUrl(orderUrl); return this; } public ReceiptTemplateBuilder addElement(ReceiptTemplateElement element) { this.payload.addElement(element); return this; } public ReceiptTemplateElementBuilder addElement(String title) { return new ReceiptTemplateElementBuilder(title, this); } public ReceiptTemplateBuilder setAddress(Address address) { this.payload.setAddress(address); return this; } public AddressBuilder setAddress() { return new AddressBuilder(this); } public ReceiptTemplateBuilder setSummary(Summary summary) { this.payload.setSummary(summary); return this; } public ReceiptTemplateBuilder setSummary(BigDecimal subtotal,
			BigDecimal shippingCost, BigDecimal totalTax, BigDecimal totalCost) { Summary summary = new Summary(subtotal, shippingCost, totalTax,
				totalCost); return this.setSummary(summary); } public ReceiptTemplateBuilder addAdjustment(Adjustment adjustment) { this.payload.addAdjustment(adjustment); return this; } public ReceiptTemplateBuilder addAdjustment(String name, BigDecimal amount) { Adjustment adjustment = new Adjustment(name, amount); return this.addAdjustment(adjustment); } public ReceiptTemplateBuilder addQuickReply(String title, String payload) { this.messageBuilder.addQuickReply(title, payload); return this; } public ReceiptTemplateBuilder addQuickReply(QuickReply reply) { this.messageBuilder.addQuickReply(reply); return this; } @Override
	public FbBotMillResponse build(MessageEnvelope envelope) { return this.messageBuilder.build(envelope); } @Override
	public String toString() { return ""ReceiptTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public class ReceiptTemplateBuilder extends TemplateBaseBuilder { private ReceiptTemplatePayload payload; ReceiptTemplateBuilder(String recipientName, String orderNumber,
			String currency, String paymentMethod) { this.payload = new ReceiptTemplatePayload(); this.payload.setRecipientName(recipientName); this.payload.setOrderNumber(orderNumber); this.payload.setCurrency(currency); this.payload.setPaymentMethod(paymentMethod); this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload); } public ReceiptTemplateBuilder setMerchantName(String merchantName) { this.payload.setMerchantName(merchantName); return this; } public ReceiptTemplateBuilder setTimestamp(String timestamp) { this.payload.setTimestamp(timestamp); return this; } public ReceiptTemplateBuilder setOrderUrl(String orderUrl) { this.payload.setOrderUrl(orderUrl); return this; } public ReceiptTemplateBuilder addElement(ReceiptTemplateElement element) { this.payload.addElement(element); return this; } public ReceiptTemplateElementBuilder addElement(String title) { return new ReceiptTemplateElementBuilder(title, this); } public ReceiptTemplateBuilder setAddress(Address address) { this.payload.setAddress(address); return this; } public AddressBuilder setAddress() { return new AddressBuilder(this); } public ReceiptTemplateBuilder setSummary(Summary summary) { this.payload.setSummary(summary); return this; } public ReceiptTemplateBuilder setSummary(BigDecimal subtotal,
			BigDecimal shippingCost, BigDecimal totalTax, BigDecimal totalCost) { Summary summary = new Summary(subtotal, shippingCost, totalTax,
				totalCost); return this.setSummary(summary); } public ReceiptTemplateBuilder addAdjustment(Adjustment adjustment) { this.payload.addAdjustment(adjustment); return this; } public ReceiptTemplateBuilder addAdjustment(String name, BigDecimal amount) { Adjustment adjustment = new Adjustment(name, amount); return this.addAdjustment(adjustment); } public ReceiptTemplateBuilder addQuickReply(String title, String payload) { this.messageBuilder.addQuickReply(title, payload); return this; } public ReceiptTemplateBuilder addQuickReply(QuickReply reply) { this.messageBuilder.addQuickReply(reply); return this; } @Override
	public FbBotMillResponse build(MessageEnvelope envelope) { return this.messageBuilder.build(envelope); } @Override
	public String toString() { return ""ReceiptTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import java.math.BigDecimal; 
import co.aurasphere.botmill.fb.model.base.AttachmentType; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; import co.aurasphere.botmill.fb.model.outcoming.payload.template.ReceiptTemplatePayload; import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply; import co.aurasphere.botmill.fb.model.outcoming.template.receipt.Address; import co.aurasphere.botmill.fb.model.outcoming.template.receipt.Adjustment; import co.aurasphere.botmill.fb.model.outcoming.template.receipt.ReceiptTemplateElement; import co.aurasphere.botmill.fb.model.outcoming.template.receipt.Summary; 
  public class ReceiptTemplateBuilder extends TemplateBaseBuilder { /**
 * A builder for a Receipt Template.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/receipt-template""
 *      > Facebook's Messenger Platform Receipt Template Documentation</a>
 * 
 */  private ReceiptTemplatePayload payload; /**
	 * The payload of the current builder.
	 */  ReceiptTemplateBuilder(String recipientName, String orderNumber,
			String currency, String paymentMethod) { this.payload = new ReceiptTemplatePayload(); this.payload.setRecipientName(recipientName); this.payload.setOrderNumber(orderNumber); this.payload.setCurrency(currency); this.payload.setPaymentMethod(paymentMethod); this.messageBuilder = new AttachmentMessageBuilder(
				AttachmentType.TEMPLATE, this.payload); } /**
	 * Default constructor. Creates a builder for a Receipt Template.
	 *
	 * @param recipientName
	 *            the recipient name
	 * @param orderNumber
	 *            the order number
	 * @param currency
	 *            the currency
	 * @param paymentMethod
	 *            the payment method
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/receipt-template""
	 *      > Facebook's Messenger Platform Generic Receipt Documentation</a>
	 */  public ReceiptTemplateBuilder setMerchantName(String merchantName) { this.payload.setMerchantName(merchantName); return this; } /**
	 * Sets the merchant name. If present this is shown as logo text.
	 * 
	 * @param merchantName
	 *            the merchant name to set.
	 * @return this builder.
	 */  public ReceiptTemplateBuilder setTimestamp(String timestamp) { this.payload.setTimestamp(timestamp); return this; } /**
	 * Sets the timestamp of the order, in seconds.
	 * 
	 * @param timestamp
	 *            the timestamp to set.
	 * @return this builder.
	 */  public ReceiptTemplateBuilder setOrderUrl(String orderUrl) { this.payload.setOrderUrl(orderUrl); return this; } /**
	 * Sets the URL of order.
	 * 
	 * @param orderUrl
	 *            the URL of order to set.
	 * @return this builder.
	 */  public ReceiptTemplateBuilder addElement(ReceiptTemplateElement element) { this.payload.addElement(element); return this; } /**
	 * Adds a {@link ReceiptTemplateElement} to this template. This field can't
	 * be empty. The elements must be at most 100 and the sorting is not
	 * guaranteed.
	 * 
	 * @param element
	 *            the element to add.
	 * @return this builder.
	 */  public ReceiptTemplateElementBuilder addElement(String title) { return new ReceiptTemplateElementBuilder(title, this); } /**
	 * Adds a {@link ReceiptTemplateElement} to this template. This field can't
	 * be empty. The elements must be at most 100 and the sorting is not
	 * guaranteed.
	 * 
	 * @param title
	 *            the title of the item. This field is mandatory and can't be
	 *            empty or null.
	 * @return a {@link ReceiptTemplateElementBuilder} for building the element.
	 */  public ReceiptTemplateBuilder setAddress(Address address) { this.payload.setAddress(address); return this; } /**
	 * The shipping address. The address is optional. If you do not ship an
	 * item, you may omit these fields.
	 * 
	 * @param address
	 *            the address to set.
	 * @return this builder.
	 */  public AddressBuilder setAddress() { return new AddressBuilder(this); } /**
	 * The shipping address. The address is optional. If you do not ship an
	 * item, you may omit these fields.
	 * 
	 * @return an {@link AddressBuilder} to build the address.
	 */  public ReceiptTemplateBuilder setSummary(Summary summary) { this.payload.setSummary(summary); return this; } /**
	 * Sets the payment {@link Summary}. This field is required and can't be
	 * null.
	 * 
	 * @param summary
	 *            the summary to set.
	 * @return this builder.
	 */  public ReceiptTemplateBuilder setSummary(BigDecimal subtotal,
			BigDecimal shippingCost, BigDecimal totalTax, BigDecimal totalCost) { Summary summary = new Summary(subtotal, shippingCost, totalTax,
				totalCost); return this.setSummary(summary); } /**
	 * Sets the payment {@link Summary}. This field is required and can't be
	 * null. These numbers should be valid and well formatted decimal numbers,
	 * using '.' (dot) as the decimal separator. Note that most currencies only
	 * accept up to 2 decimal places.
	 * 
	 * @param subtotal
	 *            the subtotal.
	 * @param shippingCost
	 *            the cost of the shipping.
	 * @param totalTax
	 *            the total tax.
	 * @param totalCost
	 *            the total cost.
	 * @return this builder.
	 */  public ReceiptTemplateBuilder addAdjustment(Adjustment adjustment) { this.payload.addAdjustment(adjustment); return this; } /**
	 * Adds an {@link Adjustment} to this builder. Adjustments allow a way to
	 * insert adjusted pricing (e.g., sales). Adjustments are optional.
	 * 
	 * @param adjustment
	 *            the adjustment to add.
	 * @return this builder.
	 */  public ReceiptTemplateBuilder addAdjustment(String name, BigDecimal amount) { Adjustment adjustment = new Adjustment(name, amount); return this.addAdjustment(adjustment); } /**
	 * Adds an {@link Adjustment} to this builder. Adjustments allow a way to
	 * insert adjusted pricing (e.g., sales). Adjustments are optional.
	 * 
	 * @param name
	 *            the name of the adjustment.
	 * @param amount
	 *            the amount of the adjustment.
	 * @return this builder.
	 */  public ReceiptTemplateBuilder addQuickReply(String title, String payload) { this.messageBuilder.addQuickReply(title, payload); return this; } /**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param title
	 *            the quick reply button label. It can't be empty.
	 * @param payload
	 *            the payload sent back when the button is pressed. It can't be
	 *            empty.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */  public ReceiptTemplateBuilder addQuickReply(QuickReply reply) { this.messageBuilder.addQuickReply(reply); return this; } /**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param reply
	 *            a quick reply object.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */  @Override
	public FbBotMillResponse build(MessageEnvelope envelope) { return this.messageBuilder.build(envelope); } /**
	 * {@inheritDoc} Creates a response containing a Receipt Template.
	 */  @Override
	public String toString() { return ""ReceiptTemplateBuilder [payload="" + payload
				+ "", messageBuilder="" + messageBuilder + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.factory.TemplateBaseBuilder#
	 * toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/ReceiptTemplateElementBuilder.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import java.math.BigDecimal;

import co.aurasphere.botmill.fb.model.outcoming.template.receipt.ReceiptTemplateElement;


/**
 * Builder for a {@link ReceiptTemplateElement}.
 * 
 * @author Donato Rimenti
 * 
 */
public class ReceiptTemplateElementBuilder {

	/**
	 * The parent builder of this builder.
	 */
	private ReceiptTemplateBuilder parentBuilder;

	/**
	 * The element managed by this builder.
	 */
	private ReceiptTemplateElement element;

	/**
	 * Default constructor. Creates a builder for a
	 * {@link ReceiptTemplateElement}.
	 * 
	 * @param title
	 *            the title of the item. This field is mandatory and can't be
	 *            empty or null.
	 * @param parentBuilder
	 *            the parent builder of this builder.
	 */
	ReceiptTemplateElementBuilder(String title,
			ReceiptTemplateBuilder parentBuilder) {
		this.element = new ReceiptTemplateElement();
		this.element.setTitle(title);
		this.parentBuilder = parentBuilder;
	}

	/**
	 * Sets a subtitle for the item.
	 * 
	 * @param subtitle
	 *            the subtitle to set.
	 * @return this builder.
	 */
	public ReceiptTemplateElementBuilder setSubtitle(String subtitle) {
		this.element.setSubtitle(subtitle);
		return this;
	}

	/**
	 * Sets a quantity of item.
	 * 
	 * @param quantity
	 *            the quantity to set.
	 * @return this builder.
	 */
	public ReceiptTemplateElementBuilder setQuantity(int quantity) {
		this.element.setQuantity(quantity);
		return this;
	}

	/**
	 * Sets the item price. This field is mandatory and can't be empty but 0 is
	 * allowed.
	 * 
	 * @param price
	 *            the item price to set.
	 * @return this builder.
	 */
	public ReceiptTemplateElementBuilder setPrice(BigDecimal price) {
		this.element.setPrice(price);
		return this;
	}

	/**
	 * Sets the currency of price.
	 * 
	 * @param currency
	 *            the currency of price to set.
	 * @return this builder.
	 */
	public ReceiptTemplateElementBuilder setCurrency(String currency) {
		this.element.setCurrency(currency);
		return this;
	}

	/**
	 * Sets the image URL of item.
	 * 
	 * @param imageUrl
	 *            the image URL of item to set.
	 * @return this builder.
	 */
	public ReceiptTemplateElementBuilder setImageUrl(String imageUrl) {
		this.element.setImageUrl(imageUrl);
		return this;
	}

	/**
	 * Builds the current object, adds it to the parent builder and returns the
	 * parent builder.
	 * 
	 * @return the parent builder of this builder.
	 */
	public ReceiptTemplateBuilder endElement() {
		this.parentBuilder.addElement(this.element);
		return parentBuilder;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""ReceiptTemplateElementBuilder [parentBuilder="" + parentBuilder
				+ "", element="" + element + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public class ReceiptTemplateElementBuilder { private ReceiptTemplateBuilder parentBuilder; private ReceiptTemplateElement element; ReceiptTemplateElementBuilder(String title,
			ReceiptTemplateBuilder parentBuilder) { this.element = new ReceiptTemplateElement(); this.element.setTitle(title); this.parentBuilder = parentBuilder; } public ReceiptTemplateElementBuilder setSubtitle(String subtitle) { this.element.setSubtitle(subtitle); return this; } public ReceiptTemplateElementBuilder setQuantity(int quantity) { this.element.setQuantity(quantity); return this; } public ReceiptTemplateElementBuilder setPrice(BigDecimal price) { this.element.setPrice(price); return this; } public ReceiptTemplateElementBuilder setCurrency(String currency) { this.element.setCurrency(currency); return this; } public ReceiptTemplateElementBuilder setImageUrl(String imageUrl) { this.element.setImageUrl(imageUrl); return this; } public ReceiptTemplateBuilder endElement() { this.parentBuilder.addElement(this.element); return parentBuilder; } @Override
	public String toString() { return ""ReceiptTemplateElementBuilder [parentBuilder="" + parentBuilder
				+ "", element="" + element + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public class ReceiptTemplateElementBuilder { private ReceiptTemplateBuilder parentBuilder; private ReceiptTemplateElement element; ReceiptTemplateElementBuilder(String title,
			ReceiptTemplateBuilder parentBuilder) { this.element = new ReceiptTemplateElement(); this.element.setTitle(title); this.parentBuilder = parentBuilder; } public ReceiptTemplateElementBuilder setSubtitle(String subtitle) { this.element.setSubtitle(subtitle); return this; } public ReceiptTemplateElementBuilder setQuantity(int quantity) { this.element.setQuantity(quantity); return this; } public ReceiptTemplateElementBuilder setPrice(BigDecimal price) { this.element.setPrice(price); return this; } public ReceiptTemplateElementBuilder setCurrency(String currency) { this.element.setCurrency(currency); return this; } public ReceiptTemplateElementBuilder setImageUrl(String imageUrl) { this.element.setImageUrl(imageUrl); return this; } public ReceiptTemplateBuilder endElement() { this.parentBuilder.addElement(this.element); return parentBuilder; } @Override
	public String toString() { return ""ReceiptTemplateElementBuilder [parentBuilder="" + parentBuilder
				+ "", element="" + element + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import java.math.BigDecimal; 
import co.aurasphere.botmill.fb.model.outcoming.template.receipt.ReceiptTemplateElement; 
  public class ReceiptTemplateElementBuilder { /**
 * Builder for a {@link ReceiptTemplateElement}.
 * 
 * @author Donato Rimenti
 * 
 */  private ReceiptTemplateBuilder parentBuilder; /**
	 * The parent builder of this builder.
	 */  private ReceiptTemplateElement element; /**
	 * The element managed by this builder.
	 */  ReceiptTemplateElementBuilder(String title,
			ReceiptTemplateBuilder parentBuilder) { this.element = new ReceiptTemplateElement(); this.element.setTitle(title); this.parentBuilder = parentBuilder; } /**
	 * Default constructor. Creates a builder for a
	 * {@link ReceiptTemplateElement}.
	 * 
	 * @param title
	 *            the title of the item. This field is mandatory and can't be
	 *            empty or null.
	 * @param parentBuilder
	 *            the parent builder of this builder.
	 */  public ReceiptTemplateElementBuilder setSubtitle(String subtitle) { this.element.setSubtitle(subtitle); return this; } /**
	 * Sets a subtitle for the item.
	 * 
	 * @param subtitle
	 *            the subtitle to set.
	 * @return this builder.
	 */  public ReceiptTemplateElementBuilder setQuantity(int quantity) { this.element.setQuantity(quantity); return this; } /**
	 * Sets a quantity of item.
	 * 
	 * @param quantity
	 *            the quantity to set.
	 * @return this builder.
	 */  public ReceiptTemplateElementBuilder setPrice(BigDecimal price) { this.element.setPrice(price); return this; } /**
	 * Sets the item price. This field is mandatory and can't be empty but 0 is
	 * allowed.
	 * 
	 * @param price
	 *            the item price to set.
	 * @return this builder.
	 */  public ReceiptTemplateElementBuilder setCurrency(String currency) { this.element.setCurrency(currency); return this; } /**
	 * Sets the currency of price.
	 * 
	 * @param currency
	 *            the currency of price to set.
	 * @return this builder.
	 */  public ReceiptTemplateElementBuilder setImageUrl(String imageUrl) { this.element.setImageUrl(imageUrl); return this; } /**
	 * Sets the image URL of item.
	 * 
	 * @param imageUrl
	 *            the image URL of item to set.
	 * @return this builder.
	 */  public ReceiptTemplateBuilder endElement() { this.parentBuilder.addElement(this.element); return parentBuilder; } /**
	 * Builds the current object, adds it to the parent builder and returns the
	 * parent builder.
	 * 
	 * @return the parent builder of this builder.
	 */  @Override
	public String toString() { return ""ReceiptTemplateElementBuilder [parentBuilder="" + parentBuilder
				+ "", element="" + element + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/ReplyFactory.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import java.math.BigDecimal;

import co.aurasphere.botmill.fb.model.base.AttachmentType;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;
import co.aurasphere.botmill.fb.model.outcoming.action.TypingAction;
import co.aurasphere.botmill.fb.model.outcoming.payload.AttachmentPayload;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.UpdateType;


/**
 * Static class that allows the creation of a {@link FbBotMillResponse}.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */
public class ReplyFactory {

	/**
	 * Instantiates a new ReplyFactory.
	 */
	private ReplyFactory() {
	}

	/**
	 * Adds a {@link TypingAction} to the response.
	 *
	 * @param action
	 *            the action to add. Can't be null.
	 * @return a builder for that action.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/sender-actions""
	 *      > Facebook's Messenger Platform Sender Actions Documentation</a>
	 */
	public static ActionResponseBuilder addTypingAction(TypingAction action) {
		return new ActionResponseBuilder(action);
	}

	/**
	 * Adds a Button Template to the response.
	 *
	 * @param message
	 *            the message of the Button Template.
	 * @return a builder for the template.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/button-template""
	 *      > Facebook's Messenger Platform Button Template Documentation</a>
	 */
	public static ButtonTemplateBuilder addButtonTemplate(String message) {
		return new ButtonTemplateBuilder(message);
	}

	/**
	 * Adds a Generic Template to the response.
	 *
	 * @return a builder for the template.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/generic-template""
	 *      > Facebook's Messenger Platform Generic Template Documentation</a>
	 */
	public static GenericTemplateBuilder addGenericTemplate() {
		return new GenericTemplateBuilder();
	}

	/**
	 * Adds a List Template to the response.
	 *
	 * @return a builder for the template.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/list-template""
	 *      > Facebook's Messenger Platform List Template Documentation</a>
	 */
	public static ListTemplateBuilder addListTemplate() {
		return new ListTemplateBuilder();
	}

	/**
	 * Creates a response which contains only a text message.
	 *
	 * @param message
	 *            the message to create.
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/text-message""
	 *      > Facebook's Messenger Platform Text Message Documentation</a>
	 */
	public static TextMessageBuilder addTextMessageOnly(String message) {
		return new TextMessageBuilder(message);
	}

	/**
	 * Adds an image attachment to the response.
	 *
	 * @param url
	 *            the url of the image to attach.
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/image-attachment""
	 *      > Facebook's Messenger Platform Image Attachment Documentation</a>
	 */
	public static AttachmentMessageBuilder addImageAttachment(String url) {
		return new AttachmentMessageBuilder(AttachmentType.IMAGE, url);
	}
	
	/**
	 * Get the reusable image attachment
	 *
	 * @param attachmentId 
	 * 				the attachment id generated by the upload api
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/image-attachment""
	 *      > Facebook's Messenger Platform Image Attachment Documentation</a>
	 */
	public static AttachmentMessageBuilder getReusableImageAttachment(String attachmentId) {
		AttachmentPayload payload = new AttachmentPayload();
		payload.setAttachmentId(attachmentId);
		return new AttachmentMessageBuilder(AttachmentType.IMAGE, payload);
	}

	/**
	 * Adds an audio attachment to the response.
	 *
	 * @param url
	 *            the url of the audio to attach.
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/audio-attachment""
	 *      > Facebook's Messenger Platform Audio Attachment Documentation</a>
	 */
	public static AttachmentMessageBuilder addAudioAttachment(String url) {
		return new AttachmentMessageBuilder(AttachmentType.AUDIO, url);
	}
	
	/**
	 * Get the reusable audio attachment
	 *
	 * @param attachmentId 
	 * 				the attachment id generated by the upload api
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/audio-attachment""
	 *      > Facebook's Messenger Platform Audio Attachment Documentation</a>
	 */
	public static AttachmentMessageBuilder getReusableAudioAttachment(String attachmentId) {
		AttachmentPayload payload = new AttachmentPayload();
		payload.setAttachmentId(attachmentId);
		return new AttachmentMessageBuilder(AttachmentType.AUDIO, payload);
	}

	/**
	 * Adds a video attachment to the response.
	 *
	 * @param url
	 *            the url of the video to attach.
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/video-attachment""
	 *      > Facebook's Messenger Platform Video Attachment Documentation</a>
	 */
	public static AttachmentMessageBuilder addVideoAttachment(String url) {
		return new AttachmentMessageBuilder(AttachmentType.VIDEO, url);
	}

	/**
	 * Get the reusable video attachment
	 *
	 * @param attachmentId 
	 * 				the attachment id generated by the upload api
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/video-attachment""
	 *      > Facebook's Messenger Platform Video Attachment Documentation</a>
	 */
	public static AttachmentMessageBuilder getReusableVideoAttachment(String attachmentId) {
		AttachmentPayload payload = new AttachmentPayload();
		payload.setAttachmentId(attachmentId);
		return new AttachmentMessageBuilder(AttachmentType.VIDEO, payload);
	}
	
	/**
	 * Adds a file attachment to the response.
	 *
	 * @param url
	 *            the url of the file to attach.
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/file-attachment""
	 *      > Facebook's Messenger Platform File Attachment Documentation</a>
	 */
	public static AttachmentMessageBuilder addFileAttachment(String url) {
		return new AttachmentMessageBuilder(AttachmentType.FILE, url);
	}
	
	/**
	 * Get the reusable file attachment
	 *
	 * @param attachmentId 
	 * 				the attachment id generated by the upload api
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/file-attachment""
	 *      > Facebook's Messenger Platform File Attachment Documentation</a>
	 */
	public static AttachmentMessageBuilder getReusableFileAttachment(String attachmentId) {
		AttachmentPayload payload = new AttachmentPayload();
		payload.setAttachmentId(attachmentId);
		return new AttachmentMessageBuilder(AttachmentType.VIDEO, payload);
	}

	/**
	 * Adds a Receipt Template to the response.
	 *
	 * @param recipientName
	 *            the recipient's name.
	 * @param orderNumber
	 *            the order number.Must be unique for each user.
	 * @param currency
	 *            the currency for the price. It can't be empty. The currency
	 *            must be a three digit ISO-4217-3 code in format [A-Z]{3}. For
	 *            more information see <a href=
	 *            ""https://developers.facebook.com/docs/payments/reference/supportedcurrencies""
	 *            > Facebook's currency support</a>
	 * @param paymentMethod
	 *            the payment method details. This can be a custom string. ex:
	 *            ""Visa 1234"". You may insert an arbitrary string here but we
	 *            recommend providing enough information for the person to
	 *            decipher which payment method and account they used (e.g., the
	 *            name of the payment method and partial account number).
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/receipt-template""
	 *      > Facebook's Messenger Receipt Template Documentation</a>
	 */
	public static ReceiptTemplateBuilder addAirlineItineraryTemplate(
			String recipientName, String orderNumber, String currency,
			String paymentMethod) {
		return new ReceiptTemplateBuilder(recipientName, orderNumber, currency,
				paymentMethod);
	}

	/**
	 * Adds an Airline Itinerary Template to the response.
	 *
	 * @param introMessage
	 *            the message to send before the template. It can't be empty.
	 * @param locale
	 *            the current locale. It can't be empty and must be in format
	 *            [a-z]{2}_[A-Z]{2}. Locale must be in format [a-z]{2}_[A-Z]{2}.
	 *            For more information see<a href=
	 *            ""https://developers.facebook.com/docs/internationalization#locales""
	 *            > Facebook's locale support</a>.
	 * @param pnrNumber
	 *            the Passenger Name Record number (Booking Number). It can't be
	 *            empty.
	 * @param totalPrice
	 *            the total price of the itinerary.
	 * @param currency
	 *            the currency for the price. It can't be empty. The currency
	 *            must be a three digit ISO-4217-3 code in format [A-Z]{3}. For
	 *            more information see <a href=
	 *            ""https://developers.facebook.com/docs/payments/reference/supportedcurrencies""
	 *            > Facebook's currency support</a>
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-itinerary-template""
	 *      > Facebook's Messenger Platform Airline Itinerary Template
	 *      Documentation</a>
	 */
	public static AirlineItineraryTemplateBuilder addAirlineItineraryTemplate(
			String introMessage, String locale, String pnrNumber,
			BigDecimal totalPrice, String currency) {
		return new AirlineItineraryTemplateBuilder(introMessage, locale,
				pnrNumber, totalPrice, currency);
	}

	/**
	 * Adds an Airline Checkin Template to the response.
	 *
	 * @param introMessage
	 *            the message to send before the template. It can't be empty.
	 * @param locale
	 *            the current locale. It can't be empty and must be in format
	 *            [a-z]{2}_[A-Z]{2}. Locale must be in format [a-z]{2}_[A-Z]{2}.
	 *            For more information see<a href=
	 *            ""https://developers.facebook.com/docs/internationalization#locales""
	 *            > Facebook's locale support</a>.
	 * @param pnrNumber
	 *            the Passenger Name Record number (Booking Number). It can't be
	 *            empty.
	 * @param checkinUrl
	 *            the url for the checkin. It can't be empty.
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-checkin-template""
	 *      > Facebook's Messenger Platform Airline Checkin Template
	 *      Documentation</a>
	 */
	public static AirlineCheckinTemplateBuilder addAirlineCheckinTemplate(
			String introMessage, String locale, String pnrNumber,
			String checkinUrl) {
		return new AirlineCheckinTemplateBuilder(introMessage, locale,
				pnrNumber, checkinUrl);
	}

	/**
	 * Adds an Airline Boarding Pass Template to the response.
	 *
	 * @param introMessage
	 *            the message to send before the template. It can't be empty.
	 * @param locale
	 *            the current locale. It can't be empty and must be in format
	 *            [a-z]{2}_[A-Z]{2}. Locale must be in format [a-z]{2}_[A-Z]{2}.
	 *            For more information see<a href=
	 *            ""https://developers.facebook.com/docs/internationalization#locales""
	 *            > Facebook's locale support</a>.
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-boardingpass-template""
	 *      > Facebook's Messenger Platform Airline Boarding Pass Template
	 *      Documentation</a>
	 */
	public static AirlineBoardingPassTemplateBuilder addAirlineBoardingPassTemplate(
			String introMessage, String locale) {
		return new AirlineBoardingPassTemplateBuilder(introMessage, locale);
	}

	/**
	 * Adds an Airline Flight Update Template to the response.
	 *
	 * @param introMessage
	 *            the message to send before the template. It can't be empty.
	 * @param locale
	 *            the current locale. It can't be empty and must be in format
	 *            [a-z]{2}_[A-Z]{2}. Locale must be in format [a-z]{2}_[A-Z]{2}.
	 *            For more information see<a href=
	 *            ""https://developers.facebook.com/docs/internationalization#locales""
	 *            > Facebook's locale support</a>.
	 * @param pnrNumber
	 *            the Passenger Name Record number (Booking Number). It can't be
	 *            empty.
	 * @param updateType
	 *            an {@link UpdateType} object that represents the kind of
	 *            status update of the flight. It can't be null.
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-update-template""
	 *      > Facebook's Messenger Platform Airline Flight Update Template
	 *      Documentation</a>
	 */
	public static AirlineFlightUpdateTemplateBuilder addAirlineFlightUpdateTemplate(
			String introMessage, String locale, String pnrNumber,
			UpdateType updateType) {
		return new AirlineFlightUpdateTemplateBuilder(introMessage, locale,
				pnrNumber, updateType);
	}

	/**
	 * Adds a Receipt Template to the response.
	 *
	 * @param recipientName
	 *            the recipient name. It can't be empty.
	 * @param orderNumber
	 *            the order number. It can't be empty and it must be unique for
	 *            each user.
	 * @param currency
	 *            the currency for order. It can't be empty.
	 * @param paymentMethod
	 *            the payment method details. This can be a custom string. ex:
	 *            ""Visa 1234"". You may insert an arbitrary string here but we
	 *            recommend providing enough information for the person to
	 *            decipher which payment method and account they used (e.g., the
	 *            name of the payment method and partial account number). It
	 *            can't be empty.
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/receipt-template""
	 *      > Facebook's Messenger Platform Receipt Template Documentation</a>
	 */
	public static ReceiptTemplateBuilder addReceiptTemplate(
			String recipientName, String orderNumber, String currency,
			String paymentMethod) {
		return new ReceiptTemplateBuilder(recipientName, orderNumber, currency,
				paymentMethod);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""ReplyFactory []"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public class ReplyFactory { private ReplyFactory() { } public static ActionResponseBuilder addTypingAction(TypingAction action) { return new ActionResponseBuilder(action); } public static ButtonTemplateBuilder addButtonTemplate(String message) { return new ButtonTemplateBuilder(message); } public static GenericTemplateBuilder addGenericTemplate() { return new GenericTemplateBuilder(); } public static ListTemplateBuilder addListTemplate() { return new ListTemplateBuilder(); } public static TextMessageBuilder addTextMessageOnly(String message) { return new TextMessageBuilder(message); } public static AttachmentMessageBuilder addImageAttachment(String url) { return new AttachmentMessageBuilder(AttachmentType.IMAGE, url); } public static AttachmentMessageBuilder getReusableImageAttachment(String attachmentId) { AttachmentPayload payload = new AttachmentPayload(); payload.setAttachmentId(attachmentId); return new AttachmentMessageBuilder(AttachmentType.IMAGE, payload); } public static AttachmentMessageBuilder addAudioAttachment(String url) { return new AttachmentMessageBuilder(AttachmentType.AUDIO, url); } public static AttachmentMessageBuilder getReusableAudioAttachment(String attachmentId) { AttachmentPayload payload = new AttachmentPayload(); payload.setAttachmentId(attachmentId); return new AttachmentMessageBuilder(AttachmentType.AUDIO, payload); } public static AttachmentMessageBuilder addVideoAttachment(String url) { return new AttachmentMessageBuilder(AttachmentType.VIDEO, url); } public static AttachmentMessageBuilder getReusableVideoAttachment(String attachmentId) { AttachmentPayload payload = new AttachmentPayload(); payload.setAttachmentId(attachmentId); return new AttachmentMessageBuilder(AttachmentType.VIDEO, payload); } public static AttachmentMessageBuilder addFileAttachment(String url) { return new AttachmentMessageBuilder(AttachmentType.FILE, url); } public static AttachmentMessageBuilder getReusableFileAttachment(String attachmentId) { AttachmentPayload payload = new AttachmentPayload(); payload.setAttachmentId(attachmentId); return new AttachmentMessageBuilder(AttachmentType.VIDEO, payload); } public static ReceiptTemplateBuilder addAirlineItineraryTemplate(
			String recipientName, String orderNumber, String currency,
			String paymentMethod) { return new ReceiptTemplateBuilder(recipientName, orderNumber, currency,
				paymentMethod); } public static AirlineItineraryTemplateBuilder addAirlineItineraryTemplate(
			String introMessage, String locale, String pnrNumber,
			BigDecimal totalPrice, String currency) { return new AirlineItineraryTemplateBuilder(introMessage, locale,
				pnrNumber, totalPrice, currency); } public static AirlineCheckinTemplateBuilder addAirlineCheckinTemplate(
			String introMessage, String locale, String pnrNumber,
			String checkinUrl) { return new AirlineCheckinTemplateBuilder(introMessage, locale,
				pnrNumber, checkinUrl); } public static AirlineBoardingPassTemplateBuilder addAirlineBoardingPassTemplate(
			String introMessage, String locale) { return new AirlineBoardingPassTemplateBuilder(introMessage, locale); } public static AirlineFlightUpdateTemplateBuilder addAirlineFlightUpdateTemplate(
			String introMessage, String locale, String pnrNumber,
			UpdateType updateType) { return new AirlineFlightUpdateTemplateBuilder(introMessage, locale,
				pnrNumber, updateType); } public static ReceiptTemplateBuilder addReceiptTemplate(
			String recipientName, String orderNumber, String currency,
			String paymentMethod) { return new ReceiptTemplateBuilder(recipientName, orderNumber, currency,
				paymentMethod); } @Override
	public String toString() { return ""ReplyFactory []""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public class ReplyFactory { private ReplyFactory() { } public static ActionResponseBuilder addTypingAction(TypingAction action) { return new ActionResponseBuilder(action); } public static ButtonTemplateBuilder addButtonTemplate(String message) { return new ButtonTemplateBuilder(message); } public static GenericTemplateBuilder addGenericTemplate() { return new GenericTemplateBuilder(); } public static ListTemplateBuilder addListTemplate() { return new ListTemplateBuilder(); } public static TextMessageBuilder addTextMessageOnly(String message) { return new TextMessageBuilder(message); } public static AttachmentMessageBuilder addImageAttachment(String url) { return new AttachmentMessageBuilder(AttachmentType.IMAGE, url); } public static AttachmentMessageBuilder getReusableImageAttachment(String attachmentId) { AttachmentPayload payload = new AttachmentPayload(); payload.setAttachmentId(attachmentId); return new AttachmentMessageBuilder(AttachmentType.IMAGE, payload); } public static AttachmentMessageBuilder addAudioAttachment(String url) { return new AttachmentMessageBuilder(AttachmentType.AUDIO, url); } public static AttachmentMessageBuilder getReusableAudioAttachment(String attachmentId) { AttachmentPayload payload = new AttachmentPayload(); payload.setAttachmentId(attachmentId); return new AttachmentMessageBuilder(AttachmentType.AUDIO, payload); } public static AttachmentMessageBuilder addVideoAttachment(String url) { return new AttachmentMessageBuilder(AttachmentType.VIDEO, url); } public static AttachmentMessageBuilder getReusableVideoAttachment(String attachmentId) { AttachmentPayload payload = new AttachmentPayload(); payload.setAttachmentId(attachmentId); return new AttachmentMessageBuilder(AttachmentType.VIDEO, payload); } public static AttachmentMessageBuilder addFileAttachment(String url) { return new AttachmentMessageBuilder(AttachmentType.FILE, url); } public static AttachmentMessageBuilder getReusableFileAttachment(String attachmentId) { AttachmentPayload payload = new AttachmentPayload(); payload.setAttachmentId(attachmentId); return new AttachmentMessageBuilder(AttachmentType.VIDEO, payload); } public static ReceiptTemplateBuilder addAirlineItineraryTemplate(
			String recipientName, String orderNumber, String currency,
			String paymentMethod) { return new ReceiptTemplateBuilder(recipientName, orderNumber, currency,
				paymentMethod); } public static AirlineItineraryTemplateBuilder addAirlineItineraryTemplate(
			String introMessage, String locale, String pnrNumber,
			BigDecimal totalPrice, String currency) { return new AirlineItineraryTemplateBuilder(introMessage, locale,
				pnrNumber, totalPrice, currency); } public static AirlineCheckinTemplateBuilder addAirlineCheckinTemplate(
			String introMessage, String locale, String pnrNumber,
			String checkinUrl) { return new AirlineCheckinTemplateBuilder(introMessage, locale,
				pnrNumber, checkinUrl); } public static AirlineBoardingPassTemplateBuilder addAirlineBoardingPassTemplate(
			String introMessage, String locale) { return new AirlineBoardingPassTemplateBuilder(introMessage, locale); } public static AirlineFlightUpdateTemplateBuilder addAirlineFlightUpdateTemplate(
			String introMessage, String locale, String pnrNumber,
			UpdateType updateType) { return new AirlineFlightUpdateTemplateBuilder(introMessage, locale,
				pnrNumber, updateType); } public static ReceiptTemplateBuilder addReceiptTemplate(
			String recipientName, String orderNumber, String currency,
			String paymentMethod) { return new ReceiptTemplateBuilder(recipientName, orderNumber, currency,
				paymentMethod); } @Override
	public String toString() { return ""ReplyFactory []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import java.math.BigDecimal; 
import co.aurasphere.botmill.fb.model.base.AttachmentType; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; import co.aurasphere.botmill.fb.model.outcoming.action.TypingAction; import co.aurasphere.botmill.fb.model.outcoming.payload.AttachmentPayload; import co.aurasphere.botmill.fb.model.outcoming.template.airline.UpdateType; 
  public class ReplyFactory { /**
 * Static class that allows the creation of a {@link FbBotMillResponse}.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */  private ReplyFactory() { } /**
	 * Instantiates a new ReplyFactory.
	 */  public static ActionResponseBuilder addTypingAction(TypingAction action) { return new ActionResponseBuilder(action); } /**
	 * Adds a {@link TypingAction} to the response.
	 *
	 * @param action
	 *            the action to add. Can't be null.
	 * @return a builder for that action.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/sender-actions""
	 *      > Facebook's Messenger Platform Sender Actions Documentation</a>
	 */  public static ButtonTemplateBuilder addButtonTemplate(String message) { return new ButtonTemplateBuilder(message); } /**
	 * Adds a Button Template to the response.
	 *
	 * @param message
	 *            the message of the Button Template.
	 * @return a builder for the template.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/button-template""
	 *      > Facebook's Messenger Platform Button Template Documentation</a>
	 */  public static GenericTemplateBuilder addGenericTemplate() { return new GenericTemplateBuilder(); } /**
	 * Adds a Generic Template to the response.
	 *
	 * @return a builder for the template.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/generic-template""
	 *      > Facebook's Messenger Platform Generic Template Documentation</a>
	 */  public static ListTemplateBuilder addListTemplate() { return new ListTemplateBuilder(); } /**
	 * Adds a List Template to the response.
	 *
	 * @return a builder for the template.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/list-template""
	 *      > Facebook's Messenger Platform List Template Documentation</a>
	 */  public static TextMessageBuilder addTextMessageOnly(String message) { return new TextMessageBuilder(message); } /**
	 * Creates a response which contains only a text message.
	 *
	 * @param message
	 *            the message to create.
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/text-message""
	 *      > Facebook's Messenger Platform Text Message Documentation</a>
	 */  public static AttachmentMessageBuilder addImageAttachment(String url) { return new AttachmentMessageBuilder(AttachmentType.IMAGE, url); } /**
	 * Adds an image attachment to the response.
	 *
	 * @param url
	 *            the url of the image to attach.
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/image-attachment""
	 *      > Facebook's Messenger Platform Image Attachment Documentation</a>
	 */ 	 public static AttachmentMessageBuilder getReusableImageAttachment(String attachmentId) { AttachmentPayload payload = new AttachmentPayload(); payload.setAttachmentId(attachmentId); return new AttachmentMessageBuilder(AttachmentType.IMAGE, payload); } /**
	 * Get the reusable image attachment
	 *
	 * @param attachmentId 
	 * 				the attachment id generated by the upload api
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/image-attachment""
	 *      > Facebook's Messenger Platform Image Attachment Documentation</a>
	 */  public static AttachmentMessageBuilder addAudioAttachment(String url) { return new AttachmentMessageBuilder(AttachmentType.AUDIO, url); } /**
	 * Adds an audio attachment to the response.
	 *
	 * @param url
	 *            the url of the audio to attach.
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/audio-attachment""
	 *      > Facebook's Messenger Platform Audio Attachment Documentation</a>
	 */ 	 public static AttachmentMessageBuilder getReusableAudioAttachment(String attachmentId) { AttachmentPayload payload = new AttachmentPayload(); payload.setAttachmentId(attachmentId); return new AttachmentMessageBuilder(AttachmentType.AUDIO, payload); } /**
	 * Get the reusable audio attachment
	 *
	 * @param attachmentId 
	 * 				the attachment id generated by the upload api
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/audio-attachment""
	 *      > Facebook's Messenger Platform Audio Attachment Documentation</a>
	 */  public static AttachmentMessageBuilder addVideoAttachment(String url) { return new AttachmentMessageBuilder(AttachmentType.VIDEO, url); } /**
	 * Adds a video attachment to the response.
	 *
	 * @param url
	 *            the url of the video to attach.
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/video-attachment""
	 *      > Facebook's Messenger Platform Video Attachment Documentation</a>
	 */  public static AttachmentMessageBuilder getReusableVideoAttachment(String attachmentId) { AttachmentPayload payload = new AttachmentPayload(); payload.setAttachmentId(attachmentId); return new AttachmentMessageBuilder(AttachmentType.VIDEO, payload); } /**
	 * Get the reusable video attachment
	 *
	 * @param attachmentId 
	 * 				the attachment id generated by the upload api
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/video-attachment""
	 *      > Facebook's Messenger Platform Video Attachment Documentation</a>
	 */ 	 public static AttachmentMessageBuilder addFileAttachment(String url) { return new AttachmentMessageBuilder(AttachmentType.FILE, url); } /**
	 * Adds a file attachment to the response.
	 *
	 * @param url
	 *            the url of the file to attach.
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/file-attachment""
	 *      > Facebook's Messenger Platform File Attachment Documentation</a>
	 */ 	 public static AttachmentMessageBuilder getReusableFileAttachment(String attachmentId) { AttachmentPayload payload = new AttachmentPayload(); payload.setAttachmentId(attachmentId); return new AttachmentMessageBuilder(AttachmentType.VIDEO, payload); } /**
	 * Get the reusable file attachment
	 *
	 * @param attachmentId 
	 * 				the attachment id generated by the upload api
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/file-attachment""
	 *      > Facebook's Messenger Platform File Attachment Documentation</a>
	 */  public static ReceiptTemplateBuilder addAirlineItineraryTemplate(
			String recipientName, String orderNumber, String currency,
			String paymentMethod) { return new ReceiptTemplateBuilder(recipientName, orderNumber, currency,
				paymentMethod); } /**
	 * Adds a Receipt Template to the response.
	 *
	 * @param recipientName
	 *            the recipient's name.
	 * @param orderNumber
	 *            the order number.Must be unique for each user.
	 * @param currency
	 *            the currency for the price. It can't be empty. The currency
	 *            must be a three digit ISO-4217-3 code in format [A-Z]{3}. For
	 *            more information see <a href=
	 *            ""https://developers.facebook.com/docs/payments/reference/supportedcurrencies""
	 *            > Facebook's currency support</a>
	 * @param paymentMethod
	 *            the payment method details. This can be a custom string. ex:
	 *            ""Visa 1234"". You may insert an arbitrary string here but we
	 *            recommend providing enough information for the person to
	 *            decipher which payment method and account they used (e.g., the
	 *            name of the payment method and partial account number).
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/receipt-template""
	 *      > Facebook's Messenger Receipt Template Documentation</a>
	 */  public static AirlineItineraryTemplateBuilder addAirlineItineraryTemplate(
			String introMessage, String locale, String pnrNumber,
			BigDecimal totalPrice, String currency) { return new AirlineItineraryTemplateBuilder(introMessage, locale,
				pnrNumber, totalPrice, currency); } /**
	 * Adds an Airline Itinerary Template to the response.
	 *
	 * @param introMessage
	 *            the message to send before the template. It can't be empty.
	 * @param locale
	 *            the current locale. It can't be empty and must be in format
	 *            [a-z]{2}_[A-Z]{2}. Locale must be in format [a-z]{2}_[A-Z]{2}.
	 *            For more information see<a href=
	 *            ""https://developers.facebook.com/docs/internationalization#locales""
	 *            > Facebook's locale support</a>.
	 * @param pnrNumber
	 *            the Passenger Name Record number (Booking Number). It can't be
	 *            empty.
	 * @param totalPrice
	 *            the total price of the itinerary.
	 * @param currency
	 *            the currency for the price. It can't be empty. The currency
	 *            must be a three digit ISO-4217-3 code in format [A-Z]{3}. For
	 *            more information see <a href=
	 *            ""https://developers.facebook.com/docs/payments/reference/supportedcurrencies""
	 *            > Facebook's currency support</a>
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-itinerary-template""
	 *      > Facebook's Messenger Platform Airline Itinerary Template
	 *      Documentation</a>
	 */  public static AirlineCheckinTemplateBuilder addAirlineCheckinTemplate(
			String introMessage, String locale, String pnrNumber,
			String checkinUrl) { return new AirlineCheckinTemplateBuilder(introMessage, locale,
				pnrNumber, checkinUrl); } /**
	 * Adds an Airline Checkin Template to the response.
	 *
	 * @param introMessage
	 *            the message to send before the template. It can't be empty.
	 * @param locale
	 *            the current locale. It can't be empty and must be in format
	 *            [a-z]{2}_[A-Z]{2}. Locale must be in format [a-z]{2}_[A-Z]{2}.
	 *            For more information see<a href=
	 *            ""https://developers.facebook.com/docs/internationalization#locales""
	 *            > Facebook's locale support</a>.
	 * @param pnrNumber
	 *            the Passenger Name Record number (Booking Number). It can't be
	 *            empty.
	 * @param checkinUrl
	 *            the url for the checkin. It can't be empty.
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-checkin-template""
	 *      > Facebook's Messenger Platform Airline Checkin Template
	 *      Documentation</a>
	 */  public static AirlineBoardingPassTemplateBuilder addAirlineBoardingPassTemplate(
			String introMessage, String locale) { return new AirlineBoardingPassTemplateBuilder(introMessage, locale); } /**
	 * Adds an Airline Boarding Pass Template to the response.
	 *
	 * @param introMessage
	 *            the message to send before the template. It can't be empty.
	 * @param locale
	 *            the current locale. It can't be empty and must be in format
	 *            [a-z]{2}_[A-Z]{2}. Locale must be in format [a-z]{2}_[A-Z]{2}.
	 *            For more information see<a href=
	 *            ""https://developers.facebook.com/docs/internationalization#locales""
	 *            > Facebook's locale support</a>.
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-boardingpass-template""
	 *      > Facebook's Messenger Platform Airline Boarding Pass Template
	 *      Documentation</a>
	 */  public static AirlineFlightUpdateTemplateBuilder addAirlineFlightUpdateTemplate(
			String introMessage, String locale, String pnrNumber,
			UpdateType updateType) { return new AirlineFlightUpdateTemplateBuilder(introMessage, locale,
				pnrNumber, updateType); } /**
	 * Adds an Airline Flight Update Template to the response.
	 *
	 * @param introMessage
	 *            the message to send before the template. It can't be empty.
	 * @param locale
	 *            the current locale. It can't be empty and must be in format
	 *            [a-z]{2}_[A-Z]{2}. Locale must be in format [a-z]{2}_[A-Z]{2}.
	 *            For more information see<a href=
	 *            ""https://developers.facebook.com/docs/internationalization#locales""
	 *            > Facebook's locale support</a>.
	 * @param pnrNumber
	 *            the Passenger Name Record number (Booking Number). It can't be
	 *            empty.
	 * @param updateType
	 *            an {@link UpdateType} object that represents the kind of
	 *            status update of the flight. It can't be null.
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-update-template""
	 *      > Facebook's Messenger Platform Airline Flight Update Template
	 *      Documentation</a>
	 */  public static ReceiptTemplateBuilder addReceiptTemplate(
			String recipientName, String orderNumber, String currency,
			String paymentMethod) { return new ReceiptTemplateBuilder(recipientName, orderNumber, currency,
				paymentMethod); } /**
	 * Adds a Receipt Template to the response.
	 *
	 * @param recipientName
	 *            the recipient name. It can't be empty.
	 * @param orderNumber
	 *            the order number. It can't be empty and it must be unique for
	 *            each user.
	 * @param currency
	 *            the currency for order. It can't be empty.
	 * @param paymentMethod
	 *            the payment method details. This can be a custom string. ex:
	 *            ""Visa 1234"". You may insert an arbitrary string here but we
	 *            recommend providing enough information for the person to
	 *            decipher which payment method and account they used (e.g., the
	 *            name of the payment method and partial account number). It
	 *            can't be empty.
	 * @return a builder for the response.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/receipt-template""
	 *      > Facebook's Messenger Platform Receipt Template Documentation</a>
	 */  @Override
	public String toString() { return ""ReplyFactory []""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/TemplateBaseBuilder.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;


/**
 * Base class for {@link FbBotMillResponseBuilder} that builds a template.
 * 
 * @author Donato Rimenti
 */
public abstract class TemplateBaseBuilder extends FbBotMillResponseBuilder {

	/**
	 * The delegated builder for a message containing a template.
	 */
	protected AttachmentMessageBuilder messageBuilder;

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.factory.TemplateBaseBuilder#
	 * toString()
	 */
	@Override
	public String toString() {
		return ""TemplateBaseBuilder [messageBuilder="" + messageBuilder + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public abstract class TemplateBaseBuilder extends FbBotMillResponseBuilder { protected AttachmentMessageBuilder messageBuilder; @Override
	public String toString() { return ""TemplateBaseBuilder [messageBuilder="" + messageBuilder + ""]""; } }",0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public abstract class TemplateBaseBuilder extends FbBotMillResponseBuilder { protected AttachmentMessageBuilder messageBuilder; @Override
	public String toString() { return ""TemplateBaseBuilder [messageBuilder="" + messageBuilder + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
  public abstract class TemplateBaseBuilder extends FbBotMillResponseBuilder { /**
 * Base class for {@link FbBotMillResponseBuilder} that builds a template.
 * 
 * @author Donato Rimenti
 */  protected AttachmentMessageBuilder messageBuilder; /**
	 * The delegated builder for a message containing a template.
	 */  @Override
	public String toString() { return ""TemplateBaseBuilder [messageBuilder="" + messageBuilder + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.factory.TemplateBaseBuilder#
	 * toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/factory/TextMessageBuilder.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.factory;

import java.util.ArrayList;

import co.aurasphere.botmill.fb.model.base.User;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;
import co.aurasphere.botmill.fb.model.outcoming.message.FbBotMillMessageResponse;
import co.aurasphere.botmill.fb.model.outcoming.message.Message;
import co.aurasphere.botmill.fb.model.outcoming.message.TextMessage;
import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply;


/**
 * A builder for a message that contains only a plain text message.
 * 
 * @author Donato Rimenti
 */
public class TextMessageBuilder extends MessageBaseBuilder {

	/**
	 * The message of the response.
	 */
	private String messageText;

	/**
	 * Default constructor. Creates a builder for a message that contains only a
	 * plain text message.
	 * 
	 * @param messageText
	 *            the text of the message.
	 */
	TextMessageBuilder(String messageText) {
		this.messageText = messageText;
	}

	/**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param title
	 *            the quick reply button label. It can't be empty.
	 * @param payload
	 *            the payload sent back when the button is pressed. It can't be
	 *            empty.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */
	public TextMessageBuilder addQuickReply(String title, String payload) {
		if (this.quickReplies == null) {
			this.quickReplies = new ArrayList<QuickReply>();
		}
		this.quickReplies.add(new QuickReply(title, payload));
		return this;
	}
	
	/**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param title
	 *            the quick reply button label. It can't be empty.
	 * @param payload
	 *            the payload sent back when the button is pressed. It can't be
	 *            empty.
	 * @param imageUrl
	 *            the image to show on the quick reply.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */
	public TextMessageBuilder addQuickReply(String title, String payload, String imageUrl) {
		if (this.quickReplies == null) {
			this.quickReplies = new ArrayList<QuickReply>();
		}
		this.quickReplies.add(new QuickReply(title, payload, imageUrl));
		return this;
	}

	/**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param reply
	 *            a quick reply object.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */
	public TextMessageBuilder addQuickReply(QuickReply reply) {
		if (this.quickReplies == null) {
			this.quickReplies = new ArrayList<QuickReply>();
		}
		this.quickReplies.add(reply);
		return this;
	}

	/**
	 * Adds a Location {@link QuickReply} to the current object.
	 *
	 * @param locationMessage            the location text
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */
	public TextMessageBuilder addQuickLocationReply(String locationMessage) {
		if (this.quickReplies == null) {
			this.quickReplies = new ArrayList<QuickReply>();
		}
		this.quickReplies.add(new QuickReply(locationMessage));
		return this;
	}

	/**
	 * {@inheritDoc} Returns a response containing a plain text message.
	 */
	public FbBotMillResponse build(MessageEnvelope envelope) {
		User recipient = getRecipient(envelope);
		Message message = new TextMessage(messageText);
		message.setQuickReplies(quickReplies);
		return new FbBotMillMessageResponse(recipient, message);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.factory.MessageBaseBuilder#toString
	 * ()
	 */
	@Override
	public String toString() {
		return ""TextMessageBuilder [messageText="" + messageText
				+ "", quickReplies="" + quickReplies + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.factory; public class TextMessageBuilder extends MessageBaseBuilder { private String messageText; TextMessageBuilder(String messageText) { this.messageText = messageText; } public TextMessageBuilder addQuickReply(String title, String payload) { if (this.quickReplies == null) { this.quickReplies = new ArrayList<QuickReply>(); } this.quickReplies.add(new QuickReply(title, payload)); return this; } public TextMessageBuilder addQuickReply(String title, String payload, String imageUrl) { if (this.quickReplies == null) { this.quickReplies = new ArrayList<QuickReply>(); } this.quickReplies.add(new QuickReply(title, payload, imageUrl)); return this; } public TextMessageBuilder addQuickReply(QuickReply reply) { if (this.quickReplies == null) { this.quickReplies = new ArrayList<QuickReply>(); } this.quickReplies.add(reply); return this; } public TextMessageBuilder addQuickLocationReply(String locationMessage) { if (this.quickReplies == null) { this.quickReplies = new ArrayList<QuickReply>(); } this.quickReplies.add(new QuickReply(locationMessage)); return this; } public FbBotMillResponse build(MessageEnvelope envelope) { User recipient = getRecipient(envelope); Message message = new TextMessage(messageText); message.setQuickReplies(quickReplies); return new FbBotMillMessageResponse(recipient, message); } @Override
	public String toString() { return ""TextMessageBuilder [messageText="" + messageText
				+ "", quickReplies="" + quickReplies + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.factory; public class TextMessageBuilder extends MessageBaseBuilder { private String messageText; TextMessageBuilder(String messageText) { this.messageText = messageText; } public TextMessageBuilder addQuickReply(String title, String payload) { if (this.quickReplies == null) { this.quickReplies = new ArrayList<QuickReply>(); } this.quickReplies.add(new QuickReply(title, payload)); return this; } public TextMessageBuilder addQuickReply(String title, String payload, String imageUrl) { if (this.quickReplies == null) { this.quickReplies = new ArrayList<QuickReply>(); } this.quickReplies.add(new QuickReply(title, payload, imageUrl)); return this; } public TextMessageBuilder addQuickReply(QuickReply reply) { if (this.quickReplies == null) { this.quickReplies = new ArrayList<QuickReply>(); } this.quickReplies.add(reply); return this; } public TextMessageBuilder addQuickLocationReply(String locationMessage) { if (this.quickReplies == null) { this.quickReplies = new ArrayList<QuickReply>(); } this.quickReplies.add(new QuickReply(locationMessage)); return this; } public FbBotMillResponse build(MessageEnvelope envelope) { User recipient = getRecipient(envelope); Message message = new TextMessage(messageText); message.setQuickReplies(quickReplies); return new FbBotMillMessageResponse(recipient, message); } @Override
	public String toString() { return ""TextMessageBuilder [messageText="" + messageText
				+ "", quickReplies="" + quickReplies + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.factory; 
import java.util.ArrayList; 
import co.aurasphere.botmill.fb.model.base.User; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; import co.aurasphere.botmill.fb.model.outcoming.message.FbBotMillMessageResponse; import co.aurasphere.botmill.fb.model.outcoming.message.Message; import co.aurasphere.botmill.fb.model.outcoming.message.TextMessage; import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply; 
  public class TextMessageBuilder extends MessageBaseBuilder { /**
 * A builder for a message that contains only a plain text message.
 * 
 * @author Donato Rimenti
 */  private String messageText; /**
	 * The message of the response.
	 */  TextMessageBuilder(String messageText) { this.messageText = messageText; } /**
	 * Default constructor. Creates a builder for a message that contains only a
	 * plain text message.
	 * 
	 * @param messageText
	 *            the text of the message.
	 */  public TextMessageBuilder addQuickReply(String title, String payload) { if (this.quickReplies == null) { this.quickReplies = new ArrayList<QuickReply>(); } this.quickReplies.add(new QuickReply(title, payload)); return this; } /**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param title
	 *            the quick reply button label. It can't be empty.
	 * @param payload
	 *            the payload sent back when the button is pressed. It can't be
	 *            empty.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */ 	 public TextMessageBuilder addQuickReply(String title, String payload, String imageUrl) { if (this.quickReplies == null) { this.quickReplies = new ArrayList<QuickReply>(); } this.quickReplies.add(new QuickReply(title, payload, imageUrl)); return this; } /**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param title
	 *            the quick reply button label. It can't be empty.
	 * @param payload
	 *            the payload sent back when the button is pressed. It can't be
	 *            empty.
	 * @param imageUrl
	 *            the image to show on the quick reply.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */  public TextMessageBuilder addQuickReply(QuickReply reply) { if (this.quickReplies == null) { this.quickReplies = new ArrayList<QuickReply>(); } this.quickReplies.add(reply); return this; } /**
	 * Adds a {@link QuickReply} to the current object.
	 *
	 * @param reply
	 *            a quick reply object.
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */  public TextMessageBuilder addQuickLocationReply(String locationMessage) { if (this.quickReplies == null) { this.quickReplies = new ArrayList<QuickReply>(); } this.quickReplies.add(new QuickReply(locationMessage)); return this; } /**
	 * Adds a Location {@link QuickReply} to the current object.
	 *
	 * @param locationMessage            the location text
	 * @return this builder.
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies""
	 *      > Facebook's Messenger Platform Quick Replies Documentation</a>
	 */  public FbBotMillResponse build(MessageEnvelope envelope) { User recipient = getRecipient(envelope); Message message = new TextMessage(messageText); message.setQuickReplies(quickReplies); return new FbBotMillMessageResponse(recipient, message); } /**
	 * {@inheritDoc} Returns a response containing a plain text message.
	 */  @Override
	public String toString() { return ""TextMessageBuilder [messageText="" + messageText
				+ "", quickReplies="" + quickReplies + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.factory.MessageBaseBuilder#toString
	 * ()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/message/AttachmentMessage.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.message;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import co.aurasphere.botmill.fb.model.base.Attachment;


/**
 * A {@link Message} which contains an {@link Attachment}.
 * 
 * @author Donato Rimenti
 * 
 */
public class AttachmentMessage extends Message {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The attachment associated with this message.
	 */
	@Valid
	@NotNull
	private Attachment attachment;

	/**
	 * Instantiates a new attachment message.
	 *
	 * @param attachment
	 *            the {@link #attachment}.
	 */
	public AttachmentMessage(Attachment attachment) {
		this.attachment = attachment;
	}

	/**
	 * Gets the {@link #attachment}.
	 *
	 * @return the {@link #attachment}.
	 */
	public Attachment getAttachment() {
		return attachment;
	}

	/**
	 * Sets the {@link #attachment}.
	 *
	 * @param attachment
	 *            the {@link #attachment} to set.
	 */
	public void setAttachment(Attachment attachment) {
		this.attachment = attachment;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((attachment == null) ? 0 : attachment.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		AttachmentMessage other = (AttachmentMessage) obj;
		if (attachment == null) {
			if (other.attachment != null)
				return false;
		} else if (!attachment.equals(other.attachment))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""AttachmentMessage [attachment="" + attachment
				+ "", quickReplies="" + quickReplies + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.message; public class AttachmentMessage extends Message { private static final long serialVersionUID = 1L; @Valid
	@NotNull
	private Attachment attachment; public AttachmentMessage(Attachment attachment) { this.attachment = attachment; } public Attachment getAttachment() { return attachment; } public void setAttachment(Attachment attachment) { this.attachment = attachment; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((attachment == null) ? 0 : attachment.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; AttachmentMessage other = (AttachmentMessage) obj; if (attachment == null) { if (other.attachment != null)
				return false; } else if (!attachment.equals(other.attachment))
			return false; return true; } @Override
	public String toString() { return ""AttachmentMessage [attachment="" + attachment
				+ "", quickReplies="" + quickReplies + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.message; public class AttachmentMessage extends Message { private static final long serialVersionUID = 1L; @Valid
	@NotNull
	private Attachment attachment; public AttachmentMessage(Attachment attachment) { this.attachment = attachment; } public Attachment getAttachment() { return attachment; } public void setAttachment(Attachment attachment) { this.attachment = attachment; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((attachment == null) ? 0 : attachment.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; AttachmentMessage other = (AttachmentMessage) obj; if (attachment == null) { if (other.attachment != null)
				return false; } else if (!attachment.equals(other.attachment))
			return false; return true; } @Override
	public String toString() { return ""AttachmentMessage [attachment="" + attachment
				+ "", quickReplies="" + quickReplies + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.message; 
import javax.validation.Valid; import javax.validation.constraints.NotNull; 
import co.aurasphere.botmill.fb.model.base.Attachment; 
  public class AttachmentMessage extends Message { /**
 * A {@link Message} which contains an {@link Attachment}.
 * 
 * @author Donato Rimenti
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @Valid
	@NotNull
	private Attachment attachment; /**
	 * The attachment associated with this message.
	 */  public AttachmentMessage(Attachment attachment) { this.attachment = attachment; } /**
	 * Instantiates a new attachment message.
	 *
	 * @param attachment
	 *            the {@link #attachment}.
	 */  public Attachment getAttachment() { return attachment; } /**
	 * Gets the {@link #attachment}.
	 *
	 * @return the {@link #attachment}.
	 */  public void setAttachment(Attachment attachment) { this.attachment = attachment; } /**
	 * Sets the {@link #attachment}.
	 *
	 * @param attachment
	 *            the {@link #attachment} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((attachment == null) ? 0 : attachment.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; AttachmentMessage other = (AttachmentMessage) obj; if (attachment == null) { if (other.attachment != null)
				return false; } else if (!attachment.equals(other.attachment))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""AttachmentMessage [attachment="" + attachment
				+ "", quickReplies="" + quickReplies + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/message/FbBotMillMessageResponse.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.message;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import co.aurasphere.botmill.fb.model.base.User;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;


/**
 * A {@link FbBotMillResponse} which replies with a {@link Message}.
 * 
 * @author Donato Rimenti
 * 
 */
public class FbBotMillMessageResponse extends FbBotMillResponse {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The message associated with this reply.
	 */
	@Valid
	@NotNull
	private Message message;

	/**
	 * Instantiates a new FbBotMillMessageResponse.
	 *
	 * @param recipient
	 *            the {@link FbBotMillResponse#recipient}.
	 * @param message
	 *            the {@link #message}.
	 */
	public FbBotMillMessageResponse(User recipient, Message message) {
		this.recipient = recipient;
		this.message = message;
	}

	/**
	 * Gets the {@link #message}.
	 *
	 * @return the {@link #message}.
	 */
	public Message getMessage() {
		return message;
	}

	/**
	 * Sets the {@link #message}.
	 *
	 * @param message
	 *            the {@link #message} to set.
	 */
	public void setMessage(Message message) {
		this.message = message;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((message == null) ? 0 : message.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse#equals(java
	 * .lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		FbBotMillMessageResponse other = (FbBotMillMessageResponse) obj;
		if (message == null) {
			if (other.message != null)
				return false;
		} else if (!message.equals(other.message))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse#toString()
	 */
	@Override
	public String toString() {
		return ""FbBotMillMessageResponse [message="" + message + "", recipient=""
				+ recipient + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.message; public class FbBotMillMessageResponse extends FbBotMillResponse { private static final long serialVersionUID = 1L; @Valid
	@NotNull
	private Message message; public FbBotMillMessageResponse(User recipient, Message message) { this.recipient = recipient; this.message = message; } public Message getMessage() { return message; } public void setMessage(Message message) { this.message = message; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((message == null) ? 0 : message.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; FbBotMillMessageResponse other = (FbBotMillMessageResponse) obj; if (message == null) { if (other.message != null)
				return false; } else if (!message.equals(other.message))
			return false; return true; } @Override
	public String toString() { return ""FbBotMillMessageResponse [message="" + message + "", recipient=""
				+ recipient + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.message; public class FbBotMillMessageResponse extends FbBotMillResponse { private static final long serialVersionUID = 1L; @Valid
	@NotNull
	private Message message; public FbBotMillMessageResponse(User recipient, Message message) { this.recipient = recipient; this.message = message; } public Message getMessage() { return message; } public void setMessage(Message message) { this.message = message; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((message == null) ? 0 : message.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; FbBotMillMessageResponse other = (FbBotMillMessageResponse) obj; if (message == null) { if (other.message != null)
				return false; } else if (!message.equals(other.message))
			return false; return true; } @Override
	public String toString() { return ""FbBotMillMessageResponse [message="" + message + "", recipient=""
				+ recipient + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.message; 
import javax.validation.Valid; import javax.validation.constraints.NotNull; 
import co.aurasphere.botmill.fb.model.base.User; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; 
  public class FbBotMillMessageResponse extends FbBotMillResponse { /**
 * A {@link FbBotMillResponse} which replies with a {@link Message}.
 * 
 * @author Donato Rimenti
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @Valid
	@NotNull
	private Message message; /**
	 * The message associated with this reply.
	 */  public FbBotMillMessageResponse(User recipient, Message message) { this.recipient = recipient; this.message = message; } /**
	 * Instantiates a new FbBotMillMessageResponse.
	 *
	 * @param recipient
	 *            the {@link FbBotMillResponse#recipient}.
	 * @param message
	 *            the {@link #message}.
	 */  public Message getMessage() { return message; } /**
	 * Gets the {@link #message}.
	 *
	 * @return the {@link #message}.
	 */  public void setMessage(Message message) { this.message = message; } /**
	 * Sets the {@link #message}.
	 *
	 * @param message
	 *            the {@link #message} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((message == null) ? 0 : message.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; FbBotMillMessageResponse other = (FbBotMillMessageResponse) obj; if (message == null) { if (other.message != null)
				return false; } else if (!message.equals(other.message))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse#equals(java
	 * .lang.Object)
	 */  @Override
	public String toString() { return ""FbBotMillMessageResponse [message="" + message + "", recipient=""
				+ recipient + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/message/Message.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.message;

import java.io.Serializable;
import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.Size;

import co.aurasphere.botmill.fb.internal.util.validation.FbBotMillValidationConstants;
import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply;

import com.google.gson.annotations.SerializedName;


/**
 * An object that represents the content of a {@link FbBotMillMessageResponse}.
 * 
 * @author Donato Rimenti
 * 
 */
public abstract class Message implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The quick replies of this message.
	 */
	@Valid
	@Size(max = FbBotMillValidationConstants.QUICK_REPLY_MAX_ELEMENTS)
	@SerializedName(""quick_replies"")
	protected List<QuickReply> quickReplies;

	/**
	 * Gets the {@link #quickReplies}.
	 *
	 * @return the {@link #quickReplies}.
	 */
	public List<QuickReply> getQuickReplies() {
		return quickReplies;
	}

	/**
	 * Sets the {@link #quickReplies}.
	 *
	 * @param quickReplies
	 *            the {@link #quickReplies} to set.
	 */
	public void setQuickReplies(List<QuickReply> quickReplies) {
		this.quickReplies = quickReplies;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((quickReplies == null) ? 0 : quickReplies.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Message other = (Message) obj;
		if (quickReplies == null) {
			if (other.quickReplies != null)
				return false;
		} else if (!quickReplies.equals(other.quickReplies))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""Message [quickReplies="" + quickReplies + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.message; public abstract class Message implements Serializable { private static final long serialVersionUID = 1L; @Valid
	@Size(max = FbBotMillValidationConstants.QUICK_REPLY_MAX_ELEMENTS)
	@SerializedName(""quick_replies"")
	protected List<QuickReply> quickReplies; public List<QuickReply> getQuickReplies() { return quickReplies; } public void setQuickReplies(List<QuickReply> quickReplies) { this.quickReplies = quickReplies; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((quickReplies == null) ? 0 : quickReplies.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Message other = (Message) obj; if (quickReplies == null) { if (other.quickReplies != null)
				return false; } else if (!quickReplies.equals(other.quickReplies))
			return false; return true; } @Override
	public String toString() { return ""Message [quickReplies="" + quickReplies + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.message; public abstract class Message implements Serializable { private static final long serialVersionUID = 1L; @Valid
	@Size(max = FbBotMillValidationConstants.QUICK_REPLY_MAX_ELEMENTS)
	@SerializedName(""quick_replies"")
	protected List<QuickReply> quickReplies; public List<QuickReply> getQuickReplies() { return quickReplies; } public void setQuickReplies(List<QuickReply> quickReplies) { this.quickReplies = quickReplies; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((quickReplies == null) ? 0 : quickReplies.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Message other = (Message) obj; if (quickReplies == null) { if (other.quickReplies != null)
				return false; } else if (!quickReplies.equals(other.quickReplies))
			return false; return true; } @Override
	public String toString() { return ""Message [quickReplies="" + quickReplies + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.message; 
import java.io.Serializable; import java.util.List; 
import javax.validation.Valid; import javax.validation.constraints.Size; 
import co.aurasphere.botmill.fb.internal.util.validation.FbBotMillValidationConstants; import co.aurasphere.botmill.fb.model.outcoming.quickreply.QuickReply; 
import com.google.gson.annotations.SerializedName; 
  public abstract class Message implements Serializable { /**
 * An object that represents the content of a {@link FbBotMillMessageResponse}.
 * 
 * @author Donato Rimenti
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @Valid
	@Size(max = FbBotMillValidationConstants.QUICK_REPLY_MAX_ELEMENTS)
	@SerializedName(""quick_replies"")
	protected List<QuickReply> quickReplies; /**
	 * The quick replies of this message.
	 */  public List<QuickReply> getQuickReplies() { return quickReplies; } /**
	 * Gets the {@link #quickReplies}.
	 *
	 * @return the {@link #quickReplies}.
	 */  public void setQuickReplies(List<QuickReply> quickReplies) { this.quickReplies = quickReplies; } /**
	 * Sets the {@link #quickReplies}.
	 *
	 * @param quickReplies
	 *            the {@link #quickReplies} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((quickReplies == null) ? 0 : quickReplies.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Message other = (Message) obj; if (quickReplies == null) { if (other.quickReplies != null)
				return false; } else if (!quickReplies.equals(other.quickReplies))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""Message [quickReplies="" + quickReplies + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/message/TextMessage.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.message;

import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotBlank;

import co.aurasphere.botmill.fb.internal.util.validation.FbBotMillValidationConstants;


/**
 * A {@link Message} which contains text.
 * 
 * @author Donato Rimenti
 * 
 */
public class TextMessage extends Message {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The text of this message.
	 */
	@Size(max = FbBotMillValidationConstants.MESSAGE_MAX_LENGTH)
	@NotBlank
	private String text;

	/**
	 * Instantiates a new TextMessage.
	 *
	 * @param text
	 *            the {@link #text}.
	 */
	public TextMessage(String text) {
		this.text = text;
	}

	/**
	 * Gets the {@link #text}.
	 *
	 * @return the {@link #text}.
	 */
	public String getText() {
		return text;
	}

	/**
	 * Sets the {@link #text}.
	 *
	 * @param text
	 *            the {@link #text} to set.
	 */
	public void setText(String text) {
		this.text = text;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.message.Message#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((text == null) ? 0 : text.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.message.Message#equals(java.
	 * lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		TextMessage other = (TextMessage) obj;
		if (text == null) {
			if (other.text != null)
				return false;
		} else if (!text.equals(other.text))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.message.Message#toString()
	 */
	@Override
	public String toString() {
		return ""TextMessage [text="" + text + "", quickReplies="" + quickReplies
				+ ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.message; public class TextMessage extends Message { private static final long serialVersionUID = 1L; @Size(max = FbBotMillValidationConstants.MESSAGE_MAX_LENGTH)
	@NotBlank
	private String text; public TextMessage(String text) { this.text = text; } public String getText() { return text; } public void setText(String text) { this.text = text; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((text == null) ? 0 : text.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; TextMessage other = (TextMessage) obj; if (text == null) { if (other.text != null)
				return false; } else if (!text.equals(other.text))
			return false; return true; } @Override
	public String toString() { return ""TextMessage [text="" + text + "", quickReplies="" + quickReplies
				+ ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.message; public class TextMessage extends Message { private static final long serialVersionUID = 1L; @Size(max = FbBotMillValidationConstants.MESSAGE_MAX_LENGTH)
	@NotBlank
	private String text; public TextMessage(String text) { this.text = text; } public String getText() { return text; } public void setText(String text) { this.text = text; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((text == null) ? 0 : text.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; TextMessage other = (TextMessage) obj; if (text == null) { if (other.text != null)
				return false; } else if (!text.equals(other.text))
			return false; return true; } @Override
	public String toString() { return ""TextMessage [text="" + text + "", quickReplies="" + quickReplies
				+ ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.message; 
import javax.validation.constraints.Size; 
import org.hibernate.validator.constraints.NotBlank; 
import co.aurasphere.botmill.fb.internal.util.validation.FbBotMillValidationConstants; 
  public class TextMessage extends Message { /**
 * A {@link Message} which contains text.
 * 
 * @author Donato Rimenti
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @Size(max = FbBotMillValidationConstants.MESSAGE_MAX_LENGTH)
	@NotBlank
	private String text; /**
	 * The text of this message.
	 */  public TextMessage(String text) { this.text = text; } /**
	 * Instantiates a new TextMessage.
	 *
	 * @param text
	 *            the {@link #text}.
	 */  public String getText() { return text; } /**
	 * Gets the {@link #text}.
	 *
	 * @return the {@link #text}.
	 */  public void setText(String text) { this.text = text; } /**
	 * Sets the {@link #text}.
	 *
	 * @param text
	 *            the {@link #text} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((text == null) ? 0 : text.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.message.Message#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; TextMessage other = (TextMessage) obj; if (text == null) { if (other.text != null)
				return false; } else if (!text.equals(other.text))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.message.Message#equals(java.
	 * lang.Object)
	 */  @Override
	public String toString() { return ""TextMessage [text="" + text + "", quickReplies="" + quickReplies
				+ ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.message.Message#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/payload/AttachmentPayload.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.payload;

import co.aurasphere.botmill.fb.model.base.Attachment;
import co.aurasphere.botmill.fb.model.base.Payload;

import com.google.gson.annotations.SerializedName;

/**
 * A {@link Payload} used for an {@link Attachment}.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */
public class AttachmentPayload extends UrlPayload {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;
	
	/** The attachment id. */
	@SerializedName(""attachment_id"")
	private String attachmentId;

	/**
	 * Flag that indicates whether this attachment can be reused. Used only with
	 * Facebook's Messenger Upload API.
	 */
	@SerializedName(""is_reusable"")
	private boolean isReusable;

	
	public AttachmentPayload() {
	}
	
	/**
	 * Instantiates a new AttachmentPayload.
	 *
	 * @param url
	 *            the {@link UrlPayload#url}.
	 */
	public AttachmentPayload(String url) {
		super(url);
	}

	/**
	 * Instantiates a new AttachmentPayload.
	 *
	 * @param url
	 *            the {@link UrlPayload#url}.
	 * @param isReusable
	 *            the {@link #isReusable}.
	 */
	public AttachmentPayload(String url, boolean isReusable) {
		super(url);
		this.isReusable = isReusable;
	}

	/**
	 * Gets the {@link #isReusable}.
	 *
	 * @return the {@link #isReusable}.
	 */
	public boolean isReusable() {
		return isReusable;
	}

	/**
	 * Sets the {@link #isReusable}.
	 *
	 * @param isReusable
	 *            the {@link #isReusable} to set.
	 */
	public void setReusable(boolean isReusable) {
		this.isReusable = isReusable;
	}
	
	

	/**
	 * Gets the attachment id.
	 *
	 * @return the attachment id
	 */
	public String getAttachmentId() {
		return attachmentId;
	}

	/**
	 * Sets the attachment id.
	 *
	 * @param attachmentId the new attachment id
	 */
	public void setAttachmentId(String attachmentId) {
		this.attachmentId = attachmentId;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.payload.UrlPayload#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + (isReusable ? 1231 : 1237);
		return result;
	}
	
	

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.payload.UrlPayload#equals(java
	 * .lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		AttachmentPayload other = (AttachmentPayload) obj;
		if (isReusable != other.isReusable)
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.payload.UrlPayload#toString()
	 */
	@Override
	public String toString() {
		return ""AttachmentPayload [isReusable="" + isReusable + ""]"";
	}

}","package co.aurasphere.botmill.fb.model.outcoming.payload; public class AttachmentPayload extends UrlPayload { private static final long serialVersionUID = 1L; @SerializedName(""attachment_id"")
	private String attachmentId; @SerializedName(""is_reusable"")
	private boolean isReusable; public AttachmentPayload() { } public AttachmentPayload(String url) { super(url); } public AttachmentPayload(String url, boolean isReusable) { super(url); this.isReusable = isReusable; } public boolean isReusable() { return isReusable; } public void setReusable(boolean isReusable) { this.isReusable = isReusable; } public String getAttachmentId() { return attachmentId; } public void setAttachmentId(String attachmentId) { this.attachmentId = attachmentId; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + (isReusable ? 1231 : 1237); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; AttachmentPayload other = (AttachmentPayload) obj; if (isReusable != other.isReusable)
			return false; return true; } @Override
	public String toString() { return ""AttachmentPayload [isReusable="" + isReusable + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.payload; public class AttachmentPayload extends UrlPayload { private static final long serialVersionUID = 1L; @SerializedName(""attachment_id"")
	private String attachmentId; @SerializedName(""is_reusable"")
	private boolean isReusable; public AttachmentPayload() { } public AttachmentPayload(String url) { super(url); } public AttachmentPayload(String url, boolean isReusable) { super(url); this.isReusable = isReusable; } public boolean isReusable() { return isReusable; } public void setReusable(boolean isReusable) { this.isReusable = isReusable; } public String getAttachmentId() { return attachmentId; } public void setAttachmentId(String attachmentId) { this.attachmentId = attachmentId; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + (isReusable ? 1231 : 1237); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; AttachmentPayload other = (AttachmentPayload) obj; if (isReusable != other.isReusable)
			return false; return true; } @Override
	public String toString() { return ""AttachmentPayload [isReusable="" + isReusable + ""]""; } }","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.payload; 
import co.aurasphere.botmill.fb.model.base.Attachment; import co.aurasphere.botmill.fb.model.base.Payload; 
import com.google.gson.annotations.SerializedName;  /**
 * A {@link Payload} used for an {@link Attachment}.
 * 
 * @author Donato Rimenti
 * @since 2.0.0
 */ public class AttachmentPayload extends UrlPayload {  /**
	 * The serial version UID.
	 */ private static final long serialVersionUID = 1L; 	 /** The attachment id. */ @SerializedName(""attachment_id"")
	private String attachmentId;  /**
	 * Flag that indicates whether this attachment can be reused. Used only with
	 * Facebook's Messenger Upload API.
	 */ @SerializedName(""is_reusable"")
	private boolean isReusable; 
	 public AttachmentPayload() { } 	 /**
	 * Instantiates a new AttachmentPayload.
	 *
	 * @param url
	 *            the {@link UrlPayload#url}.
	 */ public AttachmentPayload(String url) { super(url); }  /**
	 * Instantiates a new AttachmentPayload.
	 *
	 * @param url
	 *            the {@link UrlPayload#url}.
	 * @param isReusable
	 *            the {@link #isReusable}.
	 */ public AttachmentPayload(String url, boolean isReusable) { super(url); this.isReusable = isReusable; }  /**
	 * Gets the {@link #isReusable}.
	 *
	 * @return the {@link #isReusable}.
	 */ public boolean isReusable() { return isReusable; }  /**
	 * Sets the {@link #isReusable}.
	 *
	 * @param isReusable
	 *            the {@link #isReusable} to set.
	 */ public void setReusable(boolean isReusable) { this.isReusable = isReusable; } 	
	
  public String getAttachmentId() { return attachmentId; } /**
	 * Gets the attachment id.
	 *
	 * @return the attachment id
	 */  public void setAttachmentId(String attachmentId) { this.attachmentId = attachmentId; } /**
	 * Sets the attachment id.
	 *
	 * @param attachmentId the new attachment id
	 */  @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + (isReusable ? 1231 : 1237); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.payload.UrlPayload#hashCode()
	 */ 	
	
 @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; AttachmentPayload other = (AttachmentPayload) obj; if (isReusable != other.isReusable)
			return false; return true; }  /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.payload.UrlPayload#equals(java
	 * .lang.Object)
	 */ @Override
	public String toString() { return ""AttachmentPayload [isReusable="" + isReusable + ""]""; }  }"
src/main/java/co/aurasphere/botmill/fb/model/outcoming/payload/PayloadType.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.payload;

import com.google.gson.annotations.SerializedName;


/**
 * Enum that represents the all available payloads.
 * 
 * @author Donato Rimenti
 * 
 */
public enum PayloadType {

	/**
	 * The button.
	 */
	@SerializedName(""button"")
	BUTTON,

	/**
	 * The generic.
	 */
	@SerializedName(""generic"")
	GENERIC,

	/**
	 * The list.
	 */
	@SerializedName(""list"")
	LIST,

	/**
	 * The receipt.
	 */
	@SerializedName(""receipt"")
	RECEIPT,

	/**
	 * The airline itinerary.
	 */
	@SerializedName(""airline_itinerary"")
	AIRLINE_ITINERARY,

	/**
	 * The airline boardingpass.
	 */
	@SerializedName(""airline_boardingpass"")
	AIRLINE_BOARDINGPASS,

	/**
	 * The airline update.
	 */
	@SerializedName(""airline_update"")
	AIRLINE_UPDATE,

	/**
	 * The airline checkin.
	 */
	@SerializedName(""airline_checkin"")
	AIRLINE_CHECKIN;
}","package co.aurasphere.botmill.fb.model.outcoming.payload; public enum PayloadType { @SerializedName(""airline_checkin"")
	AIRLINE_CHECKIN; }",0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.payload; public enum PayloadType { @SerializedName(""airline_checkin"")
	AIRLINE_CHECKIN; }","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.payload; 
import com.google.gson.annotations.SerializedName; 
  public enum PayloadType { /**
 * Enum that represents the all available payloads.
 * 
 * @author Donato Rimenti
 * 
 */  /**
	 * The button.
	 */  /**
	 * The generic.
	 */  /**
	 * The list.
	 */  /**
	 * The receipt.
	 */  /**
	 * The airline itinerary.
	 */  /**
	 * The airline boardingpass.
	 */  /**
	 * The airline update.
	 */  @SerializedName(""airline_checkin"")
	AIRLINE_CHECKIN; }"
src/main/java/co/aurasphere/botmill/fb/model/outcoming/payload/UrlPayload.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.payload;

import org.hibernate.validator.constraints.NotBlank;

import co.aurasphere.botmill.fb.model.base.Payload;


/**
 * A {@link Payload} which contains an URL.
 * 
 * @author Donato Rimenti
 * 
 */
public class UrlPayload implements Payload {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The URL associated with this payload.
	 */
	private String url;

	/**
	 * Instantiates a new UrlPayload.
	 */
	public UrlPayload() {
	}

	/**
	 * Instantiates a new UrlPayload.
	 *
	 * @param url
	 *            the {@link #url}.
	 */
	public UrlPayload(String url) {
		this.url = url;
	}

	/**
	 * Gets the {@link #url}.
	 *
	 * @return the {@link #url}.
	 */
	public String getUrl() {
		return url;
	}

	/**
	 * Sets the {@link #url}.
	 *
	 * @param url
	 *            the {@link #url} to set.
	 */
	public void setUrl(String url) {
		this.url = url;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((url == null) ? 0 : url.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		UrlPayload other = (UrlPayload) obj;
		if (url == null) {
			if (other.url != null)
				return false;
		} else if (!url.equals(other.url))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""UrlPayload [url="" + url + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.payload; public class UrlPayload implements Payload { private static final long serialVersionUID = 1L; private String url; public UrlPayload() { } public UrlPayload(String url) { this.url = url; } public String getUrl() { return url; } public void setUrl(String url) { this.url = url; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((url == null) ? 0 : url.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; UrlPayload other = (UrlPayload) obj; if (url == null) { if (other.url != null)
				return false; } else if (!url.equals(other.url))
			return false; return true; } @Override
	public String toString() { return ""UrlPayload [url="" + url + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.payload; public class UrlPayload implements Payload { private static final long serialVersionUID = 1L; private String url; public UrlPayload() { } public UrlPayload(String url) { this.url = url; } public String getUrl() { return url; } public void setUrl(String url) { this.url = url; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((url == null) ? 0 : url.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; UrlPayload other = (UrlPayload) obj; if (url == null) { if (other.url != null)
				return false; } else if (!url.equals(other.url))
			return false; return true; } @Override
	public String toString() { return ""UrlPayload [url="" + url + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.payload; 
import org.hibernate.validator.constraints.NotBlank; 
import co.aurasphere.botmill.fb.model.base.Payload; 
  public class UrlPayload implements Payload { /**
 * A {@link Payload} which contains an URL.
 * 
 * @author Donato Rimenti
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  private String url; /**
	 * The URL associated with this payload.
	 */  public UrlPayload() { } /**
	 * Instantiates a new UrlPayload.
	 */  public UrlPayload(String url) { this.url = url; } /**
	 * Instantiates a new UrlPayload.
	 *
	 * @param url
	 *            the {@link #url}.
	 */  public String getUrl() { return url; } /**
	 * Gets the {@link #url}.
	 *
	 * @return the {@link #url}.
	 */  public void setUrl(String url) { this.url = url; } /**
	 * Sets the {@link #url}.
	 *
	 * @param url
	 *            the {@link #url} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((url == null) ? 0 : url.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; UrlPayload other = (UrlPayload) obj; if (url == null) { if (other.url != null)
				return false; } else if (!url.equals(other.url))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""UrlPayload [url="" + url + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/quickreply/QuickReply.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.quickreply;

import java.io.Serializable;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotBlank;

import com.google.gson.annotations.SerializedName;


/**
 * The Class QuickReply.
 */
public class QuickReply implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The content type. */
	@NotNull
	@SerializedName(""content_type"")
	private QuickReplyType contentType;

	/** The image url. */
	@SerializedName(""image_url"")
	private String imageUrl;

	/** The title. */
	@Size(max = 20)
	@NotBlank
	private String title;

	/** The payload. */
	@Size(max = 1000)
	private String payload;

	/**
	 * Instantiates a new quick reply.
	 *
	 * @param title
	 *            the title of the quick reply payload
	 * @param payload
	 *            the payload itself
	 */
	public QuickReply(String title, String payload) {
		this.contentType = QuickReplyType.TEXT;
		this.title = title;
		this.payload = payload;
	}

	/**
	 * Instantiates a new quick reply with the following parameters.
	 * 
	 * @param title
	 *            the title of the quick reply payload
	 * @param payload
	 *            the payload itself
	 * @param imageUrl
	 *            the url of the image that needs to be shown along within this
	 *            quick reply
	 */
	public QuickReply(String title, String payload, String imageUrl) {
		this.contentType = QuickReplyType.TEXT;
		this.title = title;
		this.payload = payload;
		this.imageUrl = imageUrl;
	}

	/**
	 * Instantiates a new location quick reply.
	 * 
	 * @param locationMessage
	 *            the location text
	 */
	public QuickReply(String locationMessage) {
		this.contentType = QuickReplyType.LOCATION;
		this.title = locationMessage;
	}

	/**
	 * Gets the payload.
	 *
	 * @return the payload
	 */
	public String getPayload() {
		return payload;
	}

	/**
	 * Sets the payload.
	 *
	 * @param payload
	 *            the new payload
	 */
	public void setPayload(String payload) {
		this.payload = payload;
	}

	/**
	 * Gets the content type.
	 *
	 * @return the content type
	 */
	public QuickReplyType getContentType() {
		return contentType;
	}

	/**
	 * Sets the content type.
	 *
	 * @param contentType
	 *            the new content type
	 */
	public void setContentType(QuickReplyType contentType) {
		this.contentType = contentType;
	}

	/**
	 * Gets the title.
	 *
	 * @return the title
	 */
	public String getTitle() {
		return title;
	}

	/**
	 * Sets the title.
	 *
	 * @param title
	 *            the new title
	 */
	public void setTitle(String title) {
		this.title = title;
	}

	/**
	 * Gets the image url.
	 *
	 * @return the image url
	 */
	public String getImageUrl() {
		return imageUrl;
	}

	/**
	 * Sets the image url.
	 *
	 * @param imageUrl
	 *            the new image url
	 */
	public void setImageUrl(String imageUrl) {
		this.imageUrl = imageUrl;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((contentType == null) ? 0 : contentType.hashCode());
		result = prime * result
				+ ((imageUrl == null) ? 0 : imageUrl.hashCode());
		result = prime * result + ((payload == null) ? 0 : payload.hashCode());
		result = prime * result + ((title == null) ? 0 : title.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		QuickReply other = (QuickReply) obj;
		if (contentType != other.contentType)
			return false;
		if (imageUrl == null) {
			if (other.imageUrl != null)
				return false;
		} else if (!imageUrl.equals(other.imageUrl))
			return false;
		if (payload == null) {
			if (other.payload != null)
				return false;
		} else if (!payload.equals(other.payload))
			return false;
		if (title == null) {
			if (other.title != null)
				return false;
		} else if (!title.equals(other.title))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""QuickReply [contentType="" + contentType + "", imageUrl=""
				+ imageUrl + "", title="" + title + "", payload="" + payload + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.quickreply; public class QuickReply implements Serializable { private static final long serialVersionUID = 1L; @NotNull
	@SerializedName(""content_type"")
	private QuickReplyType contentType; @SerializedName(""image_url"")
	private String imageUrl; @Size(max = 20)
	@NotBlank
	private String title; @Size(max = 1000)
	private String payload; public QuickReply(String title, String payload) { this.contentType = QuickReplyType.TEXT; this.title = title; this.payload = payload; } public QuickReply(String title, String payload, String imageUrl) { this.contentType = QuickReplyType.TEXT; this.title = title; this.payload = payload; this.imageUrl = imageUrl; } public QuickReply(String locationMessage) { this.contentType = QuickReplyType.LOCATION; this.title = locationMessage; } public String getPayload() { return payload; } public void setPayload(String payload) { this.payload = payload; } public QuickReplyType getContentType() { return contentType; } public void setContentType(QuickReplyType contentType) { this.contentType = contentType; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public String getImageUrl() { return imageUrl; } public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((contentType == null) ? 0 : contentType.hashCode()); result = prime * result
				+ ((imageUrl == null) ? 0 : imageUrl.hashCode()); result = prime * result + ((payload == null) ? 0 : payload.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; QuickReply other = (QuickReply) obj; if (contentType != other.contentType)
			return false; if (imageUrl == null) { if (other.imageUrl != null)
				return false; } else if (!imageUrl.equals(other.imageUrl))
			return false; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; return true; } @Override
	public String toString() { return ""QuickReply [contentType="" + contentType + "", imageUrl=""
				+ imageUrl + "", title="" + title + "", payload="" + payload + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.quickreply; public class QuickReply implements Serializable { private static final long serialVersionUID = 1L; @NotNull
	@SerializedName(""content_type"")
	private QuickReplyType contentType; @SerializedName(""image_url"")
	private String imageUrl; @Size(max = 20)
	@NotBlank
	private String title; @Size(max = 1000)
	private String payload; public QuickReply(String title, String payload) { this.contentType = QuickReplyType.TEXT; this.title = title; this.payload = payload; } public QuickReply(String title, String payload, String imageUrl) { this.contentType = QuickReplyType.TEXT; this.title = title; this.payload = payload; this.imageUrl = imageUrl; } public QuickReply(String locationMessage) { this.contentType = QuickReplyType.LOCATION; this.title = locationMessage; } public String getPayload() { return payload; } public void setPayload(String payload) { this.payload = payload; } public QuickReplyType getContentType() { return contentType; } public void setContentType(QuickReplyType contentType) { this.contentType = contentType; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public String getImageUrl() { return imageUrl; } public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((contentType == null) ? 0 : contentType.hashCode()); result = prime * result
				+ ((imageUrl == null) ? 0 : imageUrl.hashCode()); result = prime * result + ((payload == null) ? 0 : payload.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; QuickReply other = (QuickReply) obj; if (contentType != other.contentType)
			return false; if (imageUrl == null) { if (other.imageUrl != null)
				return false; } else if (!imageUrl.equals(other.imageUrl))
			return false; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; return true; } @Override
	public String toString() { return ""QuickReply [contentType="" + contentType + "", imageUrl=""
				+ imageUrl + "", title="" + title + "", payload="" + payload + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.quickreply; 
import java.io.Serializable; 
import javax.validation.constraints.NotNull; import javax.validation.constraints.Size; 
import org.hibernate.validator.constraints.NotBlank; 
import com.google.gson.annotations.SerializedName; 
  public class QuickReply implements Serializable { /**
 * The Class QuickReply.
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @NotNull
	@SerializedName(""content_type"")
	private QuickReplyType contentType; /** The content type. */  @SerializedName(""image_url"")
	private String imageUrl; /** The image url. */  @Size(max = 20)
	@NotBlank
	private String title; /** The title. */  @Size(max = 1000)
	private String payload; /** The payload. */  public QuickReply(String title, String payload) { this.contentType = QuickReplyType.TEXT; this.title = title; this.payload = payload; } /**
	 * Instantiates a new quick reply.
	 *
	 * @param title
	 *            the title of the quick reply payload
	 * @param payload
	 *            the payload itself
	 */  public QuickReply(String title, String payload, String imageUrl) { this.contentType = QuickReplyType.TEXT; this.title = title; this.payload = payload; this.imageUrl = imageUrl; } /**
	 * Instantiates a new quick reply with the following parameters.
	 * 
	 * @param title
	 *            the title of the quick reply payload
	 * @param payload
	 *            the payload itself
	 * @param imageUrl
	 *            the url of the image that needs to be shown along within this
	 *            quick reply
	 */  public QuickReply(String locationMessage) { this.contentType = QuickReplyType.LOCATION; this.title = locationMessage; } /**
	 * Instantiates a new location quick reply.
	 * 
	 * @param locationMessage
	 *            the location text
	 */  public String getPayload() { return payload; } /**
	 * Gets the payload.
	 *
	 * @return the payload
	 */  public void setPayload(String payload) { this.payload = payload; } /**
	 * Sets the payload.
	 *
	 * @param payload
	 *            the new payload
	 */  public QuickReplyType getContentType() { return contentType; } /**
	 * Gets the content type.
	 *
	 * @return the content type
	 */  public void setContentType(QuickReplyType contentType) { this.contentType = contentType; } /**
	 * Sets the content type.
	 *
	 * @param contentType
	 *            the new content type
	 */  public String getTitle() { return title; } /**
	 * Gets the title.
	 *
	 * @return the title
	 */  public void setTitle(String title) { this.title = title; } /**
	 * Sets the title.
	 *
	 * @param title
	 *            the new title
	 */  public String getImageUrl() { return imageUrl; } /**
	 * Gets the image url.
	 *
	 * @return the image url
	 */  public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; } /**
	 * Sets the image url.
	 *
	 * @param imageUrl
	 *            the new image url
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((contentType == null) ? 0 : contentType.hashCode()); result = prime * result
				+ ((imageUrl == null) ? 0 : imageUrl.hashCode()); result = prime * result + ((payload == null) ? 0 : payload.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; QuickReply other = (QuickReply) obj; if (contentType != other.contentType)
			return false; if (imageUrl == null) { if (other.imageUrl != null)
				return false; } else if (!imageUrl.equals(other.imageUrl))
			return false; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""QuickReply [contentType="" + contentType + "", imageUrl=""
				+ imageUrl + "", title="" + title + "", payload="" + payload + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/quickreply/QuickReplyType.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.quickreply;


/**
 * The Enum QuickReplyType.
 */
public enum QuickReplyType {

	/** The text. */
	TEXT,
	/** The location. */
	LOCATION;
}
",package co.aurasphere.botmill.fb.model.outcoming.quickreply; public enum QuickReplyType { LOCATION; },0 0 0 0 0,package co.aurasphere.botmill.fb.model.outcoming.quickreply; public enum QuickReplyType { LOCATION; } ,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.quickreply; 
  public enum QuickReplyType { /**
 * The Enum QuickReplyType.
 */  /** The text. */ LOCATION; } /** The location. */ "
src/test/java/co/aurasphere/botmill/fb/test/autoreply/template/AnnotatedTemplatedBehaviourConigTest.java,"package co.aurasphere.botmill.fb.test.autoreply.template;

import java.util.ArrayList;
import java.util.List;

import co.aurasphere.botmill.core.annotation.BotConfiguration;
import co.aurasphere.botmill.fb.FbBotConfiguration;
import co.aurasphere.botmill.fb.api.MessengerProfileApi;
import co.aurasphere.botmill.fb.model.outcoming.factory.ButtonFactory;
import co.aurasphere.botmill.fb.model.outcoming.template.button.Button;

@BotConfiguration
public class AnnotatedTemplatedBehaviourConigTest extends FbBotConfiguration {

	public AnnotatedTemplatedBehaviourConigTest() {
		List<Button> buttons = new ArrayList<Button>();
		buttons.add(ButtonFactory.createPostbackButton(""Postback Button"", ""PPB Payload""));
		buttons.add(ButtonFactory.createUrlButton(""URL Button"", ""http://www.aurasphere.co""));

		// Sets the thread settings.
		MessengerProfileApi.setGetStartedButton(""get_started"");
		MessengerProfileApi.setGreetingMessage(""hello"");
	}
}
","package co.aurasphere.botmill.fb.test.autoreply.template; @BotConfiguration
public class AnnotatedTemplatedBehaviourConigTest extends FbBotConfiguration { public AnnotatedTemplatedBehaviourConigTest() { List<Button> buttons = new ArrayList<Button>(); buttons.add(ButtonFactory.createPostbackButton(""Postback Button"", ""PPB Payload"")); MessengerProfileApi.setGetStartedButton(""get_started""); MessengerProfileApi.setGreetingMessage(""hello""); } }",0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.test.autoreply.template; @BotConfiguration
public class AnnotatedTemplatedBehaviourConigTest extends FbBotConfiguration { public AnnotatedTemplatedBehaviourConigTest() { List<Button> buttons = new ArrayList<Button>(); buttons.add(ButtonFactory.createPostbackButton(""Postback Button"", ""PPB Payload"")); MessengerProfileApi.setGetStartedButton(""get_started""); MessengerProfileApi.setGreetingMessage(""hello""); } } ","package co.aurasphere.botmill.fb.test.autoreply.template; 
import java.util.ArrayList; import java.util.List; 
import co.aurasphere.botmill.core.annotation.BotConfiguration; import co.aurasphere.botmill.fb.FbBotConfiguration; import co.aurasphere.botmill.fb.api.MessengerProfileApi; import co.aurasphere.botmill.fb.model.outcoming.factory.ButtonFactory; import co.aurasphere.botmill.fb.model.outcoming.template.button.Button;  @BotConfiguration
public class AnnotatedTemplatedBehaviourConigTest extends FbBotConfiguration {  public AnnotatedTemplatedBehaviourConigTest() { List<Button> buttons = new ArrayList<Button>(); buttons.add(ButtonFactory.createPostbackButton(""Postback Button"", ""PPB Payload"")); //www.aurasphere.co""));  // Sets the thread settings. MessengerProfileApi.setGetStartedButton(""get_started""); MessengerProfileApi.setGreetingMessage(""hello""); } }  "
src/test/java/co/aurasphere/botmill/fb/test/autoreply/template/AnnotatedTemplatedBehaviourTest.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.test.autoreply.template;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import co.aurasphere.botmill.core.BotBeanState;
import co.aurasphere.botmill.core.annotation.Bot;
import co.aurasphere.botmill.fb.FbBot;
import co.aurasphere.botmill.fb.api.MessengerProfileApi;
import co.aurasphere.botmill.fb.api.UploadApi;
import co.aurasphere.botmill.fb.autoreply.AutoReply;
import co.aurasphere.botmill.fb.autoreply.MessageAutoReply;
import co.aurasphere.botmill.fb.event.FbBotMillEventType;
import co.aurasphere.botmill.fb.model.annotation.FbBotMillController;
import co.aurasphere.botmill.fb.model.annotation.FbBotMillInit;
import co.aurasphere.botmill.fb.model.api.upload.UploadAttachmentResponse;
import co.aurasphere.botmill.fb.model.base.AttachmentType;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;
import co.aurasphere.botmill.fb.model.outcoming.action.TypingAction;
import co.aurasphere.botmill.fb.model.outcoming.factory.ButtonFactory;
import co.aurasphere.botmill.fb.model.outcoming.factory.ReplyFactory;
import co.aurasphere.botmill.fb.model.outcoming.template.button.Button;
import co.aurasphere.botmill.fb.model.outcoming.template.button.PaymentType;
import co.aurasphere.botmill.fb.model.outcoming.template.button.RequestedUserInfo;

/**
 * The Class TemplateBehavior.
 */
@Bot(state=BotBeanState.PROTOTYPE)
public class AnnotatedTemplatedBehaviourTest extends FbBot {

	/**
	 * Initialize.
	 */
	@FbBotMillInit
	public void initialize() {

		List<Button> buttons = new ArrayList<Button>();
		buttons.add(ButtonFactory.createPostbackButton(""Postback Button"", ""PPB Payload""));
		buttons.add(ButtonFactory.createUrlButton(""URL Button"", ""http://www.aurasphere.co""));

		// Sets the thread settings.
		MessengerProfileApi.setGetStartedButton(""get_started"");
		MessengerProfileApi.setGreetingMessage(""hello"");

	}

	/**
	 * Gets the started.
	 *
	 * @return the started
	 */
	@FbBotMillController(eventType = FbBotMillEventType.POSTBACK, postback = ""get_started"")
	public void getStarted(MessageEnvelope envelope) {
		reply(new AutoReply() {
			@Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) {
				botMillSession().buildSession(envelope.getRecipient().getId());
				return ReplyFactory.addTextMessageOnly(""Hi!"").build(envelope);
			}
		});		
	}
	
	@FbBotMillController(eventType = FbBotMillEventType.IMAGE)
	public void getImage(MessageEnvelope envelope) {
		reply(new MessageAutoReply(""image received""));
	}
	/**
	 * Catch all post back.
	 */
	// This method catches all the postback, saves it to a variable and execute
	// the response.
	@FbBotMillController(eventType = FbBotMillEventType.POSTBACK_PATTERN, postbackPattern = "".*."")
	public void catchAllPostBack(MessageEnvelope envelope) {
		reply(new AutoReply() {
			@Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) {
				botMillSession().addKeyValuePair(""postback_option_value"", envelope.getMessage().getText());
				return null;
			}
		});

	}

	/**
	 * Catch text and reply.
	 */
	@FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""Hi!"", caseSensitive = true)
	public void catchTextAndReply(MessageEnvelope envelope) {
			
		reply(new AutoReply() {
			@Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) {
				String greetingMessage = ""Hey There! Ahoy "";
				return ReplyFactory.addTextMessageOnly(greetingMessage).build(envelope);
			}
		});
	
	}
	
	@FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""Hi with Image!"", caseSensitive = true)
	public void catchTextAndReplyWithImage(MessageEnvelope envelope) {
		
//		
		UploadAttachmentResponse response = UploadApi
				.uploadAttachment(
						AttachmentType.IMAGE,
						""http://vignette2.wikia.nocookie.net/nickelodeon/images/2/27/Spongebob_PNG.png/revision/latest?cb=20120702055752"");
		String attachmentId = response.getAttachmentId();
		
		reply(new AutoReply() {
			@Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) {
				String greetingMessage = ""Hey There! "";
				return ReplyFactory.addTextMessageOnly(greetingMessage).build(envelope);
			}
		});
	
	}

	@FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""reuse image"", caseSensitive = true)
	public void replyWithImageAttachment(MessageEnvelope envelope) {
		UploadAttachmentResponse response = UploadApi
				.uploadAttachment(
						AttachmentType.IMAGE,
						""http://vignette2.wikia.nocookie.net/nickelodeon/images/2/27/Spongebob_PNG.png/revision/latest?cb=20120702055752"");
		final String attachmentId = response.getAttachmentId();
		reply(new AutoReply() {
			
			@Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) {
				return ReplyFactory.getReusableImageAttachment(attachmentId).build(envelope);
			}
		});
	}
	
	@FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""reuse video"", caseSensitive = true)
	public void replyWithVideoAttachment(MessageEnvelope envelope) {
		UploadAttachmentResponse response = UploadApi
				.uploadAttachment(
						AttachmentType.VIDEO,
						""http://www.engr.colostate.edu/me/facil/dynamics/files/drop.avi"");
		final String attachmentId = response.getAttachmentId();
		reply(new AutoReply() {
			
			@Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) {
				return ReplyFactory.getReusableVideoAttachment(attachmentId).build(envelope);
			}
		});
	}
	
	/**
	 * Reply text.
	 */
	@FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""text message"", caseSensitive = true)
	public void replyText(MessageEnvelope envelope) {
		reply(new MessageAutoReply(""simple text message""));
	}

	/**
	 * Initial greeting.
	 */
	@FbBotMillController(eventType = FbBotMillEventType.MESSAGE_PATTERN, pattern = ""(?i:hi)|(?i:hello)|(?i:hey)|(?i:good day)|(?i:home)"")
	public void initialGreeting(MessageEnvelope envelope) {

		addReply(new AutoReply() {
			@Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) {
				return ReplyFactory.addTypingAction(TypingAction.TYPING_ON).build(envelope);
			}
		});

		addReply(new AutoReply() {
			@Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) {
				String greetingMessage = ""Hey There! "";
				return ReplyFactory.addTextMessageOnly(greetingMessage).build(envelope);
			}
		});

		addReply(new AutoReply() {
			@Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) {
				String greetingMessage = ""Hey There Again! "";
				return ReplyFactory.addTextMessageOnly(greetingMessage).build(envelope);
			}
		});

		executeReplies();

	}

	/**
	 * Reply with button template.
	 *
	 * @param envelope
	 *            the envelope
	 */
	@FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""button template"", caseSensitive = false)
	public void replyWithButtonTemplate(MessageEnvelope envelope) {
		reply(new AutoReply() {
			@Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) {
				return ReplyFactory.addButtonTemplate(""Test button template"")
						.addPostbackButton(""postback button"", ""postback button payload"")
						.addPhoneNumberButton(""phone number button"", ""+393541247844"")
						.addUrlButton(""web url button"", ""https://github.com/BotMill/fb-botmill"").build(envelope);
			}
		});
	}

	/**
	 * Reply with lis template.
	 *
	 * @param envelope
	 *            the envelope
	 */
	@FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""list template"", caseSensitive = false)
	public void replyWithLisTemplate(MessageEnvelope envelope) {

		reply(new AutoReply() {
			@Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) {
				return ReplyFactory.addListTemplate().addElement(""Classic T-Shirt Collection"")
						.setSubtitle(""See all our colors"")
						.addButton(ButtonFactory.createUrlButton(""View"",
								""https://peterssendreceiveapp.ngrok.io/collection""))
						.setImageUrl(""https://peterssendreceiveapp.ngrok.io/img/collection.png"")
						.setDefaultAction(ButtonFactory
								.createDefaultActionButton(""https://peterssendreceiveapp.ngrok.io/shop_collection""))
						.endElement().addElement(""Classic White T-Shirt"").setSubtitle(""100% Cotton, 200% Comfortable"")
						.addButton(ButtonFactory.createUrlButton(""Shop Now"",
								""https://peterssendreceiveapp.ngrok.io/shop?item=100""))
						.setImageUrl(""https://peterssendreceiveapp.ngrok.io/img/white-t-shirt.png"")
						.setDefaultAction(ButtonFactory
								.createDefaultActionButton(""https://peterssendreceiveapp.ngrok.io/view?item=100""))
						.endElement().addElement(""Classic Blue T-Shirt"").setSubtitle(""100% Cotton, 200% Comfortable"")
						.addButton(ButtonFactory.createUrlButton(""Shop Now"",
								""https://peterssendreceiveapp.ngrok.io/shop?item=101""))
						.setImageUrl(""https://peterssendreceiveapp.ngrok.io/img/blue-t-shirt.png"")
						.setDefaultAction(ButtonFactory
								.createDefaultActionButton(""https://peterssendreceiveapp.ngrok.io/view?item=101""))
						.endElement().addElement(""Classic Black T-Shirt"").setSubtitle(""100% Cotton, 200% Comfortable"")
						.addButton(ButtonFactory.createUrlButton(""Shop Now"",
								""https://peterssendreceiveapp.ngrok.io/shop?item=102""))
						.setImageUrl(""https://peterssendreceiveapp.ngrok.io/img/black-t-shirt.png"")
						.setDefaultAction(ButtonFactory
								.createDefaultActionButton(""https://peterssendreceiveapp.ngrok.io/view?item=102""))
						.endElement().addButton(ButtonFactory.createPostbackButton(""View more"", ""view""))
						.build(envelope);
			}
		});
	}

	/**
	 * Replywith quick replies.
	 *
	 * @param envelope
	 *            the envelope
	 */
	@FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""quick replies"", caseSensitive = false)
	public void replywithQuickReplies(MessageEnvelope envelope) {
		reply(new AutoReply() {
			@Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) {
				return ReplyFactory.addTextMessageOnly(""Text message with quick replies"")
						.addQuickReply(""Quick reply 1"", ""Payload for quick reply 1"").build(envelope);
			}
		}, new AutoReply() {

			@Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) {
				return ReplyFactory.addTextMessageOnly(""Text message with quick replies"")
						.addQuickReply(""Quick reply 2"", ""Payload for quick reply 1"").build(envelope);
			}
		}, new AutoReply() {

			@Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) {
				return ReplyFactory.addTextMessageOnly(""Text message with quick replies"")
						.addQuickReply(""Quick reply 3"", ""Payload for quick reply 1"").build(envelope);
			}
		});
	}

	/**
	 * Reply with receipt template.
	 *
	 * @param envelope
	 *            the envelope
	 */
	@FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""receipt template"", caseSensitive = true)
	public void replyWithReceiptTemplate(MessageEnvelope envelope) {
		reply(new AutoReply() {
			@Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) {
				return ReplyFactory.addReceiptTemplate(""Donato Rimenti"", ""15"", ""EUR"", ""Visa 1234"")
						.setSummary(new BigDecimal(201), new BigDecimal(10), new BigDecimal(13), new BigDecimal(240))
						.setMerchantName(""Aurasphere co"").addElement(""Element 1"").setCurrency(""EUR"").setQuantity(29)
						.setPrice(new BigDecimal(200)).setSubtitle(""Element 1 subtitle"").endElement()
						.setTimestamp(""1243"").build(envelope);
			}
		});
	}

	@FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""buy button"", caseSensitive = true)
	public void replyWithBuyButton(MessageEnvelope envelope) {
		reply(new AutoReply() {

			@Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) {
				return ReplyFactory.addGenericTemplate().addElement(""A simple Button Template with a Buy Button"")
						.addButton(ButtonFactory.createBuyButton(""buy_button_payload"")
								.setPaymentSummary(""USD"", PaymentType.FIXED_AMOUNT, ""BotMill.io"")
								.addPriceLabel(""A price label"", ""2"").setTestPayment(true)
								.addRequestedUserInfo(RequestedUserInfo.CONTACT_PHONE).build())
						.endElement().build(envelope);
			}
		});
	}

}
","package co.aurasphere.botmill.fb.test.autoreply.template; @Bot(state=BotBeanState.PROTOTYPE)
public class AnnotatedTemplatedBehaviourTest extends FbBot { @FbBotMillInit
	public void initialize() { List<Button> buttons = new ArrayList<Button>(); buttons.add(ButtonFactory.createPostbackButton(""Postback Button"", ""PPB Payload"")); MessengerProfileApi.setGetStartedButton(""get_started""); MessengerProfileApi.setGreetingMessage(""hello""); } @FbBotMillController(eventType = FbBotMillEventType.POSTBACK, postback = ""get_started"")
	public void getStarted(MessageEnvelope envelope) { reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { botMillSession().buildSession(envelope.getRecipient().getId()); return ReplyFactory.addTextMessageOnly(""Hi!"").build(envelope); } } ); } @FbBotMillController(eventType = FbBotMillEventType.IMAGE)
	public void getImage(MessageEnvelope envelope) { reply(new MessageAutoReply(""image received"")); } @FbBotMillController(eventType = FbBotMillEventType.POSTBACK_PATTERN, postbackPattern = "".*."")
	public void catchAllPostBack(MessageEnvelope envelope) { reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { botMillSession().addKeyValuePair(""postback_option_value"", envelope.getMessage().getText()); return null; } } ); } @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""Hi!"", caseSensitive = true)
	public void catchTextAndReply(MessageEnvelope envelope) { reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { String greetingMessage = ""Hey There! Ahoy ""; return ReplyFactory.addTextMessageOnly(greetingMessage).build(envelope); } } ); } @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""Hi with Image!"", caseSensitive = true)
	public void catchTextAndReplyWithImage(MessageEnvelope envelope) { String attachmentId = response.getAttachmentId(); reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { String greetingMessage = ""Hey There! ""; return ReplyFactory.addTextMessageOnly(greetingMessage).build(envelope); } } ); } @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""reuse image"", caseSensitive = true)
	public void replyWithImageAttachment(MessageEnvelope envelope) { final String attachmentId = response.getAttachmentId(); reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.getReusableImageAttachment(attachmentId).build(envelope); } } ); } @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""reuse video"", caseSensitive = true)
	public void replyWithVideoAttachment(MessageEnvelope envelope) { final String attachmentId = response.getAttachmentId(); reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.getReusableVideoAttachment(attachmentId).build(envelope); } } ); } @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""text message"", caseSensitive = true)
	public void replyText(MessageEnvelope envelope) { reply(new MessageAutoReply(""simple text message"")); } @FbBotMillController(eventType = FbBotMillEventType.MESSAGE_PATTERN, pattern = ""(?i:hi)|(?i:hello)|(?i:hey)|(?i:good day)|(?i:home)"")
	public void initialGreeting(MessageEnvelope envelope) { addReply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.addTypingAction(TypingAction.TYPING_ON).build(envelope); } } ); addReply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { String greetingMessage = ""Hey There! ""; return ReplyFactory.addTextMessageOnly(greetingMessage).build(envelope); } } ); addReply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { String greetingMessage = ""Hey There Again! ""; return ReplyFactory.addTextMessageOnly(greetingMessage).build(envelope); } } ); executeReplies(); } @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""button template"", caseSensitive = false)
	public void replyWithButtonTemplate(MessageEnvelope envelope) { reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { } } ); } @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""list template"", caseSensitive = false)
	public void replyWithLisTemplate(MessageEnvelope envelope) { reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { .endElement().addButton(ButtonFactory.createPostbackButton(""View more"", ""view""))
						.build(envelope); } } ); } @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""quick replies"", caseSensitive = false)
	public void replywithQuickReplies(MessageEnvelope envelope) { reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.addTextMessageOnly(""Text message with quick replies"")
						.addQuickReply(""Quick reply 1"", ""Payload for quick reply 1"").build(envelope); } } , new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.addTextMessageOnly(""Text message with quick replies"")
						.addQuickReply(""Quick reply 2"", ""Payload for quick reply 1"").build(envelope); } } , new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.addTextMessageOnly(""Text message with quick replies"")
						.addQuickReply(""Quick reply 3"", ""Payload for quick reply 1"").build(envelope); } } ); } @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""receipt template"", caseSensitive = true)
	public void replyWithReceiptTemplate(MessageEnvelope envelope) { reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.addReceiptTemplate(""Donato Rimenti"", ""15"", ""EUR"", ""Visa 1234"")
						.setSummary(new BigDecimal(201), new BigDecimal(10), new BigDecimal(13), new BigDecimal(240))
						.setMerchantName(""Aurasphere co"").addElement(""Element 1"").setCurrency(""EUR"").setQuantity(29)
						.setPrice(new BigDecimal(200)).setSubtitle(""Element 1 subtitle"").endElement()
						.setTimestamp(""1243"").build(envelope); } } ); } @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""buy button"", caseSensitive = true)
	public void replyWithBuyButton(MessageEnvelope envelope) { reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.addGenericTemplate().addElement(""A simple Button Template with a Buy Button"")
						.addButton(ButtonFactory.createBuyButton(""buy_button_payload"")
								.setPaymentSummary(""USD"", PaymentType.FIXED_AMOUNT, ""BotMill.io"")
								.addPriceLabel(""A price label"", ""2"").setTestPayment(true)
								.addRequestedUserInfo(RequestedUserInfo.CONTACT_PHONE).build())
						.endElement().build(envelope); } } ); } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.test.autoreply.template; @Bot(state=BotBeanState.PROTOTYPE)
public class AnnotatedTemplatedBehaviourTest extends FbBot { @FbBotMillInit
	public void initialize() { List<Button> buttons = new ArrayList<Button>(); buttons.add(ButtonFactory.createPostbackButton(""Postback Button"", ""PPB Payload"")); MessengerProfileApi.setGetStartedButton(""get_started""); MessengerProfileApi.setGreetingMessage(""hello""); } @FbBotMillController(eventType = FbBotMillEventType.POSTBACK, postback = ""get_started"")
	public void getStarted(MessageEnvelope envelope) { reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { botMillSession().buildSession(envelope.getRecipient().getId()); return ReplyFactory.addTextMessageOnly(""Hi!"").build(envelope); } } ); } @FbBotMillController(eventType = FbBotMillEventType.IMAGE)
	public void getImage(MessageEnvelope envelope) { reply(new MessageAutoReply(""image received"")); } @FbBotMillController(eventType = FbBotMillEventType.POSTBACK_PATTERN, postbackPattern = "".*."")
	public void catchAllPostBack(MessageEnvelope envelope) { reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { botMillSession().addKeyValuePair(""postback_option_value"", envelope.getMessage().getText()); return null; } } ); } @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""Hi!"", caseSensitive = true)
	public void catchTextAndReply(MessageEnvelope envelope) { reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { String greetingMessage = ""Hey There! Ahoy ""; return ReplyFactory.addTextMessageOnly(greetingMessage).build(envelope); } } ); } @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""Hi with Image!"", caseSensitive = true)
	public void catchTextAndReplyWithImage(MessageEnvelope envelope) { String attachmentId = response.getAttachmentId(); reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { String greetingMessage = ""Hey There! ""; return ReplyFactory.addTextMessageOnly(greetingMessage).build(envelope); } } ); } @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""reuse image"", caseSensitive = true)
	public void replyWithImageAttachment(MessageEnvelope envelope) { final String attachmentId = response.getAttachmentId(); reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.getReusableImageAttachment(attachmentId).build(envelope); } } ); } @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""reuse video"", caseSensitive = true)
	public void replyWithVideoAttachment(MessageEnvelope envelope) { final String attachmentId = response.getAttachmentId(); reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.getReusableVideoAttachment(attachmentId).build(envelope); } } ); } @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""text message"", caseSensitive = true)
	public void replyText(MessageEnvelope envelope) { reply(new MessageAutoReply(""simple text message"")); } @FbBotMillController(eventType = FbBotMillEventType.MESSAGE_PATTERN, pattern = ""(?i:hi)|(?i:hello)|(?i:hey)|(?i:good day)|(?i:home)"")
	public void initialGreeting(MessageEnvelope envelope) { addReply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.addTypingAction(TypingAction.TYPING_ON).build(envelope); } } ); addReply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { String greetingMessage = ""Hey There! ""; return ReplyFactory.addTextMessageOnly(greetingMessage).build(envelope); } } ); addReply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { String greetingMessage = ""Hey There Again! ""; return ReplyFactory.addTextMessageOnly(greetingMessage).build(envelope); } } ); executeReplies(); } @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""button template"", caseSensitive = false)
	public void replyWithButtonTemplate(MessageEnvelope envelope) { reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { } } ); } @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""list template"", caseSensitive = false)
	public void replyWithLisTemplate(MessageEnvelope envelope) { reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { .endElement().addButton(ButtonFactory.createPostbackButton(""View more"", ""view""))
						.build(envelope); } } ); } @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""quick replies"", caseSensitive = false)
	public void replywithQuickReplies(MessageEnvelope envelope) { reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.addTextMessageOnly(""Text message with quick replies"")
						.addQuickReply(""Quick reply 1"", ""Payload for quick reply 1"").build(envelope); } } , new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.addTextMessageOnly(""Text message with quick replies"")
						.addQuickReply(""Quick reply 2"", ""Payload for quick reply 1"").build(envelope); } } , new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.addTextMessageOnly(""Text message with quick replies"")
						.addQuickReply(""Quick reply 3"", ""Payload for quick reply 1"").build(envelope); } } ); } @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""receipt template"", caseSensitive = true)
	public void replyWithReceiptTemplate(MessageEnvelope envelope) { reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.addReceiptTemplate(""Donato Rimenti"", ""15"", ""EUR"", ""Visa 1234"")
						.setSummary(new BigDecimal(201), new BigDecimal(10), new BigDecimal(13), new BigDecimal(240))
						.setMerchantName(""Aurasphere co"").addElement(""Element 1"").setCurrency(""EUR"").setQuantity(29)
						.setPrice(new BigDecimal(200)).setSubtitle(""Element 1 subtitle"").endElement()
						.setTimestamp(""1243"").build(envelope); } } ); } @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""buy button"", caseSensitive = true)
	public void replyWithBuyButton(MessageEnvelope envelope) { reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.addGenericTemplate().addElement(""A simple Button Template with a Buy Button"")
						.addButton(ButtonFactory.createBuyButton(""buy_button_payload"")
								.setPaymentSummary(""USD"", PaymentType.FIXED_AMOUNT, ""BotMill.io"")
								.addPriceLabel(""A price label"", ""2"").setTestPayment(true)
								.addRequestedUserInfo(RequestedUserInfo.CONTACT_PHONE).build())
						.endElement().build(envelope); } } ); } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.test.autoreply.template; 
import java.math.BigDecimal; import java.util.ArrayList; import java.util.List; 
import co.aurasphere.botmill.core.BotBeanState; import co.aurasphere.botmill.core.annotation.Bot; import co.aurasphere.botmill.fb.FbBot; import co.aurasphere.botmill.fb.api.MessengerProfileApi; import co.aurasphere.botmill.fb.api.UploadApi; import co.aurasphere.botmill.fb.autoreply.AutoReply; import co.aurasphere.botmill.fb.autoreply.MessageAutoReply; import co.aurasphere.botmill.fb.event.FbBotMillEventType; import co.aurasphere.botmill.fb.model.annotation.FbBotMillController; import co.aurasphere.botmill.fb.model.annotation.FbBotMillInit; import co.aurasphere.botmill.fb.model.api.upload.UploadAttachmentResponse; import co.aurasphere.botmill.fb.model.base.AttachmentType; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; import co.aurasphere.botmill.fb.model.outcoming.action.TypingAction; import co.aurasphere.botmill.fb.model.outcoming.factory.ButtonFactory; import co.aurasphere.botmill.fb.model.outcoming.factory.ReplyFactory; import co.aurasphere.botmill.fb.model.outcoming.template.button.Button; import co.aurasphere.botmill.fb.model.outcoming.template.button.PaymentType; import co.aurasphere.botmill.fb.model.outcoming.template.button.RequestedUserInfo;  /**
 * The Class TemplateBehavior.
 */ @Bot(state=BotBeanState.PROTOTYPE)
public class AnnotatedTemplatedBehaviourTest extends FbBot {  /**
	 * Initialize.
	 */ @FbBotMillInit
	public void initialize() {  List<Button> buttons = new ArrayList<Button>(); buttons.add(ButtonFactory.createPostbackButton(""Postback Button"", ""PPB Payload"")); //www.aurasphere.co""));  // Sets the thread settings. MessengerProfileApi.setGetStartedButton(""get_started""); MessengerProfileApi.setGreetingMessage(""hello"");  }  /**
	 * Gets the started.
	 *
	 * @return the started
	 */ @FbBotMillController(eventType = FbBotMillEventType.POSTBACK, postback = ""get_started"")
	public void getStarted(MessageEnvelope envelope) { reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { botMillSession().buildSession(envelope.getRecipient().getId()); return ReplyFactory.addTextMessageOnly(""Hi!"").build(envelope); } } ); } 	 @FbBotMillController(eventType = FbBotMillEventType.IMAGE)
	public void getImage(MessageEnvelope envelope) { reply(new MessageAutoReply(""image received"")); } /**
	 * Catch all post back.
	 */ // This method catches all the postback, saves it to a variable and execute // the response. @FbBotMillController(eventType = FbBotMillEventType.POSTBACK_PATTERN, postbackPattern = "".*."")
	public void catchAllPostBack(MessageEnvelope envelope) { reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { botMillSession().addKeyValuePair(""postback_option_value"", envelope.getMessage().getText()); return null; } } );  }  /**
	 * Catch text and reply.
	 */ @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""Hi!"", caseSensitive = true)
	public void catchTextAndReply(MessageEnvelope envelope) { 			 reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { String greetingMessage = ""Hey There! Ahoy ""; return ReplyFactory.addTextMessageOnly(greetingMessage).build(envelope); } } ); 	 } 	 @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""Hi with Image!"", caseSensitive = true)
	public void catchTextAndReplyWithImage(MessageEnvelope envelope) { 		 //		 //vignette2.wikia.nocookie.net/nickelodeon/images/2/27/Spongebob_PNG.png/revision/latest?cb=20120702055752""); String attachmentId = response.getAttachmentId(); 		 reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { String greetingMessage = ""Hey There! ""; return ReplyFactory.addTextMessageOnly(greetingMessage).build(envelope); } } ); 	 }  @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""reuse image"", caseSensitive = true)
	public void replyWithImageAttachment(MessageEnvelope envelope) { //vignette2.wikia.nocookie.net/nickelodeon/images/2/27/Spongebob_PNG.png/revision/latest?cb=20120702055752""); final String attachmentId = response.getAttachmentId(); reply(new AutoReply() { 			 @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.getReusableImageAttachment(attachmentId).build(envelope); } } ); } 	 @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""reuse video"", caseSensitive = true)
	public void replyWithVideoAttachment(MessageEnvelope envelope) { //www.engr.colostate.edu/me/facil/dynamics/files/drop.avi""); final String attachmentId = response.getAttachmentId(); reply(new AutoReply() { 			 @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.getReusableVideoAttachment(attachmentId).build(envelope); } } ); } 	 /**
	 * Reply text.
	 */ @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""text message"", caseSensitive = true)
	public void replyText(MessageEnvelope envelope) { reply(new MessageAutoReply(""simple text message"")); }  /**
	 * Initial greeting.
	 */ @FbBotMillController(eventType = FbBotMillEventType.MESSAGE_PATTERN, pattern = ""(?i:hi)|(?i:hello)|(?i:hey)|(?i:good day)|(?i:home)"")
	public void initialGreeting(MessageEnvelope envelope) {  addReply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.addTypingAction(TypingAction.TYPING_ON).build(envelope); } } );  addReply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { String greetingMessage = ""Hey There! ""; return ReplyFactory.addTextMessageOnly(greetingMessage).build(envelope); } } );  addReply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { String greetingMessage = ""Hey There Again! ""; return ReplyFactory.addTextMessageOnly(greetingMessage).build(envelope); } } );  executeReplies();  }  /**
	 * Reply with button template.
	 *
	 * @param envelope
	 *            the envelope
	 */ @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""button template"", caseSensitive = false)
	public void replyWithButtonTemplate(MessageEnvelope envelope) { reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { //github.com/BotMill/fb-botmill"").build(envelope); } } ); }  /**
	 * Reply with lis template.
	 *
	 * @param envelope
	 *            the envelope
	 */ @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""list template"", caseSensitive = false)
	public void replyWithLisTemplate(MessageEnvelope envelope) {  reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { //peterssendreceiveapp.ngrok.io/collection"")) //peterssendreceiveapp.ngrok.io/img/collection.png"") //peterssendreceiveapp.ngrok.io/shop_collection"")) //peterssendreceiveapp.ngrok.io/shop?item=100"")) //peterssendreceiveapp.ngrok.io/img/white-t-shirt.png"") //peterssendreceiveapp.ngrok.io/view?item=100"")) //peterssendreceiveapp.ngrok.io/shop?item=101"")) //peterssendreceiveapp.ngrok.io/img/blue-t-shirt.png"") //peterssendreceiveapp.ngrok.io/view?item=101"")) //peterssendreceiveapp.ngrok.io/shop?item=102"")) //peterssendreceiveapp.ngrok.io/img/black-t-shirt.png"") //peterssendreceiveapp.ngrok.io/view?item=102"")) .endElement().addButton(ButtonFactory.createPostbackButton(""View more"", ""view""))
						.build(envelope); } } ); }  /**
	 * Replywith quick replies.
	 *
	 * @param envelope
	 *            the envelope
	 */ @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""quick replies"", caseSensitive = false)
	public void replywithQuickReplies(MessageEnvelope envelope) { reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.addTextMessageOnly(""Text message with quick replies"")
						.addQuickReply(""Quick reply 1"", ""Payload for quick reply 1"").build(envelope); } } , new AutoReply() {  @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.addTextMessageOnly(""Text message with quick replies"")
						.addQuickReply(""Quick reply 2"", ""Payload for quick reply 1"").build(envelope); } } , new AutoReply() {  @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.addTextMessageOnly(""Text message with quick replies"")
						.addQuickReply(""Quick reply 3"", ""Payload for quick reply 1"").build(envelope); } } ); }  /**
	 * Reply with receipt template.
	 *
	 * @param envelope
	 *            the envelope
	 */ @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""receipt template"", caseSensitive = true)
	public void replyWithReceiptTemplate(MessageEnvelope envelope) { reply(new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.addReceiptTemplate(""Donato Rimenti"", ""15"", ""EUR"", ""Visa 1234"")
						.setSummary(new BigDecimal(201), new BigDecimal(10), new BigDecimal(13), new BigDecimal(240))
						.setMerchantName(""Aurasphere co"").addElement(""Element 1"").setCurrency(""EUR"").setQuantity(29)
						.setPrice(new BigDecimal(200)).setSubtitle(""Element 1 subtitle"").endElement()
						.setTimestamp(""1243"").build(envelope); } } ); }  @FbBotMillController(eventType = FbBotMillEventType.MESSAGE, text = ""buy button"", caseSensitive = true)
	public void replyWithBuyButton(MessageEnvelope envelope) { reply(new AutoReply() {  @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory.addGenericTemplate().addElement(""A simple Button Template with a Buy Button"")
						.addButton(ButtonFactory.createBuyButton(""buy_button_payload"")
								.setPaymentSummary(""USD"", PaymentType.FIXED_AMOUNT, ""BotMill.io"")
								.addPriceLabel(""A price label"", ""2"").setTestPayment(true)
								.addRequestedUserInfo(RequestedUserInfo.CONTACT_PHONE).build())
						.endElement().build(envelope); } } ); }  }  "
src/test/java/co/aurasphere/botmill/fb/test/incoming/callback/BaseFbBotMillCallbackTest.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.test.incoming.callback;

import java.util.List;

import org.hamcrest.core.IsInstanceOf;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.incoming.MessengerCallback;
import co.aurasphere.botmill.fb.model.outcoming.template.button.Button;
import co.aurasphere.botmill.fb.model.outcoming.template.button.ButtonType;
import co.aurasphere.botmill.fb.model.outcoming.template.button.PostbackButton;


/**
 * Base class for testing every FbBotMill callback.
 * 
 * @author Donato Rimenti
 * @since 1.1.0
 */
public class BaseFbBotMillCallbackTest {

	/**
	 * The logger.
	 */
	private static final Logger logger = LoggerFactory
			.getLogger(BaseFbBotMillCallbackTest.class);

	/**
	 * Logs the testing class.
	 */
	@Before
	public void before() {
		logger.info(""Starting unit tests in class [{}]."", this.getClass()
				.getSimpleName());
	}

	/**
	 * Logs the testing class.
	 */
	@After
	public void after() {
		logger.info(""Completed unit tests for class [{}]."", this.getClass()
				.getSimpleName());
	}

	/**
	 * Checks that each callback field for the common format is not null.
	 * 
	 * @param callback
	 *            the callback to check.
	 * @return the {@link MessageEnvelope} of this callback.
	 */
	protected MessageEnvelope checkCallbackWellFormed(MessengerCallback callback) {
		Assert.assertNotNull(callback);
		Assert.assertNotNull(callback.getObject());
		Assert.assertNotNull(callback.getEntry());
		Assert.assertNotNull(callback.getEntry().get(0));
		Assert.assertNotNull(callback.getEntry().get(0).getId());
		Assert.assertNotNull(callback.getEntry().get(0).getTime());
		Assert.assertNotNull(callback.getEntry().get(0).getMessaging());
		Assert.assertNotNull(callback.getEntry().get(0).getMessaging().get(0));
		Assert.assertNotNull(callback.getEntry().get(0).getMessaging().get(0));

		return callback.getEntry().get(0).getMessaging().get(0);
	}

	/**
	 * Checks that an object is not null and an instance of class T.
	 *
	 * @param <T> the generic type
	 * @param object            the object to check.
	 * @param T            the expected type of T.
	 * @return a casted object of type T.
	 */
	@SuppressWarnings(""unchecked"")
	protected <T> T assertInstanceOf(Object object, Class<T> T) {
		Assert.assertNotNull(object);
		Assert.assertThat(object, IsInstanceOf.instanceOf(T));
		return (T) object;
	}

	/**
	 * Checks that a {@link PostbackButton} is well formed.
	 * 
	 * @param button
	 *            the button to check.
	 * @param title
	 *            the button title.
	 * @param payload
	 *            the button payload.
	 */
	protected void checkPostbackButtonWellFormed(Button button, String title,
			String payload) {
		PostbackButton pButton = assertInstanceOf(button, PostbackButton.class);
		Assert.assertEquals(ButtonType.POSTBACK, pButton.getType());
		Assert.assertEquals(title, pButton.getTitle());
		Assert.assertEquals(payload, pButton.getPayload());
	}

	/**
	 * Checks that a list is not null and has a fixed size.
	 *
	 * @param size the size of the list.
	 * @param list the list to check.
	 */
	@SuppressWarnings(""rawtypes"")
	protected void assertListOfSize(int size, List list) {
		Assert.assertNotNull(list);
		Assert.assertEquals(size, list.size());
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""BaseFbBotMillCallbackTest []"";
	}

}
","package co.aurasphere.botmill.fb.test.incoming.callback; public class BaseFbBotMillCallbackTest { private static final Logger logger = LoggerFactory
			.getLogger(BaseFbBotMillCallbackTest.class); @Before
	public void before() { logger.info(""Starting unit tests in class [{ } ]."", this.getClass()
				.getSimpleName()); } @After
	public void after() { logger.info(""Completed unit tests for class [{ } ]."", this.getClass()
				.getSimpleName()); } protected MessageEnvelope checkCallbackWellFormed(MessengerCallback callback) { Assert.assertNotNull(callback); Assert.assertNotNull(callback.getObject()); Assert.assertNotNull(callback.getEntry()); Assert.assertNotNull(callback.getEntry().get(0)); Assert.assertNotNull(callback.getEntry().get(0).getId()); Assert.assertNotNull(callback.getEntry().get(0).getTime()); Assert.assertNotNull(callback.getEntry().get(0).getMessaging()); Assert.assertNotNull(callback.getEntry().get(0).getMessaging().get(0)); Assert.assertNotNull(callback.getEntry().get(0).getMessaging().get(0)); return callback.getEntry().get(0).getMessaging().get(0); } @SuppressWarnings(""unchecked"")
	protected <T> T assertInstanceOf(Object object, Class<T> T) { Assert.assertNotNull(object); Assert.assertThat(object, IsInstanceOf.instanceOf(T)); return (T) object; } protected void checkPostbackButtonWellFormed(Button button, String title,
			String payload) { PostbackButton pButton = assertInstanceOf(button, PostbackButton.class); Assert.assertEquals(ButtonType.POSTBACK, pButton.getType()); Assert.assertEquals(title, pButton.getTitle()); Assert.assertEquals(payload, pButton.getPayload()); } @SuppressWarnings(""rawtypes"")
	protected void assertListOfSize(int size, List list) { Assert.assertNotNull(list); Assert.assertEquals(size, list.size()); } @Override
	public String toString() { return ""BaseFbBotMillCallbackTest []""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.test.incoming.callback; public class BaseFbBotMillCallbackTest { private static final Logger logger = LoggerFactory
			.getLogger(BaseFbBotMillCallbackTest.class); @Before
	public void before() { logger.info(""Starting unit tests in class [{ } ]."", this.getClass()
				.getSimpleName()); } @After
	public void after() { logger.info(""Completed unit tests for class [{ } ]."", this.getClass()
				.getSimpleName()); } protected MessageEnvelope checkCallbackWellFormed(MessengerCallback callback) { Assert.assertNotNull(callback); Assert.assertNotNull(callback.getObject()); Assert.assertNotNull(callback.getEntry()); Assert.assertNotNull(callback.getEntry().get(0)); Assert.assertNotNull(callback.getEntry().get(0).getId()); Assert.assertNotNull(callback.getEntry().get(0).getTime()); Assert.assertNotNull(callback.getEntry().get(0).getMessaging()); Assert.assertNotNull(callback.getEntry().get(0).getMessaging().get(0)); Assert.assertNotNull(callback.getEntry().get(0).getMessaging().get(0)); return callback.getEntry().get(0).getMessaging().get(0); } @SuppressWarnings(""unchecked"")
	protected <T> T assertInstanceOf(Object object, Class<T> T) { Assert.assertNotNull(object); Assert.assertThat(object, IsInstanceOf.instanceOf(T)); return (T) object; } protected void checkPostbackButtonWellFormed(Button button, String title,
			String payload) { PostbackButton pButton = assertInstanceOf(button, PostbackButton.class); Assert.assertEquals(ButtonType.POSTBACK, pButton.getType()); Assert.assertEquals(title, pButton.getTitle()); Assert.assertEquals(payload, pButton.getPayload()); } @SuppressWarnings(""rawtypes"")
	protected void assertListOfSize(int size, List list) { Assert.assertNotNull(list); Assert.assertEquals(size, list.size()); } @Override
	public String toString() { return ""BaseFbBotMillCallbackTest []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.test.incoming.callback; 
import java.util.List; 
import org.hamcrest.core.IsInstanceOf; import org.junit.After; import org.junit.Assert; import org.junit.Before; import org.slf4j.Logger; import org.slf4j.LoggerFactory; 
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.incoming.MessengerCallback; import co.aurasphere.botmill.fb.model.outcoming.template.button.Button; import co.aurasphere.botmill.fb.model.outcoming.template.button.ButtonType; import co.aurasphere.botmill.fb.model.outcoming.template.button.PostbackButton; 
  public class BaseFbBotMillCallbackTest { /**
 * Base class for testing every FbBotMill callback.
 * 
 * @author Donato Rimenti
 * @since 1.1.0
 */  private static final Logger logger = LoggerFactory
			.getLogger(BaseFbBotMillCallbackTest.class); /**
	 * The logger.
	 */  @Before
	public void before() { logger.info(""Starting unit tests in class [{ } ]."", this.getClass()
				.getSimpleName()); } /**
	 * Logs the testing class.
	 */  @After
	public void after() { logger.info(""Completed unit tests for class [{ } ]."", this.getClass()
				.getSimpleName()); } /**
	 * Logs the testing class.
	 */  protected MessageEnvelope checkCallbackWellFormed(MessengerCallback callback) { Assert.assertNotNull(callback); Assert.assertNotNull(callback.getObject()); Assert.assertNotNull(callback.getEntry()); Assert.assertNotNull(callback.getEntry().get(0)); Assert.assertNotNull(callback.getEntry().get(0).getId()); Assert.assertNotNull(callback.getEntry().get(0).getTime()); Assert.assertNotNull(callback.getEntry().get(0).getMessaging()); Assert.assertNotNull(callback.getEntry().get(0).getMessaging().get(0)); Assert.assertNotNull(callback.getEntry().get(0).getMessaging().get(0)); /**
	 * Checks that each callback field for the common format is not null.
	 * 
	 * @param callback
	 *            the callback to check.
	 * @return the {@link MessageEnvelope} of this callback.
	 */ return callback.getEntry().get(0).getMessaging().get(0); }   @SuppressWarnings(""unchecked"")
	protected <T> T assertInstanceOf(Object object, Class<T> T) { Assert.assertNotNull(object); Assert.assertThat(object, IsInstanceOf.instanceOf(T)); return (T) object; } /**
	 * Checks that an object is not null and an instance of class T.
	 *
	 * @param <T> the generic type
	 * @param object            the object to check.
	 * @param T            the expected type of T.
	 * @return a casted object of type T.
	 */  protected void checkPostbackButtonWellFormed(Button button, String title,
			String payload) { PostbackButton pButton = assertInstanceOf(button, PostbackButton.class); Assert.assertEquals(ButtonType.POSTBACK, pButton.getType()); Assert.assertEquals(title, pButton.getTitle()); Assert.assertEquals(payload, pButton.getPayload()); } /**
	 * Checks that a {@link PostbackButton} is well formed.
	 * 
	 * @param button
	 *            the button to check.
	 * @param title
	 *            the button title.
	 * @param payload
	 *            the button payload.
	 */  @SuppressWarnings(""rawtypes"")
	protected void assertListOfSize(int size, List list) { Assert.assertNotNull(list); Assert.assertEquals(size, list.size()); } /**
	 * Checks that a list is not null and has a fixed size.
	 *
	 * @param size the size of the list.
	 * @param list the list to check.
	 */  @Override
	public String toString() { return ""BaseFbBotMillCallbackTest []""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/test/java/co/aurasphere/botmill/fb/test/incoming/callback/EchoCallbackTest.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.test.incoming.callback;

import org.junit.Assert;
import org.junit.Test;

import co.aurasphere.botmill.fb.internal.util.json.FbBotMillJsonUtils;
import co.aurasphere.botmill.fb.model.base.Attachment;
import co.aurasphere.botmill.fb.model.base.AttachmentType;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.incoming.MessengerCallback;
import co.aurasphere.botmill.fb.model.incoming.callback.EchoMessage;
import co.aurasphere.botmill.fb.model.outcoming.payload.PayloadType;
import co.aurasphere.botmill.fb.model.outcoming.payload.template.ListTemplatePayload;
import co.aurasphere.botmill.fb.model.outcoming.template.button.ButtonType;
import co.aurasphere.botmill.fb.model.outcoming.template.list.ListTemplateElement;


/**
 * Test for an {@link EchoMessage} parsing.
 * 
 * @author Donato Rimenti
 * @since 1.1.0
 */
public class EchoCallbackTest extends BaseFbBotMillCallbackTest {

	/**
	 * Tests an {@link EchoMessage} containing a {@link ListTemplatePayload}.
	 */
	@Test
	public void testEchoWithListTemplate() {
		// Tests the echo with a List Template.
		String echoListTemplatejson = ""{\""object\"":\""page\"",\""entry\"":[{\""id\"":\""1423903854504468\"",\""time\"":1483578465379,\""messaging\"":[{\""sender\"":{\""id\"":\""****\""},\""recipient\"":{\""id\"":\""****\""},\""timestamp\"":1483578464765,\""message\"":{\""is_echo\"":true,\""app_id\"":****,\""mid\"":\""mid.1483578464765:ed1fe23f35\"",\""seq\"":785209,\""attachments\"":[{\""title\"":\""Title1, Title2, Title3, Title4\"",\""url\"":\""https://www.facebook.com/commerce/update/\"",\""type\"":\""template\"",\""payload\"":{\""template_type\"":\""list\"",\""sharable\"":false,\""elements\"":[{\""title\"":\""Title1\"",\""item_url\"":\""http://www.alvinjayreyes.com/\"",\""image_url\"":\""http://blog.domainmonkee.com/wp-content/uploads/2014/05/url.jpg\"",\""subtitle\"":\""This is a sample sub title for your product\"",\""buttons\"":[{\""type\"":\""postback\"",\""title\"":\""View\"",\""payload\"":\""view\""}],\""default_action\"":{\""type\"":\""web_url\"",\""url\"":\""http://www.alvinjayreyes.com/\""}},{\""title\"":\""Title2\"",\""item_url\"":\""http://www.alvinjayreyes.com/\"",\""image_url\"":\""http://blog.domainmonkee.com/wp-content/uploads/2014/05/url.jpg\"",\""subtitle\"":\""This is a sample sub title for your product\"",\""buttons\"":[{\""type\"":\""postback\"",\""title\"":\""View\"",\""payload\"":\""view\""}],\""default_action\"":{\""type\"":\""web_url\"",\""url\"":\""http://www.alvinjayreyes.com/\""}},{\""title\"":\""Title3\"",\""item_url\"":\""http://www.alvinjayreyes.com/\"",\""image_url\"":\""http://blog.domainmonkee.com/wp-content/uploads/2014/05/url.jpg\"",\""subtitle\"":\""This is a sample sub title for your product\"",\""buttons\"":[{\""type\"":\""postback\"",\""title\"":\""View\"",\""payload\"":\""view\""}],\""default_action\"":{\""type\"":\""web_url\"",\""url\"":\""http://www.alvinjayreyes.com/\""}},{\""title\"":\""Title4\"",\""item_url\"":\""http://www.alvinjayreyes.com/\"",\""image_url\"":\""http://blog.domainmonkee.com/wp-content/uploads/2014/05/url.jpg\"",\""subtitle\"":\""This is a sample sub title for your product\"",\""buttons\"":[{\""type\"":\""postback\"",\""title\"":\""View\"",\""payload\"":\""view\""}],\""default_action\"":{\""type\"":\""web_url\"",\""url\"":\""http://www.alvinjayreyes.com/\""}}],\""buttons\"":[{\""type\"":\""postback\"",\""title\"":\""Just Sample\"",\""payload\"":\""Yes\""}]}}]}}]}]}"";
		MessengerCallback callback = FbBotMillJsonUtils.fromJson(echoListTemplatejson,
				MessengerCallback.class);

		MessageEnvelope messageEnvelope = checkCallbackWellFormed(callback);

		EchoMessage echoMessage = super.assertInstanceOf(
				messageEnvelope.getMessage(), EchoMessage.class);

		// Checks that individual fields are correctly parsed.
		Assert.assertTrue(echoMessage.isEcho());
		Assert.assertEquals(""****"", echoMessage.getAppId());
		Assert.assertEquals(""mid.1483578464765:ed1fe23f35"",
				echoMessage.getMid());
		Assert.assertEquals(""785209"", echoMessage.getSeq()); 

		super.assertListOfSize(1, echoMessage.getAttachments());

		// Checks the attachment.
		Attachment attachment = echoMessage.getAttachments().get(0);
		Assert.assertEquals(""Title1, Title2, Title3, Title4"",
				attachment.getTitle());
		Assert.assertEquals(""https://www.facebook.com/commerce/update/"",
				attachment.getUrl());
		Assert.assertEquals(AttachmentType.TEMPLATE, attachment.getType());

		// Checks the payload.
		ListTemplatePayload payload = super.assertInstanceOf(
				attachment.getPayload(), ListTemplatePayload.class);
		Assert.assertEquals(PayloadType.LIST, payload.getTemplateType());
		super.assertListOfSize(4, payload.getElements());

		for (int i = 0; i < 4; i++) {
			checkListTemplateElements(payload.getElements().get(i), i + 1);
		}

		// Checks the buttons.
		super.assertListOfSize(1, payload.getButtons());
		checkPostbackButtonWellFormed(payload.getButtons().get(0),
				""Just Sample"", ""Yes"");
	}

	/**
	 * Test that checks that each element of the List Template is correctly
	 * parsed.
	 *
	 * @param element the element
	 * @param position the position
	 */
	private void checkListTemplateElements(ListTemplateElement element,
			int position) {

		Assert.assertEquals(""Title"" + position, element.getTitle());
		Assert.assertEquals(
				""http://blog.domainmonkee.com/wp-content/uploads/2014/05/url.jpg"",
				element.getImageUrl());
		Assert.assertEquals(""This is a sample sub title for your product"",
				element.getSubtitle());

		// Checks the buttons.
		super.assertListOfSize(1, element.getButtons());
		checkPostbackButtonWellFormed(element.getButtons().get(0), ""View"",
				""view"");

		// Checks the default action.
		Assert.assertNotNull(element.getDefaultAction());
		Assert.assertEquals(ButtonType.WEB_URL, element.getDefaultAction()
				.getType());
		Assert.assertEquals(""http://www.alvinjayreyes.com/"", element
				.getDefaultAction().getUrl());
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.test.incoming.callback.BaseFbBotMillCallbackTest
	 * #toString()
	 */
	@Override
	public String toString() {
		return ""EchoCallbackTest []"";
	}

}
","package co.aurasphere.botmill.fb.test.incoming.callback; public class EchoCallbackTest extends BaseFbBotMillCallbackTest { @Test
	public void testEchoWithListTemplate() { String echoListTemplatejson = ""{ \""object\"":\""page\"",\""entry\"":[{ \""id\"":\""1423903854504468\"",\""time\"":1483578465379,\""messaging\"":[{ \""sender\"":{ \""id\"":\""****\""} ,\""recipient\"":{ \""id\"":\""****\""} ,\""timestamp\"":1483578464765,\""message\"":{ \""is_echo\"":true,\""app_id\"":****,\""mid\"":\""mid.1483578464765:ed1fe23f35\"",\""seq\"":785209,\""attachments\"":[{ MessengerCallback callback = FbBotMillJsonUtils.fromJson(echoListTemplatejson,
				MessengerCallback.class); MessageEnvelope messageEnvelope = checkCallbackWellFormed(callback); EchoMessage echoMessage = super.assertInstanceOf(
				messageEnvelope.getMessage(), EchoMessage.class); Assert.assertTrue(echoMessage.isEcho()); Assert.assertEquals(""****"", echoMessage.getAppId()); Assert.assertEquals(""mid.1483578464765:ed1fe23f35"",
				echoMessage.getMid()); Assert.assertEquals(""785209"", echoMessage.getSeq()); super.assertListOfSize(1, echoMessage.getAttachments()); Attachment attachment = echoMessage.getAttachments().get(0); Assert.assertEquals(""Title1, Title2, Title3, Title4"",
				attachment.getTitle()); attachment.getUrl()); Assert.assertEquals(AttachmentType.TEMPLATE, attachment.getType()); ListTemplatePayload payload = super.assertInstanceOf(
				attachment.getPayload(), ListTemplatePayload.class); Assert.assertEquals(PayloadType.LIST, payload.getTemplateType()); super.assertListOfSize(4, payload.getElements()); for (int i = 0; i < 4; i++) { checkListTemplateElements(payload.getElements().get(i), i + 1); } super.assertListOfSize(1, payload.getButtons()); checkPostbackButtonWellFormed(payload.getButtons().get(0),
				""Just Sample"", ""Yes""); } private void checkListTemplateElements(ListTemplateElement element,
			int position) { Assert.assertEquals(""Title"" + position, element.getTitle()); element.getImageUrl()); Assert.assertEquals(""This is a sample sub title for your product"",
				element.getSubtitle()); super.assertListOfSize(1, element.getButtons()); checkPostbackButtonWellFormed(element.getButtons().get(0), ""View"",
				""view""); Assert.assertNotNull(element.getDefaultAction()); Assert.assertEquals(ButtonType.WEB_URL, element.getDefaultAction()
				.getType()); .getDefaultAction().getUrl()); } @Override
	public String toString() { return ""EchoCallbackTest []""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.test.incoming.callback; public class EchoCallbackTest extends BaseFbBotMillCallbackTest { @Test
	public void testEchoWithListTemplate() { String echoListTemplatejson = ""{ \""object\"":\""page\"",\""entry\"":[{ \""id\"":\""1423903854504468\"",\""time\"":1483578465379,\""messaging\"":[{ \""sender\"":{ \""id\"":\""****\""} ,\""recipient\"":{ \""id\"":\""****\""} ,\""timestamp\"":1483578464765,\""message\"":{ \""is_echo\"":true,\""app_id\"":****,\""mid\"":\""mid.1483578464765:ed1fe23f35\"",\""seq\"":785209,\""attachments\"":[{ MessengerCallback callback = FbBotMillJsonUtils.fromJson(echoListTemplatejson,
				MessengerCallback.class); MessageEnvelope messageEnvelope = checkCallbackWellFormed(callback); EchoMessage echoMessage = super.assertInstanceOf(
				messageEnvelope.getMessage(), EchoMessage.class); Assert.assertTrue(echoMessage.isEcho()); Assert.assertEquals(""****"", echoMessage.getAppId()); Assert.assertEquals(""mid.1483578464765:ed1fe23f35"",
				echoMessage.getMid()); Assert.assertEquals(""785209"", echoMessage.getSeq()); super.assertListOfSize(1, echoMessage.getAttachments()); Attachment attachment = echoMessage.getAttachments().get(0); Assert.assertEquals(""Title1, Title2, Title3, Title4"",
				attachment.getTitle()); attachment.getUrl()); Assert.assertEquals(AttachmentType.TEMPLATE, attachment.getType()); ListTemplatePayload payload = super.assertInstanceOf(
				attachment.getPayload(), ListTemplatePayload.class); Assert.assertEquals(PayloadType.LIST, payload.getTemplateType()); super.assertListOfSize(4, payload.getElements()); for (int i = 0; i < 4; i++) { checkListTemplateElements(payload.getElements().get(i), i + 1); } super.assertListOfSize(1, payload.getButtons()); checkPostbackButtonWellFormed(payload.getButtons().get(0),
				""Just Sample"", ""Yes""); } private void checkListTemplateElements(ListTemplateElement element,
			int position) { Assert.assertEquals(""Title"" + position, element.getTitle()); element.getImageUrl()); Assert.assertEquals(""This is a sample sub title for your product"",
				element.getSubtitle()); super.assertListOfSize(1, element.getButtons()); checkPostbackButtonWellFormed(element.getButtons().get(0), ""View"",
				""view""); Assert.assertNotNull(element.getDefaultAction()); Assert.assertEquals(ButtonType.WEB_URL, element.getDefaultAction()
				.getType()); .getDefaultAction().getUrl()); } @Override
	public String toString() { return ""EchoCallbackTest []""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.test.incoming.callback; 
import org.junit.Assert; import org.junit.Test; 
import co.aurasphere.botmill.fb.internal.util.json.FbBotMillJsonUtils; import co.aurasphere.botmill.fb.model.base.Attachment; import co.aurasphere.botmill.fb.model.base.AttachmentType; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.incoming.MessengerCallback; import co.aurasphere.botmill.fb.model.incoming.callback.EchoMessage; import co.aurasphere.botmill.fb.model.outcoming.payload.PayloadType; import co.aurasphere.botmill.fb.model.outcoming.payload.template.ListTemplatePayload; import co.aurasphere.botmill.fb.model.outcoming.template.button.ButtonType; import co.aurasphere.botmill.fb.model.outcoming.template.list.ListTemplateElement; 
  public class EchoCallbackTest extends BaseFbBotMillCallbackTest { /**
 * Test for an {@link EchoMessage} parsing.
 * 
 * @author Donato Rimenti
 * @since 1.1.0
 */  @Test
	public void testEchoWithListTemplate() { /**
	 * Tests an {@link EchoMessage} containing a {@link ListTemplatePayload}.
	 */ String echoListTemplatejson = ""{ \""object\"":\""page\"",\""entry\"":[{ \""id\"":\""1423903854504468\"",\""time\"":1483578465379,\""messaging\"":[{ \""sender\"":{ \""id\"":\""****\""} ,\""recipient\"":{ \""id\"":\""****\""} ,\""timestamp\"":1483578464765,\""message\"":{ \""is_echo\"":true,\""app_id\"":****,\""mid\"":\""mid.1483578464765:ed1fe23f35\"",\""seq\"":785209,\""attachments\"":[{ // Tests the echo with a List Template. MessengerCallback callback = FbBotMillJsonUtils.fromJson(echoListTemplatejson,
				MessengerCallback.class); //www.facebook.com/commerce/update/\"",\""type\"":\""template\"",\""payload\"":{\""template_type\"":\""list\"",\""sharable\"":false,\""elements\"":[{\""title\"":\""Title1\"",\""item_url\"":\""http://www.alvinjayreyes.com/\"",\""image_url\"":\""http://blog.domainmonkee.com/wp-content/uploads/2014/05/url.jpg\"",\""subtitle\"":\""This is a sample sub title for your product\"",\""buttons\"":[{\""type\"":\""postback\"",\""title\"":\""View\"",\""payload\"":\""view\""}],\""default_action\"":{\""type\"":\""web_url\"",\""url\"":\""http://www.alvinjayreyes.com/\""}},{\""title\"":\""Title2\"",\""item_url\"":\""http://www.alvinjayreyes.com/\"",\""image_url\"":\""http://blog.domainmonkee.com/wp-content/uploads/2014/05/url.jpg\"",\""subtitle\"":\""This is a sample sub title for your product\"",\""buttons\"":[{\""type\"":\""postback\"",\""title\"":\""View\"",\""payload\"":\""view\""}],\""default_action\"":{\""type\"":\""web_url\"",\""url\"":\""http://www.alvinjayreyes.com/\""}},{\""title\"":\""Title3\"",\""item_url\"":\""http://www.alvinjayreyes.com/\"",\""image_url\"":\""http://blog.domainmonkee.com/wp-content/uploads/2014/05/url.jpg\"",\""subtitle\"":\""This is a sample sub title for your product\"",\""buttons\"":[{\""type\"":\""postback\"",\""title\"":\""View\"",\""payload\"":\""view\""}],\""default_action\"":{\""type\"":\""web_url\"",\""url\"":\""http://www.alvinjayreyes.com/\""}},{\""title\"":\""Title4\"",\""item_url\"":\""http://www.alvinjayreyes.com/\"",\""image_url\"":\""http://blog.domainmonkee.com/wp-content/uploads/2014/05/url.jpg\"",\""subtitle\"":\""This is a sample sub title for your product\"",\""buttons\"":[{\""type\"":\""postback\"",\""title\"":\""View\"",\""payload\"":\""view\""}],\""default_action\"":{\""type\"":\""web_url\"",\""url\"":\""http://www.alvinjayreyes.com/\""}}],\""buttons\"":[{\""type\"":\""postback\"",\""title\"":\""Just Sample\"",\""payload\"":\""Yes\""}]}}]}}]}]}""; MessageEnvelope messageEnvelope = checkCallbackWellFormed(callback);  EchoMessage echoMessage = super.assertInstanceOf(
				messageEnvelope.getMessage(), EchoMessage.class);   Assert.assertTrue(echoMessage.isEcho()); Assert.assertEquals(""****"", echoMessage.getAppId()); Assert.assertEquals(""mid.1483578464765:ed1fe23f35"",
				echoMessage.getMid()); Assert.assertEquals(""785209"", echoMessage.getSeq()); // Checks that individual fields are correctly parsed. super.assertListOfSize(1, echoMessage.getAttachments());   Attachment attachment = echoMessage.getAttachments().get(0); Assert.assertEquals(""Title1, Title2, Title3, Title4"",
				attachment.getTitle()); // Checks the attachment. attachment.getUrl()); Assert.assertEquals(AttachmentType.TEMPLATE, attachment.getType()); //www.facebook.com/commerce/update/"",  ListTemplatePayload payload = super.assertInstanceOf(
				attachment.getPayload(), ListTemplatePayload.class); Assert.assertEquals(PayloadType.LIST, payload.getTemplateType()); super.assertListOfSize(4, payload.getElements()); // Checks the payload. for (int i = 0; i < 4; i++) { checkListTemplateElements(payload.getElements().get(i), i + 1); }   super.assertListOfSize(1, payload.getButtons()); checkPostbackButtonWellFormed(payload.getButtons().get(0),
				""Just Sample"", ""Yes""); } // Checks the buttons.  private void checkListTemplateElements(ListTemplateElement element,
			int position) { /**
	 * Test that checks that each element of the List Template is correctly
	 * parsed.
	 *
	 * @param element the element
	 * @param position the position
	 */ Assert.assertEquals(""Title"" + position, element.getTitle());  element.getImageUrl()); Assert.assertEquals(""This is a sample sub title for your product"",
				element.getSubtitle()); //blog.domainmonkee.com/wp-content/uploads/2014/05/url.jpg"",  super.assertListOfSize(1, element.getButtons()); checkPostbackButtonWellFormed(element.getButtons().get(0), ""View"",
				""view""); // Checks the buttons.  Assert.assertNotNull(element.getDefaultAction()); Assert.assertEquals(ButtonType.WEB_URL, element.getDefaultAction()
				.getType()); // Checks the default action. .getDefaultAction().getUrl()); } //www.alvinjayreyes.com/"", element  @Override
	public String toString() { return ""EchoCallbackTest []""; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.test.incoming.callback.BaseFbBotMillCallbackTest
	 * #toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/api/messengerprofile/persistentmenu/CallToActionNested.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.messengerprofile.persistentmenu;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.annotations.SerializedName;
import co.aurasphere.botmill.fb.model.outcoming.template.button.Button;
import co.aurasphere.botmill.fb.model.outcoming.template.button.ButtonType;


/**
 * The Class CallToAction.
 * 
 * This is the persistent menu call to action object. Holds
 * a list of Call to action menu (based on Postback button).
 */
public class CallToActionNested extends Button implements Serializable {
	
	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;
	
	/** The title. */
	private String title;

	/** The call to actions. */
	@SerializedName(""call_to_actions"")
	private List<Button> callToActions;
	
	/**
	 * Instantiates a new call to action.
	 *
	 * @param title the title
	 */
	public CallToActionNested(String title) {
		this.title = title;
		this.type = ButtonType.NESTED;
		this.callToActions = new ArrayList<Button>();
	}
	
	/**
	 * Instantiates a new call to action.
	 *
	 * @param title the title
	 * @param type the type
	 */
	public CallToActionNested(String title, ButtonType type) {
		this.title = title;
		this.type = ButtonType.NESTED;
		this.callToActions = new ArrayList<Button>();
	}
	
	/**
	 * Gets the title.
	 *
	 * @return the title
	 */
	public String getTitle() {
		return title;
	}
	
	/**
	 * Sets the title.
	 *
	 * @param title the new title
	 */
	public void setTitle(String title) {
		this.title = title;
	}
	
	@Override
	public void setType(ButtonType type) {
		super.setType(type);
	}
	
	@Override
	public ButtonType getType() {
		return super.getType();
	}
	
	
	/**
	 * Gets the call to actions.
	 *
	 * @return the call to actions
	 */
	public List<Button> getCallToActions() {
		return callToActions;
	}
	
	/**
	 * Sets the call to actions.
	 *
	 * @param callToActions the new call to actions
	 */
	public void setCallToActions(List<Button> callToActions) {
		this.callToActions = callToActions;
	}
	
	/**
	 * Sets the call to action buttons.
	 *
	 * @param callToActions the new call to action buttons
	 */
	public void setCallToActionButtons(List<Button> callToActions) {
		this.callToActions = callToActions;
	}
	
	/**
	 * Adds the call to action button.
	 *
	 * @param postBackButton the post back button
	 */
	public void addCallToActionButton(Button postBackButton) {
		this.callToActions.add(postBackButton);
	}
	
}
","package co.aurasphere.botmill.fb.model.api.messengerprofile.persistentmenu; public class CallToActionNested extends Button implements Serializable { private static final long serialVersionUID = 1L; private String title; @SerializedName(""call_to_actions"")
	private List<Button> callToActions; public CallToActionNested(String title) { this.title = title; this.type = ButtonType.NESTED; this.callToActions = new ArrayList<Button>(); } public CallToActionNested(String title, ButtonType type) { this.title = title; this.type = ButtonType.NESTED; this.callToActions = new ArrayList<Button>(); } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } @Override
	public void setType(ButtonType type) { super.setType(type); } @Override
	public ButtonType getType() { return super.getType(); } public List<Button> getCallToActions() { return callToActions; } public void setCallToActions(List<Button> callToActions) { this.callToActions = callToActions; } public void setCallToActionButtons(List<Button> callToActions) { this.callToActions = callToActions; } public void addCallToActionButton(Button postBackButton) { this.callToActions.add(postBackButton); } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.messengerprofile.persistentmenu; public class CallToActionNested extends Button implements Serializable { private static final long serialVersionUID = 1L; private String title; @SerializedName(""call_to_actions"")
	private List<Button> callToActions; public CallToActionNested(String title) { this.title = title; this.type = ButtonType.NESTED; this.callToActions = new ArrayList<Button>(); } public CallToActionNested(String title, ButtonType type) { this.title = title; this.type = ButtonType.NESTED; this.callToActions = new ArrayList<Button>(); } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } @Override
	public void setType(ButtonType type) { super.setType(type); } @Override
	public ButtonType getType() { return super.getType(); } public List<Button> getCallToActions() { return callToActions; } public void setCallToActions(List<Button> callToActions) { this.callToActions = callToActions; } public void setCallToActionButtons(List<Button> callToActions) { this.callToActions = callToActions; } public void addCallToActionButton(Button postBackButton) { this.callToActions.add(postBackButton); } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.messengerprofile.persistentmenu; 
import java.io.Serializable; import java.util.ArrayList; import java.util.List; 
import com.google.gson.annotations.SerializedName; import co.aurasphere.botmill.fb.model.outcoming.template.button.Button; import co.aurasphere.botmill.fb.model.outcoming.template.button.ButtonType; 
  public class CallToActionNested extends Button implements Serializable { /**
 * The Class CallToAction.
 * 
 * This is the persistent menu call to action object. Holds
 * a list of Call to action menu (based on Postback button).
 */ 	 private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */ 	 private String title; /** The title. */  @SerializedName(""call_to_actions"")
	private List<Button> callToActions; /** The call to actions. */ 	 public CallToActionNested(String title) { this.title = title; this.type = ButtonType.NESTED; this.callToActions = new ArrayList<Button>(); } /**
	 * Instantiates a new call to action.
	 *
	 * @param title the title
	 */ 	 public CallToActionNested(String title, ButtonType type) { this.title = title; this.type = ButtonType.NESTED; this.callToActions = new ArrayList<Button>(); } /**
	 * Instantiates a new call to action.
	 *
	 * @param title the title
	 * @param type the type
	 */ 	 public String getTitle() { return title; } /**
	 * Gets the title.
	 *
	 * @return the title
	 */ 	 public void setTitle(String title) { this.title = title; } /**
	 * Sets the title.
	 *
	 * @param title the new title
	 */ @Override
	public void setType(ButtonType type) { super.setType(type); } 	 @Override
	public ButtonType getType() { return super.getType(); } 	 	
	 public List<Button> getCallToActions() { return callToActions; } /**
	 * Gets the call to actions.
	 *
	 * @return the call to actions
	 */ 	 public void setCallToActions(List<Button> callToActions) { this.callToActions = callToActions; } /**
	 * Sets the call to actions.
	 *
	 * @param callToActions the new call to actions
	 */ 	 public void setCallToActionButtons(List<Button> callToActions) { this.callToActions = callToActions; } /**
	 * Sets the call to action buttons.
	 *
	 * @param callToActions the new call to action buttons
	 */ 	 public void addCallToActionButton(Button postBackButton) { this.callToActions.add(postBackButton); } /**
	 * Adds the call to action button.
	 *
	 * @param postBackButton the post back button
	 */ } 	 "
src/main/java/co/aurasphere/botmill/fb/model/api/messengerprofile/persistentmenu/PersistentMenu.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.messengerprofile.persistentmenu;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.annotations.SerializedName;

import co.aurasphere.botmill.fb.model.outcoming.template.button.Button;


/**
 * The Class PersistentMenu.
 * 
 * The persistent menu object holds all the objects necessary to create
 * a persistent menu. This includes Call To Action buttons and the ability
 * to disable the composer input.
 */
public class PersistentMenu implements Serializable {
	
	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The locale. */
	private String locale;
	
	/** The composer input disabled. */
	@SerializedName(""composer_input_disabled"")
	private boolean composerInputDisabled;
	
	/** The call to actions. */
	@SerializedName(""call_to_actions"")
	private List<Button> callToActions;
	
	/** The type. */
	private String type;
	
	/** The title. */
	private String title;
	
	/** The url. */
	private String url;
	
	/** The web view height ratio. */
	@SerializedName(""webview_height_ratio"")
	private String webViewHeightRatio;
	
	/**
	 * Instantiates a new persistent menu.
	 */
	public PersistentMenu() {}
	
	/**
	 * Instantiates a new persistent menu.
	 *
	 * @param locale the locale
	 * @param composerInputDisabled the composer input disabled
	 */
	public PersistentMenu(String locale, boolean composerInputDisabled) {
		this.locale = locale;
		this.composerInputDisabled = composerInputDisabled;
		this.callToActions = new ArrayList<Button>();
	}
	
	/**
	 * Instantiates a new persistent menu.
	 *
	 * @param locale the locale
	 * @param callToActions the call to actions
	 */
	public PersistentMenu(String locale, List<Button> callToActions) {
		this.locale = locale;
		this.callToActions = callToActions;
	}
	
	/**
	 * Instantiates a new persistent menu.
	 *
	 * @param locale the locale
	 * @param composerInputDisabled the composer input disabled
	 * @param callToActions the call to actions
	 */
	public PersistentMenu(String locale,boolean composerInputDisabled, List<Button> callToActions) {
		this.composerInputDisabled = composerInputDisabled;
		this.locale = locale;
		this.callToActions = callToActions;
	}
	
	
	/**
	 * Gets the locale.
	 *
	 * @return the locale
	 */
	public String getLocale() {
		return locale;
	}
	
	/**
	 * Sets the locale.
	 *
	 * @param locale the new locale
	 */
	public void setLocale(String locale) {
		this.locale = locale;
	}
	
	/**
	 * Gets the composer input disabled.
	 *
	 * @return the composer input disabled
	 */
	public boolean getComposerInputDisabled() {
		return composerInputDisabled;
	}
	
	/**
	 * Sets the composer input disabled.
	 *
	 * @param composerInputDisabled the new composer input disabled
	 */
	public void setComposerInputDisabled(boolean composerInputDisabled) {
		this.composerInputDisabled = composerInputDisabled;
	}
	
	/**
	 * Gets the call to actions.
	 *
	 * @return the call to actions
	 */
	public List<Button> getCallToActions() {
		return callToActions;
	}
	
	/**
	 * Sets the call to actions.
	 *
	 * @param callToActions the new call to actions
	 */
	public void setCallToActions(List<Button> callToActions) {
		this.callToActions = callToActions;
	}
	
	/**
	 * Adds the call to action.
	 *
	 * @param callToAction the call to action
	 */
	public void addCallToAction(Button callToAction) {
		this.callToActions.add(callToAction);
	}
	
	/**
	 * Gets the type.
	 *
	 * @return the type
	 */
	public String getType() {
		return type;
	}
	
	/**
	 * Sets the type.
	 *
	 * @param type the new type
	 */
	public void setType(String type) {
		this.type = type;
	}
	
	/**
	 * Gets the title.
	 *
	 * @return the title
	 */
	public String getTitle() {
		return title;
	}
	
	/**
	 * Sets the title.
	 *
	 * @param title the new title
	 */
	public void setTitle(String title) {
		this.title = title;
	}
	
	/**
	 * Gets the url.
	 *
	 * @return the url
	 */
	public String getUrl() {
		return url;
	}
	
	/**
	 * Sets the url.
	 *
	 * @param url the new url
	 */
	public void setUrl(String url) {
		this.url = url;
	}
	
	/**
	 * Gets the web view height ratio.
	 *
	 * @return the web view height ratio
	 */
	public String getWebViewHeightRatio() {
		return webViewHeightRatio;
	}
	
	/**
	 * Sets the web view height ratio.
	 *
	 * @param webViewHeightRatio the new web view height ratio
	 */
	public void setWebViewHeightRatio(String webViewHeightRatio) {
		this.webViewHeightRatio = webViewHeightRatio;
	}
	
	
	
}
","package co.aurasphere.botmill.fb.model.api.messengerprofile.persistentmenu; public class PersistentMenu implements Serializable { private static final long serialVersionUID = 1L; private String locale; @SerializedName(""composer_input_disabled"")
	private boolean composerInputDisabled; @SerializedName(""call_to_actions"")
	private List<Button> callToActions; private String type; private String title; private String url; @SerializedName(""webview_height_ratio"")
	private String webViewHeightRatio; public PersistentMenu() { } public PersistentMenu(String locale, boolean composerInputDisabled) { this.locale = locale; this.composerInputDisabled = composerInputDisabled; this.callToActions = new ArrayList<Button>(); } public PersistentMenu(String locale, List<Button> callToActions) { this.locale = locale; this.callToActions = callToActions; } public PersistentMenu(String locale,boolean composerInputDisabled, List<Button> callToActions) { this.composerInputDisabled = composerInputDisabled; this.locale = locale; this.callToActions = callToActions; } public String getLocale() { return locale; } public void setLocale(String locale) { this.locale = locale; } public boolean getComposerInputDisabled() { return composerInputDisabled; } public void setComposerInputDisabled(boolean composerInputDisabled) { this.composerInputDisabled = composerInputDisabled; } public List<Button> getCallToActions() { return callToActions; } public void setCallToActions(List<Button> callToActions) { this.callToActions = callToActions; } public void addCallToAction(Button callToAction) { this.callToActions.add(callToAction); } public String getType() { return type; } public void setType(String type) { this.type = type; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public String getUrl() { return url; } public void setUrl(String url) { this.url = url; } public String getWebViewHeightRatio() { return webViewHeightRatio; } public void setWebViewHeightRatio(String webViewHeightRatio) { this.webViewHeightRatio = webViewHeightRatio; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.messengerprofile.persistentmenu; public class PersistentMenu implements Serializable { private static final long serialVersionUID = 1L; private String locale; @SerializedName(""composer_input_disabled"")
	private boolean composerInputDisabled; @SerializedName(""call_to_actions"")
	private List<Button> callToActions; private String type; private String title; private String url; @SerializedName(""webview_height_ratio"")
	private String webViewHeightRatio; public PersistentMenu() { } public PersistentMenu(String locale, boolean composerInputDisabled) { this.locale = locale; this.composerInputDisabled = composerInputDisabled; this.callToActions = new ArrayList<Button>(); } public PersistentMenu(String locale, List<Button> callToActions) { this.locale = locale; this.callToActions = callToActions; } public PersistentMenu(String locale,boolean composerInputDisabled, List<Button> callToActions) { this.composerInputDisabled = composerInputDisabled; this.locale = locale; this.callToActions = callToActions; } public String getLocale() { return locale; } public void setLocale(String locale) { this.locale = locale; } public boolean getComposerInputDisabled() { return composerInputDisabled; } public void setComposerInputDisabled(boolean composerInputDisabled) { this.composerInputDisabled = composerInputDisabled; } public List<Button> getCallToActions() { return callToActions; } public void setCallToActions(List<Button> callToActions) { this.callToActions = callToActions; } public void addCallToAction(Button callToAction) { this.callToActions.add(callToAction); } public String getType() { return type; } public void setType(String type) { this.type = type; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public String getUrl() { return url; } public void setUrl(String url) { this.url = url; } public String getWebViewHeightRatio() { return webViewHeightRatio; } public void setWebViewHeightRatio(String webViewHeightRatio) { this.webViewHeightRatio = webViewHeightRatio; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.messengerprofile.persistentmenu; 
import java.io.Serializable; import java.util.ArrayList; import java.util.List; 
import com.google.gson.annotations.SerializedName; 
import co.aurasphere.botmill.fb.model.outcoming.template.button.Button; 
  public class PersistentMenu implements Serializable { /**
 * The Class PersistentMenu.
 * 
 * The persistent menu object holds all the objects necessary to create
 * a persistent menu. This includes Call To Action buttons and the ability
 * to disable the composer input.
 */ 	 private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  private String locale; /** The locale. */ 	 @SerializedName(""composer_input_disabled"")
	private boolean composerInputDisabled; /** The composer input disabled. */ 	 @SerializedName(""call_to_actions"")
	private List<Button> callToActions; /** The call to actions. */ 	 private String type; /** The type. */ 	 private String title; /** The title. */ 	 private String url; /** The url. */ 	 @SerializedName(""webview_height_ratio"")
	private String webViewHeightRatio; /** The web view height ratio. */ 	 public PersistentMenu() { } /**
	 * Instantiates a new persistent menu.
	 */ 	 public PersistentMenu(String locale, boolean composerInputDisabled) { this.locale = locale; this.composerInputDisabled = composerInputDisabled; this.callToActions = new ArrayList<Button>(); } /**
	 * Instantiates a new persistent menu.
	 *
	 * @param locale the locale
	 * @param composerInputDisabled the composer input disabled
	 */ 	 public PersistentMenu(String locale, List<Button> callToActions) { this.locale = locale; this.callToActions = callToActions; } /**
	 * Instantiates a new persistent menu.
	 *
	 * @param locale the locale
	 * @param callToActions the call to actions
	 */ 	 public PersistentMenu(String locale,boolean composerInputDisabled, List<Button> callToActions) { this.composerInputDisabled = composerInputDisabled; this.locale = locale; this.callToActions = callToActions; } /**
	 * Instantiates a new persistent menu.
	 *
	 * @param locale the locale
	 * @param composerInputDisabled the composer input disabled
	 * @param callToActions the call to actions
	 */ 	
	 public String getLocale() { return locale; } /**
	 * Gets the locale.
	 *
	 * @return the locale
	 */ 	 public void setLocale(String locale) { this.locale = locale; } /**
	 * Sets the locale.
	 *
	 * @param locale the new locale
	 */ 	 public boolean getComposerInputDisabled() { return composerInputDisabled; } /**
	 * Gets the composer input disabled.
	 *
	 * @return the composer input disabled
	 */ 	 public void setComposerInputDisabled(boolean composerInputDisabled) { this.composerInputDisabled = composerInputDisabled; } /**
	 * Sets the composer input disabled.
	 *
	 * @param composerInputDisabled the new composer input disabled
	 */ 	 public List<Button> getCallToActions() { return callToActions; } /**
	 * Gets the call to actions.
	 *
	 * @return the call to actions
	 */ 	 public void setCallToActions(List<Button> callToActions) { this.callToActions = callToActions; } /**
	 * Sets the call to actions.
	 *
	 * @param callToActions the new call to actions
	 */ 	 public void addCallToAction(Button callToAction) { this.callToActions.add(callToAction); } /**
	 * Adds the call to action.
	 *
	 * @param callToAction the call to action
	 */ 	 public String getType() { return type; } /**
	 * Gets the type.
	 *
	 * @return the type
	 */ 	 public void setType(String type) { this.type = type; } /**
	 * Sets the type.
	 *
	 * @param type the new type
	 */ 	 public String getTitle() { return title; } /**
	 * Gets the title.
	 *
	 * @return the title
	 */ 	 public void setTitle(String title) { this.title = title; } /**
	 * Sets the title.
	 *
	 * @param title the new title
	 */ 	 public String getUrl() { return url; } /**
	 * Gets the url.
	 *
	 * @return the url
	 */ 	 public void setUrl(String url) { this.url = url; } /**
	 * Sets the url.
	 *
	 * @param url the new url
	 */ 	 public String getWebViewHeightRatio() { return webViewHeightRatio; } /**
	 * Gets the web view height ratio.
	 *
	 * @return the web view height ratio
	 */ 	 public void setWebViewHeightRatio(String webViewHeightRatio) { this.webViewHeightRatio = webViewHeightRatio; } /**
	 * Sets the web view height ratio.
	 *
	 * @param webViewHeightRatio the new web view height ratio
	 */ } 	
	
	 "
src/main/java/co/aurasphere/botmill/fb/model/api/messengerprofile/persistentmenu/PersistentMenuRequest.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.messengerprofile.persistentmenu;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.annotations.SerializedName;


/**
 * The Class PersistentMenuRequest.
 * 
 * The Persistent Menu Request is the main object we sent thru our post request which will
 * create the necessary JSON structured data to create the persistent menu of the bots
 * 
 * @author Alvin P. Reyes
 *
 */
public class PersistentMenuRequest implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;
	
	/** The persistent menu. */
	@SerializedName(""persistent_menu"")
	private List<PersistentMenu> persistentMenu;

	
	/**
	 * Instantiates a new persistent menu request.
	 */
	public PersistentMenuRequest() {
		this.persistentMenu = new ArrayList<PersistentMenu>();
	}
	
	/**
	 * Gets the persistent menu.
	 *
	 * @return the persistent menu
	 */
	public List<PersistentMenu> getPersistentMenu() {
		return persistentMenu;
	}

	/**
	 * Sets the persistent menu.
	 *
	 * @param persistentMenu the new persistent menu
	 */
	public void setPersistentMenu(List<PersistentMenu> persistentMenu) {
		this.persistentMenu = persistentMenu;
	}
	
	/**
	 * Adds the persistent menu.
	 *
	 * @param persistentMenu the persistent menu
	 */
	public void addPersistentMenu(PersistentMenu persistentMenu) {
		this.persistentMenu.add(persistentMenu);
	}
	
	/**
	 * Adds the all persistent menu.
	 *
	 * @param persistentMenus the persistent menus
	 */
	public void addAllPersistentMenu(List<PersistentMenu> persistentMenus) {
		this.persistentMenu.addAll(persistentMenus);
	}	
	
}
","package co.aurasphere.botmill.fb.model.api.messengerprofile.persistentmenu; public class PersistentMenuRequest implements Serializable { private static final long serialVersionUID = 1L; @SerializedName(""persistent_menu"")
	private List<PersistentMenu> persistentMenu; public PersistentMenuRequest() { this.persistentMenu = new ArrayList<PersistentMenu>(); } public List<PersistentMenu> getPersistentMenu() { return persistentMenu; } public void setPersistentMenu(List<PersistentMenu> persistentMenu) { this.persistentMenu = persistentMenu; } public void addPersistentMenu(PersistentMenu persistentMenu) { this.persistentMenu.add(persistentMenu); } public void addAllPersistentMenu(List<PersistentMenu> persistentMenus) { this.persistentMenu.addAll(persistentMenus); } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.messengerprofile.persistentmenu; public class PersistentMenuRequest implements Serializable { private static final long serialVersionUID = 1L; @SerializedName(""persistent_menu"")
	private List<PersistentMenu> persistentMenu; public PersistentMenuRequest() { this.persistentMenu = new ArrayList<PersistentMenu>(); } public List<PersistentMenu> getPersistentMenu() { return persistentMenu; } public void setPersistentMenu(List<PersistentMenu> persistentMenu) { this.persistentMenu = persistentMenu; } public void addPersistentMenu(PersistentMenu persistentMenu) { this.persistentMenu.add(persistentMenu); } public void addAllPersistentMenu(List<PersistentMenu> persistentMenus) { this.persistentMenu.addAll(persistentMenus); } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.messengerprofile.persistentmenu; 
import java.io.Serializable; import java.util.ArrayList; import java.util.List; 
import com.google.gson.annotations.SerializedName; 
  public class PersistentMenuRequest implements Serializable { /**
 * The Class PersistentMenuRequest.
 * 
 * The Persistent Menu Request is the main object we sent thru our post request which will
 * create the necessary JSON structured data to create the persistent menu of the bots
 * 
 * @author Alvin P. Reyes
 *
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */ 	 @SerializedName(""persistent_menu"")
	private List<PersistentMenu> persistentMenu; /** The persistent menu. */ 
	 public PersistentMenuRequest() { this.persistentMenu = new ArrayList<PersistentMenu>(); } /**
	 * Instantiates a new persistent menu request.
	 */ 	 public List<PersistentMenu> getPersistentMenu() { return persistentMenu; } /**
	 * Gets the persistent menu.
	 *
	 * @return the persistent menu
	 */  public void setPersistentMenu(List<PersistentMenu> persistentMenu) { this.persistentMenu = persistentMenu; } /**
	 * Sets the persistent menu.
	 *
	 * @param persistentMenu the new persistent menu
	 */ 	 public void addPersistentMenu(PersistentMenu persistentMenu) { this.persistentMenu.add(persistentMenu); } /**
	 * Adds the persistent menu.
	 *
	 * @param persistentMenu the persistent menu
	 */ 	 public void addAllPersistentMenu(List<PersistentMenu> persistentMenus) { this.persistentMenu.addAll(persistentMenus); } /**
	 * Adds the all persistent menu.
	 *
	 * @param persistentMenus the persistent menus
	 */ } 	 "
src/main/java/co/aurasphere/botmill/fb/model/api/threadsettings/greeting/Greeting.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.threadsettings.greeting;

import java.io.Serializable;

import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotBlank;

import co.aurasphere.botmill.fb.internal.util.validation.FbBotMillValidationConstants;


/**
 * Object which represents a Greeting Text for Thread Settings.
 * 
 * @author Donato Rimenti
 * 
 */
public class Greeting implements Serializable {

	/**
	 * Placeholder for the user first name. This placeholder will be dinamically
	 * changed with the current user first name.
	 */
	public static final String USER_FIRST_NAME = ""{{user_first_name}}"";

	/**
	 * Placeholder for the user last name. This placeholder will be dinamically
	 * changed with the current user last name.
	 */
	public static final String USER_LAST_NAME = ""{{user_last_name}}"";

	/**
	 * Placeholder for the user full name. This placeholder will be dinamically
	 * changed with the current user full name.
	 */
	public static final String USER_FULL_NAME = ""{{user_full_name}}"";

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The message that will be shown to the user. This message can include the
	 * user name. To do that, add to the String the following placeholders
	 * constants from this class:
	 * 
	 * <pre>
	 * - {@link #USER_FIRST_NAME} 
	 * - {@link #USER_LAST_NAME} 
	 * - {@link #USER_FULL_NAME}
	 * </pre>
	 * 
	 * This message can be at most
	 * {@value FbBotMillValidationConstants#THREAD_SETTINGS_GREETING_MESSAGE_MAX_LENGTH}
	 * characters long. The placeholders for the last and full name use 18
	 * characters, meanwhile the first name uses 19 characters.
	 */
	@Size(max = FbBotMillValidationConstants.THREAD_SETTINGS_GREETING_MESSAGE_MAX_LENGTH)
	@NotBlank
	private String text;

	/**
	 * Instantiates a new greeting.
	 *
	 * @param text
	 *            the {@link #text}.
	 */
	public Greeting(String text) {
		this.text = text;
	}

	/**
	 * Gets the {@link #text}.
	 *
	 * @return the {@link #text}.
	 */
	public String getText() {
		return text;
	}

	/**
	 * Sets the {@link #text}.
	 *
	 * @param text
	 *            the {@link #text} to set.
	 */
	public void setText(String text) {
		this.text = text;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((text == null) ? 0 : text.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Greeting other = (Greeting) obj;
		if (text == null) {
			if (other.text != null)
				return false;
		} else if (!text.equals(other.text))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""Greeting [text="" + text + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.api.threadsettings.greeting; public class Greeting implements Serializable { public static final String USER_FIRST_NAME = ""{ { user_first_name} } ""; public static final String USER_LAST_NAME = ""{ { user_last_name} } ""; public static final String USER_FULL_NAME = ""{ { user_full_name} } ""; private static final long serialVersionUID = 1L; @Size(max = FbBotMillValidationConstants.THREAD_SETTINGS_GREETING_MESSAGE_MAX_LENGTH)
	@NotBlank
	private String text; public Greeting(String text) { this.text = text; } public String getText() { return text; } public void setText(String text) { this.text = text; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((text == null) ? 0 : text.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Greeting other = (Greeting) obj; if (text == null) { if (other.text != null)
				return false; } else if (!text.equals(other.text))
			return false; return true; } @Override
	public String toString() { return ""Greeting [text="" + text + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.threadsettings.greeting; public class Greeting implements Serializable { public static final String USER_FIRST_NAME = ""{ { user_first_name} } ""; public static final String USER_LAST_NAME = ""{ { user_last_name} } ""; public static final String USER_FULL_NAME = ""{ { user_full_name} } ""; private static final long serialVersionUID = 1L; @Size(max = FbBotMillValidationConstants.THREAD_SETTINGS_GREETING_MESSAGE_MAX_LENGTH)
	@NotBlank
	private String text; public Greeting(String text) { this.text = text; } public String getText() { return text; } public void setText(String text) { this.text = text; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((text == null) ? 0 : text.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Greeting other = (Greeting) obj; if (text == null) { if (other.text != null)
				return false; } else if (!text.equals(other.text))
			return false; return true; } @Override
	public String toString() { return ""Greeting [text="" + text + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.threadsettings.greeting; 
import java.io.Serializable; 
import javax.validation.constraints.Size; 
import org.hibernate.validator.constraints.NotBlank; 
import co.aurasphere.botmill.fb.internal.util.validation.FbBotMillValidationConstants; 
  public class Greeting implements Serializable { /**
 * Object which represents a Greeting Text for Thread Settings.
 * 
 * @author Donato Rimenti
 * 
 */  public static final String USER_FIRST_NAME = ""{ { user_first_name} } ""; /**
	 * Placeholder for the user first name. This placeholder will be dinamically
	 * changed with the current user first name.
	 */  public static final String USER_LAST_NAME = ""{ { user_last_name} } ""; /**
	 * Placeholder for the user last name. This placeholder will be dinamically
	 * changed with the current user last name.
	 */  public static final String USER_FULL_NAME = ""{ { user_full_name} } ""; /**
	 * Placeholder for the user full name. This placeholder will be dinamically
	 * changed with the current user full name.
	 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @Size(max = FbBotMillValidationConstants.THREAD_SETTINGS_GREETING_MESSAGE_MAX_LENGTH)
	@NotBlank
	private String text; /**
	 * The message that will be shown to the user. This message can include the
	 * user name. To do that, add to the String the following placeholders
	 * constants from this class:
	 * 
	 * <pre>
	 * - {@link #USER_FIRST_NAME} 
	 * - {@link #USER_LAST_NAME} 
	 * - {@link #USER_FULL_NAME}
	 * </pre>
	 * 
	 * This message can be at most
	 * {@value FbBotMillValidationConstants#THREAD_SETTINGS_GREETING_MESSAGE_MAX_LENGTH}
	 * characters long. The placeholders for the last and full name use 18
	 * characters, meanwhile the first name uses 19 characters.
	 */  public Greeting(String text) { this.text = text; } /**
	 * Instantiates a new greeting.
	 *
	 * @param text
	 *            the {@link #text}.
	 */  public String getText() { return text; } /**
	 * Gets the {@link #text}.
	 *
	 * @return the {@link #text}.
	 */  public void setText(String text) { this.text = text; } /**
	 * Sets the {@link #text}.
	 *
	 * @param text
	 *            the {@link #text} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((text == null) ? 0 : text.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Greeting other = (Greeting) obj; if (text == null) { if (other.text != null)
				return false; } else if (!text.equals(other.text))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""Greeting [text="" + text + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/api/threadsettings/greeting/SetGreetingTextRequest.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.api.threadsettings.greeting;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import co.aurasphere.botmill.fb.model.api.threadsettings.SettingType;
import co.aurasphere.botmill.fb.model.api.threadsettings.ThreadSettingsBaseRequest;


/**
 * Request used for Thread Settings of Text Greeting.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings""
 *      >Facebook's Messenger Platform Thread Settings Documentation</a>
 */
public class SetGreetingTextRequest extends ThreadSettingsBaseRequest {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Greeting text.
	 */
	@Valid
	@NotNull
	private Greeting greeting;

	/**
	 * Instantiates a new set greeting text request.
	 *
	 * @param greeting
	 *            the {@link #greeting}.
	 */
	public SetGreetingTextRequest(String greeting) {
		this.type = SettingType.GREETING;
		this.greeting = new Greeting(greeting);
	}

	/**
	 * Gets the {@link #greeting}.
	 *
	 * @return the {@link #greeting}.
	 */
	public Greeting getGreeting() {
		return greeting;
	}

	/**
	 * Sets the {@link #greeting}.
	 *
	 * @param greeting
	 *            the {@link #greeting} to set.
	 */
	public void setGreeting(Greeting greeting) {
		this.greeting = greeting;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.threadsettings.ThreadSettingsBaseRequest
	 * #hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result
				+ ((greeting == null) ? 0 : greeting.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.threadsettings.ThreadSettingsBaseRequest
	 * #equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		SetGreetingTextRequest other = (SetGreetingTextRequest) obj;
		if (greeting == null) {
			if (other.greeting != null)
				return false;
		} else if (!greeting.equals(other.greeting))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.threadsettings.ThreadSettingsBaseRequest
	 * #toString()
	 */
	@Override
	public String toString() {
		return ""SetGreetingTextRequest [greeting="" + greeting + "", type=""
				+ type + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.api.threadsettings.greeting; public class SetGreetingTextRequest extends ThreadSettingsBaseRequest { private static final long serialVersionUID = 1L; @Valid
	@NotNull
	private Greeting greeting; public SetGreetingTextRequest(String greeting) { this.type = SettingType.GREETING; this.greeting = new Greeting(greeting); } public Greeting getGreeting() { return greeting; } public void setGreeting(Greeting greeting) { this.greeting = greeting; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((greeting == null) ? 0 : greeting.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; SetGreetingTextRequest other = (SetGreetingTextRequest) obj; if (greeting == null) { if (other.greeting != null)
				return false; } else if (!greeting.equals(other.greeting))
			return false; return true; } @Override
	public String toString() { return ""SetGreetingTextRequest [greeting="" + greeting + "", type=""
				+ type + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.threadsettings.greeting; public class SetGreetingTextRequest extends ThreadSettingsBaseRequest { private static final long serialVersionUID = 1L; @Valid
	@NotNull
	private Greeting greeting; public SetGreetingTextRequest(String greeting) { this.type = SettingType.GREETING; this.greeting = new Greeting(greeting); } public Greeting getGreeting() { return greeting; } public void setGreeting(Greeting greeting) { this.greeting = greeting; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((greeting == null) ? 0 : greeting.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; SetGreetingTextRequest other = (SetGreetingTextRequest) obj; if (greeting == null) { if (other.greeting != null)
				return false; } else if (!greeting.equals(other.greeting))
			return false; return true; } @Override
	public String toString() { return ""SetGreetingTextRequest [greeting="" + greeting + "", type=""
				+ type + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.api.threadsettings.greeting; 
import javax.validation.Valid; import javax.validation.constraints.NotNull; 
import co.aurasphere.botmill.fb.model.api.threadsettings.SettingType; import co.aurasphere.botmill.fb.model.api.threadsettings.ThreadSettingsBaseRequest; 
  public class SetGreetingTextRequest extends ThreadSettingsBaseRequest { /**
 * Request used for Thread Settings of Text Greeting.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings""
 *      >Facebook's Messenger Platform Thread Settings Documentation</a>
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @Valid
	@NotNull
	private Greeting greeting; /**
	 * Greeting text.
	 */  public SetGreetingTextRequest(String greeting) { this.type = SettingType.GREETING; this.greeting = new Greeting(greeting); } /**
	 * Instantiates a new set greeting text request.
	 *
	 * @param greeting
	 *            the {@link #greeting}.
	 */  public Greeting getGreeting() { return greeting; } /**
	 * Gets the {@link #greeting}.
	 *
	 * @return the {@link #greeting}.
	 */  public void setGreeting(Greeting greeting) { this.greeting = greeting; } /**
	 * Sets the {@link #greeting}.
	 *
	 * @param greeting
	 *            the {@link #greeting} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((greeting == null) ? 0 : greeting.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.threadsettings.ThreadSettingsBaseRequest
	 * #hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; SetGreetingTextRequest other = (SetGreetingTextRequest) obj; if (greeting == null) { if (other.greeting != null)
				return false; } else if (!greeting.equals(other.greeting))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.threadsettings.ThreadSettingsBaseRequest
	 * #equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""SetGreetingTextRequest [greeting="" + greeting + "", type=""
				+ type + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.threadsettings.ThreadSettingsBaseRequest
	 * #toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/api/threadsettings/payment/PaymentDevModeAction.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 */
package co.aurasphere.botmill.fb.model.api.threadsettings.payment;


/**
 * The Enum PaymentDevModeAction.
 */
public enum PaymentDevModeAction {
	
	/** The add. */
	ADD, 
 /** The remove. */
 REMOVE;
}
",package co.aurasphere.botmill.fb.model.api.threadsettings.payment; public enum PaymentDevModeAction { REMOVE; },0 0 0 0 0,package co.aurasphere.botmill.fb.model.api.threadsettings.payment; public enum PaymentDevModeAction { REMOVE; } ,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 */ package co.aurasphere.botmill.fb.model.api.threadsettings.payment; 
  public enum PaymentDevModeAction { /**
 * The Enum PaymentDevModeAction.
 */ 	 /** The add. */ REMOVE; } /** The remove. */ "
src/main/java/co/aurasphere/botmill/fb/model/api/threadsettings/payment/PaymentSettings.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 */
package co.aurasphere.botmill.fb.model.api.threadsettings.payment;

import java.util.List;

import co.aurasphere.botmill.fb.model.api.threadsettings.SettingType;
import co.aurasphere.botmill.fb.model.api.threadsettings.ThreadSettingsBaseRequest;

import com.google.gson.annotations.SerializedName;


/**
 * Model class for the Payment Thread Settings.
 * 
 * @author Alvin Reyes
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/payment""
 *      >Facebook's Messenger Platform Payment Thread Settings Documentation</a>
 */
public class PaymentSettings extends ThreadSettingsBaseRequest {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Valid URL for the payment privacy. The payment_privacy_url will appear in
	 * the payment dialogs and people will be able to view these terms.
	 */
	@SerializedName(""payment_privacy_url"")
	private String privacyUrl;

	/**
	 * Your PGP Public Key (4096 bit RSA). The payment_public_key is used to
	 * encrypt sensitive payment data sent to you.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/payments-reference#encryption_key""
	 *      >Facebook's encryption guide</a>
	 */
	@SerializedName(""payment_public_key"")
	private String publicKey;

	/**
	 * ADD/REMOVE dev mode test users.
	 */
	@SerializedName(""payment_dev_mode_action"")
	private PaymentDevModeAction paymentDevModeAction;

	/**
	 * A list of page scoped user id to be added as payment testers.
	 */
	@SerializedName(""payment_testers"")
	private List<String> paymentTesters;

	/**
	 * Instantiates a new PaymentSettings.
	 */
	public PaymentSettings() {
		this.type = SettingType.PAYMENT;
	}

	/**
	 * Gets the {@link #privacyUrl}.
	 *
	 * @return the {@link #privacyUrl}.
	 */
	public String getPrivacyUrl() {
		return privacyUrl;
	}

	/**
	 * Sets the {@link #privacyUrl}.
	 *
	 * @param privacyUrl
	 *            the {@link #privacyUrl} to set.
	 */
	public void setPrivacyUrl(String privacyUrl) {
		this.privacyUrl = privacyUrl;
	}

	/**
	 * Gets the {@link #publicKey}.
	 *
	 * @return the {@link #publicKey}.
	 */
	public String getPublicKey() {
		return publicKey;
	}

	/**
	 * Sets the {@link #publicKey}.
	 *
	 * @param publicKey
	 *            the {@link #publicKey} to set.
	 */
	public void setPublicKey(String publicKey) {
		this.publicKey = publicKey;
	}

	/**
	 * Gets the {@link #paymentDevModeAction}.
	 *
	 * @return the {@link #paymentDevModeAction}.
	 */
	public PaymentDevModeAction getPaymentDevModeAction() {
		return paymentDevModeAction;
	}

	/**
	 * Sets the {@link #paymentDevModeAction}.
	 *
	 * @param paymentDevModeAction
	 *            the {@link #paymentDevModeAction} to set.
	 */
	public void setPaymentDevModeAction(
			PaymentDevModeAction paymentDevModeAction) {
		this.paymentDevModeAction = paymentDevModeAction;
	}

	/**
	 * Gets the {@link #paymentTesters}.
	 *
	 * @return the {@link #paymentTesters}.
	 */
	public List<String> getPaymentTesters() {
		return paymentTesters;
	}

	/**
	 * Sets the {@link #paymentTesters}.
	 *
	 * @param paymentTesters
	 *            the {@link #paymentTesters} to set.
	 */
	public void setPaymentTesters(List<String> paymentTesters) {
		this.paymentTesters = paymentTesters;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime
				* result
				+ ((paymentDevModeAction == null) ? 0 : paymentDevModeAction
						.hashCode());
		result = prime * result
				+ ((paymentTesters == null) ? 0 : paymentTesters.hashCode());
		result = prime * result
				+ ((privacyUrl == null) ? 0 : privacyUrl.hashCode());
		result = prime * result
				+ ((publicKey == null) ? 0 : publicKey.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		PaymentSettings other = (PaymentSettings) obj;
		if (paymentDevModeAction != other.paymentDevModeAction)
			return false;
		if (paymentTesters == null) {
			if (other.paymentTesters != null)
				return false;
		} else if (!paymentTesters.equals(other.paymentTesters))
			return false;
		if (privacyUrl == null) {
			if (other.privacyUrl != null)
				return false;
		} else if (!privacyUrl.equals(other.privacyUrl))
			return false;
		if (publicKey == null) {
			if (other.publicKey != null)
				return false;
		} else if (!publicKey.equals(other.publicKey))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""PaymentSettings [privacyUrl="" + privacyUrl + "", publicKey=""
				+ publicKey + "", paymentDevModeAction="" + paymentDevModeAction
				+ "", paymentTesters="" + paymentTesters + "", type="" + type + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.api.threadsettings.payment; public class PaymentSettings extends ThreadSettingsBaseRequest { private static final long serialVersionUID = 1L; @SerializedName(""payment_privacy_url"")
	private String privacyUrl; @SerializedName(""payment_public_key"")
	private String publicKey; @SerializedName(""payment_dev_mode_action"")
	private PaymentDevModeAction paymentDevModeAction; @SerializedName(""payment_testers"")
	private List<String> paymentTesters; public PaymentSettings() { this.type = SettingType.PAYMENT; } public String getPrivacyUrl() { return privacyUrl; } public void setPrivacyUrl(String privacyUrl) { this.privacyUrl = privacyUrl; } public String getPublicKey() { return publicKey; } public void setPublicKey(String publicKey) { this.publicKey = publicKey; } public PaymentDevModeAction getPaymentDevModeAction() { return paymentDevModeAction; } public void setPaymentDevModeAction(
			PaymentDevModeAction paymentDevModeAction) { this.paymentDevModeAction = paymentDevModeAction; } public List<String> getPaymentTesters() { return paymentTesters; } public void setPaymentTesters(List<String> paymentTesters) { this.paymentTesters = paymentTesters; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime
				* result
				+ ((paymentDevModeAction == null) ? 0 : paymentDevModeAction
						.hashCode()); result = prime * result
				+ ((paymentTesters == null) ? 0 : paymentTesters.hashCode()); result = prime * result
				+ ((privacyUrl == null) ? 0 : privacyUrl.hashCode()); result = prime * result
				+ ((publicKey == null) ? 0 : publicKey.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PaymentSettings other = (PaymentSettings) obj; if (paymentDevModeAction != other.paymentDevModeAction)
			return false; if (paymentTesters == null) { if (other.paymentTesters != null)
				return false; } else if (!paymentTesters.equals(other.paymentTesters))
			return false; if (privacyUrl == null) { if (other.privacyUrl != null)
				return false; } else if (!privacyUrl.equals(other.privacyUrl))
			return false; if (publicKey == null) { if (other.publicKey != null)
				return false; } else if (!publicKey.equals(other.publicKey))
			return false; return true; } @Override
	public String toString() { return ""PaymentSettings [privacyUrl="" + privacyUrl + "", publicKey=""
				+ publicKey + "", paymentDevModeAction="" + paymentDevModeAction
				+ "", paymentTesters="" + paymentTesters + "", type="" + type + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.api.threadsettings.payment; public class PaymentSettings extends ThreadSettingsBaseRequest { private static final long serialVersionUID = 1L; @SerializedName(""payment_privacy_url"")
	private String privacyUrl; @SerializedName(""payment_public_key"")
	private String publicKey; @SerializedName(""payment_dev_mode_action"")
	private PaymentDevModeAction paymentDevModeAction; @SerializedName(""payment_testers"")
	private List<String> paymentTesters; public PaymentSettings() { this.type = SettingType.PAYMENT; } public String getPrivacyUrl() { return privacyUrl; } public void setPrivacyUrl(String privacyUrl) { this.privacyUrl = privacyUrl; } public String getPublicKey() { return publicKey; } public void setPublicKey(String publicKey) { this.publicKey = publicKey; } public PaymentDevModeAction getPaymentDevModeAction() { return paymentDevModeAction; } public void setPaymentDevModeAction(
			PaymentDevModeAction paymentDevModeAction) { this.paymentDevModeAction = paymentDevModeAction; } public List<String> getPaymentTesters() { return paymentTesters; } public void setPaymentTesters(List<String> paymentTesters) { this.paymentTesters = paymentTesters; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime
				* result
				+ ((paymentDevModeAction == null) ? 0 : paymentDevModeAction
						.hashCode()); result = prime * result
				+ ((paymentTesters == null) ? 0 : paymentTesters.hashCode()); result = prime * result
				+ ((privacyUrl == null) ? 0 : privacyUrl.hashCode()); result = prime * result
				+ ((publicKey == null) ? 0 : publicKey.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PaymentSettings other = (PaymentSettings) obj; if (paymentDevModeAction != other.paymentDevModeAction)
			return false; if (paymentTesters == null) { if (other.paymentTesters != null)
				return false; } else if (!paymentTesters.equals(other.paymentTesters))
			return false; if (privacyUrl == null) { if (other.privacyUrl != null)
				return false; } else if (!privacyUrl.equals(other.privacyUrl))
			return false; if (publicKey == null) { if (other.publicKey != null)
				return false; } else if (!publicKey.equals(other.publicKey))
			return false; return true; } @Override
	public String toString() { return ""PaymentSettings [privacyUrl="" + privacyUrl + "", publicKey=""
				+ publicKey + "", paymentDevModeAction="" + paymentDevModeAction
				+ "", paymentTesters="" + paymentTesters + "", type="" + type + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 */ package co.aurasphere.botmill.fb.model.api.threadsettings.payment; 
import java.util.List; 
import co.aurasphere.botmill.fb.model.api.threadsettings.SettingType; import co.aurasphere.botmill.fb.model.api.threadsettings.ThreadSettingsBaseRequest; 
import com.google.gson.annotations.SerializedName; 
  public class PaymentSettings extends ThreadSettingsBaseRequest { /**
 * Model class for the Payment Thread Settings.
 * 
 * @author Alvin Reyes
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/thread-settings/payment""
 *      >Facebook's Messenger Platform Payment Thread Settings Documentation</a>
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @SerializedName(""payment_privacy_url"")
	private String privacyUrl; /**
	 * Valid URL for the payment privacy. The payment_privacy_url will appear in
	 * the payment dialogs and people will be able to view these terms.
	 */  @SerializedName(""payment_public_key"")
	private String publicKey; /**
	 * Your PGP Public Key (4096 bit RSA). The payment_public_key is used to
	 * encrypt sensitive payment data sent to you.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/payments-reference#encryption_key""
	 *      >Facebook's encryption guide</a>
	 */  @SerializedName(""payment_dev_mode_action"")
	private PaymentDevModeAction paymentDevModeAction; /**
	 * ADD/REMOVE dev mode test users.
	 */  @SerializedName(""payment_testers"")
	private List<String> paymentTesters; /**
	 * A list of page scoped user id to be added as payment testers.
	 */  public PaymentSettings() { this.type = SettingType.PAYMENT; } /**
	 * Instantiates a new PaymentSettings.
	 */  public String getPrivacyUrl() { return privacyUrl; } /**
	 * Gets the {@link #privacyUrl}.
	 *
	 * @return the {@link #privacyUrl}.
	 */  public void setPrivacyUrl(String privacyUrl) { this.privacyUrl = privacyUrl; } /**
	 * Sets the {@link #privacyUrl}.
	 *
	 * @param privacyUrl
	 *            the {@link #privacyUrl} to set.
	 */  public String getPublicKey() { return publicKey; } /**
	 * Gets the {@link #publicKey}.
	 *
	 * @return the {@link #publicKey}.
	 */  public void setPublicKey(String publicKey) { this.publicKey = publicKey; } /**
	 * Sets the {@link #publicKey}.
	 *
	 * @param publicKey
	 *            the {@link #publicKey} to set.
	 */  public PaymentDevModeAction getPaymentDevModeAction() { return paymentDevModeAction; } /**
	 * Gets the {@link #paymentDevModeAction}.
	 *
	 * @return the {@link #paymentDevModeAction}.
	 */  public void setPaymentDevModeAction(
			PaymentDevModeAction paymentDevModeAction) { this.paymentDevModeAction = paymentDevModeAction; } /**
	 * Sets the {@link #paymentDevModeAction}.
	 *
	 * @param paymentDevModeAction
	 *            the {@link #paymentDevModeAction} to set.
	 */  public List<String> getPaymentTesters() { return paymentTesters; } /**
	 * Gets the {@link #paymentTesters}.
	 *
	 * @return the {@link #paymentTesters}.
	 */  public void setPaymentTesters(List<String> paymentTesters) { this.paymentTesters = paymentTesters; } /**
	 * Sets the {@link #paymentTesters}.
	 *
	 * @param paymentTesters
	 *            the {@link #paymentTesters} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime
				* result
				+ ((paymentDevModeAction == null) ? 0 : paymentDevModeAction
						.hashCode()); result = prime * result
				+ ((paymentTesters == null) ? 0 : paymentTesters.hashCode()); result = prime * result
				+ ((privacyUrl == null) ? 0 : privacyUrl.hashCode()); result = prime * result
				+ ((publicKey == null) ? 0 : publicKey.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PaymentSettings other = (PaymentSettings) obj; if (paymentDevModeAction != other.paymentDevModeAction)
			return false; if (paymentTesters == null) { if (other.paymentTesters != null)
				return false; } else if (!paymentTesters.equals(other.paymentTesters))
			return false; if (privacyUrl == null) { if (other.privacyUrl != null)
				return false; } else if (!privacyUrl.equals(other.privacyUrl))
			return false; if (publicKey == null) { if (other.publicKey != null)
				return false; } else if (!publicKey.equals(other.publicKey))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""PaymentSettings [privacyUrl="" + privacyUrl + "", publicKey=""
				+ publicKey + "", paymentDevModeAction="" + paymentDevModeAction
				+ "", paymentTesters="" + paymentTesters + "", type="" + type + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/incoming/callback/payment/Payment.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming.callback.payment;

import java.io.Serializable;

import co.aurasphere.botmill.fb.model.outcoming.template.button.BuyButton;
import co.aurasphere.botmill.fb.model.outcoming.template.button.RequestedUserInfo;

import com.google.gson.annotations.SerializedName;


/**
 * Model for the Payment Callback. <br>
 * <br>
 * This callback occurs when a persons taps the pay button from the checkout
 * dialog rendered by the {@link BuyButton}. It contains the requested user
 * information as well as payment credentials. Depends on the payment provider
 * you use, the payment credential will differ. <br>
 * <br>
 * You must subscribe to this callback by selecting the messaging_payments field
 * when setting up your webhook.
 * 
 * <h1>Stripe/Paypal</h1>
 * 
 * After user click on pay, user will be charged directly and the payment will
 * be send to your Stripe/Paypal account. This webhook event will be called once
 * the process succeed. All the requested user information that user entered in
 * the payment dialog will be passed back in the webhook event. The charge_id
 * from Paypal/Stripe will be passed to you for tracking the payment. You need
 * to return HTTP status of 200 once you finished processing the event. <br>
 * <br>
 * If the payment is a test payment, we will not charge the card but will send a
 * result with dummy fb_payment_id/charge_id to you. You can do test payment
 * with Stripe/Paypal only if your page has payment permission for now. Refers
 * to <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/complete-guide/payments#test_payments""
 * >How to Test Payment</a> for details. <br>
 * 
 * <h1>Tokenized Payment</h1>
 * 
 * If you are using tokenized payment, when user click on pay, we will send you
 * a single-use Discover virtual card provisioned by PayPal. The card credential
 * will be encrypted by the public key you provided in previous steps. You can
 * then decrypt the tokenized card by following the <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/complete-guide/payments#decrypting""
 * >detail steps here</a>. After you successfully decoded the credential, you
 * can then integrate with your preferred payment provider to charge the card.
 * You need to return HTTP status of 200 once you finished processing the event. <br>
 * If the payment is a test payment, you will get a dummy tokenized card back
 * with the following dummy information (card_number: 4111111111111111, cvv:
 * 123, expiry month: 11, expiry year: 2020). You can test tokenized payment
 * even if your page/app has not been accepted to beta program. Refers to <a
 * href=
 * ""https://developers.facebook.com/docs/messenger-platform/complete-guide/payments#test_payments""
 * >How to Test Payment</a> for details. <br>
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference/payment""
 *      >Facebook's Messenger Platform Payment Callback Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/buy-button""
 *      >Facebook's Messenger Platform Buy Button Documentation</a>
 * 
 */
public class Payment implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Metadata defined in the Buy Button.
	 */
	private String payload;

	/**
	 * Information that was requested from the user by the Buy Button.
	 */
	@SerializedName(""requested_user_info"")
	private RequestedUserInfo requestedUserInfo;

	/**
	 * Payment credentials.
	 */
	@SerializedName(""payment_credential"")
	private PaymentCredential paymentCredential;

	/**
	 * Total amount of transaction.
	 */
	private PaymentAmount amount;

	/**
	 * The option_id of the selected shipping option sent via the <a href=
	 * ""https://developers.facebook.com/docs/messenger-platform/webhook-reference/checkout-update""
	 * >checkout update callback</a>. Only applicable for flexible payments.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference/checkout-update""
	 *      >Facebook's Messenger Platform Checkout Update Callback
	 *      Documentation</a>
	 */
	@SerializedName(""shipping_option_id"")
	private String shippingOptionId;

	/**
	 * Gets the {@link #payload}.
	 *
	 * @return the {@link #payload}.
	 */
	public String getPayload() {
		return payload;
	}

	/**
	 * Sets the {@link #payload}.
	 *
	 * @param payload
	 *            the {@link #payload} to set.
	 */
	public void setPayload(String payload) {
		this.payload = payload;
	}

	/**
	 * Gets the {@link #requestedUserInfo}.
	 *
	 * @return the {@link #requestedUserInfo}.
	 */
	public RequestedUserInfo getRequestedUserInfo() {
		return requestedUserInfo;
	}

	/**
	 * Sets the {@link #requestedUserInfo}.
	 *
	 * @param requestedUserInfo
	 *            the {@link #requestedUserInfo} to set.
	 */
	public void setRequestedUserInfo(RequestedUserInfo requestedUserInfo) {
		this.requestedUserInfo = requestedUserInfo;
	}

	/**
	 * Gets the {@link #paymentCredential}.
	 *
	 * @return the {@link #paymentCredential}.
	 */
	public PaymentCredential getPaymentCredential() {
		return paymentCredential;
	}

	/**
	 * Sets the {@link #paymentCredential}.
	 *
	 * @param paymentCredential
	 *            the {@link #paymentCredential} to set.
	 */
	public void setPaymentCredential(PaymentCredential paymentCredential) {
		this.paymentCredential = paymentCredential;
	}

	/**
	 * Gets the {@link #amount}.
	 *
	 * @return the {@link #amount}.
	 */
	public PaymentAmount getAmount() {
		return amount;
	}

	/**
	 * Sets the {@link #amount}.
	 *
	 * @param amount
	 *            the {@link #amount} to set.
	 */
	public void setAmount(PaymentAmount amount) {
		this.amount = amount;
	}

	/**
	 * Gets the {@link #shippingOptionId}.
	 *
	 * @return the {@link #shippingOptionId}.
	 */
	public String getShippingOptionId() {
		return shippingOptionId;
	}

	/**
	 * Sets the {@link #shippingOptionId}.
	 *
	 * @param shippingOptionId
	 *            the {@link #shippingOptionId} to set.
	 */
	public void setShippingOptionId(String shippingOptionId) {
		this.shippingOptionId = shippingOptionId;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((amount == null) ? 0 : amount.hashCode());
		result = prime * result + ((payload == null) ? 0 : payload.hashCode());
		result = prime
				* result
				+ ((paymentCredential == null) ? 0 : paymentCredential
						.hashCode());
		result = prime
				* result
				+ ((requestedUserInfo == null) ? 0 : requestedUserInfo
						.hashCode());
		result = prime
				* result
				+ ((shippingOptionId == null) ? 0 : shippingOptionId.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Payment other = (Payment) obj;
		if (amount == null) {
			if (other.amount != null)
				return false;
		} else if (!amount.equals(other.amount))
			return false;
		if (payload == null) {
			if (other.payload != null)
				return false;
		} else if (!payload.equals(other.payload))
			return false;
		if (paymentCredential == null) {
			if (other.paymentCredential != null)
				return false;
		} else if (!paymentCredential.equals(other.paymentCredential))
			return false;
		if (requestedUserInfo != other.requestedUserInfo)
			return false;
		if (shippingOptionId == null) {
			if (other.shippingOptionId != null)
				return false;
		} else if (!shippingOptionId.equals(other.shippingOptionId))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""Payment [payload="" + payload + "", requestedUserInfo=""
				+ requestedUserInfo + "", paymentCredential=""
				+ paymentCredential + "", amount="" + amount
				+ "", shippingOptionId="" + shippingOptionId + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.incoming.callback.payment; public class Payment implements Serializable { private static final long serialVersionUID = 1L; private String payload; @SerializedName(""requested_user_info"")
	private RequestedUserInfo requestedUserInfo; @SerializedName(""payment_credential"")
	private PaymentCredential paymentCredential; private PaymentAmount amount; @SerializedName(""shipping_option_id"")
	private String shippingOptionId; public String getPayload() { return payload; } public void setPayload(String payload) { this.payload = payload; } public RequestedUserInfo getRequestedUserInfo() { return requestedUserInfo; } public void setRequestedUserInfo(RequestedUserInfo requestedUserInfo) { this.requestedUserInfo = requestedUserInfo; } public PaymentCredential getPaymentCredential() { return paymentCredential; } public void setPaymentCredential(PaymentCredential paymentCredential) { this.paymentCredential = paymentCredential; } public PaymentAmount getAmount() { return amount; } public void setAmount(PaymentAmount amount) { this.amount = amount; } public String getShippingOptionId() { return shippingOptionId; } public void setShippingOptionId(String shippingOptionId) { this.shippingOptionId = shippingOptionId; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((amount == null) ? 0 : amount.hashCode()); result = prime * result + ((payload == null) ? 0 : payload.hashCode()); result = prime
				* result
				+ ((paymentCredential == null) ? 0 : paymentCredential
						.hashCode()); result = prime
				* result
				+ ((requestedUserInfo == null) ? 0 : requestedUserInfo
						.hashCode()); result = prime
				* result
				+ ((shippingOptionId == null) ? 0 : shippingOptionId.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Payment other = (Payment) obj; if (amount == null) { if (other.amount != null)
				return false; } else if (!amount.equals(other.amount))
			return false; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; if (paymentCredential == null) { if (other.paymentCredential != null)
				return false; } else if (!paymentCredential.equals(other.paymentCredential))
			return false; if (requestedUserInfo != other.requestedUserInfo)
			return false; if (shippingOptionId == null) { if (other.shippingOptionId != null)
				return false; } else if (!shippingOptionId.equals(other.shippingOptionId))
			return false; return true; } @Override
	public String toString() { return ""Payment [payload="" + payload + "", requestedUserInfo=""
				+ requestedUserInfo + "", paymentCredential=""
				+ paymentCredential + "", amount="" + amount
				+ "", shippingOptionId="" + shippingOptionId + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.incoming.callback.payment; public class Payment implements Serializable { private static final long serialVersionUID = 1L; private String payload; @SerializedName(""requested_user_info"")
	private RequestedUserInfo requestedUserInfo; @SerializedName(""payment_credential"")
	private PaymentCredential paymentCredential; private PaymentAmount amount; @SerializedName(""shipping_option_id"")
	private String shippingOptionId; public String getPayload() { return payload; } public void setPayload(String payload) { this.payload = payload; } public RequestedUserInfo getRequestedUserInfo() { return requestedUserInfo; } public void setRequestedUserInfo(RequestedUserInfo requestedUserInfo) { this.requestedUserInfo = requestedUserInfo; } public PaymentCredential getPaymentCredential() { return paymentCredential; } public void setPaymentCredential(PaymentCredential paymentCredential) { this.paymentCredential = paymentCredential; } public PaymentAmount getAmount() { return amount; } public void setAmount(PaymentAmount amount) { this.amount = amount; } public String getShippingOptionId() { return shippingOptionId; } public void setShippingOptionId(String shippingOptionId) { this.shippingOptionId = shippingOptionId; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((amount == null) ? 0 : amount.hashCode()); result = prime * result + ((payload == null) ? 0 : payload.hashCode()); result = prime
				* result
				+ ((paymentCredential == null) ? 0 : paymentCredential
						.hashCode()); result = prime
				* result
				+ ((requestedUserInfo == null) ? 0 : requestedUserInfo
						.hashCode()); result = prime
				* result
				+ ((shippingOptionId == null) ? 0 : shippingOptionId.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Payment other = (Payment) obj; if (amount == null) { if (other.amount != null)
				return false; } else if (!amount.equals(other.amount))
			return false; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; if (paymentCredential == null) { if (other.paymentCredential != null)
				return false; } else if (!paymentCredential.equals(other.paymentCredential))
			return false; if (requestedUserInfo != other.requestedUserInfo)
			return false; if (shippingOptionId == null) { if (other.shippingOptionId != null)
				return false; } else if (!shippingOptionId.equals(other.shippingOptionId))
			return false; return true; } @Override
	public String toString() { return ""Payment [payload="" + payload + "", requestedUserInfo=""
				+ requestedUserInfo + "", paymentCredential=""
				+ paymentCredential + "", amount="" + amount
				+ "", shippingOptionId="" + shippingOptionId + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming.callback.payment; 
import java.io.Serializable; 
import co.aurasphere.botmill.fb.model.outcoming.template.button.BuyButton; import co.aurasphere.botmill.fb.model.outcoming.template.button.RequestedUserInfo; 
import com.google.gson.annotations.SerializedName; 
  public class Payment implements Serializable { /**
 * Model for the Payment Callback. <br>
 * <br>
 * This callback occurs when a persons taps the pay button from the checkout
 * dialog rendered by the {@link BuyButton}. It contains the requested user
 * information as well as payment credentials. Depends on the payment provider
 * you use, the payment credential will differ. <br>
 * <br>
 * You must subscribe to this callback by selecting the messaging_payments field
 * when setting up your webhook.
 * 
 * <h1>Stripe/Paypal</h1>
 * 
 * After user click on pay, user will be charged directly and the payment will
 * be send to your Stripe/Paypal account. This webhook event will be called once
 * the process succeed. All the requested user information that user entered in
 * the payment dialog will be passed back in the webhook event. The charge_id
 * from Paypal/Stripe will be passed to you for tracking the payment. You need
 * to return HTTP status of 200 once you finished processing the event. <br>
 * <br>
 * If the payment is a test payment, we will not charge the card but will send a
 * result with dummy fb_payment_id/charge_id to you. You can do test payment
 * with Stripe/Paypal only if your page has payment permission for now. Refers
 * to <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/complete-guide/payments#test_payments""
 * >How to Test Payment</a> for details. <br>
 * 
 * <h1>Tokenized Payment</h1>
 * 
 * If you are using tokenized payment, when user click on pay, we will send you
 * a single-use Discover virtual card provisioned by PayPal. The card credential
 * will be encrypted by the public key you provided in previous steps. You can
 * then decrypt the tokenized card by following the <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/complete-guide/payments#decrypting""
 * >detail steps here</a>. After you successfully decoded the credential, you
 * can then integrate with your preferred payment provider to charge the card.
 * You need to return HTTP status of 200 once you finished processing the event. <br>
 * If the payment is a test payment, you will get a dummy tokenized card back
 * with the following dummy information (card_number: 4111111111111111, cvv:
 * 123, expiry month: 11, expiry year: 2020). You can test tokenized payment
 * even if your page/app has not been accepted to beta program. Refers to <a
 * href=
 * ""https://developers.facebook.com/docs/messenger-platform/complete-guide/payments#test_payments""
 * >How to Test Payment</a> for details. <br>
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference/payment""
 *      >Facebook's Messenger Platform Payment Callback Documentation</a>
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/buy-button""
 *      >Facebook's Messenger Platform Buy Button Documentation</a>
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  private String payload; /**
	 * Metadata defined in the Buy Button.
	 */  @SerializedName(""requested_user_info"")
	private RequestedUserInfo requestedUserInfo; /**
	 * Information that was requested from the user by the Buy Button.
	 */  @SerializedName(""payment_credential"")
	private PaymentCredential paymentCredential; /**
	 * Payment credentials.
	 */  private PaymentAmount amount; /**
	 * Total amount of transaction.
	 */  @SerializedName(""shipping_option_id"")
	private String shippingOptionId; /**
	 * The option_id of the selected shipping option sent via the <a href=
	 * ""https://developers.facebook.com/docs/messenger-platform/webhook-reference/checkout-update""
	 * >checkout update callback</a>. Only applicable for flexible payments.
	 * 
	 * @see <a href=
	 *      ""https://developers.facebook.com/docs/messenger-platform/webhook-reference/checkout-update""
	 *      >Facebook's Messenger Platform Checkout Update Callback
	 *      Documentation</a>
	 */  public String getPayload() { return payload; } /**
	 * Gets the {@link #payload}.
	 *
	 * @return the {@link #payload}.
	 */  public void setPayload(String payload) { this.payload = payload; } /**
	 * Sets the {@link #payload}.
	 *
	 * @param payload
	 *            the {@link #payload} to set.
	 */  public RequestedUserInfo getRequestedUserInfo() { return requestedUserInfo; } /**
	 * Gets the {@link #requestedUserInfo}.
	 *
	 * @return the {@link #requestedUserInfo}.
	 */  public void setRequestedUserInfo(RequestedUserInfo requestedUserInfo) { this.requestedUserInfo = requestedUserInfo; } /**
	 * Sets the {@link #requestedUserInfo}.
	 *
	 * @param requestedUserInfo
	 *            the {@link #requestedUserInfo} to set.
	 */  public PaymentCredential getPaymentCredential() { return paymentCredential; } /**
	 * Gets the {@link #paymentCredential}.
	 *
	 * @return the {@link #paymentCredential}.
	 */  public void setPaymentCredential(PaymentCredential paymentCredential) { this.paymentCredential = paymentCredential; } /**
	 * Sets the {@link #paymentCredential}.
	 *
	 * @param paymentCredential
	 *            the {@link #paymentCredential} to set.
	 */  public PaymentAmount getAmount() { return amount; } /**
	 * Gets the {@link #amount}.
	 *
	 * @return the {@link #amount}.
	 */  public void setAmount(PaymentAmount amount) { this.amount = amount; } /**
	 * Sets the {@link #amount}.
	 *
	 * @param amount
	 *            the {@link #amount} to set.
	 */  public String getShippingOptionId() { return shippingOptionId; } /**
	 * Gets the {@link #shippingOptionId}.
	 *
	 * @return the {@link #shippingOptionId}.
	 */  public void setShippingOptionId(String shippingOptionId) { this.shippingOptionId = shippingOptionId; } /**
	 * Sets the {@link #shippingOptionId}.
	 *
	 * @param shippingOptionId
	 *            the {@link #shippingOptionId} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((amount == null) ? 0 : amount.hashCode()); result = prime * result + ((payload == null) ? 0 : payload.hashCode()); result = prime
				* result
				+ ((paymentCredential == null) ? 0 : paymentCredential
						.hashCode()); result = prime
				* result
				+ ((requestedUserInfo == null) ? 0 : requestedUserInfo
						.hashCode()); result = prime
				* result
				+ ((shippingOptionId == null) ? 0 : shippingOptionId.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Payment other = (Payment) obj; if (amount == null) { if (other.amount != null)
				return false; } else if (!amount.equals(other.amount))
			return false; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; if (paymentCredential == null) { if (other.paymentCredential != null)
				return false; } else if (!paymentCredential.equals(other.paymentCredential))
			return false; if (requestedUserInfo != other.requestedUserInfo)
			return false; if (shippingOptionId == null) { if (other.shippingOptionId != null)
				return false; } else if (!shippingOptionId.equals(other.shippingOptionId))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""Payment [payload="" + payload + "", requestedUserInfo=""
				+ requestedUserInfo + "", paymentCredential=""
				+ paymentCredential + "", amount="" + amount
				+ "", shippingOptionId="" + shippingOptionId + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/incoming/callback/payment/PaymentAmount.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming.callback.payment;

import java.io.Serializable;
import java.math.BigDecimal;


/**
 * Object that represents the total amount of a transaction for a
 * {@link Payment} callback.
 * 
 * @author Donato Rimenti
 * 
 */
public class PaymentAmount implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Currency of the amount.
	 */
	private String currency;

	/**
	 * Total amount.
	 */
	private BigDecimal amount;

	/**
	 * Gets the {@link #currency}.
	 *
	 * @return the {@link #currency}.
	 */
	public String getCurrency() {
		return currency;
	}

	/**
	 * Sets the {@link #currency}.
	 *
	 * @param currency
	 *            the {@link #currency} to set.
	 */
	public void setCurrency(String currency) {
		this.currency = currency;
	}

	/**
	 * Gets the {@link #amount}.
	 *
	 * @return the {@link #amount}.
	 */
	public BigDecimal getAmount() {
		return amount;
	}

	/**
	 * Sets the {@link #amount}.
	 *
	 * @param amount
	 *            the {@link #amount} to set.
	 */
	public void setAmount(BigDecimal amount) {
		this.amount = amount;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((amount == null) ? 0 : amount.hashCode());
		result = prime * result
				+ ((currency == null) ? 0 : currency.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		PaymentAmount other = (PaymentAmount) obj;
		if (amount == null) {
			if (other.amount != null)
				return false;
		} else if (!amount.equals(other.amount))
			return false;
		if (currency == null) {
			if (other.currency != null)
				return false;
		} else if (!currency.equals(other.currency))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""PaymentAmount [currency="" + currency + "", amount="" + amount
				+ ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.incoming.callback.payment; public class PaymentAmount implements Serializable { private static final long serialVersionUID = 1L; private String currency; private BigDecimal amount; public String getCurrency() { return currency; } public void setCurrency(String currency) { this.currency = currency; } public BigDecimal getAmount() { return amount; } public void setAmount(BigDecimal amount) { this.amount = amount; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((amount == null) ? 0 : amount.hashCode()); result = prime * result
				+ ((currency == null) ? 0 : currency.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PaymentAmount other = (PaymentAmount) obj; if (amount == null) { if (other.amount != null)
				return false; } else if (!amount.equals(other.amount))
			return false; if (currency == null) { if (other.currency != null)
				return false; } else if (!currency.equals(other.currency))
			return false; return true; } @Override
	public String toString() { return ""PaymentAmount [currency="" + currency + "", amount="" + amount
				+ ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.incoming.callback.payment; public class PaymentAmount implements Serializable { private static final long serialVersionUID = 1L; private String currency; private BigDecimal amount; public String getCurrency() { return currency; } public void setCurrency(String currency) { this.currency = currency; } public BigDecimal getAmount() { return amount; } public void setAmount(BigDecimal amount) { this.amount = amount; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((amount == null) ? 0 : amount.hashCode()); result = prime * result
				+ ((currency == null) ? 0 : currency.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PaymentAmount other = (PaymentAmount) obj; if (amount == null) { if (other.amount != null)
				return false; } else if (!amount.equals(other.amount))
			return false; if (currency == null) { if (other.currency != null)
				return false; } else if (!currency.equals(other.currency))
			return false; return true; } @Override
	public String toString() { return ""PaymentAmount [currency="" + currency + "", amount="" + amount
				+ ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming.callback.payment; 
import java.io.Serializable; import java.math.BigDecimal; 
  public class PaymentAmount implements Serializable { /**
 * Object that represents the total amount of a transaction for a
 * {@link Payment} callback.
 * 
 * @author Donato Rimenti
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  private String currency; /**
	 * Currency of the amount.
	 */  private BigDecimal amount; /**
	 * Total amount.
	 */  public String getCurrency() { return currency; } /**
	 * Gets the {@link #currency}.
	 *
	 * @return the {@link #currency}.
	 */  public void setCurrency(String currency) { this.currency = currency; } /**
	 * Sets the {@link #currency}.
	 *
	 * @param currency
	 *            the {@link #currency} to set.
	 */  public BigDecimal getAmount() { return amount; } /**
	 * Gets the {@link #amount}.
	 *
	 * @return the {@link #amount}.
	 */  public void setAmount(BigDecimal amount) { this.amount = amount; } /**
	 * Sets the {@link #amount}.
	 *
	 * @param amount
	 *            the {@link #amount} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((amount == null) ? 0 : amount.hashCode()); result = prime * result
				+ ((currency == null) ? 0 : currency.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PaymentAmount other = (PaymentAmount) obj; if (amount == null) { if (other.amount != null)
				return false; } else if (!amount.equals(other.amount))
			return false; if (currency == null) { if (other.currency != null)
				return false; } else if (!currency.equals(other.currency))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""PaymentAmount [currency="" + currency + "", amount="" + amount
				+ ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/incoming/callback/payment/PaymentCredential.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming.callback.payment;

import java.io.Serializable;

import com.google.gson.annotations.SerializedName;


/**
 * Object that represents a payment credentials for a {@link Payment} callback.
 * 
 * @author Donato Rimenti
 * 
 */
public class PaymentCredential implements Serializable {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Payment provider type (one of stripe/paypal/token).
	 */
	@SerializedName(""provider_type"")
	private ProviderType providerType;

	/**
	 * Payment provider charge id (for stripe/paypal, null for tokenization),
	 * for a test_payment, the charge id will be test_charge_id_12345.
	 */
	@SerializedName(""charge_id"")
	private String chargeId;

	/**
	 * PGP-signed tokenized charge card (null for stripe/paypal).
	 */
	@SerializedName(""tokenized_card"")
	private String tokenizedCard;

	/**
	 * PGP-signed CVV number (null for stripe/paypal).
	 */
	@SerializedName(""tokenized_cvv"")
	private String tokenizedCvv;

	/**
	 * Expiry month (null for stripe/paypal).
	 */
	@SerializedName(""token_expiry_month"")
	private String tokenExpiryMonth;

	/**
	 * Expiry year (null for stripe/paypal).
	 */
	@SerializedName(""token_expiry_year"")
	private String tokenExpiryYear;

	/**
	 * A facebook issued payment id for tracking. If it is a test payment, the
	 * id will be test_payment_id_12345.
	 */
	@SerializedName(""fb_payment_id"")
	private String fbPaymentId;

	/**
	 * Gets the {@link #providerType}.
	 *
	 * @return the {@link #providerType}.
	 */
	public ProviderType getProviderType() {
		return providerType;
	}

	/**
	 * Sets the {@link #providerType}.
	 *
	 * @param providerType
	 *            the {@link #providerType} to set.
	 */
	public void setProviderType(ProviderType providerType) {
		this.providerType = providerType;
	}

	/**
	 * Gets the {@link #chargeId}.
	 *
	 * @return the {@link #chargeId}.
	 */
	public String getChargeId() {
		return chargeId;
	}

	/**
	 * Sets the {@link #chargeId}.
	 *
	 * @param chargeId
	 *            the {@link #chargeId} to set.
	 */
	public void setChargeId(String chargeId) {
		this.chargeId = chargeId;
	}

	/**
	 * Gets the {@link #tokenizedCard}.
	 *
	 * @return the {@link #tokenizedCard}.
	 */
	public String getTokenizedCard() {
		return tokenizedCard;
	}

	/**
	 * Sets the {@link #tokenizedCard}.
	 *
	 * @param tokenizedCard
	 *            the {@link #tokenizedCard} to set.
	 */
	public void setTokenizedCard(String tokenizedCard) {
		this.tokenizedCard = tokenizedCard;
	}

	/**
	 * Gets the {@link #tokenizedCvv}.
	 *
	 * @return the {@link #tokenizedCvv}.
	 */
	public String getTokenizedCvv() {
		return tokenizedCvv;
	}

	/**
	 * Sets the {@link #tokenizedCvv}.
	 *
	 * @param tokenizedCvv
	 *            the {@link #tokenizedCvv} to set.
	 */
	public void setTokenizedCvv(String tokenizedCvv) {
		this.tokenizedCvv = tokenizedCvv;
	}

	/**
	 * Gets the {@link #tokenExpiryMonth}.
	 *
	 * @return the {@link #tokenExpiryMonth}.
	 */
	public String getTokenExpiryMonth() {
		return tokenExpiryMonth;
	}

	/**
	 * Sets the {@link #tokenExpiryMonth}.
	 *
	 * @param tokenExpiryMonth
	 *            the {@link #tokenExpiryMonth} to set.
	 */
	public void setTokenExpiryMonth(String tokenExpiryMonth) {
		this.tokenExpiryMonth = tokenExpiryMonth;
	}

	/**
	 * Gets the {@link #tokenExpiryYear}.
	 *
	 * @return the {@link #tokenExpiryYear}.
	 */
	public String getTokenExpiryYear() {
		return tokenExpiryYear;
	}

	/**
	 * Sets the {@link #tokenExpiryYear}.
	 *
	 * @param tokenExpiryYear
	 *            the {@link #tokenExpiryYear} to set.
	 */
	public void setTokenExpiryYear(String tokenExpiryYear) {
		this.tokenExpiryYear = tokenExpiryYear;
	}

	/**
	 * Gets the {@link #fbPaymentId}.
	 *
	 * @return the {@link #fbPaymentId}.
	 */
	public String getFbPaymentId() {
		return fbPaymentId;
	}

	/**
	 * Sets the {@link #fbPaymentId}.
	 *
	 * @param fbPaymentId
	 *            the {@link #fbPaymentId} to set.
	 */
	public void setFbPaymentId(String fbPaymentId) {
		this.fbPaymentId = fbPaymentId;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((chargeId == null) ? 0 : chargeId.hashCode());
		result = prime * result
				+ ((fbPaymentId == null) ? 0 : fbPaymentId.hashCode());
		result = prime * result
				+ ((providerType == null) ? 0 : providerType.hashCode());
		result = prime
				* result
				+ ((tokenExpiryMonth == null) ? 0 : tokenExpiryMonth.hashCode());
		result = prime * result
				+ ((tokenExpiryYear == null) ? 0 : tokenExpiryYear.hashCode());
		result = prime * result
				+ ((tokenizedCard == null) ? 0 : tokenizedCard.hashCode());
		result = prime * result
				+ ((tokenizedCvv == null) ? 0 : tokenizedCvv.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		PaymentCredential other = (PaymentCredential) obj;
		if (chargeId == null) {
			if (other.chargeId != null)
				return false;
		} else if (!chargeId.equals(other.chargeId))
			return false;
		if (fbPaymentId == null) {
			if (other.fbPaymentId != null)
				return false;
		} else if (!fbPaymentId.equals(other.fbPaymentId))
			return false;
		if (providerType != other.providerType)
			return false;
		if (tokenExpiryMonth == null) {
			if (other.tokenExpiryMonth != null)
				return false;
		} else if (!tokenExpiryMonth.equals(other.tokenExpiryMonth))
			return false;
		if (tokenExpiryYear == null) {
			if (other.tokenExpiryYear != null)
				return false;
		} else if (!tokenExpiryYear.equals(other.tokenExpiryYear))
			return false;
		if (tokenizedCard == null) {
			if (other.tokenizedCard != null)
				return false;
		} else if (!tokenizedCard.equals(other.tokenizedCard))
			return false;
		if (tokenizedCvv == null) {
			if (other.tokenizedCvv != null)
				return false;
		} else if (!tokenizedCvv.equals(other.tokenizedCvv))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""PaymentCredential [providerType="" + providerType
				+ "", chargeId="" + chargeId + "", tokenizedCard="" + tokenizedCard
				+ "", tokenizedCvv="" + tokenizedCvv + "", tokenExpiryMonth=""
				+ tokenExpiryMonth + "", tokenExpiryYear="" + tokenExpiryYear
				+ "", fbPaymentId="" + fbPaymentId + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.incoming.callback.payment; public class PaymentCredential implements Serializable { private static final long serialVersionUID = 1L; @SerializedName(""provider_type"")
	private ProviderType providerType; @SerializedName(""charge_id"")
	private String chargeId; @SerializedName(""tokenized_card"")
	private String tokenizedCard; @SerializedName(""tokenized_cvv"")
	private String tokenizedCvv; @SerializedName(""token_expiry_month"")
	private String tokenExpiryMonth; @SerializedName(""token_expiry_year"")
	private String tokenExpiryYear; @SerializedName(""fb_payment_id"")
	private String fbPaymentId; public ProviderType getProviderType() { return providerType; } public void setProviderType(ProviderType providerType) { this.providerType = providerType; } public String getChargeId() { return chargeId; } public void setChargeId(String chargeId) { this.chargeId = chargeId; } public String getTokenizedCard() { return tokenizedCard; } public void setTokenizedCard(String tokenizedCard) { this.tokenizedCard = tokenizedCard; } public String getTokenizedCvv() { return tokenizedCvv; } public void setTokenizedCvv(String tokenizedCvv) { this.tokenizedCvv = tokenizedCvv; } public String getTokenExpiryMonth() { return tokenExpiryMonth; } public void setTokenExpiryMonth(String tokenExpiryMonth) { this.tokenExpiryMonth = tokenExpiryMonth; } public String getTokenExpiryYear() { return tokenExpiryYear; } public void setTokenExpiryYear(String tokenExpiryYear) { this.tokenExpiryYear = tokenExpiryYear; } public String getFbPaymentId() { return fbPaymentId; } public void setFbPaymentId(String fbPaymentId) { this.fbPaymentId = fbPaymentId; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((chargeId == null) ? 0 : chargeId.hashCode()); result = prime * result
				+ ((fbPaymentId == null) ? 0 : fbPaymentId.hashCode()); result = prime * result
				+ ((providerType == null) ? 0 : providerType.hashCode()); result = prime
				* result
				+ ((tokenExpiryMonth == null) ? 0 : tokenExpiryMonth.hashCode()); result = prime * result
				+ ((tokenExpiryYear == null) ? 0 : tokenExpiryYear.hashCode()); result = prime * result
				+ ((tokenizedCard == null) ? 0 : tokenizedCard.hashCode()); result = prime * result
				+ ((tokenizedCvv == null) ? 0 : tokenizedCvv.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PaymentCredential other = (PaymentCredential) obj; if (chargeId == null) { if (other.chargeId != null)
				return false; } else if (!chargeId.equals(other.chargeId))
			return false; if (fbPaymentId == null) { if (other.fbPaymentId != null)
				return false; } else if (!fbPaymentId.equals(other.fbPaymentId))
			return false; if (providerType != other.providerType)
			return false; if (tokenExpiryMonth == null) { if (other.tokenExpiryMonth != null)
				return false; } else if (!tokenExpiryMonth.equals(other.tokenExpiryMonth))
			return false; if (tokenExpiryYear == null) { if (other.tokenExpiryYear != null)
				return false; } else if (!tokenExpiryYear.equals(other.tokenExpiryYear))
			return false; if (tokenizedCard == null) { if (other.tokenizedCard != null)
				return false; } else if (!tokenizedCard.equals(other.tokenizedCard))
			return false; if (tokenizedCvv == null) { if (other.tokenizedCvv != null)
				return false; } else if (!tokenizedCvv.equals(other.tokenizedCvv))
			return false; return true; } @Override
	public String toString() { return ""PaymentCredential [providerType="" + providerType
				+ "", chargeId="" + chargeId + "", tokenizedCard="" + tokenizedCard
				+ "", tokenizedCvv="" + tokenizedCvv + "", tokenExpiryMonth=""
				+ tokenExpiryMonth + "", tokenExpiryYear="" + tokenExpiryYear
				+ "", fbPaymentId="" + fbPaymentId + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.incoming.callback.payment; public class PaymentCredential implements Serializable { private static final long serialVersionUID = 1L; @SerializedName(""provider_type"")
	private ProviderType providerType; @SerializedName(""charge_id"")
	private String chargeId; @SerializedName(""tokenized_card"")
	private String tokenizedCard; @SerializedName(""tokenized_cvv"")
	private String tokenizedCvv; @SerializedName(""token_expiry_month"")
	private String tokenExpiryMonth; @SerializedName(""token_expiry_year"")
	private String tokenExpiryYear; @SerializedName(""fb_payment_id"")
	private String fbPaymentId; public ProviderType getProviderType() { return providerType; } public void setProviderType(ProviderType providerType) { this.providerType = providerType; } public String getChargeId() { return chargeId; } public void setChargeId(String chargeId) { this.chargeId = chargeId; } public String getTokenizedCard() { return tokenizedCard; } public void setTokenizedCard(String tokenizedCard) { this.tokenizedCard = tokenizedCard; } public String getTokenizedCvv() { return tokenizedCvv; } public void setTokenizedCvv(String tokenizedCvv) { this.tokenizedCvv = tokenizedCvv; } public String getTokenExpiryMonth() { return tokenExpiryMonth; } public void setTokenExpiryMonth(String tokenExpiryMonth) { this.tokenExpiryMonth = tokenExpiryMonth; } public String getTokenExpiryYear() { return tokenExpiryYear; } public void setTokenExpiryYear(String tokenExpiryYear) { this.tokenExpiryYear = tokenExpiryYear; } public String getFbPaymentId() { return fbPaymentId; } public void setFbPaymentId(String fbPaymentId) { this.fbPaymentId = fbPaymentId; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((chargeId == null) ? 0 : chargeId.hashCode()); result = prime * result
				+ ((fbPaymentId == null) ? 0 : fbPaymentId.hashCode()); result = prime * result
				+ ((providerType == null) ? 0 : providerType.hashCode()); result = prime
				* result
				+ ((tokenExpiryMonth == null) ? 0 : tokenExpiryMonth.hashCode()); result = prime * result
				+ ((tokenExpiryYear == null) ? 0 : tokenExpiryYear.hashCode()); result = prime * result
				+ ((tokenizedCard == null) ? 0 : tokenizedCard.hashCode()); result = prime * result
				+ ((tokenizedCvv == null) ? 0 : tokenizedCvv.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PaymentCredential other = (PaymentCredential) obj; if (chargeId == null) { if (other.chargeId != null)
				return false; } else if (!chargeId.equals(other.chargeId))
			return false; if (fbPaymentId == null) { if (other.fbPaymentId != null)
				return false; } else if (!fbPaymentId.equals(other.fbPaymentId))
			return false; if (providerType != other.providerType)
			return false; if (tokenExpiryMonth == null) { if (other.tokenExpiryMonth != null)
				return false; } else if (!tokenExpiryMonth.equals(other.tokenExpiryMonth))
			return false; if (tokenExpiryYear == null) { if (other.tokenExpiryYear != null)
				return false; } else if (!tokenExpiryYear.equals(other.tokenExpiryYear))
			return false; if (tokenizedCard == null) { if (other.tokenizedCard != null)
				return false; } else if (!tokenizedCard.equals(other.tokenizedCard))
			return false; if (tokenizedCvv == null) { if (other.tokenizedCvv != null)
				return false; } else if (!tokenizedCvv.equals(other.tokenizedCvv))
			return false; return true; } @Override
	public String toString() { return ""PaymentCredential [providerType="" + providerType
				+ "", chargeId="" + chargeId + "", tokenizedCard="" + tokenizedCard
				+ "", tokenizedCvv="" + tokenizedCvv + "", tokenExpiryMonth=""
				+ tokenExpiryMonth + "", tokenExpiryYear="" + tokenExpiryYear
				+ "", fbPaymentId="" + fbPaymentId + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming.callback.payment; 
import java.io.Serializable; 
import com.google.gson.annotations.SerializedName; 
  public class PaymentCredential implements Serializable { /**
 * Object that represents a payment credentials for a {@link Payment} callback.
 * 
 * @author Donato Rimenti
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @SerializedName(""provider_type"")
	private ProviderType providerType; /**
	 * Payment provider type (one of stripe/paypal/token).
	 */  @SerializedName(""charge_id"")
	private String chargeId; /**
	 * Payment provider charge id (for stripe/paypal, null for tokenization),
	 * for a test_payment, the charge id will be test_charge_id_12345.
	 */  @SerializedName(""tokenized_card"")
	private String tokenizedCard; /**
	 * PGP-signed tokenized charge card (null for stripe/paypal).
	 */  @SerializedName(""tokenized_cvv"")
	private String tokenizedCvv; /**
	 * PGP-signed CVV number (null for stripe/paypal).
	 */  @SerializedName(""token_expiry_month"")
	private String tokenExpiryMonth; /**
	 * Expiry month (null for stripe/paypal).
	 */  @SerializedName(""token_expiry_year"")
	private String tokenExpiryYear; /**
	 * Expiry year (null for stripe/paypal).
	 */  @SerializedName(""fb_payment_id"")
	private String fbPaymentId; /**
	 * A facebook issued payment id for tracking. If it is a test payment, the
	 * id will be test_payment_id_12345.
	 */  public ProviderType getProviderType() { return providerType; } /**
	 * Gets the {@link #providerType}.
	 *
	 * @return the {@link #providerType}.
	 */  public void setProviderType(ProviderType providerType) { this.providerType = providerType; } /**
	 * Sets the {@link #providerType}.
	 *
	 * @param providerType
	 *            the {@link #providerType} to set.
	 */  public String getChargeId() { return chargeId; } /**
	 * Gets the {@link #chargeId}.
	 *
	 * @return the {@link #chargeId}.
	 */  public void setChargeId(String chargeId) { this.chargeId = chargeId; } /**
	 * Sets the {@link #chargeId}.
	 *
	 * @param chargeId
	 *            the {@link #chargeId} to set.
	 */  public String getTokenizedCard() { return tokenizedCard; } /**
	 * Gets the {@link #tokenizedCard}.
	 *
	 * @return the {@link #tokenizedCard}.
	 */  public void setTokenizedCard(String tokenizedCard) { this.tokenizedCard = tokenizedCard; } /**
	 * Sets the {@link #tokenizedCard}.
	 *
	 * @param tokenizedCard
	 *            the {@link #tokenizedCard} to set.
	 */  public String getTokenizedCvv() { return tokenizedCvv; } /**
	 * Gets the {@link #tokenizedCvv}.
	 *
	 * @return the {@link #tokenizedCvv}.
	 */  public void setTokenizedCvv(String tokenizedCvv) { this.tokenizedCvv = tokenizedCvv; } /**
	 * Sets the {@link #tokenizedCvv}.
	 *
	 * @param tokenizedCvv
	 *            the {@link #tokenizedCvv} to set.
	 */  public String getTokenExpiryMonth() { return tokenExpiryMonth; } /**
	 * Gets the {@link #tokenExpiryMonth}.
	 *
	 * @return the {@link #tokenExpiryMonth}.
	 */  public void setTokenExpiryMonth(String tokenExpiryMonth) { this.tokenExpiryMonth = tokenExpiryMonth; } /**
	 * Sets the {@link #tokenExpiryMonth}.
	 *
	 * @param tokenExpiryMonth
	 *            the {@link #tokenExpiryMonth} to set.
	 */  public String getTokenExpiryYear() { return tokenExpiryYear; } /**
	 * Gets the {@link #tokenExpiryYear}.
	 *
	 * @return the {@link #tokenExpiryYear}.
	 */  public void setTokenExpiryYear(String tokenExpiryYear) { this.tokenExpiryYear = tokenExpiryYear; } /**
	 * Sets the {@link #tokenExpiryYear}.
	 *
	 * @param tokenExpiryYear
	 *            the {@link #tokenExpiryYear} to set.
	 */  public String getFbPaymentId() { return fbPaymentId; } /**
	 * Gets the {@link #fbPaymentId}.
	 *
	 * @return the {@link #fbPaymentId}.
	 */  public void setFbPaymentId(String fbPaymentId) { this.fbPaymentId = fbPaymentId; } /**
	 * Sets the {@link #fbPaymentId}.
	 *
	 * @param fbPaymentId
	 *            the {@link #fbPaymentId} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((chargeId == null) ? 0 : chargeId.hashCode()); result = prime * result
				+ ((fbPaymentId == null) ? 0 : fbPaymentId.hashCode()); result = prime * result
				+ ((providerType == null) ? 0 : providerType.hashCode()); result = prime
				* result
				+ ((tokenExpiryMonth == null) ? 0 : tokenExpiryMonth.hashCode()); result = prime * result
				+ ((tokenExpiryYear == null) ? 0 : tokenExpiryYear.hashCode()); result = prime * result
				+ ((tokenizedCard == null) ? 0 : tokenizedCard.hashCode()); result = prime * result
				+ ((tokenizedCvv == null) ? 0 : tokenizedCvv.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PaymentCredential other = (PaymentCredential) obj; if (chargeId == null) { if (other.chargeId != null)
				return false; } else if (!chargeId.equals(other.chargeId))
			return false; if (fbPaymentId == null) { if (other.fbPaymentId != null)
				return false; } else if (!fbPaymentId.equals(other.fbPaymentId))
			return false; if (providerType != other.providerType)
			return false; if (tokenExpiryMonth == null) { if (other.tokenExpiryMonth != null)
				return false; } else if (!tokenExpiryMonth.equals(other.tokenExpiryMonth))
			return false; if (tokenExpiryYear == null) { if (other.tokenExpiryYear != null)
				return false; } else if (!tokenExpiryYear.equals(other.tokenExpiryYear))
			return false; if (tokenizedCard == null) { if (other.tokenizedCard != null)
				return false; } else if (!tokenizedCard.equals(other.tokenizedCard))
			return false; if (tokenizedCvv == null) { if (other.tokenizedCvv != null)
				return false; } else if (!tokenizedCvv.equals(other.tokenizedCvv))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""PaymentCredential [providerType="" + providerType
				+ "", chargeId="" + chargeId + "", tokenizedCard="" + tokenizedCard
				+ "", tokenizedCvv="" + tokenizedCvv + "", tokenExpiryMonth=""
				+ tokenExpiryMonth + "", tokenExpiryYear="" + tokenExpiryYear
				+ "", fbPaymentId="" + fbPaymentId + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/incoming/callback/payment/ProviderType.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.incoming.callback.payment;


/**
 * Provider type for a {@link PaymentCredential} object.
 * 
 * @author Donato Rimenti
 */
public enum ProviderType {

	/**
	 * The stripe.
	 */
	STRIPE,

	/**
	 * The paypal.
	 */
	PAYPAL,

	/**
	 * The token.
	 */
	TOKEN;
}
",package co.aurasphere.botmill.fb.model.incoming.callback.payment; public enum ProviderType { TOKEN; },0 0 0 0 0,package co.aurasphere.botmill.fb.model.incoming.callback.payment; public enum ProviderType { TOKEN; } ,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.incoming.callback.payment; 
  public enum ProviderType { /**
 * Provider type for a {@link PaymentCredential} object.
 * 
 * @author Donato Rimenti
 */  /**
	 * The stripe.
	 */  /**
	 * The paypal.
	 */  TOKEN; } /**
	 * The token.
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/payload/template/ButtonTemplatePayload.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.payload.template;

import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotBlank;
import org.hibernate.validator.constraints.NotEmpty;

import co.aurasphere.botmill.fb.internal.util.validation.FbBotMillValidationConstants;
import co.aurasphere.botmill.fb.model.outcoming.payload.PayloadType;
import co.aurasphere.botmill.fb.model.outcoming.template.button.Button;


/**
 * Payload for a Button Template.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/button-template""
 *      > Facebook's Messenger Platform Button Template Documentation</a>
 */
public class ButtonTemplatePayload extends TemplateBasePayload {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * UTF-8 encoded text of up to 320 characters that appears the in main body.
	 */
	@Size(max = FbBotMillValidationConstants.MESSAGE_MAX_LENGTH)
	@NotBlank
	private String text;

	/**
	 * Set of, one to three, buttons that appear as call-to-actions.
	 */
	@Valid
	@Size(max = FbBotMillValidationConstants.BUTTONS_MAX_ELEMENTS)
	@NotEmpty
	private List<Button> buttons;

	/**
	 * Instantiates a new ButtonTemplatePayload.
	 *
	 * @param text
	 *            the {@link #text}.
	 */
	public ButtonTemplatePayload(String text) {
		this.text = text;
		this.buttons = new ArrayList<Button>();
		this.templateType = PayloadType.BUTTON;
	}

	/**
	 * Instantiates a new ButtonTemplatePayload.
	 */
	public ButtonTemplatePayload() {
	}

	/**
	 * Gets the {@link #text}.
	 *
	 * @return the {@link #text}.
	 */
	public String getText() {
		return text;
	}

	/**
	 * Sets the {@link #text}.
	 *
	 * @param text
	 *            the {@link #text} to set.
	 */
	public void setText(String text) {
		this.text = text;
	}

	/**
	 * Gets the {@link #buttons}.
	 *
	 * @return the {@link #buttons}.
	 */
	public List<Button> getButtons() {
		return buttons;
	}

	/**
	 * Sets the {@link #buttons}.
	 *
	 * @param buttons
	 *            the {@link #buttons} to set.
	 */
	public void setButtons(List<Button> buttons) {
		this.buttons = buttons;
	}

	/**
	 * Adds the button.
	 *
	 * @param button
	 *            the button to add.
	 */
	public void addButton(Button button) {
		this.buttons.add(button);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((buttons == null) ? 0 : buttons.hashCode());
		result = prime * result + ((text == null) ? 0 : text.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ButtonTemplatePayload other = (ButtonTemplatePayload) obj;
		if (buttons == null) {
			if (other.buttons != null)
				return false;
		} else if (!buttons.equals(other.buttons))
			return false;
		if (text == null) {
			if (other.text != null)
				return false;
		} else if (!text.equals(other.text))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""ButtonTemplatePayload [text="" + text + "", buttons="" + buttons
				+ "", templateType="" + templateType + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.outcoming.payload.template; public class ButtonTemplatePayload extends TemplateBasePayload { private static final long serialVersionUID = 1L; @Size(max = FbBotMillValidationConstants.MESSAGE_MAX_LENGTH)
	@NotBlank
	private String text; @Valid
	@Size(max = FbBotMillValidationConstants.BUTTONS_MAX_ELEMENTS)
	@NotEmpty
	private List<Button> buttons; public ButtonTemplatePayload(String text) { this.text = text; this.buttons = new ArrayList<Button>(); this.templateType = PayloadType.BUTTON; } public ButtonTemplatePayload() { } public String getText() { return text; } public void setText(String text) { this.text = text; } public List<Button> getButtons() { return buttons; } public void setButtons(List<Button> buttons) { this.buttons = buttons; } public void addButton(Button button) { this.buttons.add(button); } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((buttons == null) ? 0 : buttons.hashCode()); result = prime * result + ((text == null) ? 0 : text.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ButtonTemplatePayload other = (ButtonTemplatePayload) obj; if (buttons == null) { if (other.buttons != null)
				return false; } else if (!buttons.equals(other.buttons))
			return false; if (text == null) { if (other.text != null)
				return false; } else if (!text.equals(other.text))
			return false; return true; } @Override
	public String toString() { return ""ButtonTemplatePayload [text="" + text + "", buttons="" + buttons
				+ "", templateType="" + templateType + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.payload.template; public class ButtonTemplatePayload extends TemplateBasePayload { private static final long serialVersionUID = 1L; @Size(max = FbBotMillValidationConstants.MESSAGE_MAX_LENGTH)
	@NotBlank
	private String text; @Valid
	@Size(max = FbBotMillValidationConstants.BUTTONS_MAX_ELEMENTS)
	@NotEmpty
	private List<Button> buttons; public ButtonTemplatePayload(String text) { this.text = text; this.buttons = new ArrayList<Button>(); this.templateType = PayloadType.BUTTON; } public ButtonTemplatePayload() { } public String getText() { return text; } public void setText(String text) { this.text = text; } public List<Button> getButtons() { return buttons; } public void setButtons(List<Button> buttons) { this.buttons = buttons; } public void addButton(Button button) { this.buttons.add(button); } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((buttons == null) ? 0 : buttons.hashCode()); result = prime * result + ((text == null) ? 0 : text.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ButtonTemplatePayload other = (ButtonTemplatePayload) obj; if (buttons == null) { if (other.buttons != null)
				return false; } else if (!buttons.equals(other.buttons))
			return false; if (text == null) { if (other.text != null)
				return false; } else if (!text.equals(other.text))
			return false; return true; } @Override
	public String toString() { return ""ButtonTemplatePayload [text="" + text + "", buttons="" + buttons
				+ "", templateType="" + templateType + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.payload.template; 
import java.util.ArrayList; import java.util.List; 
import javax.validation.Valid; import javax.validation.constraints.Size; 
import org.hibernate.validator.constraints.NotBlank; import org.hibernate.validator.constraints.NotEmpty; 
import co.aurasphere.botmill.fb.internal.util.validation.FbBotMillValidationConstants; import co.aurasphere.botmill.fb.model.outcoming.payload.PayloadType; import co.aurasphere.botmill.fb.model.outcoming.template.button.Button; 
  public class ButtonTemplatePayload extends TemplateBasePayload { /**
 * Payload for a Button Template.
 *
 * @author Donato Rimenti
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/button-template""
 *      > Facebook's Messenger Platform Button Template Documentation</a>
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @Size(max = FbBotMillValidationConstants.MESSAGE_MAX_LENGTH)
	@NotBlank
	private String text; /**
	 * UTF-8 encoded text of up to 320 characters that appears the in main body.
	 */  @Valid
	@Size(max = FbBotMillValidationConstants.BUTTONS_MAX_ELEMENTS)
	@NotEmpty
	private List<Button> buttons; /**
	 * Set of, one to three, buttons that appear as call-to-actions.
	 */  public ButtonTemplatePayload(String text) { this.text = text; this.buttons = new ArrayList<Button>(); this.templateType = PayloadType.BUTTON; } /**
	 * Instantiates a new ButtonTemplatePayload.
	 *
	 * @param text
	 *            the {@link #text}.
	 */  public ButtonTemplatePayload() { } /**
	 * Instantiates a new ButtonTemplatePayload.
	 */  public String getText() { return text; } /**
	 * Gets the {@link #text}.
	 *
	 * @return the {@link #text}.
	 */  public void setText(String text) { this.text = text; } /**
	 * Sets the {@link #text}.
	 *
	 * @param text
	 *            the {@link #text} to set.
	 */  public List<Button> getButtons() { return buttons; } /**
	 * Gets the {@link #buttons}.
	 *
	 * @return the {@link #buttons}.
	 */  public void setButtons(List<Button> buttons) { this.buttons = buttons; } /**
	 * Sets the {@link #buttons}.
	 *
	 * @param buttons
	 *            the {@link #buttons} to set.
	 */  public void addButton(Button button) { this.buttons.add(button); } /**
	 * Adds the button.
	 *
	 * @param button
	 *            the button to add.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((buttons == null) ? 0 : buttons.hashCode()); result = prime * result + ((text == null) ? 0 : text.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ButtonTemplatePayload other = (ButtonTemplatePayload) obj; if (buttons == null) { if (other.buttons != null)
				return false; } else if (!buttons.equals(other.buttons))
			return false; if (text == null) { if (other.text != null)
				return false; } else if (!text.equals(other.text))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""ButtonTemplatePayload [text="" + text + "", buttons="" + buttons
				+ "", templateType="" + templateType + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/payload/template/GenericTemplatePayload.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.payload.template;

import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotEmpty;

import co.aurasphere.botmill.fb.internal.util.validation.FbBotMillValidationConstants;
import co.aurasphere.botmill.fb.model.outcoming.payload.PayloadType;
import co.aurasphere.botmill.fb.model.outcoming.template.generic.GenericTemplateElement;


/**
 * Payload for a Generic Template.
 * 
 * * @see <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/generic-template""
 * > Facebook's Messenger Platform Generic Template Documentation</a>
 * 
 * @author Donato Rimenti
 * 
 */
public class GenericTemplatePayload extends TemplateBasePayload {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Data for each bubble in message. Elements are limited to
	 * {@value FbBotMillValidationConstants#GENERIC_TEMPLATE_MAX_ELEMENTS}.
	 */
	@Valid
	@Size(max = FbBotMillValidationConstants.GENERIC_TEMPLATE_MAX_ELEMENTS)
	@NotEmpty
	private List<GenericTemplateElement> elements;

	/**
	 * Instantiates a new GenericTemplatePayload.
	 */
	public GenericTemplatePayload() {
		this.templateType = PayloadType.GENERIC;
		this.elements = new ArrayList<GenericTemplateElement>();
	}

	/**
	 * Instantiates a new GenericTemplatePayload.
	 *
	 * @param elements
	 *            the {@link #elements}.
	 */
	public GenericTemplatePayload(List<GenericTemplateElement> elements) {
		this();
		this.elements = elements;
	}

	/**
	 * Gets the {@link #elements}.
	 *
	 * @return the {@link #elements}.
	 */
	public List<GenericTemplateElement> getElements() {
		return elements;
	}

	/**
	 * Sets the {@link #elements}.
	 *
	 * @param elements
	 *            the {@link #elements} to set.
	 */
	public void setElements(List<GenericTemplateElement> elements) {
		this.elements = elements;
	}

	/**
	 * Adds the element.
	 *
	 * @param element
	 *            the element to add.
	 */
	public void addElement(GenericTemplateElement element) {
		this.elements.add(element);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((elements == null) ? 0 : elements.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		GenericTemplatePayload other = (GenericTemplatePayload) obj;
		if (elements == null) {
			if (other.elements != null)
				return false;
		} else if (!elements.equals(other.elements))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""GenericTemplatePayload [elements="" + elements
				+ "", templateType="" + templateType + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.outcoming.payload.template; public class GenericTemplatePayload extends TemplateBasePayload { private static final long serialVersionUID = 1L; @Valid
	@Size(max = FbBotMillValidationConstants.GENERIC_TEMPLATE_MAX_ELEMENTS)
	@NotEmpty
	private List<GenericTemplateElement> elements; public GenericTemplatePayload() { this.templateType = PayloadType.GENERIC; this.elements = new ArrayList<GenericTemplateElement>(); } public GenericTemplatePayload(List<GenericTemplateElement> elements) { this(); this.elements = elements; } public List<GenericTemplateElement> getElements() { return elements; } public void setElements(List<GenericTemplateElement> elements) { this.elements = elements; } public void addElement(GenericTemplateElement element) { this.elements.add(element); } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((elements == null) ? 0 : elements.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; GenericTemplatePayload other = (GenericTemplatePayload) obj; if (elements == null) { if (other.elements != null)
				return false; } else if (!elements.equals(other.elements))
			return false; return true; } @Override
	public String toString() { return ""GenericTemplatePayload [elements="" + elements
				+ "", templateType="" + templateType + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.payload.template; public class GenericTemplatePayload extends TemplateBasePayload { private static final long serialVersionUID = 1L; @Valid
	@Size(max = FbBotMillValidationConstants.GENERIC_TEMPLATE_MAX_ELEMENTS)
	@NotEmpty
	private List<GenericTemplateElement> elements; public GenericTemplatePayload() { this.templateType = PayloadType.GENERIC; this.elements = new ArrayList<GenericTemplateElement>(); } public GenericTemplatePayload(List<GenericTemplateElement> elements) { this(); this.elements = elements; } public List<GenericTemplateElement> getElements() { return elements; } public void setElements(List<GenericTemplateElement> elements) { this.elements = elements; } public void addElement(GenericTemplateElement element) { this.elements.add(element); } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((elements == null) ? 0 : elements.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; GenericTemplatePayload other = (GenericTemplatePayload) obj; if (elements == null) { if (other.elements != null)
				return false; } else if (!elements.equals(other.elements))
			return false; return true; } @Override
	public String toString() { return ""GenericTemplatePayload [elements="" + elements
				+ "", templateType="" + templateType + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.payload.template; 
import java.util.ArrayList; import java.util.List; 
import javax.validation.Valid; import javax.validation.constraints.Size; 
import org.hibernate.validator.constraints.NotEmpty; 
import co.aurasphere.botmill.fb.internal.util.validation.FbBotMillValidationConstants; import co.aurasphere.botmill.fb.model.outcoming.payload.PayloadType; import co.aurasphere.botmill.fb.model.outcoming.template.generic.GenericTemplateElement; 
  public class GenericTemplatePayload extends TemplateBasePayload { /**
 * Payload for a Generic Template.
 * 
 * * @see <a href=
 * ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/generic-template""
 * > Facebook's Messenger Platform Generic Template Documentation</a>
 * 
 * @author Donato Rimenti
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @Valid
	@Size(max = FbBotMillValidationConstants.GENERIC_TEMPLATE_MAX_ELEMENTS)
	@NotEmpty
	private List<GenericTemplateElement> elements; /**
	 * Data for each bubble in message. Elements are limited to
	 * {@value FbBotMillValidationConstants#GENERIC_TEMPLATE_MAX_ELEMENTS}.
	 */  public GenericTemplatePayload() { this.templateType = PayloadType.GENERIC; this.elements = new ArrayList<GenericTemplateElement>(); } /**
	 * Instantiates a new GenericTemplatePayload.
	 */  public GenericTemplatePayload(List<GenericTemplateElement> elements) { this(); this.elements = elements; } /**
	 * Instantiates a new GenericTemplatePayload.
	 *
	 * @param elements
	 *            the {@link #elements}.
	 */  public List<GenericTemplateElement> getElements() { return elements; } /**
	 * Gets the {@link #elements}.
	 *
	 * @return the {@link #elements}.
	 */  public void setElements(List<GenericTemplateElement> elements) { this.elements = elements; } /**
	 * Sets the {@link #elements}.
	 *
	 * @param elements
	 *            the {@link #elements} to set.
	 */  public void addElement(GenericTemplateElement element) { this.elements.add(element); } /**
	 * Adds the element.
	 *
	 * @param element
	 *            the element to add.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((elements == null) ? 0 : elements.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; GenericTemplatePayload other = (GenericTemplatePayload) obj; if (elements == null) { if (other.elements != null)
				return false; } else if (!elements.equals(other.elements))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""GenericTemplatePayload [elements="" + elements
				+ "", templateType="" + templateType + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/payload/template/ListTemplatePayload.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.payload.template;

import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotEmpty;

import co.aurasphere.botmill.fb.internal.util.validation.FbBotMillValidationConstants;
import co.aurasphere.botmill.fb.model.outcoming.payload.PayloadType;
import co.aurasphere.botmill.fb.model.outcoming.template.button.Button;
import co.aurasphere.botmill.fb.model.outcoming.template.list.ListTemplateElement;
import co.aurasphere.botmill.fb.model.outcoming.template.list.TopElementStyle;

import com.google.gson.annotations.SerializedName;


/**
 * Payload for a List Template.
 *
 * @author Alvin Reyes
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/list-template""
 *      > Facebook's Messenger Platform List Template Documentation</a>
 */
public class ListTemplatePayload extends TemplateBasePayload {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * List view elements (maximum of 4 elements and minimum of 2 elements).
	 */
	@Valid
	@Size(min = FbBotMillValidationConstants.LIST_TEMPLATE_MIN_ELEMENTS, max = FbBotMillValidationConstants.LIST_TEMPLATE_MAX_ELEMENTS)
	@NotEmpty
	private List<ListTemplateElement> elements;

	/**
	 * List view elements (maximum of 4 elements and minimum of 2 elements).
	 */
	@Valid
	@Size(max = FbBotMillValidationConstants.LIST_TEMPLATE_MAX_BUTTONS)
	@NotEmpty
	private List<Button> buttons;

	/**
	 * Value must be large or compact. Default to large if not specified.
	 */
	@SerializedName(""top_element_style"")
	private TopElementStyle topElementStyle;

	/**
	 * Instantiates a new ListTemplatePayload.
	 */
	public ListTemplatePayload() {
		this.templateType = PayloadType.LIST;
		this.elements = new ArrayList<ListTemplateElement>();
		this.buttons = new ArrayList<Button>();
	}

	/**
	 * Instantiates a new ListTemplatePayload.
	 *
	 * @param elements
	 *            the {@link #elements}.
	 */
	public ListTemplatePayload(List<ListTemplateElement> elements) {
		this();
		this.elements = elements;
	}

	/**
	 * Instantiates a new ListTemplatePayload.
	 *
	 * @param elements
	 *            the {@link #elements}.
	 * @param buttons
	 *            the {@link #buttons}.
	 */
	public ListTemplatePayload(List<ListTemplateElement> elements,
			List<Button> buttons) {
		this();
		this.elements = elements;
		this.buttons = buttons;
	}

	/**
	 * Gets the {@link #buttons}.
	 *
	 * @return the {@link #buttons}.
	 */
	public List<Button> getButtons() {
		return buttons;
	}

	/**
	 * Sets the {@link #buttons}.
	 *
	 * @param buttons
	 *            the {@link #buttons} to set.
	 */
	public void setButtons(List<Button> buttons) {
		this.buttons = buttons;
	}

	/**
	 * Gets the {@link #topElementStyle}.
	 *
	 * @return the {@link #topElementStyle}.
	 */
	public TopElementStyle getTopElementStyle() {
		return topElementStyle;
	}

	/**
	 * Sets the {@link #topElementStyle}.
	 *
	 * @param topElementStyle
	 *            the {@link #topElementStyle} to set.
	 */
	public void setTopElementStyle(TopElementStyle topElementStyle) {
		this.topElementStyle = topElementStyle;
	}

	/**
	 * Gets the {@link #elements}.
	 *
	 * @return the {@link #elements}.
	 */
	public List<ListTemplateElement> getElements() {
		return elements;
	}

	/**
	 * Sets the {@link #elements}.
	 *
	 * @param elements
	 *            the {@link #elements} to set.
	 */
	public void setElements(List<ListTemplateElement> elements) {
		this.elements = elements;
	}

	/**
	 * Adds the element.
	 *
	 * @param element
	 *            the element to add.
	 */
	public void addElement(ListTemplateElement element) {
		this.elements.add(element);
	}

	/**
	 * Adds the button.
	 *
	 * @param button
	 *            the button to add.
	 */
	public void addButton(Button button) {
		this.buttons.add(button);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((buttons == null) ? 0 : buttons.hashCode());
		result = prime * result
				+ ((elements == null) ? 0 : elements.hashCode());
		result = prime * result
				+ ((topElementStyle == null) ? 0 : topElementStyle.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ListTemplatePayload other = (ListTemplatePayload) obj;
		if (buttons == null) {
			if (other.buttons != null)
				return false;
		} else if (!buttons.equals(other.buttons))
			return false;
		if (elements == null) {
			if (other.elements != null)
				return false;
		} else if (!elements.equals(other.elements))
			return false;
		if (topElementStyle != other.topElementStyle)
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""ListTemplatePayload [elements="" + elements + "", buttons=""
				+ buttons + "", topElementStyle="" + topElementStyle
				+ "", templateType="" + templateType + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.outcoming.payload.template; public class ListTemplatePayload extends TemplateBasePayload { private static final long serialVersionUID = 1L; @Valid
	@Size(min = FbBotMillValidationConstants.LIST_TEMPLATE_MIN_ELEMENTS, max = FbBotMillValidationConstants.LIST_TEMPLATE_MAX_ELEMENTS)
	@NotEmpty
	private List<ListTemplateElement> elements; @Valid
	@Size(max = FbBotMillValidationConstants.LIST_TEMPLATE_MAX_BUTTONS)
	@NotEmpty
	private List<Button> buttons; @SerializedName(""top_element_style"")
	private TopElementStyle topElementStyle; public ListTemplatePayload() { this.templateType = PayloadType.LIST; this.elements = new ArrayList<ListTemplateElement>(); this.buttons = new ArrayList<Button>(); } public ListTemplatePayload(List<ListTemplateElement> elements) { this(); this.elements = elements; } public ListTemplatePayload(List<ListTemplateElement> elements,
			List<Button> buttons) { this(); this.elements = elements; this.buttons = buttons; } public List<Button> getButtons() { return buttons; } public void setButtons(List<Button> buttons) { this.buttons = buttons; } public TopElementStyle getTopElementStyle() { return topElementStyle; } public void setTopElementStyle(TopElementStyle topElementStyle) { this.topElementStyle = topElementStyle; } public List<ListTemplateElement> getElements() { return elements; } public void setElements(List<ListTemplateElement> elements) { this.elements = elements; } public void addElement(ListTemplateElement element) { this.elements.add(element); } public void addButton(Button button) { this.buttons.add(button); } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((buttons == null) ? 0 : buttons.hashCode()); result = prime * result
				+ ((elements == null) ? 0 : elements.hashCode()); result = prime * result
				+ ((topElementStyle == null) ? 0 : topElementStyle.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ListTemplatePayload other = (ListTemplatePayload) obj; if (buttons == null) { if (other.buttons != null)
				return false; } else if (!buttons.equals(other.buttons))
			return false; if (elements == null) { if (other.elements != null)
				return false; } else if (!elements.equals(other.elements))
			return false; if (topElementStyle != other.topElementStyle)
			return false; return true; } @Override
	public String toString() { return ""ListTemplatePayload [elements="" + elements + "", buttons=""
				+ buttons + "", topElementStyle="" + topElementStyle
				+ "", templateType="" + templateType + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.payload.template; public class ListTemplatePayload extends TemplateBasePayload { private static final long serialVersionUID = 1L; @Valid
	@Size(min = FbBotMillValidationConstants.LIST_TEMPLATE_MIN_ELEMENTS, max = FbBotMillValidationConstants.LIST_TEMPLATE_MAX_ELEMENTS)
	@NotEmpty
	private List<ListTemplateElement> elements; @Valid
	@Size(max = FbBotMillValidationConstants.LIST_TEMPLATE_MAX_BUTTONS)
	@NotEmpty
	private List<Button> buttons; @SerializedName(""top_element_style"")
	private TopElementStyle topElementStyle; public ListTemplatePayload() { this.templateType = PayloadType.LIST; this.elements = new ArrayList<ListTemplateElement>(); this.buttons = new ArrayList<Button>(); } public ListTemplatePayload(List<ListTemplateElement> elements) { this(); this.elements = elements; } public ListTemplatePayload(List<ListTemplateElement> elements,
			List<Button> buttons) { this(); this.elements = elements; this.buttons = buttons; } public List<Button> getButtons() { return buttons; } public void setButtons(List<Button> buttons) { this.buttons = buttons; } public TopElementStyle getTopElementStyle() { return topElementStyle; } public void setTopElementStyle(TopElementStyle topElementStyle) { this.topElementStyle = topElementStyle; } public List<ListTemplateElement> getElements() { return elements; } public void setElements(List<ListTemplateElement> elements) { this.elements = elements; } public void addElement(ListTemplateElement element) { this.elements.add(element); } public void addButton(Button button) { this.buttons.add(button); } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((buttons == null) ? 0 : buttons.hashCode()); result = prime * result
				+ ((elements == null) ? 0 : elements.hashCode()); result = prime * result
				+ ((topElementStyle == null) ? 0 : topElementStyle.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ListTemplatePayload other = (ListTemplatePayload) obj; if (buttons == null) { if (other.buttons != null)
				return false; } else if (!buttons.equals(other.buttons))
			return false; if (elements == null) { if (other.elements != null)
				return false; } else if (!elements.equals(other.elements))
			return false; if (topElementStyle != other.topElementStyle)
			return false; return true; } @Override
	public String toString() { return ""ListTemplatePayload [elements="" + elements + "", buttons=""
				+ buttons + "", topElementStyle="" + topElementStyle
				+ "", templateType="" + templateType + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.payload.template; 
import java.util.ArrayList; import java.util.List; 
import javax.validation.Valid; import javax.validation.constraints.Size; 
import org.hibernate.validator.constraints.NotEmpty; 
import co.aurasphere.botmill.fb.internal.util.validation.FbBotMillValidationConstants; import co.aurasphere.botmill.fb.model.outcoming.payload.PayloadType; import co.aurasphere.botmill.fb.model.outcoming.template.button.Button; import co.aurasphere.botmill.fb.model.outcoming.template.list.ListTemplateElement; import co.aurasphere.botmill.fb.model.outcoming.template.list.TopElementStyle; 
import com.google.gson.annotations.SerializedName; 
  public class ListTemplatePayload extends TemplateBasePayload { /**
 * Payload for a List Template.
 *
 * @author Alvin Reyes
 * @see <a href=
 *      ""https://developers.facebook.com/docs/messenger-platform/send-api-reference/list-template""
 *      > Facebook's Messenger Platform List Template Documentation</a>
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @Valid
	@Size(min = FbBotMillValidationConstants.LIST_TEMPLATE_MIN_ELEMENTS, max = FbBotMillValidationConstants.LIST_TEMPLATE_MAX_ELEMENTS)
	@NotEmpty
	private List<ListTemplateElement> elements; /**
	 * List view elements (maximum of 4 elements and minimum of 2 elements).
	 */  @Valid
	@Size(max = FbBotMillValidationConstants.LIST_TEMPLATE_MAX_BUTTONS)
	@NotEmpty
	private List<Button> buttons; /**
	 * List view elements (maximum of 4 elements and minimum of 2 elements).
	 */  @SerializedName(""top_element_style"")
	private TopElementStyle topElementStyle; /**
	 * Value must be large or compact. Default to large if not specified.
	 */  public ListTemplatePayload() { this.templateType = PayloadType.LIST; this.elements = new ArrayList<ListTemplateElement>(); this.buttons = new ArrayList<Button>(); } /**
	 * Instantiates a new ListTemplatePayload.
	 */  public ListTemplatePayload(List<ListTemplateElement> elements) { this(); this.elements = elements; } /**
	 * Instantiates a new ListTemplatePayload.
	 *
	 * @param elements
	 *            the {@link #elements}.
	 */  public ListTemplatePayload(List<ListTemplateElement> elements,
			List<Button> buttons) { this(); this.elements = elements; this.buttons = buttons; } /**
	 * Instantiates a new ListTemplatePayload.
	 *
	 * @param elements
	 *            the {@link #elements}.
	 * @param buttons
	 *            the {@link #buttons}.
	 */  public List<Button> getButtons() { return buttons; } /**
	 * Gets the {@link #buttons}.
	 *
	 * @return the {@link #buttons}.
	 */  public void setButtons(List<Button> buttons) { this.buttons = buttons; } /**
	 * Sets the {@link #buttons}.
	 *
	 * @param buttons
	 *            the {@link #buttons} to set.
	 */  public TopElementStyle getTopElementStyle() { return topElementStyle; } /**
	 * Gets the {@link #topElementStyle}.
	 *
	 * @return the {@link #topElementStyle}.
	 */  public void setTopElementStyle(TopElementStyle topElementStyle) { this.topElementStyle = topElementStyle; } /**
	 * Sets the {@link #topElementStyle}.
	 *
	 * @param topElementStyle
	 *            the {@link #topElementStyle} to set.
	 */  public List<ListTemplateElement> getElements() { return elements; } /**
	 * Gets the {@link #elements}.
	 *
	 * @return the {@link #elements}.
	 */  public void setElements(List<ListTemplateElement> elements) { this.elements = elements; } /**
	 * Sets the {@link #elements}.
	 *
	 * @param elements
	 *            the {@link #elements} to set.
	 */  public void addElement(ListTemplateElement element) { this.elements.add(element); } /**
	 * Adds the element.
	 *
	 * @param element
	 *            the element to add.
	 */  public void addButton(Button button) { this.buttons.add(button); } /**
	 * Adds the button.
	 *
	 * @param button
	 *            the button to add.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((buttons == null) ? 0 : buttons.hashCode()); result = prime * result
				+ ((elements == null) ? 0 : elements.hashCode()); result = prime * result
				+ ((topElementStyle == null) ? 0 : topElementStyle.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ListTemplatePayload other = (ListTemplatePayload) obj; if (buttons == null) { if (other.buttons != null)
				return false; } else if (!buttons.equals(other.buttons))
			return false; if (elements == null) { if (other.elements != null)
				return false; } else if (!elements.equals(other.elements))
			return false; if (topElementStyle != other.topElementStyle)
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""ListTemplatePayload [elements="" + elements + "", buttons=""
				+ buttons + "", topElementStyle="" + topElementStyle
				+ "", templateType="" + templateType + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/payload/template/ReceiptTemplatePayload.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.payload.template;

import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotBlank;

import co.aurasphere.botmill.fb.model.outcoming.payload.PayloadType;
import co.aurasphere.botmill.fb.model.outcoming.template.receipt.Address;
import co.aurasphere.botmill.fb.model.outcoming.template.receipt.Adjustment;
import co.aurasphere.botmill.fb.model.outcoming.template.receipt.ReceiptTemplateElement;
import co.aurasphere.botmill.fb.model.outcoming.template.receipt.Summary;

import com.google.gson.annotations.SerializedName;


/**
 * The Class ReceiptTemplatePayload.
 */
// TODO test with empty lists. if they don't work, use lazy initialization
public class ReceiptTemplatePayload extends TemplateBasePayload {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The recipient name. */
	@NotBlank
	@SerializedName(""recipient_name"")
	private String recipientName;

	/** The merchant name. */
	@SerializedName(""merchant_name"")
	private String merchantName;

	/** The order number. */
	// TODO: unique, document
	@NotBlank
	@SerializedName(""order_number"")
	private String orderNumber;

	/** The currency. */
	@NotBlank
	@Pattern(regexp = ""[A-Z]{3}"", message = ""{currency.pattern.message}"")
	private String currency;

	/** The payment method. */
	@NotBlank
	@SerializedName(""payment_method"")
	private String paymentMethod;

	/** The timestamp. */
	private String timestamp;

	/** The order url. */
	@SerializedName(""order_url"")
	private String orderUrl;

	/** The elements. */
	// TODO: sort not guaranteed, document
	@Size(max = 100)
	private List<ReceiptTemplateElement> elements;

	/** The address. */
	private Address address;

	/** The summary. */
	@Valid
	@NotNull
	private Summary summary;

	/** The adjustments. */
	private List<Adjustment> adjustments;

	/**
	 * Instantiates a new receipt template payload.
	 */
	public ReceiptTemplatePayload() {
		this.templateType = PayloadType.RECEIPT;
		this.elements = new ArrayList<ReceiptTemplateElement>();
		this.adjustments = new ArrayList<Adjustment>();
	}

	/**
	 * Gets the recipient name.
	 *
	 * @return the recipient name
	 */
	public String getRecipientName() {
		return recipientName;
	}

	/**
	 * Sets the recipient name.
	 *
	 * @param recipientName
	 *            the new recipient name
	 */
	public void setRecipientName(String recipientName) {
		this.recipientName = recipientName;
	}

	/**
	 * Gets the merchant name.
	 *
	 * @return the merchant name
	 */
	public String getMerchantName() {
		return merchantName;
	}

	/**
	 * Sets the merchant name.
	 *
	 * @param merchantName
	 *            the new merchant name
	 */
	public void setMerchantName(String merchantName) {
		this.merchantName = merchantName;
	}

	/**
	 * Gets the order number.
	 *
	 * @return the order number
	 */
	public String getOrderNumber() {
		return orderNumber;
	}

	/**
	 * Sets the order number.
	 *
	 * @param orderNumber
	 *            the new order number
	 */
	public void setOrderNumber(String orderNumber) {
		this.orderNumber = orderNumber;
	}

	/**
	 * Gets the currency.
	 *
	 * @return the currency
	 */
	public String getCurrency() {
		return currency;
	}

	/**
	 * Sets the currency.
	 *
	 * @param currency
	 *            the new currency
	 */
	public void setCurrency(String currency) {
		this.currency = currency;
	}

	/**
	 * Gets the payment method.
	 *
	 * @return the payment method
	 */
	public String getPaymentMethod() {
		return paymentMethod;
	}

	/**
	 * Sets the payment method.
	 *
	 * @param paymentMethod
	 *            the new payment method
	 */
	public void setPaymentMethod(String paymentMethod) {
		this.paymentMethod = paymentMethod;
	}

	/**
	 * Gets the timestamp.
	 *
	 * @return the timestamp
	 */
	public String getTimestamp() {
		return timestamp;
	}

	/**
	 * Sets the timestamp.
	 *
	 * @param timestamp
	 *            the new timestamp
	 */
	public void setTimestamp(String timestamp) {
		this.timestamp = timestamp;
	}

	/**
	 * Gets the order url.
	 *
	 * @return the order url
	 */
	public String getOrderUrl() {
		return orderUrl;
	}

	/**
	 * Sets the order url.
	 *
	 * @param orderUrl
	 *            the new order url
	 */
	public void setOrderUrl(String orderUrl) {
		this.orderUrl = orderUrl;
	}

	/**
	 * Gets the elements.
	 *
	 * @return the elements
	 */
	public List<ReceiptTemplateElement> getElements() {
		return elements;
	}

	/**
	 * Sets the elements.
	 *
	 * @param elements
	 *            the new elements
	 */
	public void setElements(List<ReceiptTemplateElement> elements) {
		this.elements = elements;
	}

	/**
	 * Adds the element.
	 *
	 * @param element
	 *            the element
	 */
	public void addElement(ReceiptTemplateElement element) {
		this.elements.add(element);
	}

	/**
	 * Gets the address.
	 *
	 * @return the address
	 */
	public Address getAddress() {
		return address;
	}

	/**
	 * Sets the address.
	 *
	 * @param address
	 *            the new address
	 */
	public void setAddress(Address address) {
		this.address = address;
	}

	/**
	 * Gets the summary.
	 *
	 * @return the summary
	 */
	public Summary getSummary() {
		return summary;
	}

	/**
	 * Sets the summary.
	 *
	 * @param summary
	 *            the new summary
	 */
	public void setSummary(Summary summary) {
		this.summary = summary;
	}

	/**
	 * Gets the adjustments.
	 *
	 * @return the adjustments
	 */
	public List<Adjustment> getAdjustments() {
		return adjustments;
	}

	/**
	 * Sets the adjustments.
	 *
	 * @param adjustments
	 *            the new adjustments
	 */
	public void setAdjustments(List<Adjustment> adjustments) {
		this.adjustments = adjustments;
	}

	/**
	 * Adds the adjustment.
	 *
	 * @param adjustment
	 *            the adjustment
	 */
	public void addAdjustment(Adjustment adjustment) {
		this.adjustments.add(adjustment);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((address == null) ? 0 : address.hashCode());
		result = prime * result
				+ ((adjustments == null) ? 0 : adjustments.hashCode());
		result = prime * result
				+ ((currency == null) ? 0 : currency.hashCode());
		result = prime * result
				+ ((elements == null) ? 0 : elements.hashCode());
		result = prime * result
				+ ((merchantName == null) ? 0 : merchantName.hashCode());
		result = prime * result
				+ ((orderNumber == null) ? 0 : orderNumber.hashCode());
		result = prime * result
				+ ((orderUrl == null) ? 0 : orderUrl.hashCode());
		result = prime * result
				+ ((paymentMethod == null) ? 0 : paymentMethod.hashCode());
		result = prime * result
				+ ((recipientName == null) ? 0 : recipientName.hashCode());
		result = prime * result + ((summary == null) ? 0 : summary.hashCode());
		result = prime * result
				+ ((timestamp == null) ? 0 : timestamp.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ReceiptTemplatePayload other = (ReceiptTemplatePayload) obj;
		if (address == null) {
			if (other.address != null)
				return false;
		} else if (!address.equals(other.address))
			return false;
		if (adjustments == null) {
			if (other.adjustments != null)
				return false;
		} else if (!adjustments.equals(other.adjustments))
			return false;
		if (currency == null) {
			if (other.currency != null)
				return false;
		} else if (!currency.equals(other.currency))
			return false;
		if (elements == null) {
			if (other.elements != null)
				return false;
		} else if (!elements.equals(other.elements))
			return false;
		if (merchantName == null) {
			if (other.merchantName != null)
				return false;
		} else if (!merchantName.equals(other.merchantName))
			return false;
		if (orderNumber == null) {
			if (other.orderNumber != null)
				return false;
		} else if (!orderNumber.equals(other.orderNumber))
			return false;
		if (orderUrl == null) {
			if (other.orderUrl != null)
				return false;
		} else if (!orderUrl.equals(other.orderUrl))
			return false;
		if (paymentMethod == null) {
			if (other.paymentMethod != null)
				return false;
		} else if (!paymentMethod.equals(other.paymentMethod))
			return false;
		if (recipientName == null) {
			if (other.recipientName != null)
				return false;
		} else if (!recipientName.equals(other.recipientName))
			return false;
		if (summary == null) {
			if (other.summary != null)
				return false;
		} else if (!summary.equals(other.summary))
			return false;
		if (timestamp == null) {
			if (other.timestamp != null)
				return false;
		} else if (!timestamp.equals(other.timestamp))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""ReceiptTemplatePayload [recipientName="" + recipientName
				+ "", merchantName="" + merchantName + "", orderNumber=""
				+ orderNumber + "", currency="" + currency + "", paymentMethod=""
				+ paymentMethod + "", timestamp="" + timestamp + "", orderUrl=""
				+ orderUrl + "", elements="" + elements + "", address="" + address
				+ "", summary="" + summary + "", adjustments="" + adjustments
				+ "", templateType="" + templateType + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.payload.template; public class ReceiptTemplatePayload extends TemplateBasePayload { private static final long serialVersionUID = 1L; @NotBlank
	@SerializedName(""recipient_name"")
	private String recipientName; @SerializedName(""merchant_name"")
	private String merchantName; @NotBlank
	@SerializedName(""order_number"")
	private String orderNumber; @NotBlank
	@Pattern(regexp = ""[A-Z]{ 3} "", message = ""{ currency.pattern.message} "")
	private String currency; @NotBlank
	@SerializedName(""payment_method"")
	private String paymentMethod; private String timestamp; @SerializedName(""order_url"")
	private String orderUrl; @Size(max = 100)
	private List<ReceiptTemplateElement> elements; private Address address; @Valid
	@NotNull
	private Summary summary; private List<Adjustment> adjustments; public ReceiptTemplatePayload() { this.templateType = PayloadType.RECEIPT; this.elements = new ArrayList<ReceiptTemplateElement>(); this.adjustments = new ArrayList<Adjustment>(); } public String getRecipientName() { return recipientName; } public void setRecipientName(String recipientName) { this.recipientName = recipientName; } public String getMerchantName() { return merchantName; } public void setMerchantName(String merchantName) { this.merchantName = merchantName; } public String getOrderNumber() { return orderNumber; } public void setOrderNumber(String orderNumber) { this.orderNumber = orderNumber; } public String getCurrency() { return currency; } public void setCurrency(String currency) { this.currency = currency; } public String getPaymentMethod() { return paymentMethod; } public void setPaymentMethod(String paymentMethod) { this.paymentMethod = paymentMethod; } public String getTimestamp() { return timestamp; } public void setTimestamp(String timestamp) { this.timestamp = timestamp; } public String getOrderUrl() { return orderUrl; } public void setOrderUrl(String orderUrl) { this.orderUrl = orderUrl; } public List<ReceiptTemplateElement> getElements() { return elements; } public void setElements(List<ReceiptTemplateElement> elements) { this.elements = elements; } public void addElement(ReceiptTemplateElement element) { this.elements.add(element); } public Address getAddress() { return address; } public void setAddress(Address address) { this.address = address; } public Summary getSummary() { return summary; } public void setSummary(Summary summary) { this.summary = summary; } public List<Adjustment> getAdjustments() { return adjustments; } public void setAdjustments(List<Adjustment> adjustments) { this.adjustments = adjustments; } public void addAdjustment(Adjustment adjustment) { this.adjustments.add(adjustment); } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((address == null) ? 0 : address.hashCode()); result = prime * result
				+ ((adjustments == null) ? 0 : adjustments.hashCode()); result = prime * result
				+ ((currency == null) ? 0 : currency.hashCode()); result = prime * result
				+ ((elements == null) ? 0 : elements.hashCode()); result = prime * result
				+ ((merchantName == null) ? 0 : merchantName.hashCode()); result = prime * result
				+ ((orderNumber == null) ? 0 : orderNumber.hashCode()); result = prime * result
				+ ((orderUrl == null) ? 0 : orderUrl.hashCode()); result = prime * result
				+ ((paymentMethod == null) ? 0 : paymentMethod.hashCode()); result = prime * result
				+ ((recipientName == null) ? 0 : recipientName.hashCode()); result = prime * result + ((summary == null) ? 0 : summary.hashCode()); result = prime * result
				+ ((timestamp == null) ? 0 : timestamp.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ReceiptTemplatePayload other = (ReceiptTemplatePayload) obj; if (address == null) { if (other.address != null)
				return false; } else if (!address.equals(other.address))
			return false; if (adjustments == null) { if (other.adjustments != null)
				return false; } else if (!adjustments.equals(other.adjustments))
			return false; if (currency == null) { if (other.currency != null)
				return false; } else if (!currency.equals(other.currency))
			return false; if (elements == null) { if (other.elements != null)
				return false; } else if (!elements.equals(other.elements))
			return false; if (merchantName == null) { if (other.merchantName != null)
				return false; } else if (!merchantName.equals(other.merchantName))
			return false; if (orderNumber == null) { if (other.orderNumber != null)
				return false; } else if (!orderNumber.equals(other.orderNumber))
			return false; if (orderUrl == null) { if (other.orderUrl != null)
				return false; } else if (!orderUrl.equals(other.orderUrl))
			return false; if (paymentMethod == null) { if (other.paymentMethod != null)
				return false; } else if (!paymentMethod.equals(other.paymentMethod))
			return false; if (recipientName == null) { if (other.recipientName != null)
				return false; } else if (!recipientName.equals(other.recipientName))
			return false; if (summary == null) { if (other.summary != null)
				return false; } else if (!summary.equals(other.summary))
			return false; if (timestamp == null) { if (other.timestamp != null)
				return false; } else if (!timestamp.equals(other.timestamp))
			return false; return true; } @Override
	public String toString() { return ""ReceiptTemplatePayload [recipientName="" + recipientName
				+ "", merchantName="" + merchantName + "", orderNumber=""
				+ orderNumber + "", currency="" + currency + "", paymentMethod=""
				+ paymentMethod + "", timestamp="" + timestamp + "", orderUrl=""
				+ orderUrl + "", elements="" + elements + "", address="" + address
				+ "", summary="" + summary + "", adjustments="" + adjustments
				+ "", templateType="" + templateType + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.payload.template; public class ReceiptTemplatePayload extends TemplateBasePayload { private static final long serialVersionUID = 1L; @NotBlank
	@SerializedName(""recipient_name"")
	private String recipientName; @SerializedName(""merchant_name"")
	private String merchantName; @NotBlank
	@SerializedName(""order_number"")
	private String orderNumber; @NotBlank
	@Pattern(regexp = ""[A-Z]{ 3} "", message = ""{ currency.pattern.message} "")
	private String currency; @NotBlank
	@SerializedName(""payment_method"")
	private String paymentMethod; private String timestamp; @SerializedName(""order_url"")
	private String orderUrl; @Size(max = 100)
	private List<ReceiptTemplateElement> elements; private Address address; @Valid
	@NotNull
	private Summary summary; private List<Adjustment> adjustments; public ReceiptTemplatePayload() { this.templateType = PayloadType.RECEIPT; this.elements = new ArrayList<ReceiptTemplateElement>(); this.adjustments = new ArrayList<Adjustment>(); } public String getRecipientName() { return recipientName; } public void setRecipientName(String recipientName) { this.recipientName = recipientName; } public String getMerchantName() { return merchantName; } public void setMerchantName(String merchantName) { this.merchantName = merchantName; } public String getOrderNumber() { return orderNumber; } public void setOrderNumber(String orderNumber) { this.orderNumber = orderNumber; } public String getCurrency() { return currency; } public void setCurrency(String currency) { this.currency = currency; } public String getPaymentMethod() { return paymentMethod; } public void setPaymentMethod(String paymentMethod) { this.paymentMethod = paymentMethod; } public String getTimestamp() { return timestamp; } public void setTimestamp(String timestamp) { this.timestamp = timestamp; } public String getOrderUrl() { return orderUrl; } public void setOrderUrl(String orderUrl) { this.orderUrl = orderUrl; } public List<ReceiptTemplateElement> getElements() { return elements; } public void setElements(List<ReceiptTemplateElement> elements) { this.elements = elements; } public void addElement(ReceiptTemplateElement element) { this.elements.add(element); } public Address getAddress() { return address; } public void setAddress(Address address) { this.address = address; } public Summary getSummary() { return summary; } public void setSummary(Summary summary) { this.summary = summary; } public List<Adjustment> getAdjustments() { return adjustments; } public void setAdjustments(List<Adjustment> adjustments) { this.adjustments = adjustments; } public void addAdjustment(Adjustment adjustment) { this.adjustments.add(adjustment); } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((address == null) ? 0 : address.hashCode()); result = prime * result
				+ ((adjustments == null) ? 0 : adjustments.hashCode()); result = prime * result
				+ ((currency == null) ? 0 : currency.hashCode()); result = prime * result
				+ ((elements == null) ? 0 : elements.hashCode()); result = prime * result
				+ ((merchantName == null) ? 0 : merchantName.hashCode()); result = prime * result
				+ ((orderNumber == null) ? 0 : orderNumber.hashCode()); result = prime * result
				+ ((orderUrl == null) ? 0 : orderUrl.hashCode()); result = prime * result
				+ ((paymentMethod == null) ? 0 : paymentMethod.hashCode()); result = prime * result
				+ ((recipientName == null) ? 0 : recipientName.hashCode()); result = prime * result + ((summary == null) ? 0 : summary.hashCode()); result = prime * result
				+ ((timestamp == null) ? 0 : timestamp.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ReceiptTemplatePayload other = (ReceiptTemplatePayload) obj; if (address == null) { if (other.address != null)
				return false; } else if (!address.equals(other.address))
			return false; if (adjustments == null) { if (other.adjustments != null)
				return false; } else if (!adjustments.equals(other.adjustments))
			return false; if (currency == null) { if (other.currency != null)
				return false; } else if (!currency.equals(other.currency))
			return false; if (elements == null) { if (other.elements != null)
				return false; } else if (!elements.equals(other.elements))
			return false; if (merchantName == null) { if (other.merchantName != null)
				return false; } else if (!merchantName.equals(other.merchantName))
			return false; if (orderNumber == null) { if (other.orderNumber != null)
				return false; } else if (!orderNumber.equals(other.orderNumber))
			return false; if (orderUrl == null) { if (other.orderUrl != null)
				return false; } else if (!orderUrl.equals(other.orderUrl))
			return false; if (paymentMethod == null) { if (other.paymentMethod != null)
				return false; } else if (!paymentMethod.equals(other.paymentMethod))
			return false; if (recipientName == null) { if (other.recipientName != null)
				return false; } else if (!recipientName.equals(other.recipientName))
			return false; if (summary == null) { if (other.summary != null)
				return false; } else if (!summary.equals(other.summary))
			return false; if (timestamp == null) { if (other.timestamp != null)
				return false; } else if (!timestamp.equals(other.timestamp))
			return false; return true; } @Override
	public String toString() { return ""ReceiptTemplatePayload [recipientName="" + recipientName
				+ "", merchantName="" + merchantName + "", orderNumber=""
				+ orderNumber + "", currency="" + currency + "", paymentMethod=""
				+ paymentMethod + "", timestamp="" + timestamp + "", orderUrl=""
				+ orderUrl + "", elements="" + elements + "", address="" + address
				+ "", summary="" + summary + "", adjustments="" + adjustments
				+ "", templateType="" + templateType + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.payload.template; 
import java.util.ArrayList; import java.util.List; 
import javax.validation.Valid; import javax.validation.constraints.NotNull; import javax.validation.constraints.Pattern; import javax.validation.constraints.Size; 
import org.hibernate.validator.constraints.NotBlank; 
import co.aurasphere.botmill.fb.model.outcoming.payload.PayloadType; import co.aurasphere.botmill.fb.model.outcoming.template.receipt.Address; import co.aurasphere.botmill.fb.model.outcoming.template.receipt.Adjustment; import co.aurasphere.botmill.fb.model.outcoming.template.receipt.ReceiptTemplateElement; import co.aurasphere.botmill.fb.model.outcoming.template.receipt.Summary; 
import com.google.gson.annotations.SerializedName; 
  /**
 * The Class ReceiptTemplatePayload.
 */ public class ReceiptTemplatePayload extends TemplateBasePayload { // TODO test with empty lists. if they don't work, use lazy initialization  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @NotBlank
	@SerializedName(""recipient_name"")
	private String recipientName; /** The recipient name. */  @SerializedName(""merchant_name"")
	private String merchantName; /** The merchant name. */  /** The order number. */ @NotBlank
	@SerializedName(""order_number"")
	private String orderNumber; // TODO: unique, document  @NotBlank
	@Pattern(regexp = ""[A-Z]{ 3} "", message = ""{ currency.pattern.message} "")
	private String currency; /** The currency. */  @NotBlank
	@SerializedName(""payment_method"")
	private String paymentMethod; /** The payment method. */  private String timestamp; /** The timestamp. */  @SerializedName(""order_url"")
	private String orderUrl; /** The order url. */  /** The elements. */ @Size(max = 100)
	private List<ReceiptTemplateElement> elements; // TODO: sort not guaranteed, document  private Address address; /** The address. */  @Valid
	@NotNull
	private Summary summary; /** The summary. */  private List<Adjustment> adjustments; /** The adjustments. */  public ReceiptTemplatePayload() { this.templateType = PayloadType.RECEIPT; this.elements = new ArrayList<ReceiptTemplateElement>(); this.adjustments = new ArrayList<Adjustment>(); } /**
	 * Instantiates a new receipt template payload.
	 */  public String getRecipientName() { return recipientName; } /**
	 * Gets the recipient name.
	 *
	 * @return the recipient name
	 */  public void setRecipientName(String recipientName) { this.recipientName = recipientName; } /**
	 * Sets the recipient name.
	 *
	 * @param recipientName
	 *            the new recipient name
	 */  public String getMerchantName() { return merchantName; } /**
	 * Gets the merchant name.
	 *
	 * @return the merchant name
	 */  public void setMerchantName(String merchantName) { this.merchantName = merchantName; } /**
	 * Sets the merchant name.
	 *
	 * @param merchantName
	 *            the new merchant name
	 */  public String getOrderNumber() { return orderNumber; } /**
	 * Gets the order number.
	 *
	 * @return the order number
	 */  public void setOrderNumber(String orderNumber) { this.orderNumber = orderNumber; } /**
	 * Sets the order number.
	 *
	 * @param orderNumber
	 *            the new order number
	 */  public String getCurrency() { return currency; } /**
	 * Gets the currency.
	 *
	 * @return the currency
	 */  public void setCurrency(String currency) { this.currency = currency; } /**
	 * Sets the currency.
	 *
	 * @param currency
	 *            the new currency
	 */  public String getPaymentMethod() { return paymentMethod; } /**
	 * Gets the payment method.
	 *
	 * @return the payment method
	 */  public void setPaymentMethod(String paymentMethod) { this.paymentMethod = paymentMethod; } /**
	 * Sets the payment method.
	 *
	 * @param paymentMethod
	 *            the new payment method
	 */  public String getTimestamp() { return timestamp; } /**
	 * Gets the timestamp.
	 *
	 * @return the timestamp
	 */  public void setTimestamp(String timestamp) { this.timestamp = timestamp; } /**
	 * Sets the timestamp.
	 *
	 * @param timestamp
	 *            the new timestamp
	 */  public String getOrderUrl() { return orderUrl; } /**
	 * Gets the order url.
	 *
	 * @return the order url
	 */  public void setOrderUrl(String orderUrl) { this.orderUrl = orderUrl; } /**
	 * Sets the order url.
	 *
	 * @param orderUrl
	 *            the new order url
	 */  public List<ReceiptTemplateElement> getElements() { return elements; } /**
	 * Gets the elements.
	 *
	 * @return the elements
	 */  public void setElements(List<ReceiptTemplateElement> elements) { this.elements = elements; } /**
	 * Sets the elements.
	 *
	 * @param elements
	 *            the new elements
	 */  public void addElement(ReceiptTemplateElement element) { this.elements.add(element); } /**
	 * Adds the element.
	 *
	 * @param element
	 *            the element
	 */  public Address getAddress() { return address; } /**
	 * Gets the address.
	 *
	 * @return the address
	 */  public void setAddress(Address address) { this.address = address; } /**
	 * Sets the address.
	 *
	 * @param address
	 *            the new address
	 */  public Summary getSummary() { return summary; } /**
	 * Gets the summary.
	 *
	 * @return the summary
	 */  public void setSummary(Summary summary) { this.summary = summary; } /**
	 * Sets the summary.
	 *
	 * @param summary
	 *            the new summary
	 */  public List<Adjustment> getAdjustments() { return adjustments; } /**
	 * Gets the adjustments.
	 *
	 * @return the adjustments
	 */  public void setAdjustments(List<Adjustment> adjustments) { this.adjustments = adjustments; } /**
	 * Sets the adjustments.
	 *
	 * @param adjustments
	 *            the new adjustments
	 */  public void addAdjustment(Adjustment adjustment) { this.adjustments.add(adjustment); } /**
	 * Adds the adjustment.
	 *
	 * @param adjustment
	 *            the adjustment
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((address == null) ? 0 : address.hashCode()); result = prime * result
				+ ((adjustments == null) ? 0 : adjustments.hashCode()); result = prime * result
				+ ((currency == null) ? 0 : currency.hashCode()); result = prime * result
				+ ((elements == null) ? 0 : elements.hashCode()); result = prime * result
				+ ((merchantName == null) ? 0 : merchantName.hashCode()); result = prime * result
				+ ((orderNumber == null) ? 0 : orderNumber.hashCode()); result = prime * result
				+ ((orderUrl == null) ? 0 : orderUrl.hashCode()); result = prime * result
				+ ((paymentMethod == null) ? 0 : paymentMethod.hashCode()); result = prime * result
				+ ((recipientName == null) ? 0 : recipientName.hashCode()); result = prime * result + ((summary == null) ? 0 : summary.hashCode()); result = prime * result
				+ ((timestamp == null) ? 0 : timestamp.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ReceiptTemplatePayload other = (ReceiptTemplatePayload) obj; if (address == null) { if (other.address != null)
				return false; } else if (!address.equals(other.address))
			return false; if (adjustments == null) { if (other.adjustments != null)
				return false; } else if (!adjustments.equals(other.adjustments))
			return false; if (currency == null) { if (other.currency != null)
				return false; } else if (!currency.equals(other.currency))
			return false; if (elements == null) { if (other.elements != null)
				return false; } else if (!elements.equals(other.elements))
			return false; if (merchantName == null) { if (other.merchantName != null)
				return false; } else if (!merchantName.equals(other.merchantName))
			return false; if (orderNumber == null) { if (other.orderNumber != null)
				return false; } else if (!orderNumber.equals(other.orderNumber))
			return false; if (orderUrl == null) { if (other.orderUrl != null)
				return false; } else if (!orderUrl.equals(other.orderUrl))
			return false; if (paymentMethod == null) { if (other.paymentMethod != null)
				return false; } else if (!paymentMethod.equals(other.paymentMethod))
			return false; if (recipientName == null) { if (other.recipientName != null)
				return false; } else if (!recipientName.equals(other.recipientName))
			return false; if (summary == null) { if (other.summary != null)
				return false; } else if (!summary.equals(other.summary))
			return false; if (timestamp == null) { if (other.timestamp != null)
				return false; } else if (!timestamp.equals(other.timestamp))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""ReceiptTemplatePayload [recipientName="" + recipientName
				+ "", merchantName="" + merchantName + "", orderNumber=""
				+ orderNumber + "", currency="" + currency + "", paymentMethod=""
				+ paymentMethod + "", timestamp="" + timestamp + "", orderUrl=""
				+ orderUrl + "", elements="" + elements + "", address="" + address
				+ "", summary="" + summary + "", adjustments="" + adjustments
				+ "", templateType="" + templateType + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/payload/template/TemplateBasePayload.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.payload.template;

import javax.validation.constraints.NotNull;

import co.aurasphere.botmill.fb.model.base.Payload;
import co.aurasphere.botmill.fb.model.outcoming.payload.PayloadType;

import com.google.gson.annotations.SerializedName;


/**
 * A {@link Payload} which contains a Template.
 * 
 * @author Donato Rimenti
 * 
 */
public class TemplateBasePayload implements Payload {

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The type of the template content.
	 */
	@NotNull
	@SerializedName(""template_type"")
	protected PayloadType templateType;

	/**
	 * Gets the {@link #templateType}.
	 *
	 * @return the {@link #templateType}.
	 */
	public PayloadType getTemplateType() {
		return templateType;
	}

	/**
	 * Sets the {@link #templateType}.
	 *
	 * @param templateType
	 *            the {@link #templateType} to set.
	 */
	public void setTemplateType(PayloadType templateType) {
		this.templateType = templateType;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((templateType == null) ? 0 : templateType.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		TemplateBasePayload other = (TemplateBasePayload) obj;
		if (templateType != other.templateType)
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""TemplateBasePayload [templateType="" + templateType + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.payload.template; public class TemplateBasePayload implements Payload { private static final long serialVersionUID = 1L; @NotNull
	@SerializedName(""template_type"")
	protected PayloadType templateType; public PayloadType getTemplateType() { return templateType; } public void setTemplateType(PayloadType templateType) { this.templateType = templateType; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((templateType == null) ? 0 : templateType.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; TemplateBasePayload other = (TemplateBasePayload) obj; if (templateType != other.templateType)
			return false; return true; } @Override
	public String toString() { return ""TemplateBasePayload [templateType="" + templateType + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.payload.template; public class TemplateBasePayload implements Payload { private static final long serialVersionUID = 1L; @NotNull
	@SerializedName(""template_type"")
	protected PayloadType templateType; public PayloadType getTemplateType() { return templateType; } public void setTemplateType(PayloadType templateType) { this.templateType = templateType; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((templateType == null) ? 0 : templateType.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; TemplateBasePayload other = (TemplateBasePayload) obj; if (templateType != other.templateType)
			return false; return true; } @Override
	public String toString() { return ""TemplateBasePayload [templateType="" + templateType + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.payload.template; 
import javax.validation.constraints.NotNull; 
import co.aurasphere.botmill.fb.model.base.Payload; import co.aurasphere.botmill.fb.model.outcoming.payload.PayloadType; 
import com.google.gson.annotations.SerializedName; 
  public class TemplateBasePayload implements Payload { /**
 * A {@link Payload} which contains a Template.
 * 
 * @author Donato Rimenti
 * 
 */  private static final long serialVersionUID = 1L; /**
	 * The serial version UID.
	 */  @NotNull
	@SerializedName(""template_type"")
	protected PayloadType templateType; /**
	 * The type of the template content.
	 */  public PayloadType getTemplateType() { return templateType; } /**
	 * Gets the {@link #templateType}.
	 *
	 * @return the {@link #templateType}.
	 */  public void setTemplateType(PayloadType templateType) { this.templateType = templateType; } /**
	 * Sets the {@link #templateType}.
	 *
	 * @param templateType
	 *            the {@link #templateType} to set.
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((templateType == null) ? 0 : templateType.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; TemplateBasePayload other = (TemplateBasePayload) obj; if (templateType != other.templateType)
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""TemplateBasePayload [templateType="" + templateType + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/airline/Airport.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.airline;

import java.io.Serializable;

import org.hibernate.validator.constraints.NotBlank;

import com.google.gson.annotations.SerializedName;


/**
 * The Class Airport.
 */
public class Airport implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The airport code. */
	@NotBlank
	@SerializedName(""airport_code"")
	private String airportCode;

	/** The city. */
	@NotBlank
	private String city;

	/** The terminal. */
	private String terminal;

	/** The gate. */
	private String gate;

	/**
	 * Instantiates a new airport.
	 *
	 * @param airportCode
	 *            the airport code
	 * @param city
	 *            the city
	 */
	public Airport(String airportCode, String city) {
		this.airportCode = airportCode;
		this.city = city;
	}

	/**
	 * Instantiates a new airport.
	 *
	 * @param airportCode
	 *            the airport code
	 * @param city
	 *            the city
	 * @param gate
	 *            the gate
	 * @param terminal
	 *            the terminal
	 */
	public Airport(String airportCode, String city, String gate, String terminal) {
		this(airportCode, city);
		this.gate = gate;
		this.terminal = terminal;
	}

	/**
	 * Gets the airport code.
	 *
	 * @return the airport code
	 */
	public String getAirportCode() {
		return airportCode;
	}

	/**
	 * Sets the airport code.
	 *
	 * @param airportCode
	 *            the new airport code
	 */
	public void setAirportCode(String airportCode) {
		this.airportCode = airportCode;
	}

	/**
	 * Gets the city.
	 *
	 * @return the city
	 */
	public String getCity() {
		return city;
	}

	/**
	 * Sets the city.
	 *
	 * @param city
	 *            the new city
	 */
	public void setCity(String city) {
		this.city = city;
	}

	/**
	 * Gets the terminal.
	 *
	 * @return the terminal
	 */
	public String getTerminal() {
		return terminal;
	}

	/**
	 * Sets the terminal.
	 *
	 * @param terminal
	 *            the new terminal
	 */
	public void setTerminal(String terminal) {
		this.terminal = terminal;
	}

	/**
	 * Gets the gate.
	 *
	 * @return the gate
	 */
	public String getGate() {
		return gate;
	}

	/**
	 * Sets the gate.
	 *
	 * @param gate
	 *            the new gate
	 */
	public void setGate(String gate) {
		this.gate = gate;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((airportCode == null) ? 0 : airportCode.hashCode());
		result = prime * result + ((city == null) ? 0 : city.hashCode());
		result = prime * result + ((gate == null) ? 0 : gate.hashCode());
		result = prime * result
				+ ((terminal == null) ? 0 : terminal.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Airport other = (Airport) obj;
		if (airportCode == null) {
			if (other.airportCode != null)
				return false;
		} else if (!airportCode.equals(other.airportCode))
			return false;
		if (city == null) {
			if (other.city != null)
				return false;
		} else if (!city.equals(other.city))
			return false;
		if (gate == null) {
			if (other.gate != null)
				return false;
		} else if (!gate.equals(other.gate))
			return false;
		if (terminal == null) {
			if (other.terminal != null)
				return false;
		} else if (!terminal.equals(other.terminal))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""Airport [airportCode="" + airportCode + "", city="" + city
				+ "", terminal="" + terminal + "", gate="" + gate + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.outcoming.template.airline; public class Airport implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	@SerializedName(""airport_code"")
	private String airportCode; @NotBlank
	private String city; private String terminal; private String gate; public Airport(String airportCode, String city) { this.airportCode = airportCode; this.city = city; } public Airport(String airportCode, String city, String gate, String terminal) { this(airportCode, city); this.gate = gate; this.terminal = terminal; } public String getAirportCode() { return airportCode; } public void setAirportCode(String airportCode) { this.airportCode = airportCode; } public String getCity() { return city; } public void setCity(String city) { this.city = city; } public String getTerminal() { return terminal; } public void setTerminal(String terminal) { this.terminal = terminal; } public String getGate() { return gate; } public void setGate(String gate) { this.gate = gate; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((airportCode == null) ? 0 : airportCode.hashCode()); result = prime * result + ((city == null) ? 0 : city.hashCode()); result = prime * result + ((gate == null) ? 0 : gate.hashCode()); result = prime * result
				+ ((terminal == null) ? 0 : terminal.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Airport other = (Airport) obj; if (airportCode == null) { if (other.airportCode != null)
				return false; } else if (!airportCode.equals(other.airportCode))
			return false; if (city == null) { if (other.city != null)
				return false; } else if (!city.equals(other.city))
			return false; if (gate == null) { if (other.gate != null)
				return false; } else if (!gate.equals(other.gate))
			return false; if (terminal == null) { if (other.terminal != null)
				return false; } else if (!terminal.equals(other.terminal))
			return false; return true; } @Override
	public String toString() { return ""Airport [airportCode="" + airportCode + "", city="" + city
				+ "", terminal="" + terminal + "", gate="" + gate + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.airline; public class Airport implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	@SerializedName(""airport_code"")
	private String airportCode; @NotBlank
	private String city; private String terminal; private String gate; public Airport(String airportCode, String city) { this.airportCode = airportCode; this.city = city; } public Airport(String airportCode, String city, String gate, String terminal) { this(airportCode, city); this.gate = gate; this.terminal = terminal; } public String getAirportCode() { return airportCode; } public void setAirportCode(String airportCode) { this.airportCode = airportCode; } public String getCity() { return city; } public void setCity(String city) { this.city = city; } public String getTerminal() { return terminal; } public void setTerminal(String terminal) { this.terminal = terminal; } public String getGate() { return gate; } public void setGate(String gate) { this.gate = gate; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((airportCode == null) ? 0 : airportCode.hashCode()); result = prime * result + ((city == null) ? 0 : city.hashCode()); result = prime * result + ((gate == null) ? 0 : gate.hashCode()); result = prime * result
				+ ((terminal == null) ? 0 : terminal.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Airport other = (Airport) obj; if (airportCode == null) { if (other.airportCode != null)
				return false; } else if (!airportCode.equals(other.airportCode))
			return false; if (city == null) { if (other.city != null)
				return false; } else if (!city.equals(other.city))
			return false; if (gate == null) { if (other.gate != null)
				return false; } else if (!gate.equals(other.gate))
			return false; if (terminal == null) { if (other.terminal != null)
				return false; } else if (!terminal.equals(other.terminal))
			return false; return true; } @Override
	public String toString() { return ""Airport [airportCode="" + airportCode + "", city="" + city
				+ "", terminal="" + terminal + "", gate="" + gate + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.airline; 
import java.io.Serializable; 
import org.hibernate.validator.constraints.NotBlank; 
import com.google.gson.annotations.SerializedName; 
  public class Airport implements Serializable { /**
 * The Class Airport.
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @NotBlank
	@SerializedName(""airport_code"")
	private String airportCode; /** The airport code. */  @NotBlank
	private String city; /** The city. */  private String terminal; /** The terminal. */  private String gate; /** The gate. */  public Airport(String airportCode, String city) { this.airportCode = airportCode; this.city = city; } /**
	 * Instantiates a new airport.
	 *
	 * @param airportCode
	 *            the airport code
	 * @param city
	 *            the city
	 */  public Airport(String airportCode, String city, String gate, String terminal) { this(airportCode, city); this.gate = gate; this.terminal = terminal; } /**
	 * Instantiates a new airport.
	 *
	 * @param airportCode
	 *            the airport code
	 * @param city
	 *            the city
	 * @param gate
	 *            the gate
	 * @param terminal
	 *            the terminal
	 */  public String getAirportCode() { return airportCode; } /**
	 * Gets the airport code.
	 *
	 * @return the airport code
	 */  public void setAirportCode(String airportCode) { this.airportCode = airportCode; } /**
	 * Sets the airport code.
	 *
	 * @param airportCode
	 *            the new airport code
	 */  public String getCity() { return city; } /**
	 * Gets the city.
	 *
	 * @return the city
	 */  public void setCity(String city) { this.city = city; } /**
	 * Sets the city.
	 *
	 * @param city
	 *            the new city
	 */  public String getTerminal() { return terminal; } /**
	 * Gets the terminal.
	 *
	 * @return the terminal
	 */  public void setTerminal(String terminal) { this.terminal = terminal; } /**
	 * Sets the terminal.
	 *
	 * @param terminal
	 *            the new terminal
	 */  public String getGate() { return gate; } /**
	 * Gets the gate.
	 *
	 * @return the gate
	 */  public void setGate(String gate) { this.gate = gate; } /**
	 * Sets the gate.
	 *
	 * @param gate
	 *            the new gate
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((airportCode == null) ? 0 : airportCode.hashCode()); result = prime * result + ((city == null) ? 0 : city.hashCode()); result = prime * result + ((gate == null) ? 0 : gate.hashCode()); result = prime * result
				+ ((terminal == null) ? 0 : terminal.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Airport other = (Airport) obj; if (airportCode == null) { if (other.airportCode != null)
				return false; } else if (!airportCode.equals(other.airportCode))
			return false; if (city == null) { if (other.city != null)
				return false; } else if (!city.equals(other.city))
			return false; if (gate == null) { if (other.gate != null)
				return false; } else if (!gate.equals(other.gate))
			return false; if (terminal == null) { if (other.terminal != null)
				return false; } else if (!terminal.equals(other.terminal))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""Airport [airportCode="" + airportCode + "", city="" + city
				+ "", terminal="" + terminal + "", gate="" + gate + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/airline/BoardingPass.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.airline;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotBlank;

import com.google.gson.annotations.SerializedName;


/**
 * The Class BoardingPass.
 */
public class BoardingPass implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The passenger name. */
	@NotBlank
	@SerializedName(""passenger_name"")
	private String passengerName;

	/** The pnr number. */
	@NotBlank
	@SerializedName(""pnr_number"")
	private String pnrNumber;

	/** The travel class. */
	@SerializedName(""travel_class"")
	private TravelClass travelClass;

	/** The seat. */
	private String seat;

	/** The auxiliary fields. */
	@Size(max = 5)
	@SerializedName(""auxiliary_fields"")
	private List<Field> auxiliaryFields;

	/** The secondary fields. */
	@Size(max = 5)
	@SerializedName(""secondary_fields"")
	private List<Field> secondaryFields;

	/** The logo image url. */
	@NotBlank
	@SerializedName(""logo_image_url"")
	private String logoImageUrl;

	/** The header image url. */
	@SerializedName(""header_image_url"")
	private String headerImageUrl;

	/** The header text field. */
	@SerializedName(""header_text_field"")
	private String headerTextField;

	/** The qr code. */
	@SerializedName(""qr_code"")
	private String qrCode;

	/** The barcode image url. */
	@SerializedName(""barcode_image_url"")
	private String barcodeImageUrl;

	/** The above bar code image url. */
	@NotBlank
	@SerializedName(""above_bar_code_image_url"")
	private String aboveBarCodeImageUrl;

	/** The flight info. */
	@Valid
	@NotNull
	@SerializedName(""flight_info"")
	private FlightInfo flightInfo;

	/**
	 * Instantiates a new boarding pass.
	 *
	 * @param passengerName
	 *            the passenger name
	 * @param pnrNumber
	 *            the pnr number
	 * @param logoImageUrl
	 *            the logo image url
	 * @param aboveBarCodeImageUrl
	 *            the above bar code image url
	 */
	public BoardingPass(String passengerName, String pnrNumber,
			String logoImageUrl, String aboveBarCodeImageUrl) {
		this.passengerName = passengerName;
		this.pnrNumber = pnrNumber;
		this.logoImageUrl = logoImageUrl;
		this.aboveBarCodeImageUrl = aboveBarCodeImageUrl;
		this.auxiliaryFields = new ArrayList<Field>();
		this.secondaryFields = new ArrayList<Field>();
	}

	/**
	 * Gets the passenger name.
	 *
	 * @return the passenger name
	 */
	public String getPassengerName() {
		return passengerName;
	}

	/**
	 * Sets the passenger name.
	 *
	 * @param passengerName
	 *            the new passenger name
	 */
	public void setPassengerName(String passengerName) {
		this.passengerName = passengerName;
	}

	/**
	 * Gets the pnr number.
	 *
	 * @return the pnr number
	 */
	public String getPnrNumber() {
		return pnrNumber;
	}

	/**
	 * Sets the pnr number.
	 *
	 * @param pnrNumber
	 *            the new pnr number
	 */
	public void setPnrNumber(String pnrNumber) {
		this.pnrNumber = pnrNumber;
	}

	/**
	 * Gets the travel class.
	 *
	 * @return the travel class
	 */
	public TravelClass getTravelClass() {
		return travelClass;
	}

	/**
	 * Sets the travel class.
	 *
	 * @param travelClass
	 *            the new travel class
	 */
	public void setTravelClass(TravelClass travelClass) {
		this.travelClass = travelClass;
	}

	/**
	 * Gets the seat.
	 *
	 * @return the seat
	 */
	public String getSeat() {
		return seat;
	}

	/**
	 * Sets the seat.
	 *
	 * @param seat
	 *            the new seat
	 */
	public void setSeat(String seat) {
		this.seat = seat;
	}

	/**
	 * Gets the auxiliary fields.
	 *
	 * @return the auxiliary fields
	 */
	public List<Field> getAuxiliaryFields() {
		return auxiliaryFields;
	}

	/**
	 * Sets the auxiliary fields.
	 *
	 * @param auxiliaryFields
	 *            the new auxiliary fields
	 */
	public void setAuxiliaryFields(List<Field> auxiliaryFields) {
		this.auxiliaryFields = auxiliaryFields;
	}

	/**
	 * Gets the secondary fields.
	 *
	 * @return the secondary fields
	 */
	public List<Field> getSecondaryFields() {
		return secondaryFields;
	}

	/**
	 * Sets the secondary fields.
	 *
	 * @param secondaryFields
	 *            the new secondary fields
	 */
	public void setSecondaryFields(List<Field> secondaryFields) {
		this.secondaryFields = secondaryFields;
	}

	/**
	 * Gets the logo image url.
	 *
	 * @return the logo image url
	 */
	public String getLogoImageUrl() {
		return logoImageUrl;
	}

	/**
	 * Sets the logo image url.
	 *
	 * @param logoImageUrl
	 *            the new logo image url
	 */
	public void setLogoImageUrl(String logoImageUrl) {
		this.logoImageUrl = logoImageUrl;
	}

	/**
	 * Gets the header image url.
	 *
	 * @return the header image url
	 */
	public String getHeaderImageUrl() {
		return headerImageUrl;
	}

	/**
	 * Sets the header image url.
	 *
	 * @param headerImageUrl
	 *            the new header image url
	 */
	public void setHeaderImageUrl(String headerImageUrl) {
		this.headerImageUrl = headerImageUrl;
	}

	/**
	 * Gets the header text field.
	 *
	 * @return the header text field
	 */
	public String getHeaderTextField() {
		return headerTextField;
	}

	/**
	 * Sets the header text field.
	 *
	 * @param headerTextField
	 *            the new header text field
	 */
	public void setHeaderTextField(String headerTextField) {
		this.headerTextField = headerTextField;
	}

	/**
	 * Gets the qr code.
	 *
	 * @return the qr code
	 */
	public String getQrCode() {
		return qrCode;
	}

	/**
	 * Sets the qr code.
	 *
	 * @param qrCode
	 *            the new qr code
	 */
	public void setQrCode(String qrCode) {
		this.qrCode = qrCode;
	}

	/**
	 * Gets the barcode image url.
	 *
	 * @return the barcode image url
	 */
	public String getBarcodeImageUrl() {
		return barcodeImageUrl;
	}

	/**
	 * Sets the barcode image url.
	 *
	 * @param barcodeImageUrl
	 *            the new barcode image url
	 */
	public void setBarcodeImageUrl(String barcodeImageUrl) {
		this.barcodeImageUrl = barcodeImageUrl;
	}

	/**
	 * Gets the above bar code image url.
	 *
	 * @return the above bar code image url
	 */
	public String getAboveBarCodeImageUrl() {
		return aboveBarCodeImageUrl;
	}

	/**
	 * Sets the above bar code image url.
	 *
	 * @param aboveBarCodeImageUrl
	 *            the new above bar code image url
	 */
	public void setAboveBarCodeImageUrl(String aboveBarCodeImageUrl) {
		this.aboveBarCodeImageUrl = aboveBarCodeImageUrl;
	}

	/**
	 * Gets the flight info.
	 *
	 * @return the flight info
	 */
	public FlightInfo getFlightInfo() {
		return flightInfo;
	}

	/**
	 * Sets the flight info.
	 *
	 * @param flightInfo
	 *            the new flight info
	 */
	public void setFlightInfo(FlightInfo flightInfo) {
		this.flightInfo = flightInfo;
	}

	/**
	 * Adds the auxiliary field.
	 *
	 * @param field
	 *            the field
	 */
	public void addAuxiliaryField(Field field) {
		this.auxiliaryFields.add(field);
	}

	/**
	 * Adds the secondary field.
	 *
	 * @param field
	 *            the field
	 */
	public void addSecondaryField(Field field) {
		this.secondaryFields.add(field);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime
				* result
				+ ((aboveBarCodeImageUrl == null) ? 0 : aboveBarCodeImageUrl
						.hashCode());
		result = prime * result
				+ ((auxiliaryFields == null) ? 0 : auxiliaryFields.hashCode());
		result = prime * result
				+ ((barcodeImageUrl == null) ? 0 : barcodeImageUrl.hashCode());
		result = prime * result
				+ ((flightInfo == null) ? 0 : flightInfo.hashCode());
		result = prime * result
				+ ((headerImageUrl == null) ? 0 : headerImageUrl.hashCode());
		result = prime * result
				+ ((headerTextField == null) ? 0 : headerTextField.hashCode());
		result = prime * result
				+ ((logoImageUrl == null) ? 0 : logoImageUrl.hashCode());
		result = prime * result
				+ ((passengerName == null) ? 0 : passengerName.hashCode());
		result = prime * result
				+ ((pnrNumber == null) ? 0 : pnrNumber.hashCode());
		result = prime * result + ((qrCode == null) ? 0 : qrCode.hashCode());
		result = prime * result + ((seat == null) ? 0 : seat.hashCode());
		result = prime * result
				+ ((secondaryFields == null) ? 0 : secondaryFields.hashCode());
		result = prime * result
				+ ((travelClass == null) ? 0 : travelClass.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		BoardingPass other = (BoardingPass) obj;
		if (aboveBarCodeImageUrl == null) {
			if (other.aboveBarCodeImageUrl != null)
				return false;
		} else if (!aboveBarCodeImageUrl.equals(other.aboveBarCodeImageUrl))
			return false;
		if (auxiliaryFields == null) {
			if (other.auxiliaryFields != null)
				return false;
		} else if (!auxiliaryFields.equals(other.auxiliaryFields))
			return false;
		if (barcodeImageUrl == null) {
			if (other.barcodeImageUrl != null)
				return false;
		} else if (!barcodeImageUrl.equals(other.barcodeImageUrl))
			return false;
		if (flightInfo == null) {
			if (other.flightInfo != null)
				return false;
		} else if (!flightInfo.equals(other.flightInfo))
			return false;
		if (headerImageUrl == null) {
			if (other.headerImageUrl != null)
				return false;
		} else if (!headerImageUrl.equals(other.headerImageUrl))
			return false;
		if (headerTextField == null) {
			if (other.headerTextField != null)
				return false;
		} else if (!headerTextField.equals(other.headerTextField))
			return false;
		if (logoImageUrl == null) {
			if (other.logoImageUrl != null)
				return false;
		} else if (!logoImageUrl.equals(other.logoImageUrl))
			return false;
		if (passengerName == null) {
			if (other.passengerName != null)
				return false;
		} else if (!passengerName.equals(other.passengerName))
			return false;
		if (pnrNumber == null) {
			if (other.pnrNumber != null)
				return false;
		} else if (!pnrNumber.equals(other.pnrNumber))
			return false;
		if (qrCode == null) {
			if (other.qrCode != null)
				return false;
		} else if (!qrCode.equals(other.qrCode))
			return false;
		if (seat == null) {
			if (other.seat != null)
				return false;
		} else if (!seat.equals(other.seat))
			return false;
		if (secondaryFields == null) {
			if (other.secondaryFields != null)
				return false;
		} else if (!secondaryFields.equals(other.secondaryFields))
			return false;
		if (travelClass != other.travelClass)
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""BoardingPass [passengerName="" + passengerName + "", pnrNumber=""
				+ pnrNumber + "", travelClass="" + travelClass + "", seat="" + seat
				+ "", auxiliaryFields="" + auxiliaryFields + "", secondaryFields=""
				+ secondaryFields + "", logoImageUrl="" + logoImageUrl
				+ "", headerImageUrl="" + headerImageUrl + "", headerTextField=""
				+ headerTextField + "", qrCode="" + qrCode + "", barcodeImageUrl=""
				+ barcodeImageUrl + "", aboveBarCodeImageUrl=""
				+ aboveBarCodeImageUrl + "", flightInfo="" + flightInfo + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.outcoming.template.airline; public class BoardingPass implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	@SerializedName(""passenger_name"")
	private String passengerName; @NotBlank
	@SerializedName(""pnr_number"")
	private String pnrNumber; @SerializedName(""travel_class"")
	private TravelClass travelClass; private String seat; @Size(max = 5)
	@SerializedName(""auxiliary_fields"")
	private List<Field> auxiliaryFields; @Size(max = 5)
	@SerializedName(""secondary_fields"")
	private List<Field> secondaryFields; @NotBlank
	@SerializedName(""logo_image_url"")
	private String logoImageUrl; @SerializedName(""header_image_url"")
	private String headerImageUrl; @SerializedName(""header_text_field"")
	private String headerTextField; @SerializedName(""qr_code"")
	private String qrCode; @SerializedName(""barcode_image_url"")
	private String barcodeImageUrl; @NotBlank
	@SerializedName(""above_bar_code_image_url"")
	private String aboveBarCodeImageUrl; @Valid
	@NotNull
	@SerializedName(""flight_info"")
	private FlightInfo flightInfo; public BoardingPass(String passengerName, String pnrNumber,
			String logoImageUrl, String aboveBarCodeImageUrl) { this.passengerName = passengerName; this.pnrNumber = pnrNumber; this.logoImageUrl = logoImageUrl; this.aboveBarCodeImageUrl = aboveBarCodeImageUrl; this.auxiliaryFields = new ArrayList<Field>(); this.secondaryFields = new ArrayList<Field>(); } public String getPassengerName() { return passengerName; } public void setPassengerName(String passengerName) { this.passengerName = passengerName; } public String getPnrNumber() { return pnrNumber; } public void setPnrNumber(String pnrNumber) { this.pnrNumber = pnrNumber; } public TravelClass getTravelClass() { return travelClass; } public void setTravelClass(TravelClass travelClass) { this.travelClass = travelClass; } public String getSeat() { return seat; } public void setSeat(String seat) { this.seat = seat; } public List<Field> getAuxiliaryFields() { return auxiliaryFields; } public void setAuxiliaryFields(List<Field> auxiliaryFields) { this.auxiliaryFields = auxiliaryFields; } public List<Field> getSecondaryFields() { return secondaryFields; } public void setSecondaryFields(List<Field> secondaryFields) { this.secondaryFields = secondaryFields; } public String getLogoImageUrl() { return logoImageUrl; } public void setLogoImageUrl(String logoImageUrl) { this.logoImageUrl = logoImageUrl; } public String getHeaderImageUrl() { return headerImageUrl; } public void setHeaderImageUrl(String headerImageUrl) { this.headerImageUrl = headerImageUrl; } public String getHeaderTextField() { return headerTextField; } public void setHeaderTextField(String headerTextField) { this.headerTextField = headerTextField; } public String getQrCode() { return qrCode; } public void setQrCode(String qrCode) { this.qrCode = qrCode; } public String getBarcodeImageUrl() { return barcodeImageUrl; } public void setBarcodeImageUrl(String barcodeImageUrl) { this.barcodeImageUrl = barcodeImageUrl; } public String getAboveBarCodeImageUrl() { return aboveBarCodeImageUrl; } public void setAboveBarCodeImageUrl(String aboveBarCodeImageUrl) { this.aboveBarCodeImageUrl = aboveBarCodeImageUrl; } public FlightInfo getFlightInfo() { return flightInfo; } public void setFlightInfo(FlightInfo flightInfo) { this.flightInfo = flightInfo; } public void addAuxiliaryField(Field field) { this.auxiliaryFields.add(field); } public void addSecondaryField(Field field) { this.secondaryFields.add(field); } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime
				* result
				+ ((aboveBarCodeImageUrl == null) ? 0 : aboveBarCodeImageUrl
						.hashCode()); result = prime * result
				+ ((auxiliaryFields == null) ? 0 : auxiliaryFields.hashCode()); result = prime * result
				+ ((barcodeImageUrl == null) ? 0 : barcodeImageUrl.hashCode()); result = prime * result
				+ ((flightInfo == null) ? 0 : flightInfo.hashCode()); result = prime * result
				+ ((headerImageUrl == null) ? 0 : headerImageUrl.hashCode()); result = prime * result
				+ ((headerTextField == null) ? 0 : headerTextField.hashCode()); result = prime * result
				+ ((logoImageUrl == null) ? 0 : logoImageUrl.hashCode()); result = prime * result
				+ ((passengerName == null) ? 0 : passengerName.hashCode()); result = prime * result
				+ ((pnrNumber == null) ? 0 : pnrNumber.hashCode()); result = prime * result + ((qrCode == null) ? 0 : qrCode.hashCode()); result = prime * result + ((seat == null) ? 0 : seat.hashCode()); result = prime * result
				+ ((secondaryFields == null) ? 0 : secondaryFields.hashCode()); result = prime * result
				+ ((travelClass == null) ? 0 : travelClass.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; BoardingPass other = (BoardingPass) obj; if (aboveBarCodeImageUrl == null) { if (other.aboveBarCodeImageUrl != null)
				return false; } else if (!aboveBarCodeImageUrl.equals(other.aboveBarCodeImageUrl))
			return false; if (auxiliaryFields == null) { if (other.auxiliaryFields != null)
				return false; } else if (!auxiliaryFields.equals(other.auxiliaryFields))
			return false; if (barcodeImageUrl == null) { if (other.barcodeImageUrl != null)
				return false; } else if (!barcodeImageUrl.equals(other.barcodeImageUrl))
			return false; if (flightInfo == null) { if (other.flightInfo != null)
				return false; } else if (!flightInfo.equals(other.flightInfo))
			return false; if (headerImageUrl == null) { if (other.headerImageUrl != null)
				return false; } else if (!headerImageUrl.equals(other.headerImageUrl))
			return false; if (headerTextField == null) { if (other.headerTextField != null)
				return false; } else if (!headerTextField.equals(other.headerTextField))
			return false; if (logoImageUrl == null) { if (other.logoImageUrl != null)
				return false; } else if (!logoImageUrl.equals(other.logoImageUrl))
			return false; if (passengerName == null) { if (other.passengerName != null)
				return false; } else if (!passengerName.equals(other.passengerName))
			return false; if (pnrNumber == null) { if (other.pnrNumber != null)
				return false; } else if (!pnrNumber.equals(other.pnrNumber))
			return false; if (qrCode == null) { if (other.qrCode != null)
				return false; } else if (!qrCode.equals(other.qrCode))
			return false; if (seat == null) { if (other.seat != null)
				return false; } else if (!seat.equals(other.seat))
			return false; if (secondaryFields == null) { if (other.secondaryFields != null)
				return false; } else if (!secondaryFields.equals(other.secondaryFields))
			return false; if (travelClass != other.travelClass)
			return false; return true; } @Override
	public String toString() { return ""BoardingPass [passengerName="" + passengerName + "", pnrNumber=""
				+ pnrNumber + "", travelClass="" + travelClass + "", seat="" + seat
				+ "", auxiliaryFields="" + auxiliaryFields + "", secondaryFields=""
				+ secondaryFields + "", logoImageUrl="" + logoImageUrl
				+ "", headerImageUrl="" + headerImageUrl + "", headerTextField=""
				+ headerTextField + "", qrCode="" + qrCode + "", barcodeImageUrl=""
				+ barcodeImageUrl + "", aboveBarCodeImageUrl=""
				+ aboveBarCodeImageUrl + "", flightInfo="" + flightInfo + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.airline; public class BoardingPass implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	@SerializedName(""passenger_name"")
	private String passengerName; @NotBlank
	@SerializedName(""pnr_number"")
	private String pnrNumber; @SerializedName(""travel_class"")
	private TravelClass travelClass; private String seat; @Size(max = 5)
	@SerializedName(""auxiliary_fields"")
	private List<Field> auxiliaryFields; @Size(max = 5)
	@SerializedName(""secondary_fields"")
	private List<Field> secondaryFields; @NotBlank
	@SerializedName(""logo_image_url"")
	private String logoImageUrl; @SerializedName(""header_image_url"")
	private String headerImageUrl; @SerializedName(""header_text_field"")
	private String headerTextField; @SerializedName(""qr_code"")
	private String qrCode; @SerializedName(""barcode_image_url"")
	private String barcodeImageUrl; @NotBlank
	@SerializedName(""above_bar_code_image_url"")
	private String aboveBarCodeImageUrl; @Valid
	@NotNull
	@SerializedName(""flight_info"")
	private FlightInfo flightInfo; public BoardingPass(String passengerName, String pnrNumber,
			String logoImageUrl, String aboveBarCodeImageUrl) { this.passengerName = passengerName; this.pnrNumber = pnrNumber; this.logoImageUrl = logoImageUrl; this.aboveBarCodeImageUrl = aboveBarCodeImageUrl; this.auxiliaryFields = new ArrayList<Field>(); this.secondaryFields = new ArrayList<Field>(); } public String getPassengerName() { return passengerName; } public void setPassengerName(String passengerName) { this.passengerName = passengerName; } public String getPnrNumber() { return pnrNumber; } public void setPnrNumber(String pnrNumber) { this.pnrNumber = pnrNumber; } public TravelClass getTravelClass() { return travelClass; } public void setTravelClass(TravelClass travelClass) { this.travelClass = travelClass; } public String getSeat() { return seat; } public void setSeat(String seat) { this.seat = seat; } public List<Field> getAuxiliaryFields() { return auxiliaryFields; } public void setAuxiliaryFields(List<Field> auxiliaryFields) { this.auxiliaryFields = auxiliaryFields; } public List<Field> getSecondaryFields() { return secondaryFields; } public void setSecondaryFields(List<Field> secondaryFields) { this.secondaryFields = secondaryFields; } public String getLogoImageUrl() { return logoImageUrl; } public void setLogoImageUrl(String logoImageUrl) { this.logoImageUrl = logoImageUrl; } public String getHeaderImageUrl() { return headerImageUrl; } public void setHeaderImageUrl(String headerImageUrl) { this.headerImageUrl = headerImageUrl; } public String getHeaderTextField() { return headerTextField; } public void setHeaderTextField(String headerTextField) { this.headerTextField = headerTextField; } public String getQrCode() { return qrCode; } public void setQrCode(String qrCode) { this.qrCode = qrCode; } public String getBarcodeImageUrl() { return barcodeImageUrl; } public void setBarcodeImageUrl(String barcodeImageUrl) { this.barcodeImageUrl = barcodeImageUrl; } public String getAboveBarCodeImageUrl() { return aboveBarCodeImageUrl; } public void setAboveBarCodeImageUrl(String aboveBarCodeImageUrl) { this.aboveBarCodeImageUrl = aboveBarCodeImageUrl; } public FlightInfo getFlightInfo() { return flightInfo; } public void setFlightInfo(FlightInfo flightInfo) { this.flightInfo = flightInfo; } public void addAuxiliaryField(Field field) { this.auxiliaryFields.add(field); } public void addSecondaryField(Field field) { this.secondaryFields.add(field); } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime
				* result
				+ ((aboveBarCodeImageUrl == null) ? 0 : aboveBarCodeImageUrl
						.hashCode()); result = prime * result
				+ ((auxiliaryFields == null) ? 0 : auxiliaryFields.hashCode()); result = prime * result
				+ ((barcodeImageUrl == null) ? 0 : barcodeImageUrl.hashCode()); result = prime * result
				+ ((flightInfo == null) ? 0 : flightInfo.hashCode()); result = prime * result
				+ ((headerImageUrl == null) ? 0 : headerImageUrl.hashCode()); result = prime * result
				+ ((headerTextField == null) ? 0 : headerTextField.hashCode()); result = prime * result
				+ ((logoImageUrl == null) ? 0 : logoImageUrl.hashCode()); result = prime * result
				+ ((passengerName == null) ? 0 : passengerName.hashCode()); result = prime * result
				+ ((pnrNumber == null) ? 0 : pnrNumber.hashCode()); result = prime * result + ((qrCode == null) ? 0 : qrCode.hashCode()); result = prime * result + ((seat == null) ? 0 : seat.hashCode()); result = prime * result
				+ ((secondaryFields == null) ? 0 : secondaryFields.hashCode()); result = prime * result
				+ ((travelClass == null) ? 0 : travelClass.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; BoardingPass other = (BoardingPass) obj; if (aboveBarCodeImageUrl == null) { if (other.aboveBarCodeImageUrl != null)
				return false; } else if (!aboveBarCodeImageUrl.equals(other.aboveBarCodeImageUrl))
			return false; if (auxiliaryFields == null) { if (other.auxiliaryFields != null)
				return false; } else if (!auxiliaryFields.equals(other.auxiliaryFields))
			return false; if (barcodeImageUrl == null) { if (other.barcodeImageUrl != null)
				return false; } else if (!barcodeImageUrl.equals(other.barcodeImageUrl))
			return false; if (flightInfo == null) { if (other.flightInfo != null)
				return false; } else if (!flightInfo.equals(other.flightInfo))
			return false; if (headerImageUrl == null) { if (other.headerImageUrl != null)
				return false; } else if (!headerImageUrl.equals(other.headerImageUrl))
			return false; if (headerTextField == null) { if (other.headerTextField != null)
				return false; } else if (!headerTextField.equals(other.headerTextField))
			return false; if (logoImageUrl == null) { if (other.logoImageUrl != null)
				return false; } else if (!logoImageUrl.equals(other.logoImageUrl))
			return false; if (passengerName == null) { if (other.passengerName != null)
				return false; } else if (!passengerName.equals(other.passengerName))
			return false; if (pnrNumber == null) { if (other.pnrNumber != null)
				return false; } else if (!pnrNumber.equals(other.pnrNumber))
			return false; if (qrCode == null) { if (other.qrCode != null)
				return false; } else if (!qrCode.equals(other.qrCode))
			return false; if (seat == null) { if (other.seat != null)
				return false; } else if (!seat.equals(other.seat))
			return false; if (secondaryFields == null) { if (other.secondaryFields != null)
				return false; } else if (!secondaryFields.equals(other.secondaryFields))
			return false; if (travelClass != other.travelClass)
			return false; return true; } @Override
	public String toString() { return ""BoardingPass [passengerName="" + passengerName + "", pnrNumber=""
				+ pnrNumber + "", travelClass="" + travelClass + "", seat="" + seat
				+ "", auxiliaryFields="" + auxiliaryFields + "", secondaryFields=""
				+ secondaryFields + "", logoImageUrl="" + logoImageUrl
				+ "", headerImageUrl="" + headerImageUrl + "", headerTextField=""
				+ headerTextField + "", qrCode="" + qrCode + "", barcodeImageUrl=""
				+ barcodeImageUrl + "", aboveBarCodeImageUrl=""
				+ aboveBarCodeImageUrl + "", flightInfo="" + flightInfo + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.airline; 
import java.io.Serializable; import java.util.ArrayList; import java.util.List; 
import javax.validation.Valid; import javax.validation.constraints.NotNull; import javax.validation.constraints.Size; 
import org.hibernate.validator.constraints.NotBlank; 
import com.google.gson.annotations.SerializedName; 
  public class BoardingPass implements Serializable { /**
 * The Class BoardingPass.
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @NotBlank
	@SerializedName(""passenger_name"")
	private String passengerName; /** The passenger name. */  @NotBlank
	@SerializedName(""pnr_number"")
	private String pnrNumber; /** The pnr number. */  @SerializedName(""travel_class"")
	private TravelClass travelClass; /** The travel class. */  private String seat; /** The seat. */  @Size(max = 5)
	@SerializedName(""auxiliary_fields"")
	private List<Field> auxiliaryFields; /** The auxiliary fields. */  @Size(max = 5)
	@SerializedName(""secondary_fields"")
	private List<Field> secondaryFields; /** The secondary fields. */  @NotBlank
	@SerializedName(""logo_image_url"")
	private String logoImageUrl; /** The logo image url. */  @SerializedName(""header_image_url"")
	private String headerImageUrl; /** The header image url. */  @SerializedName(""header_text_field"")
	private String headerTextField; /** The header text field. */  @SerializedName(""qr_code"")
	private String qrCode; /** The qr code. */  @SerializedName(""barcode_image_url"")
	private String barcodeImageUrl; /** The barcode image url. */  @NotBlank
	@SerializedName(""above_bar_code_image_url"")
	private String aboveBarCodeImageUrl; /** The above bar code image url. */  @Valid
	@NotNull
	@SerializedName(""flight_info"")
	private FlightInfo flightInfo; /** The flight info. */  public BoardingPass(String passengerName, String pnrNumber,
			String logoImageUrl, String aboveBarCodeImageUrl) { this.passengerName = passengerName; this.pnrNumber = pnrNumber; this.logoImageUrl = logoImageUrl; this.aboveBarCodeImageUrl = aboveBarCodeImageUrl; this.auxiliaryFields = new ArrayList<Field>(); this.secondaryFields = new ArrayList<Field>(); } /**
	 * Instantiates a new boarding pass.
	 *
	 * @param passengerName
	 *            the passenger name
	 * @param pnrNumber
	 *            the pnr number
	 * @param logoImageUrl
	 *            the logo image url
	 * @param aboveBarCodeImageUrl
	 *            the above bar code image url
	 */  public String getPassengerName() { return passengerName; } /**
	 * Gets the passenger name.
	 *
	 * @return the passenger name
	 */  public void setPassengerName(String passengerName) { this.passengerName = passengerName; } /**
	 * Sets the passenger name.
	 *
	 * @param passengerName
	 *            the new passenger name
	 */  public String getPnrNumber() { return pnrNumber; } /**
	 * Gets the pnr number.
	 *
	 * @return the pnr number
	 */  public void setPnrNumber(String pnrNumber) { this.pnrNumber = pnrNumber; } /**
	 * Sets the pnr number.
	 *
	 * @param pnrNumber
	 *            the new pnr number
	 */  public TravelClass getTravelClass() { return travelClass; } /**
	 * Gets the travel class.
	 *
	 * @return the travel class
	 */  public void setTravelClass(TravelClass travelClass) { this.travelClass = travelClass; } /**
	 * Sets the travel class.
	 *
	 * @param travelClass
	 *            the new travel class
	 */  public String getSeat() { return seat; } /**
	 * Gets the seat.
	 *
	 * @return the seat
	 */  public void setSeat(String seat) { this.seat = seat; } /**
	 * Sets the seat.
	 *
	 * @param seat
	 *            the new seat
	 */  public List<Field> getAuxiliaryFields() { return auxiliaryFields; } /**
	 * Gets the auxiliary fields.
	 *
	 * @return the auxiliary fields
	 */  public void setAuxiliaryFields(List<Field> auxiliaryFields) { this.auxiliaryFields = auxiliaryFields; } /**
	 * Sets the auxiliary fields.
	 *
	 * @param auxiliaryFields
	 *            the new auxiliary fields
	 */  public List<Field> getSecondaryFields() { return secondaryFields; } /**
	 * Gets the secondary fields.
	 *
	 * @return the secondary fields
	 */  public void setSecondaryFields(List<Field> secondaryFields) { this.secondaryFields = secondaryFields; } /**
	 * Sets the secondary fields.
	 *
	 * @param secondaryFields
	 *            the new secondary fields
	 */  public String getLogoImageUrl() { return logoImageUrl; } /**
	 * Gets the logo image url.
	 *
	 * @return the logo image url
	 */  public void setLogoImageUrl(String logoImageUrl) { this.logoImageUrl = logoImageUrl; } /**
	 * Sets the logo image url.
	 *
	 * @param logoImageUrl
	 *            the new logo image url
	 */  public String getHeaderImageUrl() { return headerImageUrl; } /**
	 * Gets the header image url.
	 *
	 * @return the header image url
	 */  public void setHeaderImageUrl(String headerImageUrl) { this.headerImageUrl = headerImageUrl; } /**
	 * Sets the header image url.
	 *
	 * @param headerImageUrl
	 *            the new header image url
	 */  public String getHeaderTextField() { return headerTextField; } /**
	 * Gets the header text field.
	 *
	 * @return the header text field
	 */  public void setHeaderTextField(String headerTextField) { this.headerTextField = headerTextField; } /**
	 * Sets the header text field.
	 *
	 * @param headerTextField
	 *            the new header text field
	 */  public String getQrCode() { return qrCode; } /**
	 * Gets the qr code.
	 *
	 * @return the qr code
	 */  public void setQrCode(String qrCode) { this.qrCode = qrCode; } /**
	 * Sets the qr code.
	 *
	 * @param qrCode
	 *            the new qr code
	 */  public String getBarcodeImageUrl() { return barcodeImageUrl; } /**
	 * Gets the barcode image url.
	 *
	 * @return the barcode image url
	 */  public void setBarcodeImageUrl(String barcodeImageUrl) { this.barcodeImageUrl = barcodeImageUrl; } /**
	 * Sets the barcode image url.
	 *
	 * @param barcodeImageUrl
	 *            the new barcode image url
	 */  public String getAboveBarCodeImageUrl() { return aboveBarCodeImageUrl; } /**
	 * Gets the above bar code image url.
	 *
	 * @return the above bar code image url
	 */  public void setAboveBarCodeImageUrl(String aboveBarCodeImageUrl) { this.aboveBarCodeImageUrl = aboveBarCodeImageUrl; } /**
	 * Sets the above bar code image url.
	 *
	 * @param aboveBarCodeImageUrl
	 *            the new above bar code image url
	 */  public FlightInfo getFlightInfo() { return flightInfo; } /**
	 * Gets the flight info.
	 *
	 * @return the flight info
	 */  public void setFlightInfo(FlightInfo flightInfo) { this.flightInfo = flightInfo; } /**
	 * Sets the flight info.
	 *
	 * @param flightInfo
	 *            the new flight info
	 */  public void addAuxiliaryField(Field field) { this.auxiliaryFields.add(field); } /**
	 * Adds the auxiliary field.
	 *
	 * @param field
	 *            the field
	 */  public void addSecondaryField(Field field) { this.secondaryFields.add(field); } /**
	 * Adds the secondary field.
	 *
	 * @param field
	 *            the field
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime
				* result
				+ ((aboveBarCodeImageUrl == null) ? 0 : aboveBarCodeImageUrl
						.hashCode()); result = prime * result
				+ ((auxiliaryFields == null) ? 0 : auxiliaryFields.hashCode()); result = prime * result
				+ ((barcodeImageUrl == null) ? 0 : barcodeImageUrl.hashCode()); result = prime * result
				+ ((flightInfo == null) ? 0 : flightInfo.hashCode()); result = prime * result
				+ ((headerImageUrl == null) ? 0 : headerImageUrl.hashCode()); result = prime * result
				+ ((headerTextField == null) ? 0 : headerTextField.hashCode()); result = prime * result
				+ ((logoImageUrl == null) ? 0 : logoImageUrl.hashCode()); result = prime * result
				+ ((passengerName == null) ? 0 : passengerName.hashCode()); result = prime * result
				+ ((pnrNumber == null) ? 0 : pnrNumber.hashCode()); result = prime * result + ((qrCode == null) ? 0 : qrCode.hashCode()); result = prime * result + ((seat == null) ? 0 : seat.hashCode()); result = prime * result
				+ ((secondaryFields == null) ? 0 : secondaryFields.hashCode()); result = prime * result
				+ ((travelClass == null) ? 0 : travelClass.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; BoardingPass other = (BoardingPass) obj; if (aboveBarCodeImageUrl == null) { if (other.aboveBarCodeImageUrl != null)
				return false; } else if (!aboveBarCodeImageUrl.equals(other.aboveBarCodeImageUrl))
			return false; if (auxiliaryFields == null) { if (other.auxiliaryFields != null)
				return false; } else if (!auxiliaryFields.equals(other.auxiliaryFields))
			return false; if (barcodeImageUrl == null) { if (other.barcodeImageUrl != null)
				return false; } else if (!barcodeImageUrl.equals(other.barcodeImageUrl))
			return false; if (flightInfo == null) { if (other.flightInfo != null)
				return false; } else if (!flightInfo.equals(other.flightInfo))
			return false; if (headerImageUrl == null) { if (other.headerImageUrl != null)
				return false; } else if (!headerImageUrl.equals(other.headerImageUrl))
			return false; if (headerTextField == null) { if (other.headerTextField != null)
				return false; } else if (!headerTextField.equals(other.headerTextField))
			return false; if (logoImageUrl == null) { if (other.logoImageUrl != null)
				return false; } else if (!logoImageUrl.equals(other.logoImageUrl))
			return false; if (passengerName == null) { if (other.passengerName != null)
				return false; } else if (!passengerName.equals(other.passengerName))
			return false; if (pnrNumber == null) { if (other.pnrNumber != null)
				return false; } else if (!pnrNumber.equals(other.pnrNumber))
			return false; if (qrCode == null) { if (other.qrCode != null)
				return false; } else if (!qrCode.equals(other.qrCode))
			return false; if (seat == null) { if (other.seat != null)
				return false; } else if (!seat.equals(other.seat))
			return false; if (secondaryFields == null) { if (other.secondaryFields != null)
				return false; } else if (!secondaryFields.equals(other.secondaryFields))
			return false; if (travelClass != other.travelClass)
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""BoardingPass [passengerName="" + passengerName + "", pnrNumber=""
				+ pnrNumber + "", travelClass="" + travelClass + "", seat="" + seat
				+ "", auxiliaryFields="" + auxiliaryFields + "", secondaryFields=""
				+ secondaryFields + "", logoImageUrl="" + logoImageUrl
				+ "", headerImageUrl="" + headerImageUrl + "", headerTextField=""
				+ headerTextField + "", qrCode="" + qrCode + "", barcodeImageUrl=""
				+ barcodeImageUrl + "", aboveBarCodeImageUrl=""
				+ aboveBarCodeImageUrl + "", flightInfo="" + flightInfo + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/airline/Field.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.airline;

import java.io.Serializable;

import org.hibernate.validator.constraints.NotBlank;


/**
 * The Class Field.
 */
public class Field implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The label. */
	@NotBlank
	private String label;

	/** The value. */
	@NotBlank
	private String value;

	/**
	 * Instantiates a new field.
	 *
	 * @param label
	 *            the label
	 * @param value
	 *            the value
	 */
	public Field(String label, String value) {
		this.label = label;
		this.value = value;
	}

	/**
	 * Gets the label.
	 *
	 * @return the label
	 */
	public String getLabel() {
		return label;
	}

	/**
	 * Sets the label.
	 *
	 * @param label
	 *            the new label
	 */
	public void setLabel(String label) {
		this.label = label;
	}

	/**
	 * Gets the value.
	 *
	 * @return the value
	 */
	public String getValue() {
		return value;
	}

	/**
	 * Sets the value.
	 *
	 * @param value
	 *            the new value
	 */
	public void setValue(String value) {
		this.value = value;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((label == null) ? 0 : label.hashCode());
		result = prime * result + ((value == null) ? 0 : value.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Field other = (Field) obj;
		if (label == null) {
			if (other.label != null)
				return false;
		} else if (!label.equals(other.label))
			return false;
		if (value == null) {
			if (other.value != null)
				return false;
		} else if (!value.equals(other.value))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""Field [label="" + label + "", value="" + value + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.outcoming.template.airline; public class Field implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	private String label; @NotBlank
	private String value; public Field(String label, String value) { this.label = label; this.value = value; } public String getLabel() { return label; } public void setLabel(String label) { this.label = label; } public String getValue() { return value; } public void setValue(String value) { this.value = value; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((label == null) ? 0 : label.hashCode()); result = prime * result + ((value == null) ? 0 : value.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Field other = (Field) obj; if (label == null) { if (other.label != null)
				return false; } else if (!label.equals(other.label))
			return false; if (value == null) { if (other.value != null)
				return false; } else if (!value.equals(other.value))
			return false; return true; } @Override
	public String toString() { return ""Field [label="" + label + "", value="" + value + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.airline; public class Field implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	private String label; @NotBlank
	private String value; public Field(String label, String value) { this.label = label; this.value = value; } public String getLabel() { return label; } public void setLabel(String label) { this.label = label; } public String getValue() { return value; } public void setValue(String value) { this.value = value; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((label == null) ? 0 : label.hashCode()); result = prime * result + ((value == null) ? 0 : value.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Field other = (Field) obj; if (label == null) { if (other.label != null)
				return false; } else if (!label.equals(other.label))
			return false; if (value == null) { if (other.value != null)
				return false; } else if (!value.equals(other.value))
			return false; return true; } @Override
	public String toString() { return ""Field [label="" + label + "", value="" + value + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.airline; 
import java.io.Serializable; 
import org.hibernate.validator.constraints.NotBlank; 
  public class Field implements Serializable { /**
 * The Class Field.
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @NotBlank
	private String label; /** The label. */  @NotBlank
	private String value; /** The value. */  public Field(String label, String value) { this.label = label; this.value = value; } /**
	 * Instantiates a new field.
	 *
	 * @param label
	 *            the label
	 * @param value
	 *            the value
	 */  public String getLabel() { return label; } /**
	 * Gets the label.
	 *
	 * @return the label
	 */  public void setLabel(String label) { this.label = label; } /**
	 * Sets the label.
	 *
	 * @param label
	 *            the new label
	 */  public String getValue() { return value; } /**
	 * Gets the value.
	 *
	 * @return the value
	 */  public void setValue(String value) { this.value = value; } /**
	 * Sets the value.
	 *
	 * @param value
	 *            the new value
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((label == null) ? 0 : label.hashCode()); result = prime * result + ((value == null) ? 0 : value.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Field other = (Field) obj; if (label == null) { if (other.label != null)
				return false; } else if (!label.equals(other.label))
			return false; if (value == null) { if (other.value != null)
				return false; } else if (!value.equals(other.value))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""Field [label="" + label + "", value="" + value + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/airline/FlightInfo.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.airline;

import java.io.Serializable;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.hibernate.validator.constraints.NotBlank;

import com.google.gson.annotations.SerializedName;


/**
 * The Class FlightInfo.
 */
public class FlightInfo implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The flight number. */
	@NotBlank
	@SerializedName(""flight_number"")
	private String flightNumber;

	/** The departure airport. */
	@Valid
	@NotNull
	@SerializedName(""departure_airport"")
	private Airport departureAirport;

	/** The arrival airport. */
	@Valid
	@NotNull
	@SerializedName(""arrival_airport"")
	private Airport arrivalAirport;

	/** The flight schedule. */
	@Valid
	@NotNull
	@SerializedName(""flight_schedule"")
	private FlightSchedule flightSchedule;

	/**
	 * Instantiates a new flight info.
	 *
	 * @param flightNumber
	 *            the flight number
	 */
	public FlightInfo(String flightNumber) {
		this.flightNumber = flightNumber;
	}

	/**
	 * Gets the flight number.
	 *
	 * @return the flight number
	 */
	public String getFlightNumber() {
		return flightNumber;
	}

	/**
	 * Sets the flight number.
	 *
	 * @param flightNumber
	 *            the new flight number
	 */
	public void setFlightNumber(String flightNumber) {
		this.flightNumber = flightNumber;
	}

	/**
	 * Gets the departure airport.
	 *
	 * @return the departure airport
	 */
	public Airport getDepartureAirport() {
		return departureAirport;
	}

	/**
	 * Sets the departure airport.
	 *
	 * @param departureAirport
	 *            the new departure airport
	 */
	public void setDepartureAirport(Airport departureAirport) {
		this.departureAirport = departureAirport;
	}

	/**
	 * Gets the arrival airport.
	 *
	 * @return the arrival airport
	 */
	public Airport getArrivalAirport() {
		return arrivalAirport;
	}

	/**
	 * Sets the arrival airport.
	 *
	 * @param arrivalAirport
	 *            the new arrival airport
	 */
	public void setArrivalAirport(Airport arrivalAirport) {
		this.arrivalAirport = arrivalAirport;
	}

	/**
	 * Gets the flight schedule.
	 *
	 * @return the flight schedule
	 */
	public FlightSchedule getFlightSchedule() {
		return flightSchedule;
	}

	/**
	 * Sets the flight schedule.
	 *
	 * @param flightSchedule
	 *            the new flight schedule
	 */
	public void setFlightSchedule(FlightSchedule flightSchedule) {
		this.flightSchedule = flightSchedule;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((arrivalAirport == null) ? 0 : arrivalAirport.hashCode());
		result = prime
				* result
				+ ((departureAirport == null) ? 0 : departureAirport.hashCode());
		result = prime * result
				+ ((flightNumber == null) ? 0 : flightNumber.hashCode());
		result = prime * result
				+ ((flightSchedule == null) ? 0 : flightSchedule.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		FlightInfo other = (FlightInfo) obj;
		if (arrivalAirport == null) {
			if (other.arrivalAirport != null)
				return false;
		} else if (!arrivalAirport.equals(other.arrivalAirport))
			return false;
		if (departureAirport == null) {
			if (other.departureAirport != null)
				return false;
		} else if (!departureAirport.equals(other.departureAirport))
			return false;
		if (flightNumber == null) {
			if (other.flightNumber != null)
				return false;
		} else if (!flightNumber.equals(other.flightNumber))
			return false;
		if (flightSchedule == null) {
			if (other.flightSchedule != null)
				return false;
		} else if (!flightSchedule.equals(other.flightSchedule))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""FlightInfo [flightNumber="" + flightNumber
				+ "", departureAirport="" + departureAirport
				+ "", arrivalAirport="" + arrivalAirport + "", flightSchedule=""
				+ flightSchedule + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.template.airline; public class FlightInfo implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	@SerializedName(""flight_number"")
	private String flightNumber; @Valid
	@NotNull
	@SerializedName(""departure_airport"")
	private Airport departureAirport; @Valid
	@NotNull
	@SerializedName(""arrival_airport"")
	private Airport arrivalAirport; @Valid
	@NotNull
	@SerializedName(""flight_schedule"")
	private FlightSchedule flightSchedule; public FlightInfo(String flightNumber) { this.flightNumber = flightNumber; } public String getFlightNumber() { return flightNumber; } public void setFlightNumber(String flightNumber) { this.flightNumber = flightNumber; } public Airport getDepartureAirport() { return departureAirport; } public void setDepartureAirport(Airport departureAirport) { this.departureAirport = departureAirport; } public Airport getArrivalAirport() { return arrivalAirport; } public void setArrivalAirport(Airport arrivalAirport) { this.arrivalAirport = arrivalAirport; } public FlightSchedule getFlightSchedule() { return flightSchedule; } public void setFlightSchedule(FlightSchedule flightSchedule) { this.flightSchedule = flightSchedule; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((arrivalAirport == null) ? 0 : arrivalAirport.hashCode()); result = prime
				* result
				+ ((departureAirport == null) ? 0 : departureAirport.hashCode()); result = prime * result
				+ ((flightNumber == null) ? 0 : flightNumber.hashCode()); result = prime * result
				+ ((flightSchedule == null) ? 0 : flightSchedule.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FlightInfo other = (FlightInfo) obj; if (arrivalAirport == null) { if (other.arrivalAirport != null)
				return false; } else if (!arrivalAirport.equals(other.arrivalAirport))
			return false; if (departureAirport == null) { if (other.departureAirport != null)
				return false; } else if (!departureAirport.equals(other.departureAirport))
			return false; if (flightNumber == null) { if (other.flightNumber != null)
				return false; } else if (!flightNumber.equals(other.flightNumber))
			return false; if (flightSchedule == null) { if (other.flightSchedule != null)
				return false; } else if (!flightSchedule.equals(other.flightSchedule))
			return false; return true; } @Override
	public String toString() { return ""FlightInfo [flightNumber="" + flightNumber
				+ "", departureAirport="" + departureAirport
				+ "", arrivalAirport="" + arrivalAirport + "", flightSchedule=""
				+ flightSchedule + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.airline; public class FlightInfo implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	@SerializedName(""flight_number"")
	private String flightNumber; @Valid
	@NotNull
	@SerializedName(""departure_airport"")
	private Airport departureAirport; @Valid
	@NotNull
	@SerializedName(""arrival_airport"")
	private Airport arrivalAirport; @Valid
	@NotNull
	@SerializedName(""flight_schedule"")
	private FlightSchedule flightSchedule; public FlightInfo(String flightNumber) { this.flightNumber = flightNumber; } public String getFlightNumber() { return flightNumber; } public void setFlightNumber(String flightNumber) { this.flightNumber = flightNumber; } public Airport getDepartureAirport() { return departureAirport; } public void setDepartureAirport(Airport departureAirport) { this.departureAirport = departureAirport; } public Airport getArrivalAirport() { return arrivalAirport; } public void setArrivalAirport(Airport arrivalAirport) { this.arrivalAirport = arrivalAirport; } public FlightSchedule getFlightSchedule() { return flightSchedule; } public void setFlightSchedule(FlightSchedule flightSchedule) { this.flightSchedule = flightSchedule; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((arrivalAirport == null) ? 0 : arrivalAirport.hashCode()); result = prime
				* result
				+ ((departureAirport == null) ? 0 : departureAirport.hashCode()); result = prime * result
				+ ((flightNumber == null) ? 0 : flightNumber.hashCode()); result = prime * result
				+ ((flightSchedule == null) ? 0 : flightSchedule.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FlightInfo other = (FlightInfo) obj; if (arrivalAirport == null) { if (other.arrivalAirport != null)
				return false; } else if (!arrivalAirport.equals(other.arrivalAirport))
			return false; if (departureAirport == null) { if (other.departureAirport != null)
				return false; } else if (!departureAirport.equals(other.departureAirport))
			return false; if (flightNumber == null) { if (other.flightNumber != null)
				return false; } else if (!flightNumber.equals(other.flightNumber))
			return false; if (flightSchedule == null) { if (other.flightSchedule != null)
				return false; } else if (!flightSchedule.equals(other.flightSchedule))
			return false; return true; } @Override
	public String toString() { return ""FlightInfo [flightNumber="" + flightNumber
				+ "", departureAirport="" + departureAirport
				+ "", arrivalAirport="" + arrivalAirport + "", flightSchedule=""
				+ flightSchedule + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.airline; 
import java.io.Serializable; 
import javax.validation.Valid; import javax.validation.constraints.NotNull; 
import org.hibernate.validator.constraints.NotBlank; 
import com.google.gson.annotations.SerializedName; 
  public class FlightInfo implements Serializable { /**
 * The Class FlightInfo.
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @NotBlank
	@SerializedName(""flight_number"")
	private String flightNumber; /** The flight number. */  @Valid
	@NotNull
	@SerializedName(""departure_airport"")
	private Airport departureAirport; /** The departure airport. */  @Valid
	@NotNull
	@SerializedName(""arrival_airport"")
	private Airport arrivalAirport; /** The arrival airport. */  @Valid
	@NotNull
	@SerializedName(""flight_schedule"")
	private FlightSchedule flightSchedule; /** The flight schedule. */  public FlightInfo(String flightNumber) { this.flightNumber = flightNumber; } /**
	 * Instantiates a new flight info.
	 *
	 * @param flightNumber
	 *            the flight number
	 */  public String getFlightNumber() { return flightNumber; } /**
	 * Gets the flight number.
	 *
	 * @return the flight number
	 */  public void setFlightNumber(String flightNumber) { this.flightNumber = flightNumber; } /**
	 * Sets the flight number.
	 *
	 * @param flightNumber
	 *            the new flight number
	 */  public Airport getDepartureAirport() { return departureAirport; } /**
	 * Gets the departure airport.
	 *
	 * @return the departure airport
	 */  public void setDepartureAirport(Airport departureAirport) { this.departureAirport = departureAirport; } /**
	 * Sets the departure airport.
	 *
	 * @param departureAirport
	 *            the new departure airport
	 */  public Airport getArrivalAirport() { return arrivalAirport; } /**
	 * Gets the arrival airport.
	 *
	 * @return the arrival airport
	 */  public void setArrivalAirport(Airport arrivalAirport) { this.arrivalAirport = arrivalAirport; } /**
	 * Sets the arrival airport.
	 *
	 * @param arrivalAirport
	 *            the new arrival airport
	 */  public FlightSchedule getFlightSchedule() { return flightSchedule; } /**
	 * Gets the flight schedule.
	 *
	 * @return the flight schedule
	 */  public void setFlightSchedule(FlightSchedule flightSchedule) { this.flightSchedule = flightSchedule; } /**
	 * Sets the flight schedule.
	 *
	 * @param flightSchedule
	 *            the new flight schedule
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((arrivalAirport == null) ? 0 : arrivalAirport.hashCode()); result = prime
				* result
				+ ((departureAirport == null) ? 0 : departureAirport.hashCode()); result = prime * result
				+ ((flightNumber == null) ? 0 : flightNumber.hashCode()); result = prime * result
				+ ((flightSchedule == null) ? 0 : flightSchedule.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FlightInfo other = (FlightInfo) obj; if (arrivalAirport == null) { if (other.arrivalAirport != null)
				return false; } else if (!arrivalAirport.equals(other.arrivalAirport))
			return false; if (departureAirport == null) { if (other.departureAirport != null)
				return false; } else if (!departureAirport.equals(other.departureAirport))
			return false; if (flightNumber == null) { if (other.flightNumber != null)
				return false; } else if (!flightNumber.equals(other.flightNumber))
			return false; if (flightSchedule == null) { if (other.flightSchedule != null)
				return false; } else if (!flightSchedule.equals(other.flightSchedule))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""FlightInfo [flightNumber="" + flightNumber
				+ "", departureAirport="" + departureAirport
				+ "", arrivalAirport="" + arrivalAirport + "", flightSchedule=""
				+ flightSchedule + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/airline/FlightInfoExtended.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.airline;

import javax.validation.constraints.NotNull;

import org.hibernate.validator.constraints.NotBlank;

import com.google.gson.annotations.SerializedName;


/**
 * The Class FlightInfoExtended.
 */
public class FlightInfoExtended extends FlightInfo {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The connection id. */
	@NotBlank
	@SerializedName(""connection_id"")
	private String connectionId;

	/** The segment id. */
	@NotBlank
	@SerializedName(""segment_id"")
	private String segmentId;

	/** The aircraft type. */
	@SerializedName(""aircraft_type"")
	private String aircraftType;

	/** The travel class. */
	@NotNull
	@SerializedName(""travel_class"")
	private TravelClass travelClass;

	/**
	 * Instantiates a new flight info extended.
	 *
	 * @param flightNumber
	 *            the flight number
	 * @param connectionId
	 *            the connection id
	 * @param segmentId
	 *            the segment id
	 * @param travelClass
	 *            the travel class
	 */
	public FlightInfoExtended(String flightNumber, String connectionId,
			String segmentId, TravelClass travelClass) {
		super(flightNumber);
		this.connectionId = connectionId;
		this.segmentId = segmentId;
		this.travelClass = travelClass;
	}

	/**
	 * Gets the connection id.
	 *
	 * @return the connection id
	 */
	public String getConnectionId() {
		return connectionId;
	}

	/**
	 * Sets the connection id.
	 *
	 * @param connectionId
	 *            the new connection id
	 */
	public void setConnectionId(String connectionId) {
		this.connectionId = connectionId;
	}

	/**
	 * Gets the segment id.
	 *
	 * @return the segment id
	 */
	public String getSegmentId() {
		return segmentId;
	}

	/**
	 * Sets the segment id.
	 *
	 * @param segmentId
	 *            the new segment id
	 */
	public void setSegmentId(String segmentId) {
		this.segmentId = segmentId;
	}

	/**
	 * Gets the aircraft type.
	 *
	 * @return the aircraft type
	 */
	public String getAircraftType() {
		return aircraftType;
	}

	/**
	 * Sets the aircraft type.
	 *
	 * @param aircraftType
	 *            the new aircraft type
	 */
	public void setAircraftType(String aircraftType) {
		this.aircraftType = aircraftType;
	}

	/**
	 * Gets the travel class.
	 *
	 * @return the travel class
	 */
	public TravelClass getTravelClass() {
		return travelClass;
	}

	/**
	 * Sets the travel class.
	 *
	 * @param travelClass
	 *            the new travel class
	 */
	public void setTravelClass(TravelClass travelClass) {
		this.travelClass = travelClass;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfo#
	 * hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result
				+ ((aircraftType == null) ? 0 : aircraftType.hashCode());
		result = prime * result
				+ ((connectionId == null) ? 0 : connectionId.hashCode());
		result = prime * result
				+ ((segmentId == null) ? 0 : segmentId.hashCode());
		result = prime * result
				+ ((travelClass == null) ? 0 : travelClass.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfo#
	 * equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		FlightInfoExtended other = (FlightInfoExtended) obj;
		if (aircraftType == null) {
			if (other.aircraftType != null)
				return false;
		} else if (!aircraftType.equals(other.aircraftType))
			return false;
		if (connectionId == null) {
			if (other.connectionId != null)
				return false;
		} else if (!connectionId.equals(other.connectionId))
			return false;
		if (segmentId == null) {
			if (other.segmentId != null)
				return false;
		} else if (!segmentId.equals(other.segmentId))
			return false;
		if (travelClass != other.travelClass)
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfo#
	 * toString()
	 */
	@Override
	public String toString() {
		return ""FlightInfoExtended [connectionId="" + connectionId
				+ "", segmentId="" + segmentId + "", aircraftType="" + aircraftType
				+ "", travelClass="" + travelClass + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.outcoming.template.airline; public class FlightInfoExtended extends FlightInfo { private static final long serialVersionUID = 1L; @NotBlank
	@SerializedName(""connection_id"")
	private String connectionId; @NotBlank
	@SerializedName(""segment_id"")
	private String segmentId; @SerializedName(""aircraft_type"")
	private String aircraftType; @NotNull
	@SerializedName(""travel_class"")
	private TravelClass travelClass; public FlightInfoExtended(String flightNumber, String connectionId,
			String segmentId, TravelClass travelClass) { super(flightNumber); this.connectionId = connectionId; this.segmentId = segmentId; this.travelClass = travelClass; } public String getConnectionId() { return connectionId; } public void setConnectionId(String connectionId) { this.connectionId = connectionId; } public String getSegmentId() { return segmentId; } public void setSegmentId(String segmentId) { this.segmentId = segmentId; } public String getAircraftType() { return aircraftType; } public void setAircraftType(String aircraftType) { this.aircraftType = aircraftType; } public TravelClass getTravelClass() { return travelClass; } public void setTravelClass(TravelClass travelClass) { this.travelClass = travelClass; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((aircraftType == null) ? 0 : aircraftType.hashCode()); result = prime * result
				+ ((connectionId == null) ? 0 : connectionId.hashCode()); result = prime * result
				+ ((segmentId == null) ? 0 : segmentId.hashCode()); result = prime * result
				+ ((travelClass == null) ? 0 : travelClass.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; FlightInfoExtended other = (FlightInfoExtended) obj; if (aircraftType == null) { if (other.aircraftType != null)
				return false; } else if (!aircraftType.equals(other.aircraftType))
			return false; if (connectionId == null) { if (other.connectionId != null)
				return false; } else if (!connectionId.equals(other.connectionId))
			return false; if (segmentId == null) { if (other.segmentId != null)
				return false; } else if (!segmentId.equals(other.segmentId))
			return false; if (travelClass != other.travelClass)
			return false; return true; } @Override
	public String toString() { return ""FlightInfoExtended [connectionId="" + connectionId
				+ "", segmentId="" + segmentId + "", aircraftType="" + aircraftType
				+ "", travelClass="" + travelClass + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.airline; public class FlightInfoExtended extends FlightInfo { private static final long serialVersionUID = 1L; @NotBlank
	@SerializedName(""connection_id"")
	private String connectionId; @NotBlank
	@SerializedName(""segment_id"")
	private String segmentId; @SerializedName(""aircraft_type"")
	private String aircraftType; @NotNull
	@SerializedName(""travel_class"")
	private TravelClass travelClass; public FlightInfoExtended(String flightNumber, String connectionId,
			String segmentId, TravelClass travelClass) { super(flightNumber); this.connectionId = connectionId; this.segmentId = segmentId; this.travelClass = travelClass; } public String getConnectionId() { return connectionId; } public void setConnectionId(String connectionId) { this.connectionId = connectionId; } public String getSegmentId() { return segmentId; } public void setSegmentId(String segmentId) { this.segmentId = segmentId; } public String getAircraftType() { return aircraftType; } public void setAircraftType(String aircraftType) { this.aircraftType = aircraftType; } public TravelClass getTravelClass() { return travelClass; } public void setTravelClass(TravelClass travelClass) { this.travelClass = travelClass; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((aircraftType == null) ? 0 : aircraftType.hashCode()); result = prime * result
				+ ((connectionId == null) ? 0 : connectionId.hashCode()); result = prime * result
				+ ((segmentId == null) ? 0 : segmentId.hashCode()); result = prime * result
				+ ((travelClass == null) ? 0 : travelClass.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; FlightInfoExtended other = (FlightInfoExtended) obj; if (aircraftType == null) { if (other.aircraftType != null)
				return false; } else if (!aircraftType.equals(other.aircraftType))
			return false; if (connectionId == null) { if (other.connectionId != null)
				return false; } else if (!connectionId.equals(other.connectionId))
			return false; if (segmentId == null) { if (other.segmentId != null)
				return false; } else if (!segmentId.equals(other.segmentId))
			return false; if (travelClass != other.travelClass)
			return false; return true; } @Override
	public String toString() { return ""FlightInfoExtended [connectionId="" + connectionId
				+ "", segmentId="" + segmentId + "", aircraftType="" + aircraftType
				+ "", travelClass="" + travelClass + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.airline; 
import javax.validation.constraints.NotNull; 
import org.hibernate.validator.constraints.NotBlank; 
import com.google.gson.annotations.SerializedName; 
  public class FlightInfoExtended extends FlightInfo { /**
 * The Class FlightInfoExtended.
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @NotBlank
	@SerializedName(""connection_id"")
	private String connectionId; /** The connection id. */  @NotBlank
	@SerializedName(""segment_id"")
	private String segmentId; /** The segment id. */  @SerializedName(""aircraft_type"")
	private String aircraftType; /** The aircraft type. */  @NotNull
	@SerializedName(""travel_class"")
	private TravelClass travelClass; /** The travel class. */  public FlightInfoExtended(String flightNumber, String connectionId,
			String segmentId, TravelClass travelClass) { super(flightNumber); this.connectionId = connectionId; this.segmentId = segmentId; this.travelClass = travelClass; } /**
	 * Instantiates a new flight info extended.
	 *
	 * @param flightNumber
	 *            the flight number
	 * @param connectionId
	 *            the connection id
	 * @param segmentId
	 *            the segment id
	 * @param travelClass
	 *            the travel class
	 */  public String getConnectionId() { return connectionId; } /**
	 * Gets the connection id.
	 *
	 * @return the connection id
	 */  public void setConnectionId(String connectionId) { this.connectionId = connectionId; } /**
	 * Sets the connection id.
	 *
	 * @param connectionId
	 *            the new connection id
	 */  public String getSegmentId() { return segmentId; } /**
	 * Gets the segment id.
	 *
	 * @return the segment id
	 */  public void setSegmentId(String segmentId) { this.segmentId = segmentId; } /**
	 * Sets the segment id.
	 *
	 * @param segmentId
	 *            the new segment id
	 */  public String getAircraftType() { return aircraftType; } /**
	 * Gets the aircraft type.
	 *
	 * @return the aircraft type
	 */  public void setAircraftType(String aircraftType) { this.aircraftType = aircraftType; } /**
	 * Sets the aircraft type.
	 *
	 * @param aircraftType
	 *            the new aircraft type
	 */  public TravelClass getTravelClass() { return travelClass; } /**
	 * Gets the travel class.
	 *
	 * @return the travel class
	 */  public void setTravelClass(TravelClass travelClass) { this.travelClass = travelClass; } /**
	 * Sets the travel class.
	 *
	 * @param travelClass
	 *            the new travel class
	 */  @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((aircraftType == null) ? 0 : aircraftType.hashCode()); result = prime * result
				+ ((connectionId == null) ? 0 : connectionId.hashCode()); result = prime * result
				+ ((segmentId == null) ? 0 : segmentId.hashCode()); result = prime * result
				+ ((travelClass == null) ? 0 : travelClass.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfo#
	 * hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; FlightInfoExtended other = (FlightInfoExtended) obj; if (aircraftType == null) { if (other.aircraftType != null)
				return false; } else if (!aircraftType.equals(other.aircraftType))
			return false; if (connectionId == null) { if (other.connectionId != null)
				return false; } else if (!connectionId.equals(other.connectionId))
			return false; if (segmentId == null) { if (other.segmentId != null)
				return false; } else if (!segmentId.equals(other.segmentId))
			return false; if (travelClass != other.travelClass)
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfo#
	 * equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""FlightInfoExtended [connectionId="" + connectionId
				+ "", segmentId="" + segmentId + "", aircraftType="" + aircraftType
				+ "", travelClass="" + travelClass + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfo#
	 * toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/airline/FlightSchedule.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.airline;

import java.io.Serializable;
import java.util.Calendar;

import javax.validation.constraints.NotNull;

import com.google.gson.annotations.SerializedName;


/**
 * The Class FlightSchedule.
 */
public class FlightSchedule implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The boarding time. */
	@SerializedName(""boarding_time"")
	private Calendar boardingTime;

	/** The departure time. */
	@NotNull
	@SerializedName(""departure_time"")
	private Calendar departureTime;

	/** The arrival time. */
	@NotNull
	@SerializedName(""arrival_time"")
	private Calendar arrivalTime;

	/**
	 * Instantiates a new flight schedule.
	 *
	 * @param departureTime
	 *            the departure time
	 * @param arrivalTime
	 *            the arrival time
	 */
	public FlightSchedule(Calendar departureTime, Calendar arrivalTime) {
		this.departureTime = departureTime;
		this.arrivalTime = arrivalTime;
	}

	/**
	 * Instantiates a new flight schedule.
	 *
	 * @param departureTime
	 *            the departure time
	 * @param arrivalTime
	 *            the arrival time
	 * @param boardingTime
	 *            the boarding time
	 */
	public FlightSchedule(Calendar departureTime, Calendar arrivalTime,
			Calendar boardingTime) {
		this(departureTime, arrivalTime);
		this.boardingTime = boardingTime;
	}

	/**
	 * Gets the boarding time.
	 *
	 * @return the boarding time
	 */
	public Calendar getBoardingTime() {
		return boardingTime;
	}

	/**
	 * Sets the boarding time.
	 *
	 * @param boardingTime
	 *            the new boarding time
	 */
	public void setBoardingTime(Calendar boardingTime) {
		this.boardingTime = boardingTime;
	}

	/**
	 * Gets the departure time.
	 *
	 * @return the departure time
	 */
	public Calendar getDepartureTime() {
		return departureTime;
	}

	/**
	 * Sets the departure time.
	 *
	 * @param departureTime
	 *            the new departure time
	 */
	public void setDepartureTime(Calendar departureTime) {
		this.departureTime = departureTime;
	}

	/**
	 * Gets the arrival time.
	 *
	 * @return the arrival time
	 */
	public Calendar getArrivalTime() {
		return arrivalTime;
	}

	/**
	 * Sets the arrival time.
	 *
	 * @param arrivalTime
	 *            the new arrival time
	 */
	public void setArrivalTime(Calendar arrivalTime) {
		this.arrivalTime = arrivalTime;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((arrivalTime == null) ? 0 : arrivalTime.hashCode());
		result = prime * result
				+ ((boardingTime == null) ? 0 : boardingTime.hashCode());
		result = prime * result
				+ ((departureTime == null) ? 0 : departureTime.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		FlightSchedule other = (FlightSchedule) obj;
		if (arrivalTime == null) {
			if (other.arrivalTime != null)
				return false;
		} else if (!arrivalTime.equals(other.arrivalTime))
			return false;
		if (boardingTime == null) {
			if (other.boardingTime != null)
				return false;
		} else if (!boardingTime.equals(other.boardingTime))
			return false;
		if (departureTime == null) {
			if (other.departureTime != null)
				return false;
		} else if (!departureTime.equals(other.departureTime))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""FlightSchedule [boardingTime="" + boardingTime
				+ "", departureTime="" + departureTime + "", arrivalTime=""
				+ arrivalTime + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.template.airline; public class FlightSchedule implements Serializable { private static final long serialVersionUID = 1L; @SerializedName(""boarding_time"")
	private Calendar boardingTime; @NotNull
	@SerializedName(""departure_time"")
	private Calendar departureTime; @NotNull
	@SerializedName(""arrival_time"")
	private Calendar arrivalTime; public FlightSchedule(Calendar departureTime, Calendar arrivalTime) { this.departureTime = departureTime; this.arrivalTime = arrivalTime; } public FlightSchedule(Calendar departureTime, Calendar arrivalTime,
			Calendar boardingTime) { this(departureTime, arrivalTime); this.boardingTime = boardingTime; } public Calendar getBoardingTime() { return boardingTime; } public void setBoardingTime(Calendar boardingTime) { this.boardingTime = boardingTime; } public Calendar getDepartureTime() { return departureTime; } public void setDepartureTime(Calendar departureTime) { this.departureTime = departureTime; } public Calendar getArrivalTime() { return arrivalTime; } public void setArrivalTime(Calendar arrivalTime) { this.arrivalTime = arrivalTime; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((arrivalTime == null) ? 0 : arrivalTime.hashCode()); result = prime * result
				+ ((boardingTime == null) ? 0 : boardingTime.hashCode()); result = prime * result
				+ ((departureTime == null) ? 0 : departureTime.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FlightSchedule other = (FlightSchedule) obj; if (arrivalTime == null) { if (other.arrivalTime != null)
				return false; } else if (!arrivalTime.equals(other.arrivalTime))
			return false; if (boardingTime == null) { if (other.boardingTime != null)
				return false; } else if (!boardingTime.equals(other.boardingTime))
			return false; if (departureTime == null) { if (other.departureTime != null)
				return false; } else if (!departureTime.equals(other.departureTime))
			return false; return true; } @Override
	public String toString() { return ""FlightSchedule [boardingTime="" + boardingTime
				+ "", departureTime="" + departureTime + "", arrivalTime=""
				+ arrivalTime + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.airline; public class FlightSchedule implements Serializable { private static final long serialVersionUID = 1L; @SerializedName(""boarding_time"")
	private Calendar boardingTime; @NotNull
	@SerializedName(""departure_time"")
	private Calendar departureTime; @NotNull
	@SerializedName(""arrival_time"")
	private Calendar arrivalTime; public FlightSchedule(Calendar departureTime, Calendar arrivalTime) { this.departureTime = departureTime; this.arrivalTime = arrivalTime; } public FlightSchedule(Calendar departureTime, Calendar arrivalTime,
			Calendar boardingTime) { this(departureTime, arrivalTime); this.boardingTime = boardingTime; } public Calendar getBoardingTime() { return boardingTime; } public void setBoardingTime(Calendar boardingTime) { this.boardingTime = boardingTime; } public Calendar getDepartureTime() { return departureTime; } public void setDepartureTime(Calendar departureTime) { this.departureTime = departureTime; } public Calendar getArrivalTime() { return arrivalTime; } public void setArrivalTime(Calendar arrivalTime) { this.arrivalTime = arrivalTime; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((arrivalTime == null) ? 0 : arrivalTime.hashCode()); result = prime * result
				+ ((boardingTime == null) ? 0 : boardingTime.hashCode()); result = prime * result
				+ ((departureTime == null) ? 0 : departureTime.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FlightSchedule other = (FlightSchedule) obj; if (arrivalTime == null) { if (other.arrivalTime != null)
				return false; } else if (!arrivalTime.equals(other.arrivalTime))
			return false; if (boardingTime == null) { if (other.boardingTime != null)
				return false; } else if (!boardingTime.equals(other.boardingTime))
			return false; if (departureTime == null) { if (other.departureTime != null)
				return false; } else if (!departureTime.equals(other.departureTime))
			return false; return true; } @Override
	public String toString() { return ""FlightSchedule [boardingTime="" + boardingTime
				+ "", departureTime="" + departureTime + "", arrivalTime=""
				+ arrivalTime + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.airline; 
import java.io.Serializable; import java.util.Calendar; 
import javax.validation.constraints.NotNull; 
import com.google.gson.annotations.SerializedName; 
  public class FlightSchedule implements Serializable { /**
 * The Class FlightSchedule.
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @SerializedName(""boarding_time"")
	private Calendar boardingTime; /** The boarding time. */  @NotNull
	@SerializedName(""departure_time"")
	private Calendar departureTime; /** The departure time. */  @NotNull
	@SerializedName(""arrival_time"")
	private Calendar arrivalTime; /** The arrival time. */  public FlightSchedule(Calendar departureTime, Calendar arrivalTime) { this.departureTime = departureTime; this.arrivalTime = arrivalTime; } /**
	 * Instantiates a new flight schedule.
	 *
	 * @param departureTime
	 *            the departure time
	 * @param arrivalTime
	 *            the arrival time
	 */  public FlightSchedule(Calendar departureTime, Calendar arrivalTime,
			Calendar boardingTime) { this(departureTime, arrivalTime); this.boardingTime = boardingTime; } /**
	 * Instantiates a new flight schedule.
	 *
	 * @param departureTime
	 *            the departure time
	 * @param arrivalTime
	 *            the arrival time
	 * @param boardingTime
	 *            the boarding time
	 */  public Calendar getBoardingTime() { return boardingTime; } /**
	 * Gets the boarding time.
	 *
	 * @return the boarding time
	 */  public void setBoardingTime(Calendar boardingTime) { this.boardingTime = boardingTime; } /**
	 * Sets the boarding time.
	 *
	 * @param boardingTime
	 *            the new boarding time
	 */  public Calendar getDepartureTime() { return departureTime; } /**
	 * Gets the departure time.
	 *
	 * @return the departure time
	 */  public void setDepartureTime(Calendar departureTime) { this.departureTime = departureTime; } /**
	 * Sets the departure time.
	 *
	 * @param departureTime
	 *            the new departure time
	 */  public Calendar getArrivalTime() { return arrivalTime; } /**
	 * Gets the arrival time.
	 *
	 * @return the arrival time
	 */  public void setArrivalTime(Calendar arrivalTime) { this.arrivalTime = arrivalTime; } /**
	 * Sets the arrival time.
	 *
	 * @param arrivalTime
	 *            the new arrival time
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((arrivalTime == null) ? 0 : arrivalTime.hashCode()); result = prime * result
				+ ((boardingTime == null) ? 0 : boardingTime.hashCode()); result = prime * result
				+ ((departureTime == null) ? 0 : departureTime.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; FlightSchedule other = (FlightSchedule) obj; if (arrivalTime == null) { if (other.arrivalTime != null)
				return false; } else if (!arrivalTime.equals(other.arrivalTime))
			return false; if (boardingTime == null) { if (other.boardingTime != null)
				return false; } else if (!boardingTime.equals(other.boardingTime))
			return false; if (departureTime == null) { if (other.departureTime != null)
				return false; } else if (!departureTime.equals(other.departureTime))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""FlightSchedule [boardingTime="" + boardingTime
				+ "", departureTime="" + departureTime + "", arrivalTime=""
				+ arrivalTime + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/airline/PassengerInfo.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.airline;

import java.io.Serializable;

import org.hibernate.validator.constraints.NotBlank;

import com.google.gson.annotations.SerializedName;


/**
 * The Class PassengerInfo.
 */
public class PassengerInfo implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The passenger id. */
	@NotBlank
	@SerializedName(""passenger_id"")
	private String passengerId;

	/** The ticket number. */
	@SerializedName(""ticket_number"")
	private String ticketNumber;

	/** The name. */
	@NotBlank
	private String name;

	/**
	 * Instantiates a new passenger info.
	 *
	 * @param passengerId
	 *            the passenger id
	 * @param name
	 *            the name
	 */
	public PassengerInfo(String passengerId, String name) {
		this.passengerId = passengerId;
		this.name = name;
	}

	/**
	 * Instantiates a new passenger info.
	 *
	 * @param passengerId
	 *            the passenger id
	 * @param name
	 *            the name
	 * @param ticketNumber
	 *            the ticket number
	 */
	public PassengerInfo(String passengerId, String name, String ticketNumber) {
		this(passengerId, name);
		this.ticketNumber = ticketNumber;
	}

	/**
	 * Gets the passenger id.
	 *
	 * @return the passenger id
	 */
	public String getPassengerId() {
		return passengerId;
	}

	/**
	 * Sets the passenger id.
	 *
	 * @param passengerId
	 *            the new passenger id
	 */
	public void setPassengerId(String passengerId) {
		this.passengerId = passengerId;
	}

	/**
	 * Gets the ticket number.
	 *
	 * @return the ticket number
	 */
	public String getTicketNumber() {
		return ticketNumber;
	}

	/**
	 * Sets the ticket number.
	 *
	 * @param ticketNumber
	 *            the new ticket number
	 */
	public void setTicketNumber(String ticketNumber) {
		this.ticketNumber = ticketNumber;
	}

	/**
	 * Gets the name.
	 *
	 * @return the name
	 */
	public String getName() {
		return name;
	}

	/**
	 * Sets the name.
	 *
	 * @param name
	 *            the new name
	 */
	public void setName(String name) {
		this.name = name;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result
				+ ((passengerId == null) ? 0 : passengerId.hashCode());
		result = prime * result
				+ ((ticketNumber == null) ? 0 : ticketNumber.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		PassengerInfo other = (PassengerInfo) obj;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (passengerId == null) {
			if (other.passengerId != null)
				return false;
		} else if (!passengerId.equals(other.passengerId))
			return false;
		if (ticketNumber == null) {
			if (other.ticketNumber != null)
				return false;
		} else if (!ticketNumber.equals(other.ticketNumber))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""PassengerInfo [passengerId="" + passengerId + "", ticketNumber=""
				+ ticketNumber + "", name="" + name + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.outcoming.template.airline; public class PassengerInfo implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	@SerializedName(""passenger_id"")
	private String passengerId; @SerializedName(""ticket_number"")
	private String ticketNumber; @NotBlank
	private String name; public PassengerInfo(String passengerId, String name) { this.passengerId = passengerId; this.name = name; } public PassengerInfo(String passengerId, String name, String ticketNumber) { this(passengerId, name); this.ticketNumber = ticketNumber; } public String getPassengerId() { return passengerId; } public void setPassengerId(String passengerId) { this.passengerId = passengerId; } public String getTicketNumber() { return ticketNumber; } public void setTicketNumber(String ticketNumber) { this.ticketNumber = ticketNumber; } public String getName() { return name; } public void setName(String name) { this.name = name; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((name == null) ? 0 : name.hashCode()); result = prime * result
				+ ((passengerId == null) ? 0 : passengerId.hashCode()); result = prime * result
				+ ((ticketNumber == null) ? 0 : ticketNumber.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PassengerInfo other = (PassengerInfo) obj; if (name == null) { if (other.name != null)
				return false; } else if (!name.equals(other.name))
			return false; if (passengerId == null) { if (other.passengerId != null)
				return false; } else if (!passengerId.equals(other.passengerId))
			return false; if (ticketNumber == null) { if (other.ticketNumber != null)
				return false; } else if (!ticketNumber.equals(other.ticketNumber))
			return false; return true; } @Override
	public String toString() { return ""PassengerInfo [passengerId="" + passengerId + "", ticketNumber=""
				+ ticketNumber + "", name="" + name + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.airline; public class PassengerInfo implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	@SerializedName(""passenger_id"")
	private String passengerId; @SerializedName(""ticket_number"")
	private String ticketNumber; @NotBlank
	private String name; public PassengerInfo(String passengerId, String name) { this.passengerId = passengerId; this.name = name; } public PassengerInfo(String passengerId, String name, String ticketNumber) { this(passengerId, name); this.ticketNumber = ticketNumber; } public String getPassengerId() { return passengerId; } public void setPassengerId(String passengerId) { this.passengerId = passengerId; } public String getTicketNumber() { return ticketNumber; } public void setTicketNumber(String ticketNumber) { this.ticketNumber = ticketNumber; } public String getName() { return name; } public void setName(String name) { this.name = name; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((name == null) ? 0 : name.hashCode()); result = prime * result
				+ ((passengerId == null) ? 0 : passengerId.hashCode()); result = prime * result
				+ ((ticketNumber == null) ? 0 : ticketNumber.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PassengerInfo other = (PassengerInfo) obj; if (name == null) { if (other.name != null)
				return false; } else if (!name.equals(other.name))
			return false; if (passengerId == null) { if (other.passengerId != null)
				return false; } else if (!passengerId.equals(other.passengerId))
			return false; if (ticketNumber == null) { if (other.ticketNumber != null)
				return false; } else if (!ticketNumber.equals(other.ticketNumber))
			return false; return true; } @Override
	public String toString() { return ""PassengerInfo [passengerId="" + passengerId + "", ticketNumber=""
				+ ticketNumber + "", name="" + name + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.airline; 
import java.io.Serializable; 
import org.hibernate.validator.constraints.NotBlank; 
import com.google.gson.annotations.SerializedName; 
  public class PassengerInfo implements Serializable { /**
 * The Class PassengerInfo.
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @NotBlank
	@SerializedName(""passenger_id"")
	private String passengerId; /** The passenger id. */  @SerializedName(""ticket_number"")
	private String ticketNumber; /** The ticket number. */  @NotBlank
	private String name; /** The name. */  public PassengerInfo(String passengerId, String name) { this.passengerId = passengerId; this.name = name; } /**
	 * Instantiates a new passenger info.
	 *
	 * @param passengerId
	 *            the passenger id
	 * @param name
	 *            the name
	 */  public PassengerInfo(String passengerId, String name, String ticketNumber) { this(passengerId, name); this.ticketNumber = ticketNumber; } /**
	 * Instantiates a new passenger info.
	 *
	 * @param passengerId
	 *            the passenger id
	 * @param name
	 *            the name
	 * @param ticketNumber
	 *            the ticket number
	 */  public String getPassengerId() { return passengerId; } /**
	 * Gets the passenger id.
	 *
	 * @return the passenger id
	 */  public void setPassengerId(String passengerId) { this.passengerId = passengerId; } /**
	 * Sets the passenger id.
	 *
	 * @param passengerId
	 *            the new passenger id
	 */  public String getTicketNumber() { return ticketNumber; } /**
	 * Gets the ticket number.
	 *
	 * @return the ticket number
	 */  public void setTicketNumber(String ticketNumber) { this.ticketNumber = ticketNumber; } /**
	 * Sets the ticket number.
	 *
	 * @param ticketNumber
	 *            the new ticket number
	 */  public String getName() { return name; } /**
	 * Gets the name.
	 *
	 * @return the name
	 */  public void setName(String name) { this.name = name; } /**
	 * Sets the name.
	 *
	 * @param name
	 *            the new name
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((name == null) ? 0 : name.hashCode()); result = prime * result
				+ ((passengerId == null) ? 0 : passengerId.hashCode()); result = prime * result
				+ ((ticketNumber == null) ? 0 : ticketNumber.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PassengerInfo other = (PassengerInfo) obj; if (name == null) { if (other.name != null)
				return false; } else if (!name.equals(other.name))
			return false; if (passengerId == null) { if (other.passengerId != null)
				return false; } else if (!passengerId.equals(other.passengerId))
			return false; if (ticketNumber == null) { if (other.ticketNumber != null)
				return false; } else if (!ticketNumber.equals(other.ticketNumber))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""PassengerInfo [passengerId="" + passengerId + "", ticketNumber=""
				+ ticketNumber + "", name="" + name + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/airline/PassengerSegmentInfo.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.airline;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotBlank;
import org.hibernate.validator.constraints.NotEmpty;

import com.google.gson.annotations.SerializedName;


/**
 * The Class PassengerSegmentInfo.
 */
public class PassengerSegmentInfo implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The segment id. */
	@NotBlank
	@SerializedName(""segment_id"")
	private String segmentId;

	/** The passenger id. */
	@NotBlank
	@SerializedName(""passenger_id"")
	private String passengerId;

	/** The seat. */
	@NotBlank
	private String seat;

	/** The seat type. */
	@NotBlank
	@SerializedName(""seat_type"")
	private String seatType;

	/** The product info. */
	@Valid
	@Size(max = 4)
	@NotEmpty
	@SerializedName(""product_info"")
	private List<ProductInfo> productInfo;

	/**
	 * Instantiates a new passenger segment info.
	 *
	 * @param segmentId
	 *            the segment id
	 * @param passengerId
	 *            the passenger id
	 * @param seat
	 *            the seat
	 * @param seatType
	 *            the seat type
	 */
	public PassengerSegmentInfo(String segmentId, String passengerId,
			String seat, String seatType) {
		this.productInfo = new ArrayList<ProductInfo>();
		this.segmentId = segmentId;
		this.passengerId = passengerId;
		this.seat = seat;
		this.seatType = seatType;
	}

	/**
	 * Gets the segment id.
	 *
	 * @return the segment id
	 */
	public String getSegmentId() {
		return segmentId;
	}

	/**
	 * Sets the segment id.
	 *
	 * @param segmentId
	 *            the new segment id
	 */
	public void setSegmentId(String segmentId) {
		this.segmentId = segmentId;
	}

	/**
	 * Gets the passenger id.
	 *
	 * @return the passenger id
	 */
	public String getPassengerId() {
		return passengerId;
	}

	/**
	 * Sets the passenger id.
	 *
	 * @param passengerId
	 *            the new passenger id
	 */
	public void setPassengerId(String passengerId) {
		this.passengerId = passengerId;
	}

	/**
	 * Gets the seat.
	 *
	 * @return the seat
	 */
	public String getSeat() {
		return seat;
	}

	/**
	 * Sets the seat.
	 *
	 * @param seat
	 *            the new seat
	 */
	public void setSeat(String seat) {
		this.seat = seat;
	}

	/**
	 * Gets the seat type.
	 *
	 * @return the seat type
	 */
	public String getSeatType() {
		return seatType;
	}

	/**
	 * Sets the seat type.
	 *
	 * @param seatType
	 *            the new seat type
	 */
	public void setSeatType(String seatType) {
		this.seatType = seatType;
	}

	/**
	 * Gets the product info.
	 *
	 * @return the product info
	 */
	public List<ProductInfo> getProductInfo() {
		return productInfo;
	}

	/**
	 * Sets the product info.
	 *
	 * @param productInfo
	 *            the new product info
	 */
	public void setProductInfo(List<ProductInfo> productInfo) {
		this.productInfo = productInfo;
	}

	/**
	 * Adds the product info.
	 *
	 * @param productInfo
	 *            the product info
	 */
	public void addProductInfo(ProductInfo productInfo) {
		this.productInfo.add(productInfo);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((passengerId == null) ? 0 : passengerId.hashCode());
		result = prime * result
				+ ((productInfo == null) ? 0 : productInfo.hashCode());
		result = prime * result + ((seat == null) ? 0 : seat.hashCode());
		result = prime * result
				+ ((seatType == null) ? 0 : seatType.hashCode());
		result = prime * result
				+ ((segmentId == null) ? 0 : segmentId.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		PassengerSegmentInfo other = (PassengerSegmentInfo) obj;
		if (passengerId == null) {
			if (other.passengerId != null)
				return false;
		} else if (!passengerId.equals(other.passengerId))
			return false;
		if (productInfo == null) {
			if (other.productInfo != null)
				return false;
		} else if (!productInfo.equals(other.productInfo))
			return false;
		if (seat == null) {
			if (other.seat != null)
				return false;
		} else if (!seat.equals(other.seat))
			return false;
		if (seatType == null) {
			if (other.seatType != null)
				return false;
		} else if (!seatType.equals(other.seatType))
			return false;
		if (segmentId == null) {
			if (other.segmentId != null)
				return false;
		} else if (!segmentId.equals(other.segmentId))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""PassengerSegmentInfo [segmentId="" + segmentId
				+ "", passengerId="" + passengerId + "", seat="" + seat
				+ "", seatType="" + seatType + "", productInfo="" + productInfo
				+ ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.template.airline; public class PassengerSegmentInfo implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	@SerializedName(""segment_id"")
	private String segmentId; @NotBlank
	@SerializedName(""passenger_id"")
	private String passengerId; @NotBlank
	private String seat; @NotBlank
	@SerializedName(""seat_type"")
	private String seatType; @Valid
	@Size(max = 4)
	@NotEmpty
	@SerializedName(""product_info"")
	private List<ProductInfo> productInfo; public PassengerSegmentInfo(String segmentId, String passengerId,
			String seat, String seatType) { this.productInfo = new ArrayList<ProductInfo>(); this.segmentId = segmentId; this.passengerId = passengerId; this.seat = seat; this.seatType = seatType; } public String getSegmentId() { return segmentId; } public void setSegmentId(String segmentId) { this.segmentId = segmentId; } public String getPassengerId() { return passengerId; } public void setPassengerId(String passengerId) { this.passengerId = passengerId; } public String getSeat() { return seat; } public void setSeat(String seat) { this.seat = seat; } public String getSeatType() { return seatType; } public void setSeatType(String seatType) { this.seatType = seatType; } public List<ProductInfo> getProductInfo() { return productInfo; } public void setProductInfo(List<ProductInfo> productInfo) { this.productInfo = productInfo; } public void addProductInfo(ProductInfo productInfo) { this.productInfo.add(productInfo); } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((passengerId == null) ? 0 : passengerId.hashCode()); result = prime * result
				+ ((productInfo == null) ? 0 : productInfo.hashCode()); result = prime * result + ((seat == null) ? 0 : seat.hashCode()); result = prime * result
				+ ((seatType == null) ? 0 : seatType.hashCode()); result = prime * result
				+ ((segmentId == null) ? 0 : segmentId.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PassengerSegmentInfo other = (PassengerSegmentInfo) obj; if (passengerId == null) { if (other.passengerId != null)
				return false; } else if (!passengerId.equals(other.passengerId))
			return false; if (productInfo == null) { if (other.productInfo != null)
				return false; } else if (!productInfo.equals(other.productInfo))
			return false; if (seat == null) { if (other.seat != null)
				return false; } else if (!seat.equals(other.seat))
			return false; if (seatType == null) { if (other.seatType != null)
				return false; } else if (!seatType.equals(other.seatType))
			return false; if (segmentId == null) { if (other.segmentId != null)
				return false; } else if (!segmentId.equals(other.segmentId))
			return false; return true; } @Override
	public String toString() { return ""PassengerSegmentInfo [segmentId="" + segmentId
				+ "", passengerId="" + passengerId + "", seat="" + seat
				+ "", seatType="" + seatType + "", productInfo="" + productInfo
				+ ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.airline; public class PassengerSegmentInfo implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	@SerializedName(""segment_id"")
	private String segmentId; @NotBlank
	@SerializedName(""passenger_id"")
	private String passengerId; @NotBlank
	private String seat; @NotBlank
	@SerializedName(""seat_type"")
	private String seatType; @Valid
	@Size(max = 4)
	@NotEmpty
	@SerializedName(""product_info"")
	private List<ProductInfo> productInfo; public PassengerSegmentInfo(String segmentId, String passengerId,
			String seat, String seatType) { this.productInfo = new ArrayList<ProductInfo>(); this.segmentId = segmentId; this.passengerId = passengerId; this.seat = seat; this.seatType = seatType; } public String getSegmentId() { return segmentId; } public void setSegmentId(String segmentId) { this.segmentId = segmentId; } public String getPassengerId() { return passengerId; } public void setPassengerId(String passengerId) { this.passengerId = passengerId; } public String getSeat() { return seat; } public void setSeat(String seat) { this.seat = seat; } public String getSeatType() { return seatType; } public void setSeatType(String seatType) { this.seatType = seatType; } public List<ProductInfo> getProductInfo() { return productInfo; } public void setProductInfo(List<ProductInfo> productInfo) { this.productInfo = productInfo; } public void addProductInfo(ProductInfo productInfo) { this.productInfo.add(productInfo); } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((passengerId == null) ? 0 : passengerId.hashCode()); result = prime * result
				+ ((productInfo == null) ? 0 : productInfo.hashCode()); result = prime * result + ((seat == null) ? 0 : seat.hashCode()); result = prime * result
				+ ((seatType == null) ? 0 : seatType.hashCode()); result = prime * result
				+ ((segmentId == null) ? 0 : segmentId.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PassengerSegmentInfo other = (PassengerSegmentInfo) obj; if (passengerId == null) { if (other.passengerId != null)
				return false; } else if (!passengerId.equals(other.passengerId))
			return false; if (productInfo == null) { if (other.productInfo != null)
				return false; } else if (!productInfo.equals(other.productInfo))
			return false; if (seat == null) { if (other.seat != null)
				return false; } else if (!seat.equals(other.seat))
			return false; if (seatType == null) { if (other.seatType != null)
				return false; } else if (!seatType.equals(other.seatType))
			return false; if (segmentId == null) { if (other.segmentId != null)
				return false; } else if (!segmentId.equals(other.segmentId))
			return false; return true; } @Override
	public String toString() { return ""PassengerSegmentInfo [segmentId="" + segmentId
				+ "", passengerId="" + passengerId + "", seat="" + seat
				+ "", seatType="" + seatType + "", productInfo="" + productInfo
				+ ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.airline; 
import java.io.Serializable; import java.util.ArrayList; import java.util.List; 
import javax.validation.Valid; import javax.validation.constraints.Size; 
import org.hibernate.validator.constraints.NotBlank; import org.hibernate.validator.constraints.NotEmpty; 
import com.google.gson.annotations.SerializedName; 
  public class PassengerSegmentInfo implements Serializable { /**
 * The Class PassengerSegmentInfo.
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @NotBlank
	@SerializedName(""segment_id"")
	private String segmentId; /** The segment id. */  @NotBlank
	@SerializedName(""passenger_id"")
	private String passengerId; /** The passenger id. */  @NotBlank
	private String seat; /** The seat. */  @NotBlank
	@SerializedName(""seat_type"")
	private String seatType; /** The seat type. */  @Valid
	@Size(max = 4)
	@NotEmpty
	@SerializedName(""product_info"")
	private List<ProductInfo> productInfo; /** The product info. */  public PassengerSegmentInfo(String segmentId, String passengerId,
			String seat, String seatType) { this.productInfo = new ArrayList<ProductInfo>(); this.segmentId = segmentId; this.passengerId = passengerId; this.seat = seat; this.seatType = seatType; } /**
	 * Instantiates a new passenger segment info.
	 *
	 * @param segmentId
	 *            the segment id
	 * @param passengerId
	 *            the passenger id
	 * @param seat
	 *            the seat
	 * @param seatType
	 *            the seat type
	 */  public String getSegmentId() { return segmentId; } /**
	 * Gets the segment id.
	 *
	 * @return the segment id
	 */  public void setSegmentId(String segmentId) { this.segmentId = segmentId; } /**
	 * Sets the segment id.
	 *
	 * @param segmentId
	 *            the new segment id
	 */  public String getPassengerId() { return passengerId; } /**
	 * Gets the passenger id.
	 *
	 * @return the passenger id
	 */  public void setPassengerId(String passengerId) { this.passengerId = passengerId; } /**
	 * Sets the passenger id.
	 *
	 * @param passengerId
	 *            the new passenger id
	 */  public String getSeat() { return seat; } /**
	 * Gets the seat.
	 *
	 * @return the seat
	 */  public void setSeat(String seat) { this.seat = seat; } /**
	 * Sets the seat.
	 *
	 * @param seat
	 *            the new seat
	 */  public String getSeatType() { return seatType; } /**
	 * Gets the seat type.
	 *
	 * @return the seat type
	 */  public void setSeatType(String seatType) { this.seatType = seatType; } /**
	 * Sets the seat type.
	 *
	 * @param seatType
	 *            the new seat type
	 */  public List<ProductInfo> getProductInfo() { return productInfo; } /**
	 * Gets the product info.
	 *
	 * @return the product info
	 */  public void setProductInfo(List<ProductInfo> productInfo) { this.productInfo = productInfo; } /**
	 * Sets the product info.
	 *
	 * @param productInfo
	 *            the new product info
	 */  public void addProductInfo(ProductInfo productInfo) { this.productInfo.add(productInfo); } /**
	 * Adds the product info.
	 *
	 * @param productInfo
	 *            the product info
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((passengerId == null) ? 0 : passengerId.hashCode()); result = prime * result
				+ ((productInfo == null) ? 0 : productInfo.hashCode()); result = prime * result + ((seat == null) ? 0 : seat.hashCode()); result = prime * result
				+ ((seatType == null) ? 0 : seatType.hashCode()); result = prime * result
				+ ((segmentId == null) ? 0 : segmentId.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PassengerSegmentInfo other = (PassengerSegmentInfo) obj; if (passengerId == null) { if (other.passengerId != null)
				return false; } else if (!passengerId.equals(other.passengerId))
			return false; if (productInfo == null) { if (other.productInfo != null)
				return false; } else if (!productInfo.equals(other.productInfo))
			return false; if (seat == null) { if (other.seat != null)
				return false; } else if (!seat.equals(other.seat))
			return false; if (seatType == null) { if (other.seatType != null)
				return false; } else if (!seatType.equals(other.seatType))
			return false; if (segmentId == null) { if (other.segmentId != null)
				return false; } else if (!segmentId.equals(other.segmentId))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""PassengerSegmentInfo [segmentId="" + segmentId
				+ "", passengerId="" + passengerId + "", seat="" + seat
				+ "", seatType="" + seatType + "", productInfo="" + productInfo
				+ ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/airline/PriceInfo.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.airline;

import java.io.Serializable;
import java.math.BigDecimal;

import javax.validation.constraints.Pattern;

import org.hibernate.validator.constraints.NotBlank;


/**
 * The Class PriceInfo.
 */
public class PriceInfo implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The title. */
	@NotBlank
	private String title;

	/** The amount. */
	private BigDecimal amount;

	/** The currency. */
	@Pattern(regexp = ""[A-Z]{3}"", message = ""{currency.pattern.message}"")
	private String currency;

	/**
	 * Instantiates a new price info.
	 *
	 * @param title
	 *            the title
	 * @param amount
	 *            the amount
	 */
	public PriceInfo(String title, BigDecimal amount) {
		this.title = title;
		this.amount = amount;
	}

	/**
	 * Instantiates a new price info.
	 *
	 * @param title
	 *            the title
	 * @param amount
	 *            the amount
	 * @param currency
	 *            the currency
	 */
	public PriceInfo(String title, BigDecimal amount, String currency) {
		this(title, amount);
		this.currency = currency;
	}

	/**
	 * Gets the title.
	 *
	 * @return the title
	 */
	public String getTitle() {
		return title;
	}

	/**
	 * Sets the title.
	 *
	 * @param title
	 *            the new title
	 */
	public void setTitle(String title) {
		this.title = title;
	}

	/**
	 * Gets the amount.
	 *
	 * @return the amount
	 */
	public BigDecimal getAmount() {
		return amount;
	}

	/**
	 * Sets the amount.
	 *
	 * @param amount
	 *            the new amount
	 */
	public void setAmount(BigDecimal amount) {
		this.amount = amount;
	}

	/**
	 * Gets the currency.
	 *
	 * @return the currency
	 */
	public String getCurrency() {
		return currency;
	}

	/**
	 * Sets the currency.
	 *
	 * @param currency
	 *            the new currency
	 */
	public void setCurrency(String currency) {
		this.currency = currency;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((amount == null) ? 0 : amount.hashCode());
		result = prime * result
				+ ((currency == null) ? 0 : currency.hashCode());
		result = prime * result + ((title == null) ? 0 : title.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		PriceInfo other = (PriceInfo) obj;
		if (amount == null) {
			if (other.amount != null)
				return false;
		} else if (!amount.equals(other.amount))
			return false;
		if (currency == null) {
			if (other.currency != null)
				return false;
		} else if (!currency.equals(other.currency))
			return false;
		if (title == null) {
			if (other.title != null)
				return false;
		} else if (!title.equals(other.title))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""PriceInfo [title="" + title + "", amount="" + amount
				+ "", currency="" + currency + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.template.airline; public class PriceInfo implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	private String title; private BigDecimal amount; @Pattern(regexp = ""[A-Z]{ 3} "", message = ""{ currency.pattern.message} "")
	private String currency; public PriceInfo(String title, BigDecimal amount) { this.title = title; this.amount = amount; } public PriceInfo(String title, BigDecimal amount, String currency) { this(title, amount); this.currency = currency; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public BigDecimal getAmount() { return amount; } public void setAmount(BigDecimal amount) { this.amount = amount; } public String getCurrency() { return currency; } public void setCurrency(String currency) { this.currency = currency; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((amount == null) ? 0 : amount.hashCode()); result = prime * result
				+ ((currency == null) ? 0 : currency.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PriceInfo other = (PriceInfo) obj; if (amount == null) { if (other.amount != null)
				return false; } else if (!amount.equals(other.amount))
			return false; if (currency == null) { if (other.currency != null)
				return false; } else if (!currency.equals(other.currency))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; return true; } @Override
	public String toString() { return ""PriceInfo [title="" + title + "", amount="" + amount
				+ "", currency="" + currency + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.airline; public class PriceInfo implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	private String title; private BigDecimal amount; @Pattern(regexp = ""[A-Z]{ 3} "", message = ""{ currency.pattern.message} "")
	private String currency; public PriceInfo(String title, BigDecimal amount) { this.title = title; this.amount = amount; } public PriceInfo(String title, BigDecimal amount, String currency) { this(title, amount); this.currency = currency; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public BigDecimal getAmount() { return amount; } public void setAmount(BigDecimal amount) { this.amount = amount; } public String getCurrency() { return currency; } public void setCurrency(String currency) { this.currency = currency; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((amount == null) ? 0 : amount.hashCode()); result = prime * result
				+ ((currency == null) ? 0 : currency.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PriceInfo other = (PriceInfo) obj; if (amount == null) { if (other.amount != null)
				return false; } else if (!amount.equals(other.amount))
			return false; if (currency == null) { if (other.currency != null)
				return false; } else if (!currency.equals(other.currency))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; return true; } @Override
	public String toString() { return ""PriceInfo [title="" + title + "", amount="" + amount
				+ "", currency="" + currency + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.airline; 
import java.io.Serializable; import java.math.BigDecimal; 
import javax.validation.constraints.Pattern; 
import org.hibernate.validator.constraints.NotBlank; 
  public class PriceInfo implements Serializable { /**
 * The Class PriceInfo.
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @NotBlank
	private String title; /** The title. */  private BigDecimal amount; /** The amount. */  @Pattern(regexp = ""[A-Z]{ 3} "", message = ""{ currency.pattern.message} "")
	private String currency; /** The currency. */  public PriceInfo(String title, BigDecimal amount) { this.title = title; this.amount = amount; } /**
	 * Instantiates a new price info.
	 *
	 * @param title
	 *            the title
	 * @param amount
	 *            the amount
	 */  public PriceInfo(String title, BigDecimal amount, String currency) { this(title, amount); this.currency = currency; } /**
	 * Instantiates a new price info.
	 *
	 * @param title
	 *            the title
	 * @param amount
	 *            the amount
	 * @param currency
	 *            the currency
	 */  public String getTitle() { return title; } /**
	 * Gets the title.
	 *
	 * @return the title
	 */  public void setTitle(String title) { this.title = title; } /**
	 * Sets the title.
	 *
	 * @param title
	 *            the new title
	 */  public BigDecimal getAmount() { return amount; } /**
	 * Gets the amount.
	 *
	 * @return the amount
	 */  public void setAmount(BigDecimal amount) { this.amount = amount; } /**
	 * Sets the amount.
	 *
	 * @param amount
	 *            the new amount
	 */  public String getCurrency() { return currency; } /**
	 * Gets the currency.
	 *
	 * @return the currency
	 */  public void setCurrency(String currency) { this.currency = currency; } /**
	 * Sets the currency.
	 *
	 * @param currency
	 *            the new currency
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((amount == null) ? 0 : amount.hashCode()); result = prime * result
				+ ((currency == null) ? 0 : currency.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PriceInfo other = (PriceInfo) obj; if (amount == null) { if (other.amount != null)
				return false; } else if (!amount.equals(other.amount))
			return false; if (currency == null) { if (other.currency != null)
				return false; } else if (!currency.equals(other.currency))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""PriceInfo [title="" + title + "", amount="" + amount
				+ "", currency="" + currency + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/airline/ProductInfo.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.airline;

import java.io.Serializable;

import org.hibernate.validator.constraints.NotBlank;


/**
 * The Class ProductInfo.
 */
public class ProductInfo implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The title. */
	@NotBlank
	private String title;

	/** The value. */
	@NotBlank
	private String value;

	/**
	 * Instantiates a new product info.
	 *
	 * @param title
	 *            the title
	 * @param value
	 *            the value
	 */
	public ProductInfo(String title, String value) {
		this.title = title;
		this.value = value;
	}

	/**
	 * Gets the title.
	 *
	 * @return the title
	 */
	public String getTitle() {
		return title;
	}

	/**
	 * Sets the title.
	 *
	 * @param title
	 *            the new title
	 */
	public void setTitle(String title) {
		this.title = title;
	}

	/**
	 * Gets the value.
	 *
	 * @return the value
	 */
	public String getValue() {
		return value;
	}

	/**
	 * Sets the value.
	 *
	 * @param value
	 *            the new value
	 */
	public void setValue(String value) {
		this.value = value;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((title == null) ? 0 : title.hashCode());
		result = prime * result + ((value == null) ? 0 : value.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ProductInfo other = (ProductInfo) obj;
		if (title == null) {
			if (other.title != null)
				return false;
		} else if (!title.equals(other.title))
			return false;
		if (value == null) {
			if (other.value != null)
				return false;
		} else if (!value.equals(other.value))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""ProductInfo [title="" + title + "", value="" + value + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.outcoming.template.airline; public class ProductInfo implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	private String title; @NotBlank
	private String value; public ProductInfo(String title, String value) { this.title = title; this.value = value; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public String getValue() { return value; } public void setValue(String value) { this.value = value; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((title == null) ? 0 : title.hashCode()); result = prime * result + ((value == null) ? 0 : value.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ProductInfo other = (ProductInfo) obj; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; if (value == null) { if (other.value != null)
				return false; } else if (!value.equals(other.value))
			return false; return true; } @Override
	public String toString() { return ""ProductInfo [title="" + title + "", value="" + value + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.airline; public class ProductInfo implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	private String title; @NotBlank
	private String value; public ProductInfo(String title, String value) { this.title = title; this.value = value; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public String getValue() { return value; } public void setValue(String value) { this.value = value; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((title == null) ? 0 : title.hashCode()); result = prime * result + ((value == null) ? 0 : value.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ProductInfo other = (ProductInfo) obj; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; if (value == null) { if (other.value != null)
				return false; } else if (!value.equals(other.value))
			return false; return true; } @Override
	public String toString() { return ""ProductInfo [title="" + title + "", value="" + value + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.airline; 
import java.io.Serializable; 
import org.hibernate.validator.constraints.NotBlank; 
  public class ProductInfo implements Serializable { /**
 * The Class ProductInfo.
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @NotBlank
	private String title; /** The title. */  @NotBlank
	private String value; /** The value. */  public ProductInfo(String title, String value) { this.title = title; this.value = value; } /**
	 * Instantiates a new product info.
	 *
	 * @param title
	 *            the title
	 * @param value
	 *            the value
	 */  public String getTitle() { return title; } /**
	 * Gets the title.
	 *
	 * @return the title
	 */  public void setTitle(String title) { this.title = title; } /**
	 * Sets the title.
	 *
	 * @param title
	 *            the new title
	 */  public String getValue() { return value; } /**
	 * Gets the value.
	 *
	 * @return the value
	 */  public void setValue(String value) { this.value = value; } /**
	 * Sets the value.
	 *
	 * @param value
	 *            the new value
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((title == null) ? 0 : title.hashCode()); result = prime * result + ((value == null) ? 0 : value.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ProductInfo other = (ProductInfo) obj; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; if (value == null) { if (other.value != null)
				return false; } else if (!value.equals(other.value))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""ProductInfo [title="" + title + "", value="" + value + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/airline/TravelClass.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.airline;


/**
 * The Enum TravelClass.
 */
public enum TravelClass {

	/** The economy. */
	ECONOMY,
	/** The business. */
	BUSINESS,
	/** The first class. */
	FIRST_CLASS;
}
",package co.aurasphere.botmill.fb.model.outcoming.template.airline; public enum TravelClass { FIRST_CLASS; },0 0 0 0 0,package co.aurasphere.botmill.fb.model.outcoming.template.airline; public enum TravelClass { FIRST_CLASS; } ,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.airline; 
  public enum TravelClass { /**
 * The Enum TravelClass.
 */  /** The economy. */ /** The business. */ FIRST_CLASS; } /** The first class. */ "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/airline/UpdateType.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.airline;


/**
 * Enum that represents the kinds of updates of a flight.
 * 
 * @author Donato Rimenti
 * 
 */
public enum UpdateType {

	/**
	 * Flight delay update.
	 */
	DELAY,

	/**
	 * Flight gate change update.
	 */
	GATE_CHANGE,

	/**
	 * Flight cancellation update.
	 */
	CANCELLATION;

}
",package co.aurasphere.botmill.fb.model.outcoming.template.airline; public enum UpdateType { CANCELLATION; },0 0 0 0 0,package co.aurasphere.botmill.fb.model.outcoming.template.airline; public enum UpdateType { CANCELLATION; } ,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.airline; 
  public enum UpdateType { /**
 * Enum that represents the kinds of updates of a flight.
 * 
 * @author Donato Rimenti
 * 
 */  /**
	 * Flight delay update.
	 */  /**
	 * Flight gate change update.
	 */  CANCELLATION; /**
	 * Flight cancellation update.
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/button/Button.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.button;

import java.io.Serializable;

import javax.validation.constraints.NotNull;


/**
 * The Class Button.
 */
public abstract class Button implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/**
	 * The button type.
	 */
	@NotNull
	protected ButtonType type;

	/**
	 * Gets the type.
	 *
	 * @return the type
	 */
	public ButtonType getType() {
		return type;
	}

	/**
	 * Sets the type.
	 *
	 * @param type
	 *            the new type
	 */
	public void setType(ButtonType type) {
		this.type = type;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((type == null) ? 0 : type.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Button other = (Button) obj;
		if (type != other.type)
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""Button [type="" + type + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.outcoming.template.button; public abstract class Button implements Serializable { private static final long serialVersionUID = 1L; @NotNull
	protected ButtonType type; public ButtonType getType() { return type; } public void setType(ButtonType type) { this.type = type; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((type == null) ? 0 : type.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Button other = (Button) obj; if (type != other.type)
			return false; return true; } @Override
	public String toString() { return ""Button [type="" + type + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.button; public abstract class Button implements Serializable { private static final long serialVersionUID = 1L; @NotNull
	protected ButtonType type; public ButtonType getType() { return type; } public void setType(ButtonType type) { this.type = type; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((type == null) ? 0 : type.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Button other = (Button) obj; if (type != other.type)
			return false; return true; } @Override
	public String toString() { return ""Button [type="" + type + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.button; 
import java.io.Serializable; 
import javax.validation.constraints.NotNull; 
  public abstract class Button implements Serializable { /**
 * The Class Button.
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @NotNull
	protected ButtonType type; /**
	 * The button type.
	 */  public ButtonType getType() { return type; } /**
	 * Gets the type.
	 *
	 * @return the type
	 */  public void setType(ButtonType type) { this.type = type; } /**
	 * Sets the type.
	 *
	 * @param type
	 *            the new type
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((type == null) ? 0 : type.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Button other = (Button) obj; if (type != other.type)
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""Button [type="" + type + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/button/ButtonType.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.button;

import com.google.gson.annotations.SerializedName;


/**
 * The Enum for WebViewHeightRatioType.
 *
 * @author Alvin Reyes
 * 
 */
public enum ButtonType {

	/** The web url. */
	@SerializedName(""web_url"")
	WEB_URL,
	
	/** The postback. */
	@SerializedName(""postback"")
	POSTBACK,
	
	/** The phone number. */
	@SerializedName(""phone_number"")
	PHONE_NUMBER,
	
	/** The element share. */
	@SerializedName(""element_share"")
	ELEMENT_SHARE,

	/** The account link. */
	@SerializedName(""account_link"")
	ACCOUNT_LINK,
	
	/** The account unlink. */
	@SerializedName(""account_unlink"")
	ACCOUNT_UNLINK,
	
	/** The payment. */
	@SerializedName(""payment"")
	PAYMENT,
	
	/** The nested. */
	@SerializedName(""nested"")
	NESTED;

}
","package co.aurasphere.botmill.fb.model.outcoming.template.button; public enum ButtonType { @SerializedName(""nested"")
	NESTED; }",0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.button; public enum ButtonType { @SerializedName(""nested"")
	NESTED; } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.button; 
import com.google.gson.annotations.SerializedName; 
  public enum ButtonType { /**
 * The Enum for WebViewHeightRatioType.
 *
 * @author Alvin Reyes
 * 
 */  /** The web url. */ 	 /** The postback. */ 	 /** The phone number. */ 	 /** The element share. */  /** The account link. */ 	 /** The account unlink. */ 	 /** The payment. */ 	 @SerializedName(""nested"")
	NESTED; /** The nested. */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/button/BuyButton.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.button;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotBlank;

import com.google.gson.annotations.SerializedName;


/**
 * The Buy Button Class/Object.
 *
 * @author Alvin Reyes
 * 
 */
public class BuyButton extends Button {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The payload. */
	@Size(max = 1000)
	@NotBlank
	private String payload;

	/** The payment summary. */
	@Valid
	@NotNull
	@SerializedName(""payment_summary"")
	private PaymentSummary paymentSummary;

	/**
	 * The button title.
	 */
	@Size(max = 20)
	@NotBlank
	protected String title;

	/**
	 * Instantiates a new buy button.
	 * 
	 * @param payload
	 *            the payload
	 */
	public BuyButton(String payload) {
		// Buy button title must be buy
		this.title = ""buy"";
		this.type = ButtonType.PAYMENT;
		this.payload = payload;
	}

	/**
	 * Instantiates a new buy button.
	 *
	 * @param payload
	 *            the payload
	 * @param paymentSummary
	 *            the payment summary
	 */
	public BuyButton(String payload, PaymentSummary paymentSummary) {
		this(payload);
		this.paymentSummary = paymentSummary;
	}

	/**
	 * Gets the payload.
	 *
	 * @return the payload
	 */
	public String getPayload() {
		return payload;
	}

	/**
	 * Sets the payload.
	 *
	 * @param payload
	 *            the new payload
	 */
	public void setPayload(String payload) {
		this.payload = payload;
	}

	/**
	 * Gets the payment summary.
	 *
	 * @return the payment summary
	 */
	public PaymentSummary getPaymentSummary() {
		return paymentSummary;
	}

	/**
	 * Sets the payment summary.
	 *
	 * @param paymentSummary
	 *            the new payment summary
	 */
	public void setPaymentSummary(PaymentSummary paymentSummary) {
		this.paymentSummary = paymentSummary;
	}

	/**
	 * Gets the title.
	 *
	 * @return the title
	 */
	public String getTitle() {
		return title;
	}

	/**
	 * Sets the title.
	 *
	 * @param title
	 *            the new title
	 */
	public void setTitle(String title) {
		this.title = title;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#hashCode
	 * ()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((payload == null) ? 0 : payload.hashCode());
		result = prime * result
				+ ((paymentSummary == null) ? 0 : paymentSummary.hashCode());
		result = prime * result + ((title == null) ? 0 : title.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#equals
	 * (java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		BuyButton other = (BuyButton) obj;
		if (payload == null) {
			if (other.payload != null)
				return false;
		} else if (!payload.equals(other.payload))
			return false;
		if (paymentSummary == null) {
			if (other.paymentSummary != null)
				return false;
		} else if (!paymentSummary.equals(other.paymentSummary))
			return false;
		if (title == null) {
			if (other.title != null)
				return false;
		} else if (!title.equals(other.title))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#toString
	 * ()
	 */
	@Override
	public String toString() {
		return ""BuyButton [payload="" + payload + "", paymentSummary=""
				+ paymentSummary + "", title="" + title + "", type="" + type + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.template.button; public class BuyButton extends Button { private static final long serialVersionUID = 1L; @Size(max = 1000)
	@NotBlank
	private String payload; @Valid
	@NotNull
	@SerializedName(""payment_summary"")
	private PaymentSummary paymentSummary; @Size(max = 20)
	@NotBlank
	protected String title; public BuyButton(String payload) { this.title = ""buy""; this.type = ButtonType.PAYMENT; this.payload = payload; } public BuyButton(String payload, PaymentSummary paymentSummary) { this(payload); this.paymentSummary = paymentSummary; } public String getPayload() { return payload; } public void setPayload(String payload) { this.payload = payload; } public PaymentSummary getPaymentSummary() { return paymentSummary; } public void setPaymentSummary(PaymentSummary paymentSummary) { this.paymentSummary = paymentSummary; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((payload == null) ? 0 : payload.hashCode()); result = prime * result
				+ ((paymentSummary == null) ? 0 : paymentSummary.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; BuyButton other = (BuyButton) obj; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; if (paymentSummary == null) { if (other.paymentSummary != null)
				return false; } else if (!paymentSummary.equals(other.paymentSummary))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; return true; } @Override
	public String toString() { return ""BuyButton [payload="" + payload + "", paymentSummary=""
				+ paymentSummary + "", title="" + title + "", type="" + type + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.button; public class BuyButton extends Button { private static final long serialVersionUID = 1L; @Size(max = 1000)
	@NotBlank
	private String payload; @Valid
	@NotNull
	@SerializedName(""payment_summary"")
	private PaymentSummary paymentSummary; @Size(max = 20)
	@NotBlank
	protected String title; public BuyButton(String payload) { this.title = ""buy""; this.type = ButtonType.PAYMENT; this.payload = payload; } public BuyButton(String payload, PaymentSummary paymentSummary) { this(payload); this.paymentSummary = paymentSummary; } public String getPayload() { return payload; } public void setPayload(String payload) { this.payload = payload; } public PaymentSummary getPaymentSummary() { return paymentSummary; } public void setPaymentSummary(PaymentSummary paymentSummary) { this.paymentSummary = paymentSummary; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((payload == null) ? 0 : payload.hashCode()); result = prime * result
				+ ((paymentSummary == null) ? 0 : paymentSummary.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; BuyButton other = (BuyButton) obj; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; if (paymentSummary == null) { if (other.paymentSummary != null)
				return false; } else if (!paymentSummary.equals(other.paymentSummary))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; return true; } @Override
	public String toString() { return ""BuyButton [payload="" + payload + "", paymentSummary=""
				+ paymentSummary + "", title="" + title + "", type="" + type + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.button; 
import javax.validation.Valid; import javax.validation.constraints.NotNull; import javax.validation.constraints.Size; 
import org.hibernate.validator.constraints.NotBlank; 
import com.google.gson.annotations.SerializedName; 
  public class BuyButton extends Button { /**
 * The Buy Button Class/Object.
 *
 * @author Alvin Reyes
 * 
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @Size(max = 1000)
	@NotBlank
	private String payload; /** The payload. */  @Valid
	@NotNull
	@SerializedName(""payment_summary"")
	private PaymentSummary paymentSummary; /** The payment summary. */  @Size(max = 20)
	@NotBlank
	protected String title; /**
	 * The button title.
	 */  public BuyButton(String payload) { /**
	 * Instantiates a new buy button.
	 * 
	 * @param payload
	 *            the payload
	 */ this.title = ""buy""; this.type = ButtonType.PAYMENT; this.payload = payload; } // Buy button title must be buy  public BuyButton(String payload, PaymentSummary paymentSummary) { this(payload); this.paymentSummary = paymentSummary; } /**
	 * Instantiates a new buy button.
	 *
	 * @param payload
	 *            the payload
	 * @param paymentSummary
	 *            the payment summary
	 */  public String getPayload() { return payload; } /**
	 * Gets the payload.
	 *
	 * @return the payload
	 */  public void setPayload(String payload) { this.payload = payload; } /**
	 * Sets the payload.
	 *
	 * @param payload
	 *            the new payload
	 */  public PaymentSummary getPaymentSummary() { return paymentSummary; } /**
	 * Gets the payment summary.
	 *
	 * @return the payment summary
	 */  public void setPaymentSummary(PaymentSummary paymentSummary) { this.paymentSummary = paymentSummary; } /**
	 * Sets the payment summary.
	 *
	 * @param paymentSummary
	 *            the new payment summary
	 */  public String getTitle() { return title; } /**
	 * Gets the title.
	 *
	 * @return the title
	 */  public void setTitle(String title) { this.title = title; } /**
	 * Sets the title.
	 *
	 * @param title
	 *            the new title
	 */  @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((payload == null) ? 0 : payload.hashCode()); result = prime * result
				+ ((paymentSummary == null) ? 0 : paymentSummary.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#hashCode
	 * ()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; BuyButton other = (BuyButton) obj; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; if (paymentSummary == null) { if (other.paymentSummary != null)
				return false; } else if (!paymentSummary.equals(other.paymentSummary))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#equals
	 * (java.lang.Object)
	 */  @Override
	public String toString() { return ""BuyButton [payload="" + payload + "", paymentSummary=""
				+ paymentSummary + "", title="" + title + "", type="" + type + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#toString
	 * ()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/button/LoginButton.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.button;

import org.hibernate.validator.constraints.NotBlank;


/**
 * The Login Class/Object.
 *
 * @author Alvin Reyes
 * 
 */
public class LoginButton extends Button {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The url. */
	@NotBlank
	private String url;

	/**
	 * Instantiates a new login button.
	 *
	 * @param url
	 *            the url
	 */
	public LoginButton(String url) {
		this.type = ButtonType.ACCOUNT_LINK;
		this.url = url;
	}

	/**
	 * Gets the url.
	 *
	 * @return the url
	 */
	public String getUrl() {
		return url;
	}

	/**
	 * Sets the url.
	 *
	 * @param url
	 *            the new url
	 */
	public void setUrl(String url) {
		this.url = url;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#hashCode
	 * ()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((url == null) ? 0 : url.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#equals
	 * (java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		LoginButton other = (LoginButton) obj;
		if (url == null) {
			if (other.url != null)
				return false;
		} else if (!url.equals(other.url))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#toString
	 * ()
	 */
	@Override
	public String toString() {
		return ""LoginButton [url="" + url + "", type="" + type + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.template.button; public class LoginButton extends Button { private static final long serialVersionUID = 1L; @NotBlank
	private String url; public LoginButton(String url) { this.type = ButtonType.ACCOUNT_LINK; this.url = url; } public String getUrl() { return url; } public void setUrl(String url) { this.url = url; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((url == null) ? 0 : url.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; LoginButton other = (LoginButton) obj; if (url == null) { if (other.url != null)
				return false; } else if (!url.equals(other.url))
			return false; return true; } @Override
	public String toString() { return ""LoginButton [url="" + url + "", type="" + type + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.button; public class LoginButton extends Button { private static final long serialVersionUID = 1L; @NotBlank
	private String url; public LoginButton(String url) { this.type = ButtonType.ACCOUNT_LINK; this.url = url; } public String getUrl() { return url; } public void setUrl(String url) { this.url = url; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((url == null) ? 0 : url.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; LoginButton other = (LoginButton) obj; if (url == null) { if (other.url != null)
				return false; } else if (!url.equals(other.url))
			return false; return true; } @Override
	public String toString() { return ""LoginButton [url="" + url + "", type="" + type + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.button; 
import org.hibernate.validator.constraints.NotBlank; 
  public class LoginButton extends Button { /**
 * The Login Class/Object.
 *
 * @author Alvin Reyes
 * 
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @NotBlank
	private String url; /** The url. */  public LoginButton(String url) { this.type = ButtonType.ACCOUNT_LINK; this.url = url; } /**
	 * Instantiates a new login button.
	 *
	 * @param url
	 *            the url
	 */  public String getUrl() { return url; } /**
	 * Gets the url.
	 *
	 * @return the url
	 */  public void setUrl(String url) { this.url = url; } /**
	 * Sets the url.
	 *
	 * @param url
	 *            the new url
	 */  @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((url == null) ? 0 : url.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#hashCode
	 * ()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; LoginButton other = (LoginButton) obj; if (url == null) { if (other.url != null)
				return false; } else if (!url.equals(other.url))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#equals
	 * (java.lang.Object)
	 */  @Override
	public String toString() { return ""LoginButton [url="" + url + "", type="" + type + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#toString
	 * ()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/button/LogoutButton.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.button;


/**
 * The Logout Button Class/Object.
 *
 * @author Alvin Reyes
 * 
 */
public class LogoutButton extends Button {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/**
	 * Instantiates a new logout button.
	 */
	public LogoutButton() {
		this.type = ButtonType.ACCOUNT_UNLINK;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#toString
	 * ()
	 */
	@Override
	public String toString() {
		return ""LogoutButton [type="" + type + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.template.button; public class LogoutButton extends Button { private static final long serialVersionUID = 1L; public LogoutButton() { this.type = ButtonType.ACCOUNT_UNLINK; } @Override
	public String toString() { return ""LogoutButton [type="" + type + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.button; public class LogoutButton extends Button { private static final long serialVersionUID = 1L; public LogoutButton() { this.type = ButtonType.ACCOUNT_UNLINK; } @Override
	public String toString() { return ""LogoutButton [type="" + type + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.button; 
  public class LogoutButton extends Button { /**
 * The Logout Button Class/Object.
 *
 * @author Alvin Reyes
 * 
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  public LogoutButton() { this.type = ButtonType.ACCOUNT_UNLINK; } /**
	 * Instantiates a new logout button.
	 */  @Override
	public String toString() { return ""LogoutButton [type="" + type + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#toString
	 * ()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/button/PaymentSummary.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.button;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.hibernate.validator.constraints.NotBlank;
import org.hibernate.validator.constraints.NotEmpty;

import com.google.gson.annotations.SerializedName;


/**
 * The Payment Summary Class/Object.
 *
 * @author Alvin Reyes
 * 
 */
public class PaymentSummary implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The currency. */
	@NotBlank
	private String currency;

	/** The is test payment. */
	@SerializedName(""is_test_payment"")
	private boolean isTestPayment;

	/** The payment type. */
	@NotNull
	@SerializedName(""payment_type"")
	private PaymentType paymentType;

	/** The merchant name. */
	@NotBlank
	@SerializedName(""merchant_name"")
	private String merchantName;

	/** The price list. */
	@Valid
	@NotEmpty
	@SerializedName(""price_list"")
	private List<PriceLabel> priceList;

	/** The requested user info. */
	@Valid
	@NotNull
	@SerializedName(""requested_user_info"")
	private List<RequestedUserInfo> requestedUserInfo;

	/**
	 * Instantiates a new payment summary.
	 */
	public PaymentSummary() {
		this.priceList = new ArrayList<PriceLabel>();
		this.requestedUserInfo = new ArrayList<RequestedUserInfo>();
	}

	/**
	 * Gets the currency.
	 *
	 * @return the currency
	 */
	public String getCurrency() {
		return currency;
	}

	/**
	 * Sets the currency.
	 *
	 * @param currency
	 *            the new currency
	 */
	public void setCurrency(String currency) {
		this.currency = currency;
	}

	/**
	 * Checks if is test payment.
	 *
	 * @return true, if is test payment
	 */
	public boolean isTestPayment() {
		return isTestPayment;
	}

	/**
	 * Sets the test payment.
	 *
	 * @param isTestPayment
	 *            the new test payment
	 */
	public void setTestPayment(boolean isTestPayment) {
		this.isTestPayment = isTestPayment;
	}

	/**
	 * Gets the payment type.
	 *
	 * @return the payment type
	 */
	public PaymentType getPaymentType() {
		return paymentType;
	}

	/**
	 * Sets the payment type.
	 *
	 * @param paymentType
	 *            the new payment type
	 */
	public void setPaymentType(PaymentType paymentType) {
		this.paymentType = paymentType;
	}

	/**
	 * Gets the merchant name.
	 *
	 * @return the merchant name
	 */
	public String getMerchantName() {
		return merchantName;
	}

	/**
	 * Sets the merchant name.
	 *
	 * @param merchantName
	 *            the new merchant name
	 */
	public void setMerchantName(String merchantName) {
		this.merchantName = merchantName;
	}

	/**
	 * Gets the price list.
	 *
	 * @return the price list
	 */
	public List<PriceLabel> getPriceList() {
		return priceList;
	}

	/**
	 * Sets the price list.
	 *
	 * @param priceList
	 *            the new price list
	 */
	public void setPriceList(List<PriceLabel> priceList) {
		this.priceList = priceList;
	}

	/**
	 * Adds the price label.
	 *
	 * @param priceLabel the price label
	 */
	public void addPriceLabel(PriceLabel priceLabel) {
		this.priceList.add(priceLabel);
	}

	/**
	 * Gets the requested user info.
	 *
	 * @return the requested user info
	 */
	public List<RequestedUserInfo> getRequestedUserInfo() {
		return requestedUserInfo;
	}

	/**
	 * Sets the requested user info.
	 *
	 * @param requestedUserInfo
	 *            the new requested user info
	 */
	public void setRequestedUserInfo(List<RequestedUserInfo> requestedUserInfo) {
		this.requestedUserInfo = requestedUserInfo;
	}

	/**
	 * Adds the requested user info.
	 *
	 * @param requestedUserInfo
	 *            the requested user info to add
	 */
	public void addRequestedUserInfo(RequestedUserInfo requestedUserInfo) {
		this.requestedUserInfo.add(requestedUserInfo);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((currency == null) ? 0 : currency.hashCode());
		result = prime * result + (isTestPayment ? 1231 : 1237);
		result = prime * result
				+ ((merchantName == null) ? 0 : merchantName.hashCode());
		result = prime * result
				+ ((paymentType == null) ? 0 : paymentType.hashCode());
		result = prime * result
				+ ((priceList == null) ? 0 : priceList.hashCode());
		result = prime
				* result
				+ ((requestedUserInfo == null) ? 0 : requestedUserInfo
						.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		PaymentSummary other = (PaymentSummary) obj;
		if (currency == null) {
			if (other.currency != null)
				return false;
		} else if (!currency.equals(other.currency))
			return false;
		if (isTestPayment != other.isTestPayment)
			return false;
		if (merchantName == null) {
			if (other.merchantName != null)
				return false;
		} else if (!merchantName.equals(other.merchantName))
			return false;
		if (paymentType != other.paymentType)
			return false;
		if (priceList == null) {
			if (other.priceList != null)
				return false;
		} else if (!priceList.equals(other.priceList))
			return false;
		if (requestedUserInfo == null) {
			if (other.requestedUserInfo != null)
				return false;
		} else if (!requestedUserInfo.equals(other.requestedUserInfo))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""PaymentSummary [currency="" + currency + "", isTestPayment=""
				+ isTestPayment + "", paymentType="" + paymentType
				+ "", merchantName="" + merchantName + "", priceList="" + priceList
				+ "", requestedUserInfo="" + requestedUserInfo + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.template.button; public class PaymentSummary implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	private String currency; @SerializedName(""is_test_payment"")
	private boolean isTestPayment; @NotNull
	@SerializedName(""payment_type"")
	private PaymentType paymentType; @NotBlank
	@SerializedName(""merchant_name"")
	private String merchantName; @Valid
	@NotEmpty
	@SerializedName(""price_list"")
	private List<PriceLabel> priceList; @Valid
	@NotNull
	@SerializedName(""requested_user_info"")
	private List<RequestedUserInfo> requestedUserInfo; public PaymentSummary() { this.priceList = new ArrayList<PriceLabel>(); this.requestedUserInfo = new ArrayList<RequestedUserInfo>(); } public String getCurrency() { return currency; } public void setCurrency(String currency) { this.currency = currency; } public boolean isTestPayment() { return isTestPayment; } public void setTestPayment(boolean isTestPayment) { this.isTestPayment = isTestPayment; } public PaymentType getPaymentType() { return paymentType; } public void setPaymentType(PaymentType paymentType) { this.paymentType = paymentType; } public String getMerchantName() { return merchantName; } public void setMerchantName(String merchantName) { this.merchantName = merchantName; } public List<PriceLabel> getPriceList() { return priceList; } public void setPriceList(List<PriceLabel> priceList) { this.priceList = priceList; } public void addPriceLabel(PriceLabel priceLabel) { this.priceList.add(priceLabel); } public List<RequestedUserInfo> getRequestedUserInfo() { return requestedUserInfo; } public void setRequestedUserInfo(List<RequestedUserInfo> requestedUserInfo) { this.requestedUserInfo = requestedUserInfo; } public void addRequestedUserInfo(RequestedUserInfo requestedUserInfo) { this.requestedUserInfo.add(requestedUserInfo); } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((currency == null) ? 0 : currency.hashCode()); result = prime * result + (isTestPayment ? 1231 : 1237); result = prime * result
				+ ((merchantName == null) ? 0 : merchantName.hashCode()); result = prime * result
				+ ((paymentType == null) ? 0 : paymentType.hashCode()); result = prime * result
				+ ((priceList == null) ? 0 : priceList.hashCode()); result = prime
				* result
				+ ((requestedUserInfo == null) ? 0 : requestedUserInfo
						.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PaymentSummary other = (PaymentSummary) obj; if (currency == null) { if (other.currency != null)
				return false; } else if (!currency.equals(other.currency))
			return false; if (isTestPayment != other.isTestPayment)
			return false; if (merchantName == null) { if (other.merchantName != null)
				return false; } else if (!merchantName.equals(other.merchantName))
			return false; if (paymentType != other.paymentType)
			return false; if (priceList == null) { if (other.priceList != null)
				return false; } else if (!priceList.equals(other.priceList))
			return false; if (requestedUserInfo == null) { if (other.requestedUserInfo != null)
				return false; } else if (!requestedUserInfo.equals(other.requestedUserInfo))
			return false; return true; } @Override
	public String toString() { return ""PaymentSummary [currency="" + currency + "", isTestPayment=""
				+ isTestPayment + "", paymentType="" + paymentType
				+ "", merchantName="" + merchantName + "", priceList="" + priceList
				+ "", requestedUserInfo="" + requestedUserInfo + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.button; public class PaymentSummary implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	private String currency; @SerializedName(""is_test_payment"")
	private boolean isTestPayment; @NotNull
	@SerializedName(""payment_type"")
	private PaymentType paymentType; @NotBlank
	@SerializedName(""merchant_name"")
	private String merchantName; @Valid
	@NotEmpty
	@SerializedName(""price_list"")
	private List<PriceLabel> priceList; @Valid
	@NotNull
	@SerializedName(""requested_user_info"")
	private List<RequestedUserInfo> requestedUserInfo; public PaymentSummary() { this.priceList = new ArrayList<PriceLabel>(); this.requestedUserInfo = new ArrayList<RequestedUserInfo>(); } public String getCurrency() { return currency; } public void setCurrency(String currency) { this.currency = currency; } public boolean isTestPayment() { return isTestPayment; } public void setTestPayment(boolean isTestPayment) { this.isTestPayment = isTestPayment; } public PaymentType getPaymentType() { return paymentType; } public void setPaymentType(PaymentType paymentType) { this.paymentType = paymentType; } public String getMerchantName() { return merchantName; } public void setMerchantName(String merchantName) { this.merchantName = merchantName; } public List<PriceLabel> getPriceList() { return priceList; } public void setPriceList(List<PriceLabel> priceList) { this.priceList = priceList; } public void addPriceLabel(PriceLabel priceLabel) { this.priceList.add(priceLabel); } public List<RequestedUserInfo> getRequestedUserInfo() { return requestedUserInfo; } public void setRequestedUserInfo(List<RequestedUserInfo> requestedUserInfo) { this.requestedUserInfo = requestedUserInfo; } public void addRequestedUserInfo(RequestedUserInfo requestedUserInfo) { this.requestedUserInfo.add(requestedUserInfo); } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((currency == null) ? 0 : currency.hashCode()); result = prime * result + (isTestPayment ? 1231 : 1237); result = prime * result
				+ ((merchantName == null) ? 0 : merchantName.hashCode()); result = prime * result
				+ ((paymentType == null) ? 0 : paymentType.hashCode()); result = prime * result
				+ ((priceList == null) ? 0 : priceList.hashCode()); result = prime
				* result
				+ ((requestedUserInfo == null) ? 0 : requestedUserInfo
						.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PaymentSummary other = (PaymentSummary) obj; if (currency == null) { if (other.currency != null)
				return false; } else if (!currency.equals(other.currency))
			return false; if (isTestPayment != other.isTestPayment)
			return false; if (merchantName == null) { if (other.merchantName != null)
				return false; } else if (!merchantName.equals(other.merchantName))
			return false; if (paymentType != other.paymentType)
			return false; if (priceList == null) { if (other.priceList != null)
				return false; } else if (!priceList.equals(other.priceList))
			return false; if (requestedUserInfo == null) { if (other.requestedUserInfo != null)
				return false; } else if (!requestedUserInfo.equals(other.requestedUserInfo))
			return false; return true; } @Override
	public String toString() { return ""PaymentSummary [currency="" + currency + "", isTestPayment=""
				+ isTestPayment + "", paymentType="" + paymentType
				+ "", merchantName="" + merchantName + "", priceList="" + priceList
				+ "", requestedUserInfo="" + requestedUserInfo + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.button; 
import java.io.Serializable; import java.util.ArrayList; import java.util.List; 
import javax.validation.Valid; import javax.validation.constraints.NotNull; 
import org.hibernate.validator.constraints.NotBlank; import org.hibernate.validator.constraints.NotEmpty; 
import com.google.gson.annotations.SerializedName; 
  public class PaymentSummary implements Serializable { /**
 * The Payment Summary Class/Object.
 *
 * @author Alvin Reyes
 * 
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @NotBlank
	private String currency; /** The currency. */  @SerializedName(""is_test_payment"")
	private boolean isTestPayment; /** The is test payment. */  @NotNull
	@SerializedName(""payment_type"")
	private PaymentType paymentType; /** The payment type. */  @NotBlank
	@SerializedName(""merchant_name"")
	private String merchantName; /** The merchant name. */  @Valid
	@NotEmpty
	@SerializedName(""price_list"")
	private List<PriceLabel> priceList; /** The price list. */  @Valid
	@NotNull
	@SerializedName(""requested_user_info"")
	private List<RequestedUserInfo> requestedUserInfo; /** The requested user info. */  public PaymentSummary() { this.priceList = new ArrayList<PriceLabel>(); this.requestedUserInfo = new ArrayList<RequestedUserInfo>(); } /**
	 * Instantiates a new payment summary.
	 */  public String getCurrency() { return currency; } /**
	 * Gets the currency.
	 *
	 * @return the currency
	 */  public void setCurrency(String currency) { this.currency = currency; } /**
	 * Sets the currency.
	 *
	 * @param currency
	 *            the new currency
	 */  public boolean isTestPayment() { return isTestPayment; } /**
	 * Checks if is test payment.
	 *
	 * @return true, if is test payment
	 */  public void setTestPayment(boolean isTestPayment) { this.isTestPayment = isTestPayment; } /**
	 * Sets the test payment.
	 *
	 * @param isTestPayment
	 *            the new test payment
	 */  public PaymentType getPaymentType() { return paymentType; } /**
	 * Gets the payment type.
	 *
	 * @return the payment type
	 */  public void setPaymentType(PaymentType paymentType) { this.paymentType = paymentType; } /**
	 * Sets the payment type.
	 *
	 * @param paymentType
	 *            the new payment type
	 */  public String getMerchantName() { return merchantName; } /**
	 * Gets the merchant name.
	 *
	 * @return the merchant name
	 */  public void setMerchantName(String merchantName) { this.merchantName = merchantName; } /**
	 * Sets the merchant name.
	 *
	 * @param merchantName
	 *            the new merchant name
	 */  public List<PriceLabel> getPriceList() { return priceList; } /**
	 * Gets the price list.
	 *
	 * @return the price list
	 */  public void setPriceList(List<PriceLabel> priceList) { this.priceList = priceList; } /**
	 * Sets the price list.
	 *
	 * @param priceList
	 *            the new price list
	 */  public void addPriceLabel(PriceLabel priceLabel) { this.priceList.add(priceLabel); } /**
	 * Adds the price label.
	 *
	 * @param priceLabel the price label
	 */  public List<RequestedUserInfo> getRequestedUserInfo() { return requestedUserInfo; } /**
	 * Gets the requested user info.
	 *
	 * @return the requested user info
	 */  public void setRequestedUserInfo(List<RequestedUserInfo> requestedUserInfo) { this.requestedUserInfo = requestedUserInfo; } /**
	 * Sets the requested user info.
	 *
	 * @param requestedUserInfo
	 *            the new requested user info
	 */  public void addRequestedUserInfo(RequestedUserInfo requestedUserInfo) { this.requestedUserInfo.add(requestedUserInfo); } /**
	 * Adds the requested user info.
	 *
	 * @param requestedUserInfo
	 *            the requested user info to add
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((currency == null) ? 0 : currency.hashCode()); result = prime * result + (isTestPayment ? 1231 : 1237); result = prime * result
				+ ((merchantName == null) ? 0 : merchantName.hashCode()); result = prime * result
				+ ((paymentType == null) ? 0 : paymentType.hashCode()); result = prime * result
				+ ((priceList == null) ? 0 : priceList.hashCode()); result = prime
				* result
				+ ((requestedUserInfo == null) ? 0 : requestedUserInfo
						.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PaymentSummary other = (PaymentSummary) obj; if (currency == null) { if (other.currency != null)
				return false; } else if (!currency.equals(other.currency))
			return false; if (isTestPayment != other.isTestPayment)
			return false; if (merchantName == null) { if (other.merchantName != null)
				return false; } else if (!merchantName.equals(other.merchantName))
			return false; if (paymentType != other.paymentType)
			return false; if (priceList == null) { if (other.priceList != null)
				return false; } else if (!priceList.equals(other.priceList))
			return false; if (requestedUserInfo == null) { if (other.requestedUserInfo != null)
				return false; } else if (!requestedUserInfo.equals(other.requestedUserInfo))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""PaymentSummary [currency="" + currency + "", isTestPayment=""
				+ isTestPayment + "", paymentType="" + paymentType
				+ "", merchantName="" + merchantName + "", priceList="" + priceList
				+ "", requestedUserInfo="" + requestedUserInfo + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/button/PaymentType.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.button;


/**
 * The Enum PaymentType.
 */
public enum PaymentType {

	/** The fixed amount. */
	FIXED_AMOUNT,
	
	/** The flexible amount. */
	FLEXIBLE_AMOUNT;
}
",package co.aurasphere.botmill.fb.model.outcoming.template.button; public enum PaymentType { FLEXIBLE_AMOUNT; },0 0 0 0 0,package co.aurasphere.botmill.fb.model.outcoming.template.button; public enum PaymentType { FLEXIBLE_AMOUNT; } ,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.button; 
  public enum PaymentType { /**
 * The Enum PaymentType.
 */  /** The fixed amount. */ 	 FLEXIBLE_AMOUNT; } /** The flexible amount. */ "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/button/PostbackButton.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.button;

import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotBlank;


/**
 * The Class PostbackButton.
 */
public class PostbackButton extends Button {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/**
	 * For postback buttons, this data will be sent back to you via webhook. For
	 * phone_number buttons, this must be a well formatted phone number i.e.
	 * must be '+' prefix followed by the country code, area code and local
	 * number.
	 */
	@Size(max = 1000)
	@NotBlank
	private String payload;

	/**
	 * The button title.
	 */
	@Size(max = 20)
	@NotBlank
	protected String title;

	/**
	 * Instantiates a new postback button.
	 *
	 * @param title
	 *            the title
	 * @param type
	 *            the type
	 * @param payload
	 *            the payload
	 */
	public PostbackButton(String title, ButtonType type, String payload) {
		this.title = title;
		this.type = type;
		this.payload = payload;
	}

	/**
	 * Gets the payload.
	 *
	 * @return the payload
	 */
	public String getPayload() {
		return payload;
	}

	/**
	 * Sets the payload.
	 *
	 * @param payload
	 *            the new payload
	 */
	public void setPayload(String payload) {
		this.payload = payload;
	}

	/**
	 * Gets the title.
	 *
	 * @return the title
	 */
	public String getTitle() {
		return title;
	}

	/**
	 * Sets the title.
	 *
	 * @param title
	 *            the new title
	 */
	public void setTitle(String title) {
		this.title = title;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#hashCode
	 * ()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((payload == null) ? 0 : payload.hashCode());
		result = prime * result + ((title == null) ? 0 : title.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#equals
	 * (java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		PostbackButton other = (PostbackButton) obj;
		if (payload == null) {
			if (other.payload != null)
				return false;
		} else if (!payload.equals(other.payload))
			return false;
		if (title == null) {
			if (other.title != null)
				return false;
		} else if (!title.equals(other.title))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#toString
	 * ()
	 */
	@Override
	public String toString() {
		return ""PostbackButton [payload="" + payload + "", title="" + title
				+ "", type="" + type + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.template.button; public class PostbackButton extends Button { private static final long serialVersionUID = 1L; @Size(max = 1000)
	@NotBlank
	private String payload; @Size(max = 20)
	@NotBlank
	protected String title; public PostbackButton(String title, ButtonType type, String payload) { this.title = title; this.type = type; this.payload = payload; } public String getPayload() { return payload; } public void setPayload(String payload) { this.payload = payload; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((payload == null) ? 0 : payload.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; PostbackButton other = (PostbackButton) obj; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; return true; } @Override
	public String toString() { return ""PostbackButton [payload="" + payload + "", title="" + title
				+ "", type="" + type + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.button; public class PostbackButton extends Button { private static final long serialVersionUID = 1L; @Size(max = 1000)
	@NotBlank
	private String payload; @Size(max = 20)
	@NotBlank
	protected String title; public PostbackButton(String title, ButtonType type, String payload) { this.title = title; this.type = type; this.payload = payload; } public String getPayload() { return payload; } public void setPayload(String payload) { this.payload = payload; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((payload == null) ? 0 : payload.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; PostbackButton other = (PostbackButton) obj; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; return true; } @Override
	public String toString() { return ""PostbackButton [payload="" + payload + "", title="" + title
				+ "", type="" + type + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.button; 
import javax.validation.constraints.Size; 
import org.hibernate.validator.constraints.NotBlank; 
  public class PostbackButton extends Button { /**
 * The Class PostbackButton.
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @Size(max = 1000)
	@NotBlank
	private String payload; /**
	 * For postback buttons, this data will be sent back to you via webhook. For
	 * phone_number buttons, this must be a well formatted phone number i.e.
	 * must be '+' prefix followed by the country code, area code and local
	 * number.
	 */  @Size(max = 20)
	@NotBlank
	protected String title; /**
	 * The button title.
	 */  public PostbackButton(String title, ButtonType type, String payload) { this.title = title; this.type = type; this.payload = payload; } /**
	 * Instantiates a new postback button.
	 *
	 * @param title
	 *            the title
	 * @param type
	 *            the type
	 * @param payload
	 *            the payload
	 */  public String getPayload() { return payload; } /**
	 * Gets the payload.
	 *
	 * @return the payload
	 */  public void setPayload(String payload) { this.payload = payload; } /**
	 * Sets the payload.
	 *
	 * @param payload
	 *            the new payload
	 */  public String getTitle() { return title; } /**
	 * Gets the title.
	 *
	 * @return the title
	 */  public void setTitle(String title) { this.title = title; } /**
	 * Sets the title.
	 *
	 * @param title
	 *            the new title
	 */  @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((payload == null) ? 0 : payload.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#hashCode
	 * ()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; PostbackButton other = (PostbackButton) obj; if (payload == null) { if (other.payload != null)
				return false; } else if (!payload.equals(other.payload))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#equals
	 * (java.lang.Object)
	 */  @Override
	public String toString() { return ""PostbackButton [payload="" + payload + "", title="" + title
				+ "", type="" + type + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#toString
	 * ()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/button/PriceLabel.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.button;

import java.io.Serializable;

import javax.validation.constraints.NotNull;


/**
 * The PriceList Class/Object.
 *
 * @author Alvin Reyes
 */
public class PriceLabel implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The label. */
	@NotNull
	private String label;

	/** The amount. */
	@NotNull
	private String amount;

	/**
	 * Instantiates a new price label.
	 *
	 * @param label the label
	 * @param amount the amount
	 */
	public PriceLabel(String label, String amount) {
		this.label = label;
		this.amount = amount;
	}

	/**
	 * Gets the label.
	 *
	 * @return the label
	 */
	public String getLabel() {
		return label;
	}

	/**
	 * Sets the label.
	 *
	 * @param label the new label
	 */
	public void setLabel(String label) {
		this.label = label;
	}

	/**
	 * Gets the amount.
	 *
	 * @return the amount
	 */
	public String getAmount() {
		return amount;
	}

	/**
	 * Sets the amount.
	 *
	 * @param amount the new amount
	 */
	public void setAmount(String amount) {
		this.amount = amount;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((amount == null) ? 0 : amount.hashCode());
		result = prime * result + ((label == null) ? 0 : label.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		PriceLabel other = (PriceLabel) obj;
		if (amount == null) {
			if (other.amount != null)
				return false;
		} else if (!amount.equals(other.amount))
			return false;
		if (label == null) {
			if (other.label != null)
				return false;
		} else if (!label.equals(other.label))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""PriceLabel [label="" + label + "", amount="" + amount + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.template.button; public class PriceLabel implements Serializable { private static final long serialVersionUID = 1L; @NotNull
	private String label; @NotNull
	private String amount; public PriceLabel(String label, String amount) { this.label = label; this.amount = amount; } public String getLabel() { return label; } public void setLabel(String label) { this.label = label; } public String getAmount() { return amount; } public void setAmount(String amount) { this.amount = amount; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((amount == null) ? 0 : amount.hashCode()); result = prime * result + ((label == null) ? 0 : label.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PriceLabel other = (PriceLabel) obj; if (amount == null) { if (other.amount != null)
				return false; } else if (!amount.equals(other.amount))
			return false; if (label == null) { if (other.label != null)
				return false; } else if (!label.equals(other.label))
			return false; return true; } @Override
	public String toString() { return ""PriceLabel [label="" + label + "", amount="" + amount + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.button; public class PriceLabel implements Serializable { private static final long serialVersionUID = 1L; @NotNull
	private String label; @NotNull
	private String amount; public PriceLabel(String label, String amount) { this.label = label; this.amount = amount; } public String getLabel() { return label; } public void setLabel(String label) { this.label = label; } public String getAmount() { return amount; } public void setAmount(String amount) { this.amount = amount; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((amount == null) ? 0 : amount.hashCode()); result = prime * result + ((label == null) ? 0 : label.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PriceLabel other = (PriceLabel) obj; if (amount == null) { if (other.amount != null)
				return false; } else if (!amount.equals(other.amount))
			return false; if (label == null) { if (other.label != null)
				return false; } else if (!label.equals(other.label))
			return false; return true; } @Override
	public String toString() { return ""PriceLabel [label="" + label + "", amount="" + amount + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.button; 
import java.io.Serializable; 
import javax.validation.constraints.NotNull; 
  public class PriceLabel implements Serializable { /**
 * The PriceList Class/Object.
 *
 * @author Alvin Reyes
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @NotNull
	private String label; /** The label. */  @NotNull
	private String amount; /** The amount. */  public PriceLabel(String label, String amount) { this.label = label; this.amount = amount; } /**
	 * Instantiates a new price label.
	 *
	 * @param label the label
	 * @param amount the amount
	 */  public String getLabel() { return label; } /**
	 * Gets the label.
	 *
	 * @return the label
	 */  public void setLabel(String label) { this.label = label; } /**
	 * Sets the label.
	 *
	 * @param label the new label
	 */  public String getAmount() { return amount; } /**
	 * Gets the amount.
	 *
	 * @return the amount
	 */  public void setAmount(String amount) { this.amount = amount; } /**
	 * Sets the amount.
	 *
	 * @param amount the new amount
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((amount == null) ? 0 : amount.hashCode()); result = prime * result + ((label == null) ? 0 : label.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; PriceLabel other = (PriceLabel) obj; if (amount == null) { if (other.amount != null)
				return false; } else if (!amount.equals(other.amount))
			return false; if (label == null) { if (other.label != null)
				return false; } else if (!label.equals(other.label))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""PriceLabel [label="" + label + "", amount="" + amount + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/button/RequestedUserInfo.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.button;



/**
 * The RequestedUserInfo Class/Object.
 *
 * @author Alvin Reyes
 * 
 */
public enum RequestedUserInfo {

	/** The shipping address. */
	SHIPPING_ADDRESS,

	/** The contact name. */
	CONTACT_NAME,

	/** The contact phone. */
	CONTACT_PHONE,

	/** The contact email. */
	CONTACT_EMAIL;

}",package co.aurasphere.botmill.fb.model.outcoming.template.button; public enum RequestedUserInfo { CONTACT_EMAIL; },0 0 0 0,package co.aurasphere.botmill.fb.model.outcoming.template.button; public enum RequestedUserInfo { CONTACT_EMAIL; },"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.button; 

  public enum RequestedUserInfo { /**
 * The RequestedUserInfo Class/Object.
 *
 * @author Alvin Reyes
 * 
 */  /** The shipping address. */  /** The contact name. */  /** The contact phone. */  CONTACT_EMAIL; /** The contact email. */ }"
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/button/ShareButton.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.button;


/**
 * The Share Button Class/Object.
 *
 * @author Alvin Reyes
 * 
 */
public class ShareButton extends Button {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/**
	 * Instantiates a new share button.
	 */
	public ShareButton() {
		this.type = ButtonType.ELEMENT_SHARE;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#toString
	 * ()
	 */
	@Override
	public String toString() {
		return ""ShareButton [type="" + type + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.template.button; public class ShareButton extends Button { private static final long serialVersionUID = 1L; public ShareButton() { this.type = ButtonType.ELEMENT_SHARE; } @Override
	public String toString() { return ""ShareButton [type="" + type + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.button; public class ShareButton extends Button { private static final long serialVersionUID = 1L; public ShareButton() { this.type = ButtonType.ELEMENT_SHARE; } @Override
	public String toString() { return ""ShareButton [type="" + type + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.button; 
  public class ShareButton extends Button { /**
 * The Share Button Class/Object.
 *
 * @author Alvin Reyes
 * 
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  public ShareButton() { this.type = ButtonType.ELEMENT_SHARE; } /**
	 * Instantiates a new share button.
	 */  @Override
	public String toString() { return ""ShareButton [type="" + type + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#toString
	 * ()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/button/WebUrlButton.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.button;

import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotBlank;

import co.aurasphere.botmill.fb.model.outcoming.factory.ButtonFactory;

import com.google.gson.annotations.SerializedName;


/**
 * The WebUrlButton Class/Object.
 *
 * @author Alvin Reyes
 * 
 */
public class WebUrlButton extends Button {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The url. */
	@NotBlank
	private String url;

	/** The webview height ratio. */
	@SerializedName(""webview_height_ratio"")
	private WebViewHeightRatioType webviewHeightRatio;

	/** The fall back url. */
	@SerializedName(""fallback_url"")
	private String fallBackUrl;

	/** The messenger extension. */
	@SerializedName(""messenger_extensions"")
	private boolean messengerExtension;

	/**
	 * The button title.
	 */
	@Size(max = 20)
	@NotBlank
	protected String title;

	/**
	 * Default constructor. Can instantiate this object only through
	 * {@link ButtonFactory}. It checks that the title is not null, not empty
	 * and shorter than 20 characters and that the URL is not empty. The button
	 * type is set to {@link ButtonType#WEB_URL}.
	 * 
	 * @param title
	 *            the button title. It can't be null or empty and has to be
	 *            shorter than 20 characters.
	 * @param url
	 *            the button URL. It can't be null or empty.
	 */
	public WebUrlButton(String title, String url) {
		this.title = title;
		this.url = url;
		this.type = ButtonType.WEB_URL;
	}

	/**
	 * Instantiates a new web url button.
	 *
	 * @param title
	 *            the title
	 * @param url
	 *            the url
	 * @param ratioType
	 *            the ratio type
	 */
	public WebUrlButton(String title, String url,
			WebViewHeightRatioType ratioType) {
		this.title = title;
		this.url = url;
		this.type = ButtonType.WEB_URL;
		this.webviewHeightRatio = ratioType;
	}

	/**
	 * Gets the url.
	 *
	 * @return the url
	 */
	public String getUrl() {
		return url;
	}

	/**
	 * Sets the url.
	 *
	 * @param url
	 *            the new url
	 */
	public void setUrl(String url) {
		this.url = url;
	}

	/**
	 * Gets the title.
	 *
	 * @return the title
	 */
	public String getTitle() {
		return title;
	}

	/**
	 * Sets the title.
	 *
	 * @param title
	 *            the new title
	 */
	public void setTitle(String title) {
		this.title = title;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#hashCode
	 * ()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result
				+ ((fallBackUrl == null) ? 0 : fallBackUrl.hashCode());
		result = prime * result + (messengerExtension ? 1231 : 1237);
		result = prime * result + ((title == null) ? 0 : title.hashCode());
		result = prime * result + ((url == null) ? 0 : url.hashCode());
		result = prime
				* result
				+ ((webviewHeightRatio == null) ? 0 : webviewHeightRatio
						.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#equals
	 * (java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		WebUrlButton other = (WebUrlButton) obj;
		if (fallBackUrl == null) {
			if (other.fallBackUrl != null)
				return false;
		} else if (!fallBackUrl.equals(other.fallBackUrl))
			return false;
		if (messengerExtension != other.messengerExtension)
			return false;
		if (title == null) {
			if (other.title != null)
				return false;
		} else if (!title.equals(other.title))
			return false;
		if (url == null) {
			if (other.url != null)
				return false;
		} else if (!url.equals(other.url))
			return false;
		if (webviewHeightRatio != other.webviewHeightRatio)
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#toString
	 * ()
	 */
	@Override
	public String toString() {
		return ""WebUrlButton [url="" + url + "", webviewHeightRatio=""
				+ webviewHeightRatio + "", fallBackUrl="" + fallBackUrl
				+ "", messengerExtension="" + messengerExtension + "", title=""
				+ title + "", type="" + type + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.template.button; public class WebUrlButton extends Button { private static final long serialVersionUID = 1L; @NotBlank
	private String url; @SerializedName(""webview_height_ratio"")
	private WebViewHeightRatioType webviewHeightRatio; @SerializedName(""fallback_url"")
	private String fallBackUrl; @SerializedName(""messenger_extensions"")
	private boolean messengerExtension; @Size(max = 20)
	@NotBlank
	protected String title; public WebUrlButton(String title, String url) { this.title = title; this.url = url; this.type = ButtonType.WEB_URL; } public WebUrlButton(String title, String url,
			WebViewHeightRatioType ratioType) { this.title = title; this.url = url; this.type = ButtonType.WEB_URL; this.webviewHeightRatio = ratioType; } public String getUrl() { return url; } public void setUrl(String url) { this.url = url; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((fallBackUrl == null) ? 0 : fallBackUrl.hashCode()); result = prime * result + (messengerExtension ? 1231 : 1237); result = prime * result + ((title == null) ? 0 : title.hashCode()); result = prime * result + ((url == null) ? 0 : url.hashCode()); result = prime
				* result
				+ ((webviewHeightRatio == null) ? 0 : webviewHeightRatio
						.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; WebUrlButton other = (WebUrlButton) obj; if (fallBackUrl == null) { if (other.fallBackUrl != null)
				return false; } else if (!fallBackUrl.equals(other.fallBackUrl))
			return false; if (messengerExtension != other.messengerExtension)
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; if (url == null) { if (other.url != null)
				return false; } else if (!url.equals(other.url))
			return false; if (webviewHeightRatio != other.webviewHeightRatio)
			return false; return true; } @Override
	public String toString() { return ""WebUrlButton [url="" + url + "", webviewHeightRatio=""
				+ webviewHeightRatio + "", fallBackUrl="" + fallBackUrl
				+ "", messengerExtension="" + messengerExtension + "", title=""
				+ title + "", type="" + type + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.button; public class WebUrlButton extends Button { private static final long serialVersionUID = 1L; @NotBlank
	private String url; @SerializedName(""webview_height_ratio"")
	private WebViewHeightRatioType webviewHeightRatio; @SerializedName(""fallback_url"")
	private String fallBackUrl; @SerializedName(""messenger_extensions"")
	private boolean messengerExtension; @Size(max = 20)
	@NotBlank
	protected String title; public WebUrlButton(String title, String url) { this.title = title; this.url = url; this.type = ButtonType.WEB_URL; } public WebUrlButton(String title, String url,
			WebViewHeightRatioType ratioType) { this.title = title; this.url = url; this.type = ButtonType.WEB_URL; this.webviewHeightRatio = ratioType; } public String getUrl() { return url; } public void setUrl(String url) { this.url = url; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((fallBackUrl == null) ? 0 : fallBackUrl.hashCode()); result = prime * result + (messengerExtension ? 1231 : 1237); result = prime * result + ((title == null) ? 0 : title.hashCode()); result = prime * result + ((url == null) ? 0 : url.hashCode()); result = prime
				* result
				+ ((webviewHeightRatio == null) ? 0 : webviewHeightRatio
						.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; WebUrlButton other = (WebUrlButton) obj; if (fallBackUrl == null) { if (other.fallBackUrl != null)
				return false; } else if (!fallBackUrl.equals(other.fallBackUrl))
			return false; if (messengerExtension != other.messengerExtension)
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; if (url == null) { if (other.url != null)
				return false; } else if (!url.equals(other.url))
			return false; if (webviewHeightRatio != other.webviewHeightRatio)
			return false; return true; } @Override
	public String toString() { return ""WebUrlButton [url="" + url + "", webviewHeightRatio=""
				+ webviewHeightRatio + "", fallBackUrl="" + fallBackUrl
				+ "", messengerExtension="" + messengerExtension + "", title=""
				+ title + "", type="" + type + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.button; 
import javax.validation.constraints.Size; 
import org.hibernate.validator.constraints.NotBlank; 
import co.aurasphere.botmill.fb.model.outcoming.factory.ButtonFactory; 
import com.google.gson.annotations.SerializedName; 
  public class WebUrlButton extends Button { /**
 * The WebUrlButton Class/Object.
 *
 * @author Alvin Reyes
 * 
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @NotBlank
	private String url; /** The url. */  @SerializedName(""webview_height_ratio"")
	private WebViewHeightRatioType webviewHeightRatio; /** The webview height ratio. */  @SerializedName(""fallback_url"")
	private String fallBackUrl; /** The fall back url. */  @SerializedName(""messenger_extensions"")
	private boolean messengerExtension; /** The messenger extension. */  @Size(max = 20)
	@NotBlank
	protected String title; /**
	 * The button title.
	 */  public WebUrlButton(String title, String url) { this.title = title; this.url = url; this.type = ButtonType.WEB_URL; } /**
	 * Default constructor. Can instantiate this object only through
	 * {@link ButtonFactory}. It checks that the title is not null, not empty
	 * and shorter than 20 characters and that the URL is not empty. The button
	 * type is set to {@link ButtonType#WEB_URL}.
	 * 
	 * @param title
	 *            the button title. It can't be null or empty and has to be
	 *            shorter than 20 characters.
	 * @param url
	 *            the button URL. It can't be null or empty.
	 */  public WebUrlButton(String title, String url,
			WebViewHeightRatioType ratioType) { this.title = title; this.url = url; this.type = ButtonType.WEB_URL; this.webviewHeightRatio = ratioType; } /**
	 * Instantiates a new web url button.
	 *
	 * @param title
	 *            the title
	 * @param url
	 *            the url
	 * @param ratioType
	 *            the ratio type
	 */  public String getUrl() { return url; } /**
	 * Gets the url.
	 *
	 * @return the url
	 */  public void setUrl(String url) { this.url = url; } /**
	 * Sets the url.
	 *
	 * @param url
	 *            the new url
	 */  public String getTitle() { return title; } /**
	 * Gets the title.
	 *
	 * @return the title
	 */  public void setTitle(String title) { this.title = title; } /**
	 * Sets the title.
	 *
	 * @param title
	 *            the new title
	 */  @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((fallBackUrl == null) ? 0 : fallBackUrl.hashCode()); result = prime * result + (messengerExtension ? 1231 : 1237); result = prime * result + ((title == null) ? 0 : title.hashCode()); result = prime * result + ((url == null) ? 0 : url.hashCode()); result = prime
				* result
				+ ((webviewHeightRatio == null) ? 0 : webviewHeightRatio
						.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#hashCode
	 * ()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; WebUrlButton other = (WebUrlButton) obj; if (fallBackUrl == null) { if (other.fallBackUrl != null)
				return false; } else if (!fallBackUrl.equals(other.fallBackUrl))
			return false; if (messengerExtension != other.messengerExtension)
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; if (url == null) { if (other.url != null)
				return false; } else if (!url.equals(other.url))
			return false; if (webviewHeightRatio != other.webviewHeightRatio)
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#equals
	 * (java.lang.Object)
	 */  @Override
	public String toString() { return ""WebUrlButton [url="" + url + "", webviewHeightRatio=""
				+ webviewHeightRatio + "", fallBackUrl="" + fallBackUrl
				+ "", messengerExtension="" + messengerExtension + "", title=""
				+ title + "", type="" + type + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#toString
	 * ()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/button/WebViewHeightRatioType.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.button;


/**
 * The Enum for WebViewHeightRatioType.
 *
 * @author Alvin Reyes
 * 
 */
public enum WebViewHeightRatioType {

	/** The compact. */
	COMPACT,
	/** The tall. */
	TALL,
	/** The full. */
	FULL;
}
",package co.aurasphere.botmill.fb.model.outcoming.template.button; public enum WebViewHeightRatioType { FULL; },0 0 0 0 0,package co.aurasphere.botmill.fb.model.outcoming.template.button; public enum WebViewHeightRatioType { FULL; } ,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.button; 
  public enum WebViewHeightRatioType { /**
 * The Enum for WebViewHeightRatioType.
 *
 * @author Alvin Reyes
 * 
 */  /** The compact. */ /** The tall. */ FULL; } /** The full. */ "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/button/WebViewShareButton.java,"package co.aurasphere.botmill.fb.model.outcoming.template.button;

public enum WebViewShareButton {

	SHOW,
	HIDE
}
","package co.aurasphere.botmill.fb.model.outcoming.template.button; public enum WebViewShareButton { SHOW,
	HIDE
}",0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.button; public enum WebViewShareButton { SHOW,
	HIDE
} ","package co.aurasphere.botmill.fb.model.outcoming.template.button;  public enum WebViewShareButton {  SHOW,
	HIDE
}  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/generic/GenericTemplateElement.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.generic;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotBlank;

import co.aurasphere.botmill.fb.model.outcoming.template.button.Button;

import com.google.gson.annotations.SerializedName;


/**
 * The Class GenericTemplateElement.
 * 
 * @author Alvin Reyes
 */
// TODO: test with generic template element without buttons and generic template
// without elements (if possible)
public class GenericTemplateElement implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The title. */
	@Size(max = 80)
	@NotBlank
	private String title;

	/** The item url. */
	@SerializedName(""item_url"")
	private String itemUrl;

	/** The image url. */
	@SerializedName(""image_url"")
	private String imageUrl;

	/** The subtitle. */
	@Size(max = 80)
	private String subtitle;

	/** The buttons. */
	@Valid
	@Size(max = 3)
	private List<Button> buttons;

	/**
	 * Instantiates a new generic template element.
	 *
	 * @param title
	 *            the title
	 */
	public GenericTemplateElement(String title) {
		this.title = title;
		this.buttons = new ArrayList<Button>();
	}

	/**
	 * Gets the title.
	 *
	 * @return the title
	 */
	public String getTitle() {
		return title;
	}

	/**
	 * Sets the title.
	 *
	 * @param title
	 *            the new title
	 */
	public void setTitle(String title) {
		this.title = title;
	}

	/**
	 * Gets the item url.
	 *
	 * @return the item url
	 */
	public String getItemUrl() {
		return itemUrl;
	}

	/**
	 * Sets the item url.
	 *
	 * @param itemUrl
	 *            the new item url
	 */
	public void setItemUrl(String itemUrl) {
		this.itemUrl = itemUrl;
	}

	/**
	 * Gets the image url.
	 *
	 * @return the image url
	 */
	public String getImageUrl() {
		return imageUrl;
	}

	/**
	 * Sets the image url.
	 *
	 * @param imageUrl
	 *            the new image url
	 */
	public void setImageUrl(String imageUrl) {
		this.imageUrl = imageUrl;

	}

	/**
	 * Gets the subtitle.
	 *
	 * @return the subtitle
	 */
	public String getSubtitle() {
		return subtitle;
	}

	/**
	 * Sets the subtitle.
	 *
	 * @param subtitle
	 *            the new subtitle
	 */
	public void setSubtitle(String subtitle) {
		this.subtitle = subtitle;
	}

	/**
	 * Gets the buttons.
	 *
	 * @return the buttons
	 */
	public List<Button> getButtons() {
		return buttons;
	}

	/**
	 * Sets the buttons.
	 *
	 * @param buttons
	 *            the new buttons
	 */
	public void setButtons(List<Button> buttons) {
		this.buttons = buttons;
	}

	/**
	 * Adds the button.
	 *
	 * @param button
	 *            the button
	 */
	public void addButton(Button button) {
		this.buttons.add(button);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((buttons == null) ? 0 : buttons.hashCode());
		result = prime * result
				+ ((imageUrl == null) ? 0 : imageUrl.hashCode());
		result = prime * result + ((itemUrl == null) ? 0 : itemUrl.hashCode());
		result = prime * result
				+ ((subtitle == null) ? 0 : subtitle.hashCode());
		result = prime * result + ((title == null) ? 0 : title.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		GenericTemplateElement other = (GenericTemplateElement) obj;
		if (buttons == null) {
			if (other.buttons != null)
				return false;
		} else if (!buttons.equals(other.buttons))
			return false;
		if (imageUrl == null) {
			if (other.imageUrl != null)
				return false;
		} else if (!imageUrl.equals(other.imageUrl))
			return false;
		if (itemUrl == null) {
			if (other.itemUrl != null)
				return false;
		} else if (!itemUrl.equals(other.itemUrl))
			return false;
		if (subtitle == null) {
			if (other.subtitle != null)
				return false;
		} else if (!subtitle.equals(other.subtitle))
			return false;
		if (title == null) {
			if (other.title != null)
				return false;
		} else if (!title.equals(other.title))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""GenericTemplateElement [title="" + title + "", itemUrl=""
				+ itemUrl + "", imageUrl="" + imageUrl + "", subtitle="" + subtitle
				+ "", buttons="" + buttons + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.outcoming.template.generic; public class GenericTemplateElement implements Serializable { private static final long serialVersionUID = 1L; @Size(max = 80)
	@NotBlank
	private String title; @SerializedName(""item_url"")
	private String itemUrl; @SerializedName(""image_url"")
	private String imageUrl; @Size(max = 80)
	private String subtitle; @Valid
	@Size(max = 3)
	private List<Button> buttons; public GenericTemplateElement(String title) { this.title = title; this.buttons = new ArrayList<Button>(); } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public String getItemUrl() { return itemUrl; } public void setItemUrl(String itemUrl) { this.itemUrl = itemUrl; } public String getImageUrl() { return imageUrl; } public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; } public String getSubtitle() { return subtitle; } public void setSubtitle(String subtitle) { this.subtitle = subtitle; } public List<Button> getButtons() { return buttons; } public void setButtons(List<Button> buttons) { this.buttons = buttons; } public void addButton(Button button) { this.buttons.add(button); } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((buttons == null) ? 0 : buttons.hashCode()); result = prime * result
				+ ((imageUrl == null) ? 0 : imageUrl.hashCode()); result = prime * result + ((itemUrl == null) ? 0 : itemUrl.hashCode()); result = prime * result
				+ ((subtitle == null) ? 0 : subtitle.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; GenericTemplateElement other = (GenericTemplateElement) obj; if (buttons == null) { if (other.buttons != null)
				return false; } else if (!buttons.equals(other.buttons))
			return false; if (imageUrl == null) { if (other.imageUrl != null)
				return false; } else if (!imageUrl.equals(other.imageUrl))
			return false; if (itemUrl == null) { if (other.itemUrl != null)
				return false; } else if (!itemUrl.equals(other.itemUrl))
			return false; if (subtitle == null) { if (other.subtitle != null)
				return false; } else if (!subtitle.equals(other.subtitle))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; return true; } @Override
	public String toString() { return ""GenericTemplateElement [title="" + title + "", itemUrl=""
				+ itemUrl + "", imageUrl="" + imageUrl + "", subtitle="" + subtitle
				+ "", buttons="" + buttons + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.generic; public class GenericTemplateElement implements Serializable { private static final long serialVersionUID = 1L; @Size(max = 80)
	@NotBlank
	private String title; @SerializedName(""item_url"")
	private String itemUrl; @SerializedName(""image_url"")
	private String imageUrl; @Size(max = 80)
	private String subtitle; @Valid
	@Size(max = 3)
	private List<Button> buttons; public GenericTemplateElement(String title) { this.title = title; this.buttons = new ArrayList<Button>(); } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public String getItemUrl() { return itemUrl; } public void setItemUrl(String itemUrl) { this.itemUrl = itemUrl; } public String getImageUrl() { return imageUrl; } public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; } public String getSubtitle() { return subtitle; } public void setSubtitle(String subtitle) { this.subtitle = subtitle; } public List<Button> getButtons() { return buttons; } public void setButtons(List<Button> buttons) { this.buttons = buttons; } public void addButton(Button button) { this.buttons.add(button); } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((buttons == null) ? 0 : buttons.hashCode()); result = prime * result
				+ ((imageUrl == null) ? 0 : imageUrl.hashCode()); result = prime * result + ((itemUrl == null) ? 0 : itemUrl.hashCode()); result = prime * result
				+ ((subtitle == null) ? 0 : subtitle.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; GenericTemplateElement other = (GenericTemplateElement) obj; if (buttons == null) { if (other.buttons != null)
				return false; } else if (!buttons.equals(other.buttons))
			return false; if (imageUrl == null) { if (other.imageUrl != null)
				return false; } else if (!imageUrl.equals(other.imageUrl))
			return false; if (itemUrl == null) { if (other.itemUrl != null)
				return false; } else if (!itemUrl.equals(other.itemUrl))
			return false; if (subtitle == null) { if (other.subtitle != null)
				return false; } else if (!subtitle.equals(other.subtitle))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; return true; } @Override
	public String toString() { return ""GenericTemplateElement [title="" + title + "", itemUrl=""
				+ itemUrl + "", imageUrl="" + imageUrl + "", subtitle="" + subtitle
				+ "", buttons="" + buttons + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.generic; 
import java.io.Serializable; import java.util.ArrayList; import java.util.List; 
import javax.validation.Valid; import javax.validation.constraints.Size; 
import org.hibernate.validator.constraints.NotBlank; 
import co.aurasphere.botmill.fb.model.outcoming.template.button.Button; 
import com.google.gson.annotations.SerializedName; 
  /**
 * The Class GenericTemplateElement.
 * 
 * @author Alvin Reyes
 */ // TODO: test with generic template element without buttons and generic template public class GenericTemplateElement implements Serializable { // without elements (if possible)  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @Size(max = 80)
	@NotBlank
	private String title; /** The title. */  @SerializedName(""item_url"")
	private String itemUrl; /** The item url. */  @SerializedName(""image_url"")
	private String imageUrl; /** The image url. */  @Size(max = 80)
	private String subtitle; /** The subtitle. */  @Valid
	@Size(max = 3)
	private List<Button> buttons; /** The buttons. */  public GenericTemplateElement(String title) { this.title = title; this.buttons = new ArrayList<Button>(); } /**
	 * Instantiates a new generic template element.
	 *
	 * @param title
	 *            the title
	 */  public String getTitle() { return title; } /**
	 * Gets the title.
	 *
	 * @return the title
	 */  public void setTitle(String title) { this.title = title; } /**
	 * Sets the title.
	 *
	 * @param title
	 *            the new title
	 */  public String getItemUrl() { return itemUrl; } /**
	 * Gets the item url.
	 *
	 * @return the item url
	 */  public void setItemUrl(String itemUrl) { this.itemUrl = itemUrl; } /**
	 * Sets the item url.
	 *
	 * @param itemUrl
	 *            the new item url
	 */  public String getImageUrl() { return imageUrl; } /**
	 * Gets the image url.
	 *
	 * @return the image url
	 */  public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; /**
	 * Sets the image url.
	 *
	 * @param imageUrl
	 *            the new image url
	 */ }   public String getSubtitle() { return subtitle; } /**
	 * Gets the subtitle.
	 *
	 * @return the subtitle
	 */  public void setSubtitle(String subtitle) { this.subtitle = subtitle; } /**
	 * Sets the subtitle.
	 *
	 * @param subtitle
	 *            the new subtitle
	 */  public List<Button> getButtons() { return buttons; } /**
	 * Gets the buttons.
	 *
	 * @return the buttons
	 */  public void setButtons(List<Button> buttons) { this.buttons = buttons; } /**
	 * Sets the buttons.
	 *
	 * @param buttons
	 *            the new buttons
	 */  public void addButton(Button button) { this.buttons.add(button); } /**
	 * Adds the button.
	 *
	 * @param button
	 *            the button
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((buttons == null) ? 0 : buttons.hashCode()); result = prime * result
				+ ((imageUrl == null) ? 0 : imageUrl.hashCode()); result = prime * result + ((itemUrl == null) ? 0 : itemUrl.hashCode()); result = prime * result
				+ ((subtitle == null) ? 0 : subtitle.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; GenericTemplateElement other = (GenericTemplateElement) obj; if (buttons == null) { if (other.buttons != null)
				return false; } else if (!buttons.equals(other.buttons))
			return false; if (imageUrl == null) { if (other.imageUrl != null)
				return false; } else if (!imageUrl.equals(other.imageUrl))
			return false; if (itemUrl == null) { if (other.itemUrl != null)
				return false; } else if (!itemUrl.equals(other.itemUrl))
			return false; if (subtitle == null) { if (other.subtitle != null)
				return false; } else if (!subtitle.equals(other.subtitle))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""GenericTemplateElement [title="" + title + "", itemUrl=""
				+ itemUrl + "", imageUrl="" + imageUrl + "", subtitle="" + subtitle
				+ "", buttons="" + buttons + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/list/DefaultAction.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.list;

import co.aurasphere.botmill.fb.model.outcoming.template.button.Button;
import co.aurasphere.botmill.fb.model.outcoming.template.button.ButtonType;

import com.google.gson.annotations.SerializedName;


/**
 * The Class DefaultAction.
 * 
 * @author Alvin Reyes
 * 
 */
public class DefaultAction extends Button {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The url. */
	private String url;

	/** The messenger extensions. */
	@SerializedName(""messenger_extensions"")
	private String messengerExtensions;

	/** The webview height ratio. */
	@SerializedName(""webview_height_ratio"")
	private String webviewHeightRatio;

	/** The fallback url. */
	@SerializedName(""fallback_url"")
	private String fallbackUrl;

	/**
	 * Instantiates a new default action.
	 *
	 * @param url
	 *            the url
	 * @param messengerExtensions
	 *            the messenger extensions
	 * @param webviewHeightRatio
	 *            the webview height ratio
	 * @param fallbackUrl
	 *            the fallback url
	 */
	public DefaultAction(String url, String messengerExtensions,
			String webviewHeightRatio, String fallbackUrl) {
		this(url);
		this.messengerExtensions = messengerExtensions;
		this.webviewHeightRatio = webviewHeightRatio;
		this.fallbackUrl = fallbackUrl;
	}

	/**
	 * Instantiates a new default action.
	 *
	 * @param url
	 *            the url
	 */
	public DefaultAction(String url) {
		this.type = ButtonType.WEB_URL;
		this.url = url;
	}

	/**
	 * Gets the url.
	 *
	 * @return the url
	 */
	public String getUrl() {
		return url;
	}

	/**
	 * Sets the url.
	 *
	 * @param url
	 *            the new url
	 */
	public void setUrl(String url) {
		this.url = url;
	}

	/**
	 * Gets the messenger extensions.
	 *
	 * @return the messenger extensions
	 */
	public String getMessengerExtensions() {
		return messengerExtensions;
	}

	/**
	 * Sets the messenger extensions.
	 *
	 * @param messengerExtensions
	 *            the new messenger extensions
	 */
	public void setMessengerExtensions(String messengerExtensions) {
		this.messengerExtensions = messengerExtensions;
	}

	/**
	 * Gets the webview height ratio.
	 *
	 * @return the webview height ratio
	 */
	public String getWebviewHeightRatio() {
		return webviewHeightRatio;
	}

	/**
	 * Sets the webview height ratio.
	 *
	 * @param webviewHeightRatio
	 *            the new webview height ratio
	 */
	public void setWebviewHeightRatio(String webviewHeightRatio) {
		this.webviewHeightRatio = webviewHeightRatio;
	}

	/**
	 * Gets the fallback url.
	 *
	 * @return the fallback url
	 */
	public String getFallbackUrl() {
		return fallbackUrl;
	}

	/**
	 * Sets the fallback url.
	 *
	 * @param fallbackUrl
	 *            the new fallback url
	 */
	public void setFallbackUrl(String fallbackUrl) {
		this.fallbackUrl = fallbackUrl;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#hashCode
	 * ()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result
				+ ((fallbackUrl == null) ? 0 : fallbackUrl.hashCode());
		result = prime
				* result
				+ ((messengerExtensions == null) ? 0 : messengerExtensions
						.hashCode());
		result = prime * result + ((url == null) ? 0 : url.hashCode());
		result = prime
				* result
				+ ((webviewHeightRatio == null) ? 0 : webviewHeightRatio
						.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#equals
	 * (java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		DefaultAction other = (DefaultAction) obj;
		if (fallbackUrl == null) {
			if (other.fallbackUrl != null)
				return false;
		} else if (!fallbackUrl.equals(other.fallbackUrl))
			return false;
		if (messengerExtensions == null) {
			if (other.messengerExtensions != null)
				return false;
		} else if (!messengerExtensions.equals(other.messengerExtensions))
			return false;
		if (url == null) {
			if (other.url != null)
				return false;
		} else if (!url.equals(other.url))
			return false;
		if (webviewHeightRatio == null) {
			if (other.webviewHeightRatio != null)
				return false;
		} else if (!webviewHeightRatio.equals(other.webviewHeightRatio))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#toString
	 * ()
	 */
	@Override
	public String toString() {
		return ""DefaultAction [url="" + url + "", messengerExtensions=""
				+ messengerExtensions + "", webviewHeightRatio=""
				+ webviewHeightRatio + "", fallbackUrl="" + fallbackUrl
				+ "", type="" + type + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.template.list; public class DefaultAction extends Button { private static final long serialVersionUID = 1L; private String url; @SerializedName(""messenger_extensions"")
	private String messengerExtensions; @SerializedName(""webview_height_ratio"")
	private String webviewHeightRatio; @SerializedName(""fallback_url"")
	private String fallbackUrl; public DefaultAction(String url, String messengerExtensions,
			String webviewHeightRatio, String fallbackUrl) { this(url); this.messengerExtensions = messengerExtensions; this.webviewHeightRatio = webviewHeightRatio; this.fallbackUrl = fallbackUrl; } public DefaultAction(String url) { this.type = ButtonType.WEB_URL; this.url = url; } public String getUrl() { return url; } public void setUrl(String url) { this.url = url; } public String getMessengerExtensions() { return messengerExtensions; } public void setMessengerExtensions(String messengerExtensions) { this.messengerExtensions = messengerExtensions; } public String getWebviewHeightRatio() { return webviewHeightRatio; } public void setWebviewHeightRatio(String webviewHeightRatio) { this.webviewHeightRatio = webviewHeightRatio; } public String getFallbackUrl() { return fallbackUrl; } public void setFallbackUrl(String fallbackUrl) { this.fallbackUrl = fallbackUrl; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((fallbackUrl == null) ? 0 : fallbackUrl.hashCode()); result = prime
				* result
				+ ((messengerExtensions == null) ? 0 : messengerExtensions
						.hashCode()); result = prime * result + ((url == null) ? 0 : url.hashCode()); result = prime
				* result
				+ ((webviewHeightRatio == null) ? 0 : webviewHeightRatio
						.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; DefaultAction other = (DefaultAction) obj; if (fallbackUrl == null) { if (other.fallbackUrl != null)
				return false; } else if (!fallbackUrl.equals(other.fallbackUrl))
			return false; if (messengerExtensions == null) { if (other.messengerExtensions != null)
				return false; } else if (!messengerExtensions.equals(other.messengerExtensions))
			return false; if (url == null) { if (other.url != null)
				return false; } else if (!url.equals(other.url))
			return false; if (webviewHeightRatio == null) { if (other.webviewHeightRatio != null)
				return false; } else if (!webviewHeightRatio.equals(other.webviewHeightRatio))
			return false; return true; } @Override
	public String toString() { return ""DefaultAction [url="" + url + "", messengerExtensions=""
				+ messengerExtensions + "", webviewHeightRatio=""
				+ webviewHeightRatio + "", fallbackUrl="" + fallbackUrl
				+ "", type="" + type + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.list; public class DefaultAction extends Button { private static final long serialVersionUID = 1L; private String url; @SerializedName(""messenger_extensions"")
	private String messengerExtensions; @SerializedName(""webview_height_ratio"")
	private String webviewHeightRatio; @SerializedName(""fallback_url"")
	private String fallbackUrl; public DefaultAction(String url, String messengerExtensions,
			String webviewHeightRatio, String fallbackUrl) { this(url); this.messengerExtensions = messengerExtensions; this.webviewHeightRatio = webviewHeightRatio; this.fallbackUrl = fallbackUrl; } public DefaultAction(String url) { this.type = ButtonType.WEB_URL; this.url = url; } public String getUrl() { return url; } public void setUrl(String url) { this.url = url; } public String getMessengerExtensions() { return messengerExtensions; } public void setMessengerExtensions(String messengerExtensions) { this.messengerExtensions = messengerExtensions; } public String getWebviewHeightRatio() { return webviewHeightRatio; } public void setWebviewHeightRatio(String webviewHeightRatio) { this.webviewHeightRatio = webviewHeightRatio; } public String getFallbackUrl() { return fallbackUrl; } public void setFallbackUrl(String fallbackUrl) { this.fallbackUrl = fallbackUrl; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((fallbackUrl == null) ? 0 : fallbackUrl.hashCode()); result = prime
				* result
				+ ((messengerExtensions == null) ? 0 : messengerExtensions
						.hashCode()); result = prime * result + ((url == null) ? 0 : url.hashCode()); result = prime
				* result
				+ ((webviewHeightRatio == null) ? 0 : webviewHeightRatio
						.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; DefaultAction other = (DefaultAction) obj; if (fallbackUrl == null) { if (other.fallbackUrl != null)
				return false; } else if (!fallbackUrl.equals(other.fallbackUrl))
			return false; if (messengerExtensions == null) { if (other.messengerExtensions != null)
				return false; } else if (!messengerExtensions.equals(other.messengerExtensions))
			return false; if (url == null) { if (other.url != null)
				return false; } else if (!url.equals(other.url))
			return false; if (webviewHeightRatio == null) { if (other.webviewHeightRatio != null)
				return false; } else if (!webviewHeightRatio.equals(other.webviewHeightRatio))
			return false; return true; } @Override
	public String toString() { return ""DefaultAction [url="" + url + "", messengerExtensions=""
				+ messengerExtensions + "", webviewHeightRatio=""
				+ webviewHeightRatio + "", fallbackUrl="" + fallbackUrl
				+ "", type="" + type + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.list; 
import co.aurasphere.botmill.fb.model.outcoming.template.button.Button; import co.aurasphere.botmill.fb.model.outcoming.template.button.ButtonType; 
import com.google.gson.annotations.SerializedName; 
  public class DefaultAction extends Button { /**
 * The Class DefaultAction.
 * 
 * @author Alvin Reyes
 * 
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  private String url; /** The url. */  @SerializedName(""messenger_extensions"")
	private String messengerExtensions; /** The messenger extensions. */  @SerializedName(""webview_height_ratio"")
	private String webviewHeightRatio; /** The webview height ratio. */  @SerializedName(""fallback_url"")
	private String fallbackUrl; /** The fallback url. */  public DefaultAction(String url, String messengerExtensions,
			String webviewHeightRatio, String fallbackUrl) { this(url); this.messengerExtensions = messengerExtensions; this.webviewHeightRatio = webviewHeightRatio; this.fallbackUrl = fallbackUrl; } /**
	 * Instantiates a new default action.
	 *
	 * @param url
	 *            the url
	 * @param messengerExtensions
	 *            the messenger extensions
	 * @param webviewHeightRatio
	 *            the webview height ratio
	 * @param fallbackUrl
	 *            the fallback url
	 */  public DefaultAction(String url) { this.type = ButtonType.WEB_URL; this.url = url; } /**
	 * Instantiates a new default action.
	 *
	 * @param url
	 *            the url
	 */  public String getUrl() { return url; } /**
	 * Gets the url.
	 *
	 * @return the url
	 */  public void setUrl(String url) { this.url = url; } /**
	 * Sets the url.
	 *
	 * @param url
	 *            the new url
	 */  public String getMessengerExtensions() { return messengerExtensions; } /**
	 * Gets the messenger extensions.
	 *
	 * @return the messenger extensions
	 */  public void setMessengerExtensions(String messengerExtensions) { this.messengerExtensions = messengerExtensions; } /**
	 * Sets the messenger extensions.
	 *
	 * @param messengerExtensions
	 *            the new messenger extensions
	 */  public String getWebviewHeightRatio() { return webviewHeightRatio; } /**
	 * Gets the webview height ratio.
	 *
	 * @return the webview height ratio
	 */  public void setWebviewHeightRatio(String webviewHeightRatio) { this.webviewHeightRatio = webviewHeightRatio; } /**
	 * Sets the webview height ratio.
	 *
	 * @param webviewHeightRatio
	 *            the new webview height ratio
	 */  public String getFallbackUrl() { return fallbackUrl; } /**
	 * Gets the fallback url.
	 *
	 * @return the fallback url
	 */  public void setFallbackUrl(String fallbackUrl) { this.fallbackUrl = fallbackUrl; } /**
	 * Sets the fallback url.
	 *
	 * @param fallbackUrl
	 *            the new fallback url
	 */  @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((fallbackUrl == null) ? 0 : fallbackUrl.hashCode()); result = prime
				* result
				+ ((messengerExtensions == null) ? 0 : messengerExtensions
						.hashCode()); result = prime * result + ((url == null) ? 0 : url.hashCode()); result = prime
				* result
				+ ((webviewHeightRatio == null) ? 0 : webviewHeightRatio
						.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#hashCode
	 * ()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; DefaultAction other = (DefaultAction) obj; if (fallbackUrl == null) { if (other.fallbackUrl != null)
				return false; } else if (!fallbackUrl.equals(other.fallbackUrl))
			return false; if (messengerExtensions == null) { if (other.messengerExtensions != null)
				return false; } else if (!messengerExtensions.equals(other.messengerExtensions))
			return false; if (url == null) { if (other.url != null)
				return false; } else if (!url.equals(other.url))
			return false; if (webviewHeightRatio == null) { if (other.webviewHeightRatio != null)
				return false; } else if (!webviewHeightRatio.equals(other.webviewHeightRatio))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#equals
	 * (java.lang.Object)
	 */  @Override
	public String toString() { return ""DefaultAction [url="" + url + "", messengerExtensions=""
				+ messengerExtensions + "", webviewHeightRatio=""
				+ webviewHeightRatio + "", fallbackUrl="" + fallbackUrl
				+ "", type="" + type + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.template.button.Button#toString
	 * ()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/list/ListTemplateElement.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.list;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotBlank;

import co.aurasphere.botmill.fb.model.outcoming.template.button.Button;

import com.google.gson.annotations.SerializedName;


/**
 * The Class ListTemplateElement.
 * 
 * @author Alvin Reyes
 * 
 * 
 */
public class ListTemplateElement implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The title. */
	@Size(max = 80)
	@NotBlank
	private String title;

	/** The image url. */
	@SerializedName(""image_url"")
	private String imageUrl;

	/** The subtitle. */
	@Size(max = 80)
	private String subtitle;

	/** The buttons. */
	@Valid
	@Size(max = 3)
	private List<Button> buttons;

	/** The default action. */
	@SerializedName(""default_action"")
	private DefaultAction defaultAction;

	/**
	 * Gets the default action.
	 *
	 * @return the default action
	 */
	public DefaultAction getDefaultAction() {
		return defaultAction;
	}

	/**
	 * Sets the default action.
	 *
	 * @param defaultAction
	 *            the new default action
	 */
	public void setDefaultAction(DefaultAction defaultAction) {
		this.defaultAction = defaultAction;
	}

	/**
	 * Instantiates a new list template element.
	 *
	 * @param title
	 *            the title
	 */
	public ListTemplateElement(String title) {
		this.title = title;
		this.buttons = new ArrayList<Button>();
	}

	/**
	 * Gets the title.
	 *
	 * @return the title
	 */
	public String getTitle() {
		return title;
	}

	/**
	 * Sets the title.
	 *
	 * @param title
	 *            the new title
	 */
	public void setTitle(String title) {
		this.title = title;
	}

	/**
	 * Gets the image url.
	 *
	 * @return the image url
	 */
	public String getImageUrl() {
		return imageUrl;
	}

	/**
	 * Sets the image url.
	 *
	 * @param imageUrl
	 *            the new image url
	 */
	public void setImageUrl(String imageUrl) {
		this.imageUrl = imageUrl;
	}

	/**
	 * Gets the subtitle.
	 *
	 * @return the subtitle
	 */
	public String getSubtitle() {
		return subtitle;
	}

	/**
	 * Sets the subtitle.
	 *
	 * @param subtitle
	 *            the new subtitle
	 */
	public void setSubtitle(String subtitle) {
		this.subtitle = subtitle;
	}

	/**
	 * Gets the buttons.
	 *
	 * @return the buttons
	 */
	public List<Button> getButtons() {
		return buttons;
	}

	/**
	 * Sets the buttons.
	 *
	 * @param buttons
	 *            the new buttons
	 */
	public void setButtons(List<Button> buttons) {
		this.buttons = buttons;
	}

	/**
	 * Adds the button.
	 *
	 * @param button
	 *            the button
	 */
	public void addButton(Button button) {
		this.buttons.add(button);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((buttons == null) ? 0 : buttons.hashCode());
		result = prime * result
				+ ((defaultAction == null) ? 0 : defaultAction.hashCode());
		result = prime * result
				+ ((imageUrl == null) ? 0 : imageUrl.hashCode());
		result = prime * result
				+ ((subtitle == null) ? 0 : subtitle.hashCode());
		result = prime * result + ((title == null) ? 0 : title.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ListTemplateElement other = (ListTemplateElement) obj;
		if (buttons == null) {
			if (other.buttons != null)
				return false;
		} else if (!buttons.equals(other.buttons))
			return false;
		if (defaultAction == null) {
			if (other.defaultAction != null)
				return false;
		} else if (!defaultAction.equals(other.defaultAction))
			return false;
		if (imageUrl == null) {
			if (other.imageUrl != null)
				return false;
		} else if (!imageUrl.equals(other.imageUrl))
			return false;
		if (subtitle == null) {
			if (other.subtitle != null)
				return false;
		} else if (!subtitle.equals(other.subtitle))
			return false;
		if (title == null) {
			if (other.title != null)
				return false;
		} else if (!title.equals(other.title))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""ListTemplateElement [title="" + title + "", imageUrl="" + imageUrl
				+ "", subtitle="" + subtitle + "", buttons="" + buttons
				+ "", defaultAction="" + defaultAction + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.outcoming.template.list; public class ListTemplateElement implements Serializable { private static final long serialVersionUID = 1L; @Size(max = 80)
	@NotBlank
	private String title; @SerializedName(""image_url"")
	private String imageUrl; @Size(max = 80)
	private String subtitle; @Valid
	@Size(max = 3)
	private List<Button> buttons; @SerializedName(""default_action"")
	private DefaultAction defaultAction; public DefaultAction getDefaultAction() { return defaultAction; } public void setDefaultAction(DefaultAction defaultAction) { this.defaultAction = defaultAction; } public ListTemplateElement(String title) { this.title = title; this.buttons = new ArrayList<Button>(); } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public String getImageUrl() { return imageUrl; } public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; } public String getSubtitle() { return subtitle; } public void setSubtitle(String subtitle) { this.subtitle = subtitle; } public List<Button> getButtons() { return buttons; } public void setButtons(List<Button> buttons) { this.buttons = buttons; } public void addButton(Button button) { this.buttons.add(button); } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((buttons == null) ? 0 : buttons.hashCode()); result = prime * result
				+ ((defaultAction == null) ? 0 : defaultAction.hashCode()); result = prime * result
				+ ((imageUrl == null) ? 0 : imageUrl.hashCode()); result = prime * result
				+ ((subtitle == null) ? 0 : subtitle.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ListTemplateElement other = (ListTemplateElement) obj; if (buttons == null) { if (other.buttons != null)
				return false; } else if (!buttons.equals(other.buttons))
			return false; if (defaultAction == null) { if (other.defaultAction != null)
				return false; } else if (!defaultAction.equals(other.defaultAction))
			return false; if (imageUrl == null) { if (other.imageUrl != null)
				return false; } else if (!imageUrl.equals(other.imageUrl))
			return false; if (subtitle == null) { if (other.subtitle != null)
				return false; } else if (!subtitle.equals(other.subtitle))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; return true; } @Override
	public String toString() { return ""ListTemplateElement [title="" + title + "", imageUrl="" + imageUrl
				+ "", subtitle="" + subtitle + "", buttons="" + buttons
				+ "", defaultAction="" + defaultAction + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.list; public class ListTemplateElement implements Serializable { private static final long serialVersionUID = 1L; @Size(max = 80)
	@NotBlank
	private String title; @SerializedName(""image_url"")
	private String imageUrl; @Size(max = 80)
	private String subtitle; @Valid
	@Size(max = 3)
	private List<Button> buttons; @SerializedName(""default_action"")
	private DefaultAction defaultAction; public DefaultAction getDefaultAction() { return defaultAction; } public void setDefaultAction(DefaultAction defaultAction) { this.defaultAction = defaultAction; } public ListTemplateElement(String title) { this.title = title; this.buttons = new ArrayList<Button>(); } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public String getImageUrl() { return imageUrl; } public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; } public String getSubtitle() { return subtitle; } public void setSubtitle(String subtitle) { this.subtitle = subtitle; } public List<Button> getButtons() { return buttons; } public void setButtons(List<Button> buttons) { this.buttons = buttons; } public void addButton(Button button) { this.buttons.add(button); } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((buttons == null) ? 0 : buttons.hashCode()); result = prime * result
				+ ((defaultAction == null) ? 0 : defaultAction.hashCode()); result = prime * result
				+ ((imageUrl == null) ? 0 : imageUrl.hashCode()); result = prime * result
				+ ((subtitle == null) ? 0 : subtitle.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ListTemplateElement other = (ListTemplateElement) obj; if (buttons == null) { if (other.buttons != null)
				return false; } else if (!buttons.equals(other.buttons))
			return false; if (defaultAction == null) { if (other.defaultAction != null)
				return false; } else if (!defaultAction.equals(other.defaultAction))
			return false; if (imageUrl == null) { if (other.imageUrl != null)
				return false; } else if (!imageUrl.equals(other.imageUrl))
			return false; if (subtitle == null) { if (other.subtitle != null)
				return false; } else if (!subtitle.equals(other.subtitle))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; return true; } @Override
	public String toString() { return ""ListTemplateElement [title="" + title + "", imageUrl="" + imageUrl
				+ "", subtitle="" + subtitle + "", buttons="" + buttons
				+ "", defaultAction="" + defaultAction + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.list; 
import java.io.Serializable; import java.util.ArrayList; import java.util.List; 
import javax.validation.Valid; import javax.validation.constraints.Size; 
import org.hibernate.validator.constraints.NotBlank; 
import co.aurasphere.botmill.fb.model.outcoming.template.button.Button; 
import com.google.gson.annotations.SerializedName; 
  public class ListTemplateElement implements Serializable { /**
 * The Class ListTemplateElement.
 * 
 * @author Alvin Reyes
 * 
 * 
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @Size(max = 80)
	@NotBlank
	private String title; /** The title. */  @SerializedName(""image_url"")
	private String imageUrl; /** The image url. */  @Size(max = 80)
	private String subtitle; /** The subtitle. */  @Valid
	@Size(max = 3)
	private List<Button> buttons; /** The buttons. */  @SerializedName(""default_action"")
	private DefaultAction defaultAction; /** The default action. */  public DefaultAction getDefaultAction() { return defaultAction; } /**
	 * Gets the default action.
	 *
	 * @return the default action
	 */  public void setDefaultAction(DefaultAction defaultAction) { this.defaultAction = defaultAction; } /**
	 * Sets the default action.
	 *
	 * @param defaultAction
	 *            the new default action
	 */  public ListTemplateElement(String title) { this.title = title; this.buttons = new ArrayList<Button>(); } /**
	 * Instantiates a new list template element.
	 *
	 * @param title
	 *            the title
	 */  public String getTitle() { return title; } /**
	 * Gets the title.
	 *
	 * @return the title
	 */  public void setTitle(String title) { this.title = title; } /**
	 * Sets the title.
	 *
	 * @param title
	 *            the new title
	 */  public String getImageUrl() { return imageUrl; } /**
	 * Gets the image url.
	 *
	 * @return the image url
	 */  public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; } /**
	 * Sets the image url.
	 *
	 * @param imageUrl
	 *            the new image url
	 */  public String getSubtitle() { return subtitle; } /**
	 * Gets the subtitle.
	 *
	 * @return the subtitle
	 */  public void setSubtitle(String subtitle) { this.subtitle = subtitle; } /**
	 * Sets the subtitle.
	 *
	 * @param subtitle
	 *            the new subtitle
	 */  public List<Button> getButtons() { return buttons; } /**
	 * Gets the buttons.
	 *
	 * @return the buttons
	 */  public void setButtons(List<Button> buttons) { this.buttons = buttons; } /**
	 * Sets the buttons.
	 *
	 * @param buttons
	 *            the new buttons
	 */  public void addButton(Button button) { this.buttons.add(button); } /**
	 * Adds the button.
	 *
	 * @param button
	 *            the button
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((buttons == null) ? 0 : buttons.hashCode()); result = prime * result
				+ ((defaultAction == null) ? 0 : defaultAction.hashCode()); result = prime * result
				+ ((imageUrl == null) ? 0 : imageUrl.hashCode()); result = prime * result
				+ ((subtitle == null) ? 0 : subtitle.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ListTemplateElement other = (ListTemplateElement) obj; if (buttons == null) { if (other.buttons != null)
				return false; } else if (!buttons.equals(other.buttons))
			return false; if (defaultAction == null) { if (other.defaultAction != null)
				return false; } else if (!defaultAction.equals(other.defaultAction))
			return false; if (imageUrl == null) { if (other.imageUrl != null)
				return false; } else if (!imageUrl.equals(other.imageUrl))
			return false; if (subtitle == null) { if (other.subtitle != null)
				return false; } else if (!subtitle.equals(other.subtitle))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""ListTemplateElement [title="" + title + "", imageUrl="" + imageUrl
				+ "", subtitle="" + subtitle + "", buttons="" + buttons
				+ "", defaultAction="" + defaultAction + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/list/TopElementStyle.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.list;


/**
 * The TopElementStyle Enum.
 *
 * @author Alvin Reyes
 * 
 */
public enum TopElementStyle {

	/** The large. */
	LARGE,
	/** The compact. */
	COMPACT

}
",package co.aurasphere.botmill.fb.model.outcoming.template.list; public enum TopElementStyle { },0 0 0 0,package co.aurasphere.botmill.fb.model.outcoming.template.list; public enum TopElementStyle { } ,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.list; 
  public enum TopElementStyle { /**
 * The TopElementStyle Enum.
 *
 * @author Alvin Reyes
 * 
 */  /** The large. */ /** The compact. */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/receipt/Address.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.receipt;

import java.io.Serializable;

import javax.validation.constraints.Pattern;

import org.hibernate.validator.constraints.NotBlank;

import com.google.gson.annotations.SerializedName;


/**
 * The Class Address.
 * 
 * @author Alvin Reyes
 */
public class Address implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The street 1. */
	@NotBlank
	@SerializedName(""street_1"")
	private String street1;

	/** The street 2. */
	@SerializedName(""street_2"")
	private String street2;

	/** The city. */
	@NotBlank
	private String city;

	/** The postal code. */
	@NotBlank
	@SerializedName(""postal_code"")
	private String postalCode;

	/** The state. */
	@NotBlank
	private String state;

	/** The country. */
	@NotBlank
	@Pattern(regexp = ""[A-Za-z]{2}"", message = ""{country.pattern.message}"")
	private String country;

	/**
	 * Gets the street 1.
	 *
	 * @return the street 1
	 */
	public String getStreet1() {
		return street1;
	}

	/**
	 * Sets the street 1.
	 *
	 * @param street1
	 *            the new street 1
	 */
	public void setStreet1(String street1) {
		this.street1 = street1;
	}

	/**
	 * Gets the street 2.
	 *
	 * @return the street 2
	 */
	public String getStreet2() {
		return street2;
	}

	/**
	 * Sets the street 2.
	 *
	 * @param street2
	 *            the new street 2
	 */
	public void setStreet2(String street2) {
		this.street2 = street2;
	}

	/**
	 * Gets the city.
	 *
	 * @return the city
	 */
	public String getCity() {
		return city;
	}

	/**
	 * Sets the city.
	 *
	 * @param city
	 *            the new city
	 */
	public void setCity(String city) {
		this.city = city;
	}

	/**
	 * Gets the postal code.
	 *
	 * @return the postal code
	 */
	public String getPostalCode() {
		return postalCode;
	}

	/**
	 * Sets the postal code.
	 *
	 * @param postalCode
	 *            the new postal code
	 */
	public void setPostalCode(String postalCode) {
		this.postalCode = postalCode;
	}

	/**
	 * Gets the state.
	 *
	 * @return the state
	 */
	public String getState() {
		return state;
	}

	/**
	 * Sets the state.
	 *
	 * @param state
	 *            the new state
	 */
	public void setState(String state) {
		this.state = state;
	}

	/**
	 * Gets the country.
	 *
	 * @return the country
	 */
	public String getCountry() {
		return country;
	}

	/**
	 * Sets the country.
	 *
	 * @param country
	 *            the new country
	 */
	public void setCountry(String country) {
		this.country = country;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((city == null) ? 0 : city.hashCode());
		result = prime * result + ((country == null) ? 0 : country.hashCode());
		result = prime * result
				+ ((postalCode == null) ? 0 : postalCode.hashCode());
		result = prime * result + ((state == null) ? 0 : state.hashCode());
		result = prime * result + ((street1 == null) ? 0 : street1.hashCode());
		result = prime * result + ((street2 == null) ? 0 : street2.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Address other = (Address) obj;
		if (city == null) {
			if (other.city != null)
				return false;
		} else if (!city.equals(other.city))
			return false;
		if (country == null) {
			if (other.country != null)
				return false;
		} else if (!country.equals(other.country))
			return false;
		if (postalCode == null) {
			if (other.postalCode != null)
				return false;
		} else if (!postalCode.equals(other.postalCode))
			return false;
		if (state == null) {
			if (other.state != null)
				return false;
		} else if (!state.equals(other.state))
			return false;
		if (street1 == null) {
			if (other.street1 != null)
				return false;
		} else if (!street1.equals(other.street1))
			return false;
		if (street2 == null) {
			if (other.street2 != null)
				return false;
		} else if (!street2.equals(other.street2))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""Address [street1="" + street1 + "", street2="" + street2
				+ "", city="" + city + "", postalCode="" + postalCode + "", state=""
				+ state + "", country="" + country + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.template.receipt; public class Address implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	@SerializedName(""street_1"")
	private String street1; @SerializedName(""street_2"")
	private String street2; @NotBlank
	private String city; @NotBlank
	@SerializedName(""postal_code"")
	private String postalCode; @NotBlank
	private String state; @NotBlank
	@Pattern(regexp = ""[A-Za-z]{ 2} "", message = ""{ country.pattern.message} "")
	private String country; public String getStreet1() { return street1; } public void setStreet1(String street1) { this.street1 = street1; } public String getStreet2() { return street2; } public void setStreet2(String street2) { this.street2 = street2; } public String getCity() { return city; } public void setCity(String city) { this.city = city; } public String getPostalCode() { return postalCode; } public void setPostalCode(String postalCode) { this.postalCode = postalCode; } public String getState() { return state; } public void setState(String state) { this.state = state; } public String getCountry() { return country; } public void setCountry(String country) { this.country = country; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((city == null) ? 0 : city.hashCode()); result = prime * result + ((country == null) ? 0 : country.hashCode()); result = prime * result
				+ ((postalCode == null) ? 0 : postalCode.hashCode()); result = prime * result + ((state == null) ? 0 : state.hashCode()); result = prime * result + ((street1 == null) ? 0 : street1.hashCode()); result = prime * result + ((street2 == null) ? 0 : street2.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Address other = (Address) obj; if (city == null) { if (other.city != null)
				return false; } else if (!city.equals(other.city))
			return false; if (country == null) { if (other.country != null)
				return false; } else if (!country.equals(other.country))
			return false; if (postalCode == null) { if (other.postalCode != null)
				return false; } else if (!postalCode.equals(other.postalCode))
			return false; if (state == null) { if (other.state != null)
				return false; } else if (!state.equals(other.state))
			return false; if (street1 == null) { if (other.street1 != null)
				return false; } else if (!street1.equals(other.street1))
			return false; if (street2 == null) { if (other.street2 != null)
				return false; } else if (!street2.equals(other.street2))
			return false; return true; } @Override
	public String toString() { return ""Address [street1="" + street1 + "", street2="" + street2
				+ "", city="" + city + "", postalCode="" + postalCode + "", state=""
				+ state + "", country="" + country + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.receipt; public class Address implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	@SerializedName(""street_1"")
	private String street1; @SerializedName(""street_2"")
	private String street2; @NotBlank
	private String city; @NotBlank
	@SerializedName(""postal_code"")
	private String postalCode; @NotBlank
	private String state; @NotBlank
	@Pattern(regexp = ""[A-Za-z]{ 2} "", message = ""{ country.pattern.message} "")
	private String country; public String getStreet1() { return street1; } public void setStreet1(String street1) { this.street1 = street1; } public String getStreet2() { return street2; } public void setStreet2(String street2) { this.street2 = street2; } public String getCity() { return city; } public void setCity(String city) { this.city = city; } public String getPostalCode() { return postalCode; } public void setPostalCode(String postalCode) { this.postalCode = postalCode; } public String getState() { return state; } public void setState(String state) { this.state = state; } public String getCountry() { return country; } public void setCountry(String country) { this.country = country; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((city == null) ? 0 : city.hashCode()); result = prime * result + ((country == null) ? 0 : country.hashCode()); result = prime * result
				+ ((postalCode == null) ? 0 : postalCode.hashCode()); result = prime * result + ((state == null) ? 0 : state.hashCode()); result = prime * result + ((street1 == null) ? 0 : street1.hashCode()); result = prime * result + ((street2 == null) ? 0 : street2.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Address other = (Address) obj; if (city == null) { if (other.city != null)
				return false; } else if (!city.equals(other.city))
			return false; if (country == null) { if (other.country != null)
				return false; } else if (!country.equals(other.country))
			return false; if (postalCode == null) { if (other.postalCode != null)
				return false; } else if (!postalCode.equals(other.postalCode))
			return false; if (state == null) { if (other.state != null)
				return false; } else if (!state.equals(other.state))
			return false; if (street1 == null) { if (other.street1 != null)
				return false; } else if (!street1.equals(other.street1))
			return false; if (street2 == null) { if (other.street2 != null)
				return false; } else if (!street2.equals(other.street2))
			return false; return true; } @Override
	public String toString() { return ""Address [street1="" + street1 + "", street2="" + street2
				+ "", city="" + city + "", postalCode="" + postalCode + "", state=""
				+ state + "", country="" + country + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.receipt; 
import java.io.Serializable; 
import javax.validation.constraints.Pattern; 
import org.hibernate.validator.constraints.NotBlank; 
import com.google.gson.annotations.SerializedName; 
  public class Address implements Serializable { /**
 * The Class Address.
 * 
 * @author Alvin Reyes
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @NotBlank
	@SerializedName(""street_1"")
	private String street1; /** The street 1. */  @SerializedName(""street_2"")
	private String street2; /** The street 2. */  @NotBlank
	private String city; /** The city. */  @NotBlank
	@SerializedName(""postal_code"")
	private String postalCode; /** The postal code. */  @NotBlank
	private String state; /** The state. */  @NotBlank
	@Pattern(regexp = ""[A-Za-z]{ 2} "", message = ""{ country.pattern.message} "")
	private String country; /** The country. */  public String getStreet1() { return street1; } /**
	 * Gets the street 1.
	 *
	 * @return the street 1
	 */  public void setStreet1(String street1) { this.street1 = street1; } /**
	 * Sets the street 1.
	 *
	 * @param street1
	 *            the new street 1
	 */  public String getStreet2() { return street2; } /**
	 * Gets the street 2.
	 *
	 * @return the street 2
	 */  public void setStreet2(String street2) { this.street2 = street2; } /**
	 * Sets the street 2.
	 *
	 * @param street2
	 *            the new street 2
	 */  public String getCity() { return city; } /**
	 * Gets the city.
	 *
	 * @return the city
	 */  public void setCity(String city) { this.city = city; } /**
	 * Sets the city.
	 *
	 * @param city
	 *            the new city
	 */  public String getPostalCode() { return postalCode; } /**
	 * Gets the postal code.
	 *
	 * @return the postal code
	 */  public void setPostalCode(String postalCode) { this.postalCode = postalCode; } /**
	 * Sets the postal code.
	 *
	 * @param postalCode
	 *            the new postal code
	 */  public String getState() { return state; } /**
	 * Gets the state.
	 *
	 * @return the state
	 */  public void setState(String state) { this.state = state; } /**
	 * Sets the state.
	 *
	 * @param state
	 *            the new state
	 */  public String getCountry() { return country; } /**
	 * Gets the country.
	 *
	 * @return the country
	 */  public void setCountry(String country) { this.country = country; } /**
	 * Sets the country.
	 *
	 * @param country
	 *            the new country
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((city == null) ? 0 : city.hashCode()); result = prime * result + ((country == null) ? 0 : country.hashCode()); result = prime * result
				+ ((postalCode == null) ? 0 : postalCode.hashCode()); result = prime * result + ((state == null) ? 0 : state.hashCode()); result = prime * result + ((street1 == null) ? 0 : street1.hashCode()); result = prime * result + ((street2 == null) ? 0 : street2.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Address other = (Address) obj; if (city == null) { if (other.city != null)
				return false; } else if (!city.equals(other.city))
			return false; if (country == null) { if (other.country != null)
				return false; } else if (!country.equals(other.country))
			return false; if (postalCode == null) { if (other.postalCode != null)
				return false; } else if (!postalCode.equals(other.postalCode))
			return false; if (state == null) { if (other.state != null)
				return false; } else if (!state.equals(other.state))
			return false; if (street1 == null) { if (other.street1 != null)
				return false; } else if (!street1.equals(other.street1))
			return false; if (street2 == null) { if (other.street2 != null)
				return false; } else if (!street2.equals(other.street2))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""Address [street1="" + street1 + "", street2="" + street2
				+ "", city="" + city + "", postalCode="" + postalCode + "", state=""
				+ state + "", country="" + country + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/receipt/Adjustment.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.receipt;

import java.io.Serializable;
import java.math.BigDecimal;


/**
 * The Class Adjustment.
 * 
 * @author Alvin Reyes
 */
public class Adjustment implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The name. */
	private String name;

	/** The amount. */
	private BigDecimal amount;

	/**
	 * Instantiates a new adjustment.
	 */
	public Adjustment() {
	}

	/**
	 * Instantiates a new adjustment.
	 *
	 * @param name
	 *            the name
	 * @param amount
	 *            the amount
	 */
	public Adjustment(String name, BigDecimal amount) {
		this.name = name;
		this.amount = amount;
	}

	/**
	 * Gets the name.
	 *
	 * @return the name
	 */
	public String getName() {
		return name;
	}

	/**
	 * Sets the name.
	 *
	 * @param name
	 *            the new name
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Gets the amount.
	 *
	 * @return the amount
	 */
	public BigDecimal getAmount() {
		return amount;
	}

	/**
	 * Sets the amount.
	 *
	 * @param amount
	 *            the new amount
	 */
	public void setAmount(BigDecimal amount) {
		this.amount = amount;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((amount == null) ? 0 : amount.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Adjustment other = (Adjustment) obj;
		if (amount == null) {
			if (other.amount != null)
				return false;
		} else if (!amount.equals(other.amount))
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""Adjustment [name="" + name + "", amount="" + amount + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.template.receipt; public class Adjustment implements Serializable { private static final long serialVersionUID = 1L; private String name; private BigDecimal amount; public Adjustment() { } public Adjustment(String name, BigDecimal amount) { this.name = name; this.amount = amount; } public String getName() { return name; } public void setName(String name) { this.name = name; } public BigDecimal getAmount() { return amount; } public void setAmount(BigDecimal amount) { this.amount = amount; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((amount == null) ? 0 : amount.hashCode()); result = prime * result + ((name == null) ? 0 : name.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Adjustment other = (Adjustment) obj; if (amount == null) { if (other.amount != null)
				return false; } else if (!amount.equals(other.amount))
			return false; if (name == null) { if (other.name != null)
				return false; } else if (!name.equals(other.name))
			return false; return true; } @Override
	public String toString() { return ""Adjustment [name="" + name + "", amount="" + amount + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.receipt; public class Adjustment implements Serializable { private static final long serialVersionUID = 1L; private String name; private BigDecimal amount; public Adjustment() { } public Adjustment(String name, BigDecimal amount) { this.name = name; this.amount = amount; } public String getName() { return name; } public void setName(String name) { this.name = name; } public BigDecimal getAmount() { return amount; } public void setAmount(BigDecimal amount) { this.amount = amount; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((amount == null) ? 0 : amount.hashCode()); result = prime * result + ((name == null) ? 0 : name.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Adjustment other = (Adjustment) obj; if (amount == null) { if (other.amount != null)
				return false; } else if (!amount.equals(other.amount))
			return false; if (name == null) { if (other.name != null)
				return false; } else if (!name.equals(other.name))
			return false; return true; } @Override
	public String toString() { return ""Adjustment [name="" + name + "", amount="" + amount + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.receipt; 
import java.io.Serializable; import java.math.BigDecimal; 
  public class Adjustment implements Serializable { /**
 * The Class Adjustment.
 * 
 * @author Alvin Reyes
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  private String name; /** The name. */  private BigDecimal amount; /** The amount. */  public Adjustment() { } /**
	 * Instantiates a new adjustment.
	 */  public Adjustment(String name, BigDecimal amount) { this.name = name; this.amount = amount; } /**
	 * Instantiates a new adjustment.
	 *
	 * @param name
	 *            the name
	 * @param amount
	 *            the amount
	 */  public String getName() { return name; } /**
	 * Gets the name.
	 *
	 * @return the name
	 */  public void setName(String name) { this.name = name; } /**
	 * Sets the name.
	 *
	 * @param name
	 *            the new name
	 */  public BigDecimal getAmount() { return amount; } /**
	 * Gets the amount.
	 *
	 * @return the amount
	 */  public void setAmount(BigDecimal amount) { this.amount = amount; } /**
	 * Sets the amount.
	 *
	 * @param amount
	 *            the new amount
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((amount == null) ? 0 : amount.hashCode()); result = prime * result + ((name == null) ? 0 : name.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Adjustment other = (Adjustment) obj; if (amount == null) { if (other.amount != null)
				return false; } else if (!amount.equals(other.amount))
			return false; if (name == null) { if (other.name != null)
				return false; } else if (!name.equals(other.name))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""Adjustment [name="" + name + "", amount="" + amount + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/receipt/ReceiptTemplateElement.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.receipt;

import java.io.Serializable;
import java.math.BigDecimal;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;

import org.hibernate.validator.constraints.NotBlank;

import com.google.gson.annotations.SerializedName;


/**
 * The Class ReceiptTemplateElement.
 * 
 * @author Alvin Reyes
 */
public class ReceiptTemplateElement implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The title. */
	@NotBlank
	private String title;

	/** The subtitle. */
	private String subtitle;

	/** The quantity. */
	private int quantity;

	/** The price. */
	@NotNull
	private BigDecimal price;

	/** The currency. */
	@Pattern(regexp = ""[A-Z]{3}"", message = ""{currency.pattern.message}"")
	private String currency;

	/** The image url. */
	@SerializedName(""image_url"")
	private String imageUrl;

	/**
	 * Gets the title.
	 *
	 * @return the title
	 */
	public String getTitle() {
		return title;
	}

	/**
	 * Sets the title.
	 *
	 * @param title
	 *            the new title
	 */
	public void setTitle(String title) {
		this.title = title;
	}

	/**
	 * Gets the subtitle.
	 *
	 * @return the subtitle
	 */
	public String getSubtitle() {
		return subtitle;
	}

	/**
	 * Sets the subtitle.
	 *
	 * @param subtitle
	 *            the new subtitle
	 */
	public void setSubtitle(String subtitle) {
		this.subtitle = subtitle;
	}

	/**
	 * Gets the quantity.
	 *
	 * @return the quantity
	 */
	public int getQuantity() {
		return quantity;
	}

	/**
	 * Sets the quantity.
	 *
	 * @param quantity
	 *            the new quantity
	 */
	public void setQuantity(int quantity) {
		this.quantity = quantity;
	}

	/**
	 * Gets the price.
	 *
	 * @return the price
	 */
	public BigDecimal getPrice() {
		return price;
	}

	/**
	 * Sets the price.
	 *
	 * @param price
	 *            the new price
	 */
	public void setPrice(BigDecimal price) {
		this.price = price;
	}

	/**
	 * Gets the currency.
	 *
	 * @return the currency
	 */
	public String getCurrency() {
		return currency;
	}

	/**
	 * Sets the currency.
	 *
	 * @param currency
	 *            the new currency
	 */
	public void setCurrency(String currency) {
		this.currency = currency;
	}

	/**
	 * Gets the image url.
	 *
	 * @return the image url
	 */
	public String getImageUrl() {
		return imageUrl;
	}

	/**
	 * Sets the image url.
	 *
	 * @param imageUrl
	 *            the new image url
	 */
	public void setImageUrl(String imageUrl) {
		this.imageUrl = imageUrl;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((currency == null) ? 0 : currency.hashCode());
		result = prime * result
				+ ((imageUrl == null) ? 0 : imageUrl.hashCode());
		result = prime * result + ((price == null) ? 0 : price.hashCode());
		result = prime * result + quantity;
		result = prime * result
				+ ((subtitle == null) ? 0 : subtitle.hashCode());
		result = prime * result + ((title == null) ? 0 : title.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ReceiptTemplateElement other = (ReceiptTemplateElement) obj;
		if (currency == null) {
			if (other.currency != null)
				return false;
		} else if (!currency.equals(other.currency))
			return false;
		if (imageUrl == null) {
			if (other.imageUrl != null)
				return false;
		} else if (!imageUrl.equals(other.imageUrl))
			return false;
		if (price == null) {
			if (other.price != null)
				return false;
		} else if (!price.equals(other.price))
			return false;
		if (quantity != other.quantity)
			return false;
		if (subtitle == null) {
			if (other.subtitle != null)
				return false;
		} else if (!subtitle.equals(other.subtitle))
			return false;
		if (title == null) {
			if (other.title != null)
				return false;
		} else if (!title.equals(other.title))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""ReceiptTemplateElement [title="" + title + "", subtitle=""
				+ subtitle + "", quantity="" + quantity + "", price="" + price
				+ "", currency="" + currency + "", imageUrl="" + imageUrl + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.template.receipt; public class ReceiptTemplateElement implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	private String title; private String subtitle; private int quantity; @NotNull
	private BigDecimal price; @Pattern(regexp = ""[A-Z]{ 3} "", message = ""{ currency.pattern.message} "")
	private String currency; @SerializedName(""image_url"")
	private String imageUrl; public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public String getSubtitle() { return subtitle; } public void setSubtitle(String subtitle) { this.subtitle = subtitle; } public int getQuantity() { return quantity; } public void setQuantity(int quantity) { this.quantity = quantity; } public BigDecimal getPrice() { return price; } public void setPrice(BigDecimal price) { this.price = price; } public String getCurrency() { return currency; } public void setCurrency(String currency) { this.currency = currency; } public String getImageUrl() { return imageUrl; } public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((currency == null) ? 0 : currency.hashCode()); result = prime * result
				+ ((imageUrl == null) ? 0 : imageUrl.hashCode()); result = prime * result + ((price == null) ? 0 : price.hashCode()); result = prime * result + quantity; result = prime * result
				+ ((subtitle == null) ? 0 : subtitle.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ReceiptTemplateElement other = (ReceiptTemplateElement) obj; if (currency == null) { if (other.currency != null)
				return false; } else if (!currency.equals(other.currency))
			return false; if (imageUrl == null) { if (other.imageUrl != null)
				return false; } else if (!imageUrl.equals(other.imageUrl))
			return false; if (price == null) { if (other.price != null)
				return false; } else if (!price.equals(other.price))
			return false; if (quantity != other.quantity)
			return false; if (subtitle == null) { if (other.subtitle != null)
				return false; } else if (!subtitle.equals(other.subtitle))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; return true; } @Override
	public String toString() { return ""ReceiptTemplateElement [title="" + title + "", subtitle=""
				+ subtitle + "", quantity="" + quantity + "", price="" + price
				+ "", currency="" + currency + "", imageUrl="" + imageUrl + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.receipt; public class ReceiptTemplateElement implements Serializable { private static final long serialVersionUID = 1L; @NotBlank
	private String title; private String subtitle; private int quantity; @NotNull
	private BigDecimal price; @Pattern(regexp = ""[A-Z]{ 3} "", message = ""{ currency.pattern.message} "")
	private String currency; @SerializedName(""image_url"")
	private String imageUrl; public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public String getSubtitle() { return subtitle; } public void setSubtitle(String subtitle) { this.subtitle = subtitle; } public int getQuantity() { return quantity; } public void setQuantity(int quantity) { this.quantity = quantity; } public BigDecimal getPrice() { return price; } public void setPrice(BigDecimal price) { this.price = price; } public String getCurrency() { return currency; } public void setCurrency(String currency) { this.currency = currency; } public String getImageUrl() { return imageUrl; } public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((currency == null) ? 0 : currency.hashCode()); result = prime * result
				+ ((imageUrl == null) ? 0 : imageUrl.hashCode()); result = prime * result + ((price == null) ? 0 : price.hashCode()); result = prime * result + quantity; result = prime * result
				+ ((subtitle == null) ? 0 : subtitle.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ReceiptTemplateElement other = (ReceiptTemplateElement) obj; if (currency == null) { if (other.currency != null)
				return false; } else if (!currency.equals(other.currency))
			return false; if (imageUrl == null) { if (other.imageUrl != null)
				return false; } else if (!imageUrl.equals(other.imageUrl))
			return false; if (price == null) { if (other.price != null)
				return false; } else if (!price.equals(other.price))
			return false; if (quantity != other.quantity)
			return false; if (subtitle == null) { if (other.subtitle != null)
				return false; } else if (!subtitle.equals(other.subtitle))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; return true; } @Override
	public String toString() { return ""ReceiptTemplateElement [title="" + title + "", subtitle=""
				+ subtitle + "", quantity="" + quantity + "", price="" + price
				+ "", currency="" + currency + "", imageUrl="" + imageUrl + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.receipt; 
import java.io.Serializable; import java.math.BigDecimal; 
import javax.validation.constraints.NotNull; import javax.validation.constraints.Pattern; 
import org.hibernate.validator.constraints.NotBlank; 
import com.google.gson.annotations.SerializedName; 
  public class ReceiptTemplateElement implements Serializable { /**
 * The Class ReceiptTemplateElement.
 * 
 * @author Alvin Reyes
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @NotBlank
	private String title; /** The title. */  private String subtitle; /** The subtitle. */  private int quantity; /** The quantity. */  @NotNull
	private BigDecimal price; /** The price. */  @Pattern(regexp = ""[A-Z]{ 3} "", message = ""{ currency.pattern.message} "")
	private String currency; /** The currency. */  @SerializedName(""image_url"")
	private String imageUrl; /** The image url. */  public String getTitle() { return title; } /**
	 * Gets the title.
	 *
	 * @return the title
	 */  public void setTitle(String title) { this.title = title; } /**
	 * Sets the title.
	 *
	 * @param title
	 *            the new title
	 */  public String getSubtitle() { return subtitle; } /**
	 * Gets the subtitle.
	 *
	 * @return the subtitle
	 */  public void setSubtitle(String subtitle) { this.subtitle = subtitle; } /**
	 * Sets the subtitle.
	 *
	 * @param subtitle
	 *            the new subtitle
	 */  public int getQuantity() { return quantity; } /**
	 * Gets the quantity.
	 *
	 * @return the quantity
	 */  public void setQuantity(int quantity) { this.quantity = quantity; } /**
	 * Sets the quantity.
	 *
	 * @param quantity
	 *            the new quantity
	 */  public BigDecimal getPrice() { return price; } /**
	 * Gets the price.
	 *
	 * @return the price
	 */  public void setPrice(BigDecimal price) { this.price = price; } /**
	 * Sets the price.
	 *
	 * @param price
	 *            the new price
	 */  public String getCurrency() { return currency; } /**
	 * Gets the currency.
	 *
	 * @return the currency
	 */  public void setCurrency(String currency) { this.currency = currency; } /**
	 * Sets the currency.
	 *
	 * @param currency
	 *            the new currency
	 */  public String getImageUrl() { return imageUrl; } /**
	 * Gets the image url.
	 *
	 * @return the image url
	 */  public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; } /**
	 * Sets the image url.
	 *
	 * @param imageUrl
	 *            the new image url
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((currency == null) ? 0 : currency.hashCode()); result = prime * result
				+ ((imageUrl == null) ? 0 : imageUrl.hashCode()); result = prime * result + ((price == null) ? 0 : price.hashCode()); result = prime * result + quantity; result = prime * result
				+ ((subtitle == null) ? 0 : subtitle.hashCode()); result = prime * result + ((title == null) ? 0 : title.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; ReceiptTemplateElement other = (ReceiptTemplateElement) obj; if (currency == null) { if (other.currency != null)
				return false; } else if (!currency.equals(other.currency))
			return false; if (imageUrl == null) { if (other.imageUrl != null)
				return false; } else if (!imageUrl.equals(other.imageUrl))
			return false; if (price == null) { if (other.price != null)
				return false; } else if (!price.equals(other.price))
			return false; if (quantity != other.quantity)
			return false; if (subtitle == null) { if (other.subtitle != null)
				return false; } else if (!subtitle.equals(other.subtitle))
			return false; if (title == null) { if (other.title != null)
				return false; } else if (!title.equals(other.title))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""ReceiptTemplateElement [title="" + title + "", subtitle=""
				+ subtitle + "", quantity="" + quantity + "", price="" + price
				+ "", currency="" + currency + "", imageUrl="" + imageUrl + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/template/receipt/Summary.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.template.receipt;

import java.io.Serializable;
import java.math.BigDecimal;

import com.google.gson.annotations.SerializedName;


/**
 * The Class Summary.
 * 
 * @author Alvin Reyes
 */

public class Summary implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The subtotal. */
	private BigDecimal subtotal;

	/** The shipping cost. */
	@SerializedName(""shipping_cost"")
	private BigDecimal shippingCost;

	/** The total tax. */
	@SerializedName(""total_tax"")
	private BigDecimal totalTax;

	/** The total cost. */
	@SerializedName(""total_cost"")
	private BigDecimal totalCost;

	/**
	 * Instantiates a new summary.
	 */
	public Summary() {
	}

	/**
	 * Instantiates a new summary.
	 *
	 * @param subtotal
	 *            the subtotal
	 * @param shippingCost
	 *            the shipping cost
	 * @param totalTax
	 *            the total tax
	 * @param totalCost
	 *            the total cost
	 */
	public Summary(BigDecimal subtotal, BigDecimal shippingCost,
			BigDecimal totalTax, BigDecimal totalCost) {
		this.subtotal = subtotal;
		this.shippingCost = shippingCost;
		this.totalTax = totalTax;
		this.totalCost = totalCost;
	}

	/**
	 * Gets the subtotal.
	 *
	 * @return the subtotal
	 */
	public BigDecimal getSubtotal() {
		return subtotal;
	}

	/**
	 * Sets the subtotal.
	 *
	 * @param subtotal
	 *            the new subtotal
	 */
	public void setSubtotal(BigDecimal subtotal) {
		this.subtotal = subtotal;
	}

	/**
	 * Gets the shipping cost.
	 *
	 * @return the shipping cost
	 */
	public BigDecimal getShippingCost() {
		return shippingCost;
	}

	/**
	 * Sets the shipping cost.
	 *
	 * @param shippingCost
	 *            the new shipping cost
	 */
	public void setShippingCost(BigDecimal shippingCost) {
		this.shippingCost = shippingCost;
	}

	/**
	 * Gets the total tax.
	 *
	 * @return the total tax
	 */
	public BigDecimal getTotalTax() {
		return totalTax;
	}

	/**
	 * Sets the total tax.
	 *
	 * @param totalTax
	 *            the new total tax
	 */
	public void setTotalTax(BigDecimal totalTax) {
		this.totalTax = totalTax;
	}

	/**
	 * Gets the total cost.
	 *
	 * @return the total cost
	 */
	public BigDecimal getTotalCost() {
		return totalCost;
	}

	/**
	 * Sets the total cost.
	 *
	 * @param totalCost
	 *            the new total cost
	 */
	public void setTotalCost(BigDecimal totalCost) {
		this.totalCost = totalCost;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((shippingCost == null) ? 0 : shippingCost.hashCode());
		result = prime * result
				+ ((subtotal == null) ? 0 : subtotal.hashCode());
		result = prime * result
				+ ((totalCost == null) ? 0 : totalCost.hashCode());
		result = prime * result
				+ ((totalTax == null) ? 0 : totalTax.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Summary other = (Summary) obj;
		if (shippingCost == null) {
			if (other.shippingCost != null)
				return false;
		} else if (!shippingCost.equals(other.shippingCost))
			return false;
		if (subtotal == null) {
			if (other.subtotal != null)
				return false;
		} else if (!subtotal.equals(other.subtotal))
			return false;
		if (totalCost == null) {
			if (other.totalCost != null)
				return false;
		} else if (!totalCost.equals(other.totalCost))
			return false;
		if (totalTax == null) {
			if (other.totalTax != null)
				return false;
		} else if (!totalTax.equals(other.totalTax))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""Summary [subtotal="" + subtotal + "", shippingCost=""
				+ shippingCost + "", totalTax="" + totalTax + "", totalCost=""
				+ totalCost + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.template.receipt; public class Summary implements Serializable { private static final long serialVersionUID = 1L; private BigDecimal subtotal; @SerializedName(""shipping_cost"")
	private BigDecimal shippingCost; @SerializedName(""total_tax"")
	private BigDecimal totalTax; @SerializedName(""total_cost"")
	private BigDecimal totalCost; public Summary() { } public Summary(BigDecimal subtotal, BigDecimal shippingCost,
			BigDecimal totalTax, BigDecimal totalCost) { this.subtotal = subtotal; this.shippingCost = shippingCost; this.totalTax = totalTax; this.totalCost = totalCost; } public BigDecimal getSubtotal() { return subtotal; } public void setSubtotal(BigDecimal subtotal) { this.subtotal = subtotal; } public BigDecimal getShippingCost() { return shippingCost; } public void setShippingCost(BigDecimal shippingCost) { this.shippingCost = shippingCost; } public BigDecimal getTotalTax() { return totalTax; } public void setTotalTax(BigDecimal totalTax) { this.totalTax = totalTax; } public BigDecimal getTotalCost() { return totalCost; } public void setTotalCost(BigDecimal totalCost) { this.totalCost = totalCost; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((shippingCost == null) ? 0 : shippingCost.hashCode()); result = prime * result
				+ ((subtotal == null) ? 0 : subtotal.hashCode()); result = prime * result
				+ ((totalCost == null) ? 0 : totalCost.hashCode()); result = prime * result
				+ ((totalTax == null) ? 0 : totalTax.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Summary other = (Summary) obj; if (shippingCost == null) { if (other.shippingCost != null)
				return false; } else if (!shippingCost.equals(other.shippingCost))
			return false; if (subtotal == null) { if (other.subtotal != null)
				return false; } else if (!subtotal.equals(other.subtotal))
			return false; if (totalCost == null) { if (other.totalCost != null)
				return false; } else if (!totalCost.equals(other.totalCost))
			return false; if (totalTax == null) { if (other.totalTax != null)
				return false; } else if (!totalTax.equals(other.totalTax))
			return false; return true; } @Override
	public String toString() { return ""Summary [subtotal="" + subtotal + "", shippingCost=""
				+ shippingCost + "", totalTax="" + totalTax + "", totalCost=""
				+ totalCost + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.template.receipt; public class Summary implements Serializable { private static final long serialVersionUID = 1L; private BigDecimal subtotal; @SerializedName(""shipping_cost"")
	private BigDecimal shippingCost; @SerializedName(""total_tax"")
	private BigDecimal totalTax; @SerializedName(""total_cost"")
	private BigDecimal totalCost; public Summary() { } public Summary(BigDecimal subtotal, BigDecimal shippingCost,
			BigDecimal totalTax, BigDecimal totalCost) { this.subtotal = subtotal; this.shippingCost = shippingCost; this.totalTax = totalTax; this.totalCost = totalCost; } public BigDecimal getSubtotal() { return subtotal; } public void setSubtotal(BigDecimal subtotal) { this.subtotal = subtotal; } public BigDecimal getShippingCost() { return shippingCost; } public void setShippingCost(BigDecimal shippingCost) { this.shippingCost = shippingCost; } public BigDecimal getTotalTax() { return totalTax; } public void setTotalTax(BigDecimal totalTax) { this.totalTax = totalTax; } public BigDecimal getTotalCost() { return totalCost; } public void setTotalCost(BigDecimal totalCost) { this.totalCost = totalCost; } @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((shippingCost == null) ? 0 : shippingCost.hashCode()); result = prime * result
				+ ((subtotal == null) ? 0 : subtotal.hashCode()); result = prime * result
				+ ((totalCost == null) ? 0 : totalCost.hashCode()); result = prime * result
				+ ((totalTax == null) ? 0 : totalTax.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Summary other = (Summary) obj; if (shippingCost == null) { if (other.shippingCost != null)
				return false; } else if (!shippingCost.equals(other.shippingCost))
			return false; if (subtotal == null) { if (other.subtotal != null)
				return false; } else if (!subtotal.equals(other.subtotal))
			return false; if (totalCost == null) { if (other.totalCost != null)
				return false; } else if (!totalCost.equals(other.totalCost))
			return false; if (totalTax == null) { if (other.totalTax != null)
				return false; } else if (!totalTax.equals(other.totalTax))
			return false; return true; } @Override
	public String toString() { return ""Summary [subtotal="" + subtotal + "", shippingCost=""
				+ shippingCost + "", totalTax="" + totalTax + "", totalCost=""
				+ totalCost + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.template.receipt; 
import java.io.Serializable; import java.math.BigDecimal; 
import com.google.gson.annotations.SerializedName; 
  /**
 * The Class Summary.
 * 
 * @author Alvin Reyes
 */ public class Summary implements Serializable {   private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  private BigDecimal subtotal; /** The subtotal. */  @SerializedName(""shipping_cost"")
	private BigDecimal shippingCost; /** The shipping cost. */  @SerializedName(""total_tax"")
	private BigDecimal totalTax; /** The total tax. */  @SerializedName(""total_cost"")
	private BigDecimal totalCost; /** The total cost. */  public Summary() { } /**
	 * Instantiates a new summary.
	 */  public Summary(BigDecimal subtotal, BigDecimal shippingCost,
			BigDecimal totalTax, BigDecimal totalCost) { this.subtotal = subtotal; this.shippingCost = shippingCost; this.totalTax = totalTax; this.totalCost = totalCost; } /**
	 * Instantiates a new summary.
	 *
	 * @param subtotal
	 *            the subtotal
	 * @param shippingCost
	 *            the shipping cost
	 * @param totalTax
	 *            the total tax
	 * @param totalCost
	 *            the total cost
	 */  public BigDecimal getSubtotal() { return subtotal; } /**
	 * Gets the subtotal.
	 *
	 * @return the subtotal
	 */  public void setSubtotal(BigDecimal subtotal) { this.subtotal = subtotal; } /**
	 * Sets the subtotal.
	 *
	 * @param subtotal
	 *            the new subtotal
	 */  public BigDecimal getShippingCost() { return shippingCost; } /**
	 * Gets the shipping cost.
	 *
	 * @return the shipping cost
	 */  public void setShippingCost(BigDecimal shippingCost) { this.shippingCost = shippingCost; } /**
	 * Sets the shipping cost.
	 *
	 * @param shippingCost
	 *            the new shipping cost
	 */  public BigDecimal getTotalTax() { return totalTax; } /**
	 * Gets the total tax.
	 *
	 * @return the total tax
	 */  public void setTotalTax(BigDecimal totalTax) { this.totalTax = totalTax; } /**
	 * Sets the total tax.
	 *
	 * @param totalTax
	 *            the new total tax
	 */  public BigDecimal getTotalCost() { return totalCost; } /**
	 * Gets the total cost.
	 *
	 * @return the total cost
	 */  public void setTotalCost(BigDecimal totalCost) { this.totalCost = totalCost; } /**
	 * Sets the total cost.
	 *
	 * @param totalCost
	 *            the new total cost
	 */  @Override
	public int hashCode() { final int prime = 31; int result = 1; result = prime * result
				+ ((shippingCost == null) ? 0 : shippingCost.hashCode()); result = prime * result
				+ ((subtotal == null) ? 0 : subtotal.hashCode()); result = prime * result
				+ ((totalCost == null) ? 0 : totalCost.hashCode()); result = prime * result
				+ ((totalTax == null) ? 0 : totalTax.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (obj == null)
			return false; if (getClass() != obj.getClass())
			return false; Summary other = (Summary) obj; if (shippingCost == null) { if (other.shippingCost != null)
				return false; } else if (!shippingCost.equals(other.shippingCost))
			return false; if (subtotal == null) { if (other.subtotal != null)
				return false; } else if (!subtotal.equals(other.subtotal))
			return false; if (totalCost == null) { if (other.totalCost != null)
				return false; } else if (!totalCost.equals(other.totalCost))
			return false; if (totalTax == null) { if (other.totalTax != null)
				return false; } else if (!totalTax.equals(other.totalTax))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""Summary [subtotal="" + subtotal + "", shippingCost=""
				+ shippingCost + "", totalTax="" + totalTax + "", totalCost=""
				+ totalCost + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */ }  "
src/test/java/co/aurasphere/botmill/fb/test/autoreply/template/button/BuyButtonTest.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.test.autoreply.template.button;

import co.aurasphere.botmill.core.internal.util.ConfigurationUtils;
import co.aurasphere.botmill.fb.FbBot;
import co.aurasphere.botmill.fb.autoreply.AutoReply;
import co.aurasphere.botmill.fb.event.message.MessageEvent;
import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope;
import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse;
import co.aurasphere.botmill.fb.model.outcoming.factory.ButtonFactory;
import co.aurasphere.botmill.fb.model.outcoming.factory.ReplyFactory;
import co.aurasphere.botmill.fb.model.outcoming.template.button.BuyButton;
import co.aurasphere.botmill.fb.model.outcoming.template.button.PaymentType;
import co.aurasphere.botmill.fb.model.outcoming.template.button.RequestedUserInfo;


/**
 * Unit test for a {@link BuyButton}.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */
public class BuyButtonTest extends FbBot {

	/**
	 * The message to send in order to test this component.
	 */
	private static final String MESSAGE_TO_SEND = ""test_buy_button"";

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.FbBotDefinition#defineBehavior()
	 */
	public void defineBehaviour() {
		ConfigurationUtils.loadEncryptedConfigurationProperties(); // loads the annotated encryption class.
		ConfigurationUtils.loadBotDefinitions(); // loads the annotated bot.
		addActionFrame(new MessageEvent(MESSAGE_TO_SEND), new AutoReply() {

			@Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) {
				return ReplyFactory
						.addGenericTemplate()
						.addElement(
								""A simple Button Template with a Buy Button"")
						.addButton(
								ButtonFactory
										.createBuyButton(""buy_button_payload"")
										.setPaymentSummary(""USD"",
												PaymentType.FIXED_AMOUNT,
												""BotMill.io"")
										.addPriceLabel(""A price label"", ""2"")
										.setTestPayment(true)
										.addRequestedUserInfo(
												RequestedUserInfo.CONTACT_PHONE)
										.build()).endElement().build(envelope);
			}
		});
	}

}
","package co.aurasphere.botmill.fb.test.autoreply.template.button; public class BuyButtonTest extends FbBot { private static final String MESSAGE_TO_SEND = ""test_buy_button""; public void defineBehaviour() { ConfigurationUtils.loadEncryptedConfigurationProperties(); ConfigurationUtils.loadBotDefinitions(); addActionFrame(new MessageEvent(MESSAGE_TO_SEND), new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory
						.addGenericTemplate()
						.addElement(
								""A simple Button Template with a Buy Button"")
						.addButton(
								ButtonFactory
										.createBuyButton(""buy_button_payload"")
										.setPaymentSummary(""USD"",
												PaymentType.FIXED_AMOUNT,
												""BotMill.io"")
										.addPriceLabel(""A price label"", ""2"")
										.setTestPayment(true)
										.addRequestedUserInfo(
												RequestedUserInfo.CONTACT_PHONE)
										.build()).endElement().build(envelope); } } ); } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.test.autoreply.template.button; public class BuyButtonTest extends FbBot { private static final String MESSAGE_TO_SEND = ""test_buy_button""; public void defineBehaviour() { ConfigurationUtils.loadEncryptedConfigurationProperties(); ConfigurationUtils.loadBotDefinitions(); addActionFrame(new MessageEvent(MESSAGE_TO_SEND), new AutoReply() { @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory
						.addGenericTemplate()
						.addElement(
								""A simple Button Template with a Buy Button"")
						.addButton(
								ButtonFactory
										.createBuyButton(""buy_button_payload"")
										.setPaymentSummary(""USD"",
												PaymentType.FIXED_AMOUNT,
												""BotMill.io"")
										.addPriceLabel(""A price label"", ""2"")
										.setTestPayment(true)
										.addRequestedUserInfo(
												RequestedUserInfo.CONTACT_PHONE)
										.build()).endElement().build(envelope); } } ); } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.test.autoreply.template.button; 
import co.aurasphere.botmill.core.internal.util.ConfigurationUtils; import co.aurasphere.botmill.fb.FbBot; import co.aurasphere.botmill.fb.autoreply.AutoReply; import co.aurasphere.botmill.fb.event.message.MessageEvent; import co.aurasphere.botmill.fb.model.incoming.MessageEnvelope; import co.aurasphere.botmill.fb.model.outcoming.FbBotMillResponse; import co.aurasphere.botmill.fb.model.outcoming.factory.ButtonFactory; import co.aurasphere.botmill.fb.model.outcoming.factory.ReplyFactory; import co.aurasphere.botmill.fb.model.outcoming.template.button.BuyButton; import co.aurasphere.botmill.fb.model.outcoming.template.button.PaymentType; import co.aurasphere.botmill.fb.model.outcoming.template.button.RequestedUserInfo; 
  public class BuyButtonTest extends FbBot { /**
 * Unit test for a {@link BuyButton}.
 * 
 * @author Donato Rimenti
 * @author Alvin Reyes
 */  private static final String MESSAGE_TO_SEND = ""test_buy_button""; /**
	 * The message to send in order to test this component.
	 */  public void defineBehaviour() { ConfigurationUtils.loadEncryptedConfigurationProperties(); /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.FbBotDefinition#defineBehavior()
	 */ ConfigurationUtils.loadBotDefinitions(); // loads the annotated encryption class. addActionFrame(new MessageEvent(MESSAGE_TO_SEND), new AutoReply() { // loads the annotated bot. @Override
			public FbBotMillResponse createResponse(MessageEnvelope envelope) { return ReplyFactory
						.addGenericTemplate()
						.addElement(
								""A simple Button Template with a Buy Button"")
						.addButton(
								ButtonFactory
										.createBuyButton(""buy_button_payload"")
										.setPaymentSummary(""USD"",
												PaymentType.FIXED_AMOUNT,
												""BotMill.io"")
										.addPriceLabel(""A price label"", ""2"")
										.setTestPayment(true)
										.addRequestedUserInfo(
												RequestedUserInfo.CONTACT_PHONE)
										.build()).endElement().build(envelope); } } ); }  }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/payload/template/airline/AirlineBasePnrNumberTemplatePayload.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.payload.template.airline;

import org.hibernate.validator.constraints.NotBlank;

import com.google.gson.annotations.SerializedName;


/**
 * The Class AirlineBasePnrNumberTemplatePayload.
 */
public abstract class AirlineBasePnrNumberTemplatePayload extends
		AirlineBaseTemplatePayload {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The pnr number. */
	@NotBlank
	@SerializedName(""pnr_number"")
	private String pnrNumber;

	/**
	 * Instantiates a new airline base pnr number template payload.
	 *
	 * @param introMessage
	 *            the intro message
	 * @param locale
	 *            the locale
	 * @param pnrNumber
	 *            the pnr number
	 */
	public AirlineBasePnrNumberTemplatePayload(String introMessage,
			String locale, String pnrNumber) {
		super(introMessage, locale);
		this.pnrNumber = pnrNumber;
	}

	/**
	 * Instantiates a new AirlineBasePnrNumberTemplatePayload.
	 */
	public AirlineBasePnrNumberTemplatePayload() {
	}

	/**
	 * Gets the pnr number.
	 *
	 * @return the pnr number
	 */
	public String getPnrNumber() {
		return pnrNumber;
	}

	/**
	 * Sets the pnr number.
	 *
	 * @param pnrNumber
	 *            the new pnr number
	 */
	public void setPnrNumber(String pnrNumber) {
		this.pnrNumber = pnrNumber;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBaseTemplatePayload#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result
				+ ((pnrNumber == null) ? 0 : pnrNumber.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBaseTemplatePayload#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		AirlineBasePnrNumberTemplatePayload other = (AirlineBasePnrNumberTemplatePayload) obj;
		if (pnrNumber == null) {
			if (other.pnrNumber != null)
				return false;
		} else if (!pnrNumber.equals(other.pnrNumber))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBaseTemplatePayload#toString()
	 */
	@Override
	public String toString() {
		return ""AirlineBasePnrNumberTemplatePayload [pnrNumber="" + pnrNumber
				+ "", templateType="" + templateType + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.payload.template.airline; public abstract class AirlineBasePnrNumberTemplatePayload extends
		AirlineBaseTemplatePayload { private static final long serialVersionUID = 1L; @NotBlank
	@SerializedName(""pnr_number"")
	private String pnrNumber; public AirlineBasePnrNumberTemplatePayload(String introMessage,
			String locale, String pnrNumber) { super(introMessage, locale); this.pnrNumber = pnrNumber; } public AirlineBasePnrNumberTemplatePayload() { } public String getPnrNumber() { return pnrNumber; } public void setPnrNumber(String pnrNumber) { this.pnrNumber = pnrNumber; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((pnrNumber == null) ? 0 : pnrNumber.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; AirlineBasePnrNumberTemplatePayload other = (AirlineBasePnrNumberTemplatePayload) obj; if (pnrNumber == null) { if (other.pnrNumber != null)
				return false; } else if (!pnrNumber.equals(other.pnrNumber))
			return false; return true; } @Override
	public String toString() { return ""AirlineBasePnrNumberTemplatePayload [pnrNumber="" + pnrNumber
				+ "", templateType="" + templateType + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.payload.template.airline; public abstract class AirlineBasePnrNumberTemplatePayload extends
		AirlineBaseTemplatePayload { private static final long serialVersionUID = 1L; @NotBlank
	@SerializedName(""pnr_number"")
	private String pnrNumber; public AirlineBasePnrNumberTemplatePayload(String introMessage,
			String locale, String pnrNumber) { super(introMessage, locale); this.pnrNumber = pnrNumber; } public AirlineBasePnrNumberTemplatePayload() { } public String getPnrNumber() { return pnrNumber; } public void setPnrNumber(String pnrNumber) { this.pnrNumber = pnrNumber; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((pnrNumber == null) ? 0 : pnrNumber.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; AirlineBasePnrNumberTemplatePayload other = (AirlineBasePnrNumberTemplatePayload) obj; if (pnrNumber == null) { if (other.pnrNumber != null)
				return false; } else if (!pnrNumber.equals(other.pnrNumber))
			return false; return true; } @Override
	public String toString() { return ""AirlineBasePnrNumberTemplatePayload [pnrNumber="" + pnrNumber
				+ "", templateType="" + templateType + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.payload.template.airline; 
import org.hibernate.validator.constraints.NotBlank; 
import com.google.gson.annotations.SerializedName; 
  public abstract class AirlineBasePnrNumberTemplatePayload extends
		AirlineBaseTemplatePayload { /**
 * The Class AirlineBasePnrNumberTemplatePayload.
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @NotBlank
	@SerializedName(""pnr_number"")
	private String pnrNumber; /** The pnr number. */  public AirlineBasePnrNumberTemplatePayload(String introMessage,
			String locale, String pnrNumber) { super(introMessage, locale); this.pnrNumber = pnrNumber; } /**
	 * Instantiates a new airline base pnr number template payload.
	 *
	 * @param introMessage
	 *            the intro message
	 * @param locale
	 *            the locale
	 * @param pnrNumber
	 *            the pnr number
	 */  public AirlineBasePnrNumberTemplatePayload() { } /**
	 * Instantiates a new AirlineBasePnrNumberTemplatePayload.
	 */  public String getPnrNumber() { return pnrNumber; } /**
	 * Gets the pnr number.
	 *
	 * @return the pnr number
	 */  public void setPnrNumber(String pnrNumber) { this.pnrNumber = pnrNumber; } /**
	 * Sets the pnr number.
	 *
	 * @param pnrNumber
	 *            the new pnr number
	 */  @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((pnrNumber == null) ? 0 : pnrNumber.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBaseTemplatePayload#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; AirlineBasePnrNumberTemplatePayload other = (AirlineBasePnrNumberTemplatePayload) obj; if (pnrNumber == null) { if (other.pnrNumber != null)
				return false; } else if (!pnrNumber.equals(other.pnrNumber))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBaseTemplatePayload#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""AirlineBasePnrNumberTemplatePayload [pnrNumber="" + pnrNumber
				+ "", templateType="" + templateType + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBaseTemplatePayload#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/payload/template/airline/AirlineBaseTemplatePayload.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.payload.template.airline;

import javax.validation.constraints.Pattern;

import org.hibernate.validator.constraints.NotBlank;

import co.aurasphere.botmill.fb.model.outcoming.payload.template.TemplateBasePayload;

import com.google.gson.annotations.SerializedName;


/**
 * The Class AirlineBaseTemplatePayload.
 */
public class AirlineBaseTemplatePayload extends TemplateBasePayload {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The intro message. */
	@NotBlank
	@SerializedName(""intro_message"")
	private String introMessage;

	/** The locale. */
	@NotBlank
	@Pattern(regexp = ""[a-z]{2}_[A-Z]{2}"", message = ""{locale.pattern.message}"")
	private String locale;

	/** The theme color. */
	@Pattern(regexp = ""#\\d{6}"", message = ""{theme.color.pattern.message}"")
	@SerializedName(""theme_color"")
	private String themeColor;

	/**
	 * Instantiates a new AirlineBaseTemplatePayload.
	 */
	public AirlineBaseTemplatePayload() {
	}

	/**
	 * Instantiates a new airline base template payload.
	 *
	 * @param introMessage
	 *            the intro message
	 * @param locale
	 *            the locale
	 */
	public AirlineBaseTemplatePayload(String introMessage, String locale) {
		this.introMessage = introMessage;
		this.locale = locale;
	}

	/**
	 * Gets the intro message.
	 *
	 * @return the intro message
	 */
	public String getIntroMessage() {
		return introMessage;
	}

	/**
	 * Sets the intro message.
	 *
	 * @param introMessage
	 *            the new intro message
	 */
	public void setIntroMessage(String introMessage) {
		this.introMessage = introMessage;
	}

	/**
	 * Gets the locale.
	 *
	 * @return the locale
	 */
	public String getLocale() {
		return locale;
	}

	/**
	 * Sets the locale.
	 *
	 * @param locale
	 *            the new locale
	 */
	public void setLocale(String locale) {
		this.locale = locale;
	}

	/**
	 * Gets the theme color.
	 *
	 * @return the theme color
	 */
	public String getThemeColor() {
		return themeColor;
	}

	/**
	 * Sets the theme color.
	 *
	 * @param themeColor
	 *            the new theme color
	 */
	public void setThemeColor(String themeColor) {
		this.themeColor = themeColor;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.payload.template.TemplateBasePayload
	 * #hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result
				+ ((introMessage == null) ? 0 : introMessage.hashCode());
		result = prime * result + ((locale == null) ? 0 : locale.hashCode());
		result = prime * result
				+ ((themeColor == null) ? 0 : themeColor.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.payload.template.TemplateBasePayload
	 * #equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		AirlineBaseTemplatePayload other = (AirlineBaseTemplatePayload) obj;
		if (introMessage == null) {
			if (other.introMessage != null)
				return false;
		} else if (!introMessage.equals(other.introMessage))
			return false;
		if (locale == null) {
			if (other.locale != null)
				return false;
		} else if (!locale.equals(other.locale))
			return false;
		if (themeColor == null) {
			if (other.themeColor != null)
				return false;
		} else if (!themeColor.equals(other.themeColor))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.payload.template.TemplateBasePayload
	 * #toString()
	 */
	@Override
	public String toString() {
		return ""AirlineBaseTemplatePayload [introMessage="" + introMessage
				+ "", locale="" + locale + "", themeColor="" + themeColor
				+ "", templateType="" + templateType + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.payload.template.airline; public class AirlineBaseTemplatePayload extends TemplateBasePayload { private static final long serialVersionUID = 1L; @NotBlank
	@SerializedName(""intro_message"")
	private String introMessage; @NotBlank
	@Pattern(regexp = ""[a-z]{ 2} _[A-Z]{ 2} "", message = ""{ locale.pattern.message} "")
	private String locale; @Pattern(regexp = ""#\\d{ 6} "", message = ""{ theme.color.pattern.message} "")
	@SerializedName(""theme_color"")
	private String themeColor; public AirlineBaseTemplatePayload() { } public AirlineBaseTemplatePayload(String introMessage, String locale) { this.introMessage = introMessage; this.locale = locale; } public String getIntroMessage() { return introMessage; } public void setIntroMessage(String introMessage) { this.introMessage = introMessage; } public String getLocale() { return locale; } public void setLocale(String locale) { this.locale = locale; } public String getThemeColor() { return themeColor; } public void setThemeColor(String themeColor) { this.themeColor = themeColor; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((introMessage == null) ? 0 : introMessage.hashCode()); result = prime * result + ((locale == null) ? 0 : locale.hashCode()); result = prime * result
				+ ((themeColor == null) ? 0 : themeColor.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; AirlineBaseTemplatePayload other = (AirlineBaseTemplatePayload) obj; if (introMessage == null) { if (other.introMessage != null)
				return false; } else if (!introMessage.equals(other.introMessage))
			return false; if (locale == null) { if (other.locale != null)
				return false; } else if (!locale.equals(other.locale))
			return false; if (themeColor == null) { if (other.themeColor != null)
				return false; } else if (!themeColor.equals(other.themeColor))
			return false; return true; } @Override
	public String toString() { return ""AirlineBaseTemplatePayload [introMessage="" + introMessage
				+ "", locale="" + locale + "", themeColor="" + themeColor
				+ "", templateType="" + templateType + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.payload.template.airline; public class AirlineBaseTemplatePayload extends TemplateBasePayload { private static final long serialVersionUID = 1L; @NotBlank
	@SerializedName(""intro_message"")
	private String introMessage; @NotBlank
	@Pattern(regexp = ""[a-z]{ 2} _[A-Z]{ 2} "", message = ""{ locale.pattern.message} "")
	private String locale; @Pattern(regexp = ""#\\d{ 6} "", message = ""{ theme.color.pattern.message} "")
	@SerializedName(""theme_color"")
	private String themeColor; public AirlineBaseTemplatePayload() { } public AirlineBaseTemplatePayload(String introMessage, String locale) { this.introMessage = introMessage; this.locale = locale; } public String getIntroMessage() { return introMessage; } public void setIntroMessage(String introMessage) { this.introMessage = introMessage; } public String getLocale() { return locale; } public void setLocale(String locale) { this.locale = locale; } public String getThemeColor() { return themeColor; } public void setThemeColor(String themeColor) { this.themeColor = themeColor; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((introMessage == null) ? 0 : introMessage.hashCode()); result = prime * result + ((locale == null) ? 0 : locale.hashCode()); result = prime * result
				+ ((themeColor == null) ? 0 : themeColor.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; AirlineBaseTemplatePayload other = (AirlineBaseTemplatePayload) obj; if (introMessage == null) { if (other.introMessage != null)
				return false; } else if (!introMessage.equals(other.introMessage))
			return false; if (locale == null) { if (other.locale != null)
				return false; } else if (!locale.equals(other.locale))
			return false; if (themeColor == null) { if (other.themeColor != null)
				return false; } else if (!themeColor.equals(other.themeColor))
			return false; return true; } @Override
	public String toString() { return ""AirlineBaseTemplatePayload [introMessage="" + introMessage
				+ "", locale="" + locale + "", themeColor="" + themeColor
				+ "", templateType="" + templateType + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.payload.template.airline; 
import javax.validation.constraints.Pattern; 
import org.hibernate.validator.constraints.NotBlank; 
import co.aurasphere.botmill.fb.model.outcoming.payload.template.TemplateBasePayload; 
import com.google.gson.annotations.SerializedName; 
  public class AirlineBaseTemplatePayload extends TemplateBasePayload { /**
 * The Class AirlineBaseTemplatePayload.
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @NotBlank
	@SerializedName(""intro_message"")
	private String introMessage; /** The intro message. */  @NotBlank
	@Pattern(regexp = ""[a-z]{ 2} _[A-Z]{ 2} "", message = ""{ locale.pattern.message} "")
	private String locale; /** The locale. */  @Pattern(regexp = ""#\\d{ 6} "", message = ""{ theme.color.pattern.message} "")
	@SerializedName(""theme_color"")
	private String themeColor; /** The theme color. */  public AirlineBaseTemplatePayload() { } /**
	 * Instantiates a new AirlineBaseTemplatePayload.
	 */  public AirlineBaseTemplatePayload(String introMessage, String locale) { this.introMessage = introMessage; this.locale = locale; } /**
	 * Instantiates a new airline base template payload.
	 *
	 * @param introMessage
	 *            the intro message
	 * @param locale
	 *            the locale
	 */  public String getIntroMessage() { return introMessage; } /**
	 * Gets the intro message.
	 *
	 * @return the intro message
	 */  public void setIntroMessage(String introMessage) { this.introMessage = introMessage; } /**
	 * Sets the intro message.
	 *
	 * @param introMessage
	 *            the new intro message
	 */  public String getLocale() { return locale; } /**
	 * Gets the locale.
	 *
	 * @return the locale
	 */  public void setLocale(String locale) { this.locale = locale; } /**
	 * Sets the locale.
	 *
	 * @param locale
	 *            the new locale
	 */  public String getThemeColor() { return themeColor; } /**
	 * Gets the theme color.
	 *
	 * @return the theme color
	 */  public void setThemeColor(String themeColor) { this.themeColor = themeColor; } /**
	 * Sets the theme color.
	 *
	 * @param themeColor
	 *            the new theme color
	 */  @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((introMessage == null) ? 0 : introMessage.hashCode()); result = prime * result + ((locale == null) ? 0 : locale.hashCode()); result = prime * result
				+ ((themeColor == null) ? 0 : themeColor.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.payload.template.TemplateBasePayload
	 * #hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; AirlineBaseTemplatePayload other = (AirlineBaseTemplatePayload) obj; if (introMessage == null) { if (other.introMessage != null)
				return false; } else if (!introMessage.equals(other.introMessage))
			return false; if (locale == null) { if (other.locale != null)
				return false; } else if (!locale.equals(other.locale))
			return false; if (themeColor == null) { if (other.themeColor != null)
				return false; } else if (!themeColor.equals(other.themeColor))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.payload.template.TemplateBasePayload
	 * #equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""AirlineBaseTemplatePayload [introMessage="" + introMessage
				+ "", locale="" + locale + "", themeColor="" + themeColor
				+ "", templateType="" + templateType + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see
	 * co.aurasphere.botmill.fb.model.outcoming.payload.template.TemplateBasePayload
	 * #toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/payload/template/airline/AirlineBoardingPassTemplatePayload.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.payload.template.airline;

import java.util.ArrayList;
import java.util.List;

import org.hibernate.validator.constraints.NotEmpty;

import co.aurasphere.botmill.fb.model.outcoming.payload.PayloadType;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.BoardingPass;

import com.google.gson.annotations.SerializedName;


/**
 * The Class AirlineBoardingPassTemplatePayload.
 */
public class AirlineBoardingPassTemplatePayload extends
		AirlineBaseTemplatePayload {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The boarding pass. */
	@NotEmpty
	@SerializedName(""boarding_pass"")
	private List<BoardingPass> boardingPass;

	/**
	 * Instantiates a new airline boarding pass template payload.
	 *
	 * @param introMessage
	 *            the intro message
	 * @param locale
	 *            the locale
	 */
	public AirlineBoardingPassTemplatePayload(String introMessage, String locale) {
		super(introMessage, locale);
		this.boardingPass = new ArrayList<BoardingPass>();
		this.templateType = PayloadType.AIRLINE_BOARDINGPASS;
	}

	/**
	 * Instantiates a new AirlineBoardingPassTemplatePayload.
	 */
	public AirlineBoardingPassTemplatePayload() {
	}

	/**
	 * Gets the boarding pass.
	 *
	 * @return the boarding pass
	 */
	public List<BoardingPass> getBoardingPass() {
		return boardingPass;
	}

	/**
	 * Sets the boarding pass.
	 *
	 * @param boardingPass
	 *            the new boarding pass
	 */
	public void setBoardingPass(List<BoardingPass> boardingPass) {
		this.boardingPass = boardingPass;
	}

	/**
	 * Adds the boarding pass.
	 *
	 * @param boardingPass
	 *            the boarding pass
	 */
	public void addBoardingPass(BoardingPass boardingPass) {
		this.boardingPass.add(boardingPass);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBaseTemplatePayload#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result
				+ ((boardingPass == null) ? 0 : boardingPass.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBaseTemplatePayload#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		AirlineBoardingPassTemplatePayload other = (AirlineBoardingPassTemplatePayload) obj;
		if (boardingPass == null) {
			if (other.boardingPass != null)
				return false;
		} else if (!boardingPass.equals(other.boardingPass))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBaseTemplatePayload#toString()
	 */
	@Override
	public String toString() {
		return ""AirlineBoardingPassTemplatePayload [boardingPass=""
				+ boardingPass + "", templateType="" + templateType + ""]"";
	}

}
","package co.aurasphere.botmill.fb.model.outcoming.payload.template.airline; public class AirlineBoardingPassTemplatePayload extends
		AirlineBaseTemplatePayload { private static final long serialVersionUID = 1L; @NotEmpty
	@SerializedName(""boarding_pass"")
	private List<BoardingPass> boardingPass; public AirlineBoardingPassTemplatePayload(String introMessage, String locale) { super(introMessage, locale); this.boardingPass = new ArrayList<BoardingPass>(); this.templateType = PayloadType.AIRLINE_BOARDINGPASS; } public AirlineBoardingPassTemplatePayload() { } public List<BoardingPass> getBoardingPass() { return boardingPass; } public void setBoardingPass(List<BoardingPass> boardingPass) { this.boardingPass = boardingPass; } public void addBoardingPass(BoardingPass boardingPass) { this.boardingPass.add(boardingPass); } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((boardingPass == null) ? 0 : boardingPass.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; AirlineBoardingPassTemplatePayload other = (AirlineBoardingPassTemplatePayload) obj; if (boardingPass == null) { if (other.boardingPass != null)
				return false; } else if (!boardingPass.equals(other.boardingPass))
			return false; return true; } @Override
	public String toString() { return ""AirlineBoardingPassTemplatePayload [boardingPass=""
				+ boardingPass + "", templateType="" + templateType + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.payload.template.airline; public class AirlineBoardingPassTemplatePayload extends
		AirlineBaseTemplatePayload { private static final long serialVersionUID = 1L; @NotEmpty
	@SerializedName(""boarding_pass"")
	private List<BoardingPass> boardingPass; public AirlineBoardingPassTemplatePayload(String introMessage, String locale) { super(introMessage, locale); this.boardingPass = new ArrayList<BoardingPass>(); this.templateType = PayloadType.AIRLINE_BOARDINGPASS; } public AirlineBoardingPassTemplatePayload() { } public List<BoardingPass> getBoardingPass() { return boardingPass; } public void setBoardingPass(List<BoardingPass> boardingPass) { this.boardingPass = boardingPass; } public void addBoardingPass(BoardingPass boardingPass) { this.boardingPass.add(boardingPass); } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((boardingPass == null) ? 0 : boardingPass.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; AirlineBoardingPassTemplatePayload other = (AirlineBoardingPassTemplatePayload) obj; if (boardingPass == null) { if (other.boardingPass != null)
				return false; } else if (!boardingPass.equals(other.boardingPass))
			return false; return true; } @Override
	public String toString() { return ""AirlineBoardingPassTemplatePayload [boardingPass=""
				+ boardingPass + "", templateType="" + templateType + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.payload.template.airline; 
import java.util.ArrayList; import java.util.List; 
import org.hibernate.validator.constraints.NotEmpty; 
import co.aurasphere.botmill.fb.model.outcoming.payload.PayloadType; import co.aurasphere.botmill.fb.model.outcoming.template.airline.BoardingPass; 
import com.google.gson.annotations.SerializedName; 
  public class AirlineBoardingPassTemplatePayload extends
		AirlineBaseTemplatePayload { /**
 * The Class AirlineBoardingPassTemplatePayload.
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @NotEmpty
	@SerializedName(""boarding_pass"")
	private List<BoardingPass> boardingPass; /** The boarding pass. */  public AirlineBoardingPassTemplatePayload(String introMessage, String locale) { super(introMessage, locale); this.boardingPass = new ArrayList<BoardingPass>(); this.templateType = PayloadType.AIRLINE_BOARDINGPASS; } /**
	 * Instantiates a new airline boarding pass template payload.
	 *
	 * @param introMessage
	 *            the intro message
	 * @param locale
	 *            the locale
	 */  public AirlineBoardingPassTemplatePayload() { } /**
	 * Instantiates a new AirlineBoardingPassTemplatePayload.
	 */  public List<BoardingPass> getBoardingPass() { return boardingPass; } /**
	 * Gets the boarding pass.
	 *
	 * @return the boarding pass
	 */  public void setBoardingPass(List<BoardingPass> boardingPass) { this.boardingPass = boardingPass; } /**
	 * Sets the boarding pass.
	 *
	 * @param boardingPass
	 *            the new boarding pass
	 */  public void addBoardingPass(BoardingPass boardingPass) { this.boardingPass.add(boardingPass); } /**
	 * Adds the boarding pass.
	 *
	 * @param boardingPass
	 *            the boarding pass
	 */  @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((boardingPass == null) ? 0 : boardingPass.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBaseTemplatePayload#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; AirlineBoardingPassTemplatePayload other = (AirlineBoardingPassTemplatePayload) obj; if (boardingPass == null) { if (other.boardingPass != null)
				return false; } else if (!boardingPass.equals(other.boardingPass))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBaseTemplatePayload#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""AirlineBoardingPassTemplatePayload [boardingPass=""
				+ boardingPass + "", templateType="" + templateType + ""]""; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBaseTemplatePayload#toString()
	 */ }  "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/payload/template/airline/AirlineCheckinTemplatePayload.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.payload.template.airline;

import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;

import org.hibernate.validator.constraints.NotBlank;
import org.hibernate.validator.constraints.NotEmpty;

import co.aurasphere.botmill.fb.model.outcoming.payload.PayloadType;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfo;

import com.google.gson.annotations.SerializedName;


/**
 * The Class AirlineCheckinTemplatePayload.
 */
public class AirlineCheckinTemplatePayload extends
		AirlineBasePnrNumberTemplatePayload {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The flight info. */
	@Valid
	@NotEmpty
	@SerializedName(""flight_info"")
	private List<FlightInfo> flightInfo;

	/** The checkin url. */
	@NotBlank
	@SerializedName(""checkin_url"")
	private String checkinUrl;

	/**
	 * Instantiates a new airline checkin template payload.
	 *
	 * @param introMessage
	 *            the intro message
	 * @param locale
	 *            the locale
	 * @param pnrNumber
	 *            the pnr number
	 * @param checkinUrl
	 *            the checkin url
	 */
	public AirlineCheckinTemplatePayload(String introMessage, String locale,
			String pnrNumber, String checkinUrl) {
		super(introMessage, locale, pnrNumber);
		this.flightInfo = new ArrayList<FlightInfo>();
		this.checkinUrl = checkinUrl;
		this.templateType = PayloadType.AIRLINE_CHECKIN;
	}

	/**
	 * Instantiates a new AirlineCheckinTemplatePayload.
	 */
	public AirlineCheckinTemplatePayload() {
	}

	/**
	 * Gets the checkin url.
	 *
	 * @return the checkin url
	 */
	public String getCheckinUrl() {
		return checkinUrl;
	}

	/**
	 * Sets the checkin url.
	 *
	 * @param checkinUrl
	 *            the new checkin url
	 */
	public void setCheckinUrl(String checkinUrl) {
		this.checkinUrl = checkinUrl;
	}

	/**
	 * Gets the flight info.
	 *
	 * @return the flight info
	 */
	public List<FlightInfo> getFlightInfo() {
		return flightInfo;
	}

	/**
	 * Sets the flight info.
	 *
	 * @param flightInfo
	 *            the new flight info
	 */
	public void setFlightInfo(List<FlightInfo> flightInfo) {
		this.flightInfo = flightInfo;
	}

	/**
	 * Adds the flight info.
	 *
	 * @param flightInfo
	 *            the flight info
	 */
	public void addFlightInfo(FlightInfo flightInfo) {
		this.flightInfo.add(flightInfo);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBasePnrNumberTemplatePayload#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result
				+ ((checkinUrl == null) ? 0 : checkinUrl.hashCode());
		result = prime * result
				+ ((flightInfo == null) ? 0 : flightInfo.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBasePnrNumberTemplatePayload#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		AirlineCheckinTemplatePayload other = (AirlineCheckinTemplatePayload) obj;
		if (checkinUrl == null) {
			if (other.checkinUrl != null)
				return false;
		} else if (!checkinUrl.equals(other.checkinUrl))
			return false;
		if (flightInfo == null) {
			if (other.flightInfo != null)
				return false;
		} else if (!flightInfo.equals(other.flightInfo))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBasePnrNumberTemplatePayload#toString()
	 */
	@Override
	public String toString() {
		return ""AirlineCheckinTemplatePayload [flightInfo="" + flightInfo
				+ "", checkinUrl="" + checkinUrl + "", templateType=""
				+ templateType + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.outcoming.payload.template.airline; public class AirlineCheckinTemplatePayload extends
		AirlineBasePnrNumberTemplatePayload { private static final long serialVersionUID = 1L; @Valid
	@NotEmpty
	@SerializedName(""flight_info"")
	private List<FlightInfo> flightInfo; @NotBlank
	@SerializedName(""checkin_url"")
	private String checkinUrl; public AirlineCheckinTemplatePayload(String introMessage, String locale,
			String pnrNumber, String checkinUrl) { super(introMessage, locale, pnrNumber); this.flightInfo = new ArrayList<FlightInfo>(); this.checkinUrl = checkinUrl; this.templateType = PayloadType.AIRLINE_CHECKIN; } public AirlineCheckinTemplatePayload() { } public String getCheckinUrl() { return checkinUrl; } public void setCheckinUrl(String checkinUrl) { this.checkinUrl = checkinUrl; } public List<FlightInfo> getFlightInfo() { return flightInfo; } public void setFlightInfo(List<FlightInfo> flightInfo) { this.flightInfo = flightInfo; } public void addFlightInfo(FlightInfo flightInfo) { this.flightInfo.add(flightInfo); } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((checkinUrl == null) ? 0 : checkinUrl.hashCode()); result = prime * result
				+ ((flightInfo == null) ? 0 : flightInfo.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; AirlineCheckinTemplatePayload other = (AirlineCheckinTemplatePayload) obj; if (checkinUrl == null) { if (other.checkinUrl != null)
				return false; } else if (!checkinUrl.equals(other.checkinUrl))
			return false; if (flightInfo == null) { if (other.flightInfo != null)
				return false; } else if (!flightInfo.equals(other.flightInfo))
			return false; return true; } @Override
	public String toString() { return ""AirlineCheckinTemplatePayload [flightInfo="" + flightInfo
				+ "", checkinUrl="" + checkinUrl + "", templateType=""
				+ templateType + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.payload.template.airline; public class AirlineCheckinTemplatePayload extends
		AirlineBasePnrNumberTemplatePayload { private static final long serialVersionUID = 1L; @Valid
	@NotEmpty
	@SerializedName(""flight_info"")
	private List<FlightInfo> flightInfo; @NotBlank
	@SerializedName(""checkin_url"")
	private String checkinUrl; public AirlineCheckinTemplatePayload(String introMessage, String locale,
			String pnrNumber, String checkinUrl) { super(introMessage, locale, pnrNumber); this.flightInfo = new ArrayList<FlightInfo>(); this.checkinUrl = checkinUrl; this.templateType = PayloadType.AIRLINE_CHECKIN; } public AirlineCheckinTemplatePayload() { } public String getCheckinUrl() { return checkinUrl; } public void setCheckinUrl(String checkinUrl) { this.checkinUrl = checkinUrl; } public List<FlightInfo> getFlightInfo() { return flightInfo; } public void setFlightInfo(List<FlightInfo> flightInfo) { this.flightInfo = flightInfo; } public void addFlightInfo(FlightInfo flightInfo) { this.flightInfo.add(flightInfo); } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((checkinUrl == null) ? 0 : checkinUrl.hashCode()); result = prime * result
				+ ((flightInfo == null) ? 0 : flightInfo.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; AirlineCheckinTemplatePayload other = (AirlineCheckinTemplatePayload) obj; if (checkinUrl == null) { if (other.checkinUrl != null)
				return false; } else if (!checkinUrl.equals(other.checkinUrl))
			return false; if (flightInfo == null) { if (other.flightInfo != null)
				return false; } else if (!flightInfo.equals(other.flightInfo))
			return false; return true; } @Override
	public String toString() { return ""AirlineCheckinTemplatePayload [flightInfo="" + flightInfo
				+ "", checkinUrl="" + checkinUrl + "", templateType=""
				+ templateType + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.payload.template.airline; 
import java.util.ArrayList; import java.util.List; 
import javax.validation.Valid; 
import org.hibernate.validator.constraints.NotBlank; import org.hibernate.validator.constraints.NotEmpty; 
import co.aurasphere.botmill.fb.model.outcoming.payload.PayloadType; import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfo; 
import com.google.gson.annotations.SerializedName; 
  public class AirlineCheckinTemplatePayload extends
		AirlineBasePnrNumberTemplatePayload { /**
 * The Class AirlineCheckinTemplatePayload.
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @Valid
	@NotEmpty
	@SerializedName(""flight_info"")
	private List<FlightInfo> flightInfo; /** The flight info. */  @NotBlank
	@SerializedName(""checkin_url"")
	private String checkinUrl; /** The checkin url. */  public AirlineCheckinTemplatePayload(String introMessage, String locale,
			String pnrNumber, String checkinUrl) { super(introMessage, locale, pnrNumber); this.flightInfo = new ArrayList<FlightInfo>(); this.checkinUrl = checkinUrl; this.templateType = PayloadType.AIRLINE_CHECKIN; } /**
	 * Instantiates a new airline checkin template payload.
	 *
	 * @param introMessage
	 *            the intro message
	 * @param locale
	 *            the locale
	 * @param pnrNumber
	 *            the pnr number
	 * @param checkinUrl
	 *            the checkin url
	 */  public AirlineCheckinTemplatePayload() { } /**
	 * Instantiates a new AirlineCheckinTemplatePayload.
	 */  public String getCheckinUrl() { return checkinUrl; } /**
	 * Gets the checkin url.
	 *
	 * @return the checkin url
	 */  public void setCheckinUrl(String checkinUrl) { this.checkinUrl = checkinUrl; } /**
	 * Sets the checkin url.
	 *
	 * @param checkinUrl
	 *            the new checkin url
	 */  public List<FlightInfo> getFlightInfo() { return flightInfo; } /**
	 * Gets the flight info.
	 *
	 * @return the flight info
	 */  public void setFlightInfo(List<FlightInfo> flightInfo) { this.flightInfo = flightInfo; } /**
	 * Sets the flight info.
	 *
	 * @param flightInfo
	 *            the new flight info
	 */  public void addFlightInfo(FlightInfo flightInfo) { this.flightInfo.add(flightInfo); } /**
	 * Adds the flight info.
	 *
	 * @param flightInfo
	 *            the flight info
	 */  @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((checkinUrl == null) ? 0 : checkinUrl.hashCode()); result = prime * result
				+ ((flightInfo == null) ? 0 : flightInfo.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBasePnrNumberTemplatePayload#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; AirlineCheckinTemplatePayload other = (AirlineCheckinTemplatePayload) obj; if (checkinUrl == null) { if (other.checkinUrl != null)
				return false; } else if (!checkinUrl.equals(other.checkinUrl))
			return false; if (flightInfo == null) { if (other.flightInfo != null)
				return false; } else if (!flightInfo.equals(other.flightInfo))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBasePnrNumberTemplatePayload#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""AirlineCheckinTemplatePayload [flightInfo="" + flightInfo
				+ "", checkinUrl="" + checkinUrl + "", templateType=""
				+ templateType + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBasePnrNumberTemplatePayload#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/payload/template/airline/AirlineFlightUpdateTemplatePayload.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.payload.template.airline;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import co.aurasphere.botmill.fb.model.outcoming.payload.PayloadType;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfo;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.UpdateType;

import com.google.gson.annotations.SerializedName;


/**
 * The Class AirlineFlightUpdateTemplatePayload.
 */
public class AirlineFlightUpdateTemplatePayload extends
		AirlineBasePnrNumberTemplatePayload {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The update flight info. */
	@Valid
	@NotNull
	@SerializedName(""update_flight_info"")
	private FlightInfo updateFlightInfo;

	/** The update type. */
	@NotNull
	@SerializedName(""update_type"")
	private UpdateType updateType;

	/**
	 * Instantiates a new airline flight update template payload.
	 *
	 * @param introMessage
	 *            the intro message
	 * @param locale
	 *            the locale
	 * @param pnrNumber
	 *            the pnr number
	 * @param updateType
	 *            the update type
	 */
	public AirlineFlightUpdateTemplatePayload(String introMessage,
			String locale, String pnrNumber, UpdateType updateType) {
		super(introMessage, locale, pnrNumber);
		this.updateType = updateType;
		this.templateType = PayloadType.AIRLINE_UPDATE;
	}

	/**
	 * Instantiates a new AirlineFlightUpdateTemplatePayload.
	 */
	public AirlineFlightUpdateTemplatePayload() {
	}

	/**
	 * Gets the update flight info.
	 *
	 * @return the update flight info
	 */
	public FlightInfo getUpdateFlightInfo() {
		return updateFlightInfo;
	}

	/**
	 * Sets the update flight info.
	 *
	 * @param updateFlightInfo
	 *            the new update flight info
	 */
	public void setUpdateFlightInfo(FlightInfo updateFlightInfo) {
		this.updateFlightInfo = updateFlightInfo;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBasePnrNumberTemplatePayload#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime
				* result
				+ ((updateFlightInfo == null) ? 0 : updateFlightInfo.hashCode());
		result = prime * result
				+ ((updateType == null) ? 0 : updateType.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBasePnrNumberTemplatePayload#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		AirlineFlightUpdateTemplatePayload other = (AirlineFlightUpdateTemplatePayload) obj;
		if (updateFlightInfo == null) {
			if (other.updateFlightInfo != null)
				return false;
		} else if (!updateFlightInfo.equals(other.updateFlightInfo))
			return false;
		if (updateType != other.updateType)
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBasePnrNumberTemplatePayload#toString()
	 */
	@Override
	public String toString() {
		return ""AirlineFlightUpdateTemplatePayload [updateFlightInfo=""
				+ updateFlightInfo + "", updateType="" + updateType
				+ "", templateType="" + templateType + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.outcoming.payload.template.airline; public class AirlineFlightUpdateTemplatePayload extends
		AirlineBasePnrNumberTemplatePayload { private static final long serialVersionUID = 1L; @Valid
	@NotNull
	@SerializedName(""update_flight_info"")
	private FlightInfo updateFlightInfo; @NotNull
	@SerializedName(""update_type"")
	private UpdateType updateType; public AirlineFlightUpdateTemplatePayload(String introMessage,
			String locale, String pnrNumber, UpdateType updateType) { super(introMessage, locale, pnrNumber); this.updateType = updateType; this.templateType = PayloadType.AIRLINE_UPDATE; } public AirlineFlightUpdateTemplatePayload() { } public FlightInfo getUpdateFlightInfo() { return updateFlightInfo; } public void setUpdateFlightInfo(FlightInfo updateFlightInfo) { this.updateFlightInfo = updateFlightInfo; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime
				* result
				+ ((updateFlightInfo == null) ? 0 : updateFlightInfo.hashCode()); result = prime * result
				+ ((updateType == null) ? 0 : updateType.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; AirlineFlightUpdateTemplatePayload other = (AirlineFlightUpdateTemplatePayload) obj; if (updateFlightInfo == null) { if (other.updateFlightInfo != null)
				return false; } else if (!updateFlightInfo.equals(other.updateFlightInfo))
			return false; if (updateType != other.updateType)
			return false; return true; } @Override
	public String toString() { return ""AirlineFlightUpdateTemplatePayload [updateFlightInfo=""
				+ updateFlightInfo + "", updateType="" + updateType
				+ "", templateType="" + templateType + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.payload.template.airline; public class AirlineFlightUpdateTemplatePayload extends
		AirlineBasePnrNumberTemplatePayload { private static final long serialVersionUID = 1L; @Valid
	@NotNull
	@SerializedName(""update_flight_info"")
	private FlightInfo updateFlightInfo; @NotNull
	@SerializedName(""update_type"")
	private UpdateType updateType; public AirlineFlightUpdateTemplatePayload(String introMessage,
			String locale, String pnrNumber, UpdateType updateType) { super(introMessage, locale, pnrNumber); this.updateType = updateType; this.templateType = PayloadType.AIRLINE_UPDATE; } public AirlineFlightUpdateTemplatePayload() { } public FlightInfo getUpdateFlightInfo() { return updateFlightInfo; } public void setUpdateFlightInfo(FlightInfo updateFlightInfo) { this.updateFlightInfo = updateFlightInfo; } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime
				* result
				+ ((updateFlightInfo == null) ? 0 : updateFlightInfo.hashCode()); result = prime * result
				+ ((updateType == null) ? 0 : updateType.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; AirlineFlightUpdateTemplatePayload other = (AirlineFlightUpdateTemplatePayload) obj; if (updateFlightInfo == null) { if (other.updateFlightInfo != null)
				return false; } else if (!updateFlightInfo.equals(other.updateFlightInfo))
			return false; if (updateType != other.updateType)
			return false; return true; } @Override
	public String toString() { return ""AirlineFlightUpdateTemplatePayload [updateFlightInfo=""
				+ updateFlightInfo + "", updateType="" + updateType
				+ "", templateType="" + templateType + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.payload.template.airline; 
import javax.validation.Valid; import javax.validation.constraints.NotNull; 
import co.aurasphere.botmill.fb.model.outcoming.payload.PayloadType; import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfo; import co.aurasphere.botmill.fb.model.outcoming.template.airline.UpdateType; 
import com.google.gson.annotations.SerializedName; 
  public class AirlineFlightUpdateTemplatePayload extends
		AirlineBasePnrNumberTemplatePayload { /**
 * The Class AirlineFlightUpdateTemplatePayload.
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @Valid
	@NotNull
	@SerializedName(""update_flight_info"")
	private FlightInfo updateFlightInfo; /** The update flight info. */  @NotNull
	@SerializedName(""update_type"")
	private UpdateType updateType; /** The update type. */  public AirlineFlightUpdateTemplatePayload(String introMessage,
			String locale, String pnrNumber, UpdateType updateType) { super(introMessage, locale, pnrNumber); this.updateType = updateType; this.templateType = PayloadType.AIRLINE_UPDATE; } /**
	 * Instantiates a new airline flight update template payload.
	 *
	 * @param introMessage
	 *            the intro message
	 * @param locale
	 *            the locale
	 * @param pnrNumber
	 *            the pnr number
	 * @param updateType
	 *            the update type
	 */  public AirlineFlightUpdateTemplatePayload() { } /**
	 * Instantiates a new AirlineFlightUpdateTemplatePayload.
	 */  public FlightInfo getUpdateFlightInfo() { return updateFlightInfo; } /**
	 * Gets the update flight info.
	 *
	 * @return the update flight info
	 */  public void setUpdateFlightInfo(FlightInfo updateFlightInfo) { this.updateFlightInfo = updateFlightInfo; } /**
	 * Sets the update flight info.
	 *
	 * @param updateFlightInfo
	 *            the new update flight info
	 */  @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime
				* result
				+ ((updateFlightInfo == null) ? 0 : updateFlightInfo.hashCode()); result = prime * result
				+ ((updateType == null) ? 0 : updateType.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBasePnrNumberTemplatePayload#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; AirlineFlightUpdateTemplatePayload other = (AirlineFlightUpdateTemplatePayload) obj; if (updateFlightInfo == null) { if (other.updateFlightInfo != null)
				return false; } else if (!updateFlightInfo.equals(other.updateFlightInfo))
			return false; if (updateType != other.updateType)
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBasePnrNumberTemplatePayload#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""AirlineFlightUpdateTemplatePayload [updateFlightInfo=""
				+ updateFlightInfo + "", updateType="" + updateType
				+ "", templateType="" + templateType + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBasePnrNumberTemplatePayload#toString()
	 */ "
src/main/java/co/aurasphere/botmill/fb/model/outcoming/payload/template/airline/AirlineItineraryTemplatePayload.java,"/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package co.aurasphere.botmill.fb.model.outcoming.payload.template.airline;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotBlank;
import org.hibernate.validator.constraints.NotEmpty;

import co.aurasphere.botmill.fb.model.outcoming.payload.PayloadType;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfoExtended;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.PassengerInfo;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.PassengerSegmentInfo;
import co.aurasphere.botmill.fb.model.outcoming.template.airline.PriceInfo;

import com.google.gson.annotations.SerializedName;


/**
 * The Class AirlineItineraryTemplatePayload.
 */
public class AirlineItineraryTemplatePayload extends
		AirlineBasePnrNumberTemplatePayload {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The flight info. */
	@Valid
	@NotEmpty
	@SerializedName(""flight_info"")
	private List<FlightInfoExtended> flightInfo;

	/** The passenger info. */
	@Valid
	@NotEmpty
	@SerializedName(""passenger_info"")
	private List<PassengerInfo> passengerInfo;

	/** The passenger segment info. */
	@Valid
	@NotEmpty
	@SerializedName(""passenger_segment_info"")
	private List<PassengerSegmentInfo> passengerSegmentInfo;

	/** The price info. */
	@Valid
	@Size(max = 4)
	@SerializedName(""price_info"")
	private List<PriceInfo> priceInfo;

	/** The base price. */
	@SerializedName(""base_price"")
	private BigDecimal basePrice;

	/** The tax. */
	private BigDecimal tax;

	/** The total price. */
	@NotNull
	@SerializedName(""total_price"")
	private BigDecimal totalPrice;

	/** The currency. */
	@NotBlank
	@Pattern(regexp = ""[A-Z]{3}"", message = ""{currency.pattern.message}"")
	private String currency;

	/**
	 * Instantiates a new airline itinerary template payload.
	 *
	 * @param introMessage
	 *            the intro message
	 * @param locale
	 *            the locale
	 * @param pnrNumber
	 *            the pnr number
	 * @param totalPrice
	 *            the total price
	 * @param currency
	 *            the currency
	 */
	public AirlineItineraryTemplatePayload(String introMessage, String locale,
			String pnrNumber, BigDecimal totalPrice, String currency) {
		super(introMessage, locale, pnrNumber);
		this.totalPrice = totalPrice;
		this.currency = currency;
		this.passengerInfo = new ArrayList<PassengerInfo>();
		this.passengerSegmentInfo = new ArrayList<PassengerSegmentInfo>();
		this.priceInfo = new ArrayList<PriceInfo>();
		this.flightInfo = new ArrayList<FlightInfoExtended>();
		this.templateType = PayloadType.AIRLINE_ITINERARY;
	}

	/**
	 * Instantiates a new AirlineItineraryTemplatePayload.
	 */
	public AirlineItineraryTemplatePayload() {
	}

	/**
	 * Gets the passenger info.
	 *
	 * @return the passenger info
	 */
	public List<PassengerInfo> getPassengerInfo() {
		return passengerInfo;
	}

	/**
	 * Sets the passenger info.
	 *
	 * @param passengerInfo
	 *            the new passenger info
	 */
	public void setPassengerInfo(List<PassengerInfo> passengerInfo) {
		this.passengerInfo = passengerInfo;
	}

	/**
	 * Gets the passenger segment info.
	 *
	 * @return the passenger segment info
	 */
	public List<PassengerSegmentInfo> getPassengerSegmentInfo() {
		return passengerSegmentInfo;
	}

	/**
	 * Sets the passenger segment info.
	 *
	 * @param passengerSegmentInfo
	 *            the new passenger segment info
	 */
	public void setPassengerSegmentInfo(
			List<PassengerSegmentInfo> passengerSegmentInfo) {
		this.passengerSegmentInfo = passengerSegmentInfo;
	}

	/**
	 * Gets the price info.
	 *
	 * @return the price info
	 */
	public List<PriceInfo> getPriceInfo() {
		return priceInfo;
	}

	/**
	 * Sets the price info.
	 *
	 * @param priceInfo
	 *            the new price info
	 */
	public void setPriceInfo(List<PriceInfo> priceInfo) {
		this.priceInfo = priceInfo;
	}

	/**
	 * Gets the base price.
	 *
	 * @return the base price
	 */
	public BigDecimal getBasePrice() {
		return basePrice;
	}

	/**
	 * Sets the base price.
	 *
	 * @param basePrice the new base price
	 */
	public void setBasePrice(BigDecimal basePrice) {
		this.basePrice = basePrice;
	}

	/**
	 * Gets the tax.
	 *
	 * @return the tax
	 */
	public BigDecimal getTax() {
		return tax;
	}

	/**
	 * Sets the tax.
	 *
	 * @param tax the new tax
	 */
	public void setTax(BigDecimal tax) {
		this.tax = tax;
	}

	/**
	 * Gets the total price.
	 *
	 * @return the total price
	 */
	public BigDecimal getTotalPrice() {
		return totalPrice;
	}

	/**
	 * Sets the total price.
	 *
	 * @param totalPrice the new total price
	 */
	public void setTotalPrice(BigDecimal totalPrice) {
		this.totalPrice = totalPrice;
	}

	/**
	 * Gets the currency.
	 *
	 * @return the currency
	 */
	public String getCurrency() {
		return currency;
	}

	/**
	 * Sets the currency.
	 *
	 * @param currency
	 *            the new currency
	 */
	public void setCurrency(String currency) {
		this.currency = currency;
	}

	/**
	 * Adds the passenger info.
	 *
	 * @param passengerInfo
	 *            the passenger info
	 */
	public void addPassengerInfo(PassengerInfo passengerInfo) {
		this.passengerInfo.add(passengerInfo);
	}

	/**
	 * Adds the passenger segment info.
	 *
	 * @param segmentInfo
	 *            the segment info
	 */
	public void addPassengerSegmentInfo(PassengerSegmentInfo segmentInfo) {
		this.passengerSegmentInfo.add(segmentInfo);
	}

	/**
	 * Adds the price info.
	 *
	 * @param priceInfo
	 *            the price info
	 */
	public void addPriceInfo(PriceInfo priceInfo) {
		this.priceInfo.add(priceInfo);
	}

	/**
	 * Adds the flight info.
	 *
	 * @param flightInfo
	 *            the flight info
	 */
	public void addFlightInfo(FlightInfoExtended flightInfo) {
		this.flightInfo.add(flightInfo);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBasePnrNumberTemplatePayload#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result
				+ ((basePrice == null) ? 0 : basePrice.hashCode());
		result = prime * result
				+ ((currency == null) ? 0 : currency.hashCode());
		result = prime * result
				+ ((flightInfo == null) ? 0 : flightInfo.hashCode());
		result = prime * result
				+ ((passengerInfo == null) ? 0 : passengerInfo.hashCode());
		result = prime
				* result
				+ ((passengerSegmentInfo == null) ? 0 : passengerSegmentInfo
						.hashCode());
		result = prime * result
				+ ((priceInfo == null) ? 0 : priceInfo.hashCode());
		result = prime * result + ((tax == null) ? 0 : tax.hashCode());
		result = prime * result
				+ ((totalPrice == null) ? 0 : totalPrice.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBasePnrNumberTemplatePayload#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		AirlineItineraryTemplatePayload other = (AirlineItineraryTemplatePayload) obj;
		if (basePrice == null) {
			if (other.basePrice != null)
				return false;
		} else if (!basePrice.equals(other.basePrice))
			return false;
		if (currency == null) {
			if (other.currency != null)
				return false;
		} else if (!currency.equals(other.currency))
			return false;
		if (flightInfo == null) {
			if (other.flightInfo != null)
				return false;
		} else if (!flightInfo.equals(other.flightInfo))
			return false;
		if (passengerInfo == null) {
			if (other.passengerInfo != null)
				return false;
		} else if (!passengerInfo.equals(other.passengerInfo))
			return false;
		if (passengerSegmentInfo == null) {
			if (other.passengerSegmentInfo != null)
				return false;
		} else if (!passengerSegmentInfo.equals(other.passengerSegmentInfo))
			return false;
		if (priceInfo == null) {
			if (other.priceInfo != null)
				return false;
		} else if (!priceInfo.equals(other.priceInfo))
			return false;
		if (tax == null) {
			if (other.tax != null)
				return false;
		} else if (!tax.equals(other.tax))
			return false;
		if (totalPrice == null) {
			if (other.totalPrice != null)
				return false;
		} else if (!totalPrice.equals(other.totalPrice))
			return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBasePnrNumberTemplatePayload#toString()
	 */
	@Override
	public String toString() {
		return ""AirlineItineraryTemplatePayload [flightInfo="" + flightInfo
				+ "", passengerInfo="" + passengerInfo
				+ "", passengerSegmentInfo="" + passengerSegmentInfo
				+ "", priceInfo="" + priceInfo + "", basePrice="" + basePrice
				+ "", tax="" + tax + "", totalPrice="" + totalPrice + "", currency=""
				+ currency + "", templateType="" + templateType + ""]"";
	}
}
","package co.aurasphere.botmill.fb.model.outcoming.payload.template.airline; public class AirlineItineraryTemplatePayload extends
		AirlineBasePnrNumberTemplatePayload { private static final long serialVersionUID = 1L; @Valid
	@NotEmpty
	@SerializedName(""flight_info"")
	private List<FlightInfoExtended> flightInfo; @Valid
	@NotEmpty
	@SerializedName(""passenger_info"")
	private List<PassengerInfo> passengerInfo; @Valid
	@NotEmpty
	@SerializedName(""passenger_segment_info"")
	private List<PassengerSegmentInfo> passengerSegmentInfo; @Valid
	@Size(max = 4)
	@SerializedName(""price_info"")
	private List<PriceInfo> priceInfo; @SerializedName(""base_price"")
	private BigDecimal basePrice; private BigDecimal tax; @NotNull
	@SerializedName(""total_price"")
	private BigDecimal totalPrice; @NotBlank
	@Pattern(regexp = ""[A-Z]{ 3} "", message = ""{ currency.pattern.message} "")
	private String currency; public AirlineItineraryTemplatePayload(String introMessage, String locale,
			String pnrNumber, BigDecimal totalPrice, String currency) { super(introMessage, locale, pnrNumber); this.totalPrice = totalPrice; this.currency = currency; this.passengerInfo = new ArrayList<PassengerInfo>(); this.passengerSegmentInfo = new ArrayList<PassengerSegmentInfo>(); this.priceInfo = new ArrayList<PriceInfo>(); this.flightInfo = new ArrayList<FlightInfoExtended>(); this.templateType = PayloadType.AIRLINE_ITINERARY; } public AirlineItineraryTemplatePayload() { } public List<PassengerInfo> getPassengerInfo() { return passengerInfo; } public void setPassengerInfo(List<PassengerInfo> passengerInfo) { this.passengerInfo = passengerInfo; } public List<PassengerSegmentInfo> getPassengerSegmentInfo() { return passengerSegmentInfo; } public void setPassengerSegmentInfo(
			List<PassengerSegmentInfo> passengerSegmentInfo) { this.passengerSegmentInfo = passengerSegmentInfo; } public List<PriceInfo> getPriceInfo() { return priceInfo; } public void setPriceInfo(List<PriceInfo> priceInfo) { this.priceInfo = priceInfo; } public BigDecimal getBasePrice() { return basePrice; } public void setBasePrice(BigDecimal basePrice) { this.basePrice = basePrice; } public BigDecimal getTax() { return tax; } public void setTax(BigDecimal tax) { this.tax = tax; } public BigDecimal getTotalPrice() { return totalPrice; } public void setTotalPrice(BigDecimal totalPrice) { this.totalPrice = totalPrice; } public String getCurrency() { return currency; } public void setCurrency(String currency) { this.currency = currency; } public void addPassengerInfo(PassengerInfo passengerInfo) { this.passengerInfo.add(passengerInfo); } public void addPassengerSegmentInfo(PassengerSegmentInfo segmentInfo) { this.passengerSegmentInfo.add(segmentInfo); } public void addPriceInfo(PriceInfo priceInfo) { this.priceInfo.add(priceInfo); } public void addFlightInfo(FlightInfoExtended flightInfo) { this.flightInfo.add(flightInfo); } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((basePrice == null) ? 0 : basePrice.hashCode()); result = prime * result
				+ ((currency == null) ? 0 : currency.hashCode()); result = prime * result
				+ ((flightInfo == null) ? 0 : flightInfo.hashCode()); result = prime * result
				+ ((passengerInfo == null) ? 0 : passengerInfo.hashCode()); result = prime
				* result
				+ ((passengerSegmentInfo == null) ? 0 : passengerSegmentInfo
						.hashCode()); result = prime * result
				+ ((priceInfo == null) ? 0 : priceInfo.hashCode()); result = prime * result + ((tax == null) ? 0 : tax.hashCode()); result = prime * result
				+ ((totalPrice == null) ? 0 : totalPrice.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; AirlineItineraryTemplatePayload other = (AirlineItineraryTemplatePayload) obj; if (basePrice == null) { if (other.basePrice != null)
				return false; } else if (!basePrice.equals(other.basePrice))
			return false; if (currency == null) { if (other.currency != null)
				return false; } else if (!currency.equals(other.currency))
			return false; if (flightInfo == null) { if (other.flightInfo != null)
				return false; } else if (!flightInfo.equals(other.flightInfo))
			return false; if (passengerInfo == null) { if (other.passengerInfo != null)
				return false; } else if (!passengerInfo.equals(other.passengerInfo))
			return false; if (passengerSegmentInfo == null) { if (other.passengerSegmentInfo != null)
				return false; } else if (!passengerSegmentInfo.equals(other.passengerSegmentInfo))
			return false; if (priceInfo == null) { if (other.priceInfo != null)
				return false; } else if (!priceInfo.equals(other.priceInfo))
			return false; if (tax == null) { if (other.tax != null)
				return false; } else if (!tax.equals(other.tax))
			return false; if (totalPrice == null) { if (other.totalPrice != null)
				return false; } else if (!totalPrice.equals(other.totalPrice))
			return false; return true; } @Override
	public String toString() { return ""AirlineItineraryTemplatePayload [flightInfo="" + flightInfo
				+ "", passengerInfo="" + passengerInfo
				+ "", passengerSegmentInfo="" + passengerSegmentInfo
				+ "", priceInfo="" + priceInfo + "", basePrice="" + basePrice
				+ "", tax="" + tax + "", totalPrice="" + totalPrice + "", currency=""
				+ currency + "", templateType="" + templateType + ""]""; } }",0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0,"package co.aurasphere.botmill.fb.model.outcoming.payload.template.airline; public class AirlineItineraryTemplatePayload extends
		AirlineBasePnrNumberTemplatePayload { private static final long serialVersionUID = 1L; @Valid
	@NotEmpty
	@SerializedName(""flight_info"")
	private List<FlightInfoExtended> flightInfo; @Valid
	@NotEmpty
	@SerializedName(""passenger_info"")
	private List<PassengerInfo> passengerInfo; @Valid
	@NotEmpty
	@SerializedName(""passenger_segment_info"")
	private List<PassengerSegmentInfo> passengerSegmentInfo; @Valid
	@Size(max = 4)
	@SerializedName(""price_info"")
	private List<PriceInfo> priceInfo; @SerializedName(""base_price"")
	private BigDecimal basePrice; private BigDecimal tax; @NotNull
	@SerializedName(""total_price"")
	private BigDecimal totalPrice; @NotBlank
	@Pattern(regexp = ""[A-Z]{ 3} "", message = ""{ currency.pattern.message} "")
	private String currency; public AirlineItineraryTemplatePayload(String introMessage, String locale,
			String pnrNumber, BigDecimal totalPrice, String currency) { super(introMessage, locale, pnrNumber); this.totalPrice = totalPrice; this.currency = currency; this.passengerInfo = new ArrayList<PassengerInfo>(); this.passengerSegmentInfo = new ArrayList<PassengerSegmentInfo>(); this.priceInfo = new ArrayList<PriceInfo>(); this.flightInfo = new ArrayList<FlightInfoExtended>(); this.templateType = PayloadType.AIRLINE_ITINERARY; } public AirlineItineraryTemplatePayload() { } public List<PassengerInfo> getPassengerInfo() { return passengerInfo; } public void setPassengerInfo(List<PassengerInfo> passengerInfo) { this.passengerInfo = passengerInfo; } public List<PassengerSegmentInfo> getPassengerSegmentInfo() { return passengerSegmentInfo; } public void setPassengerSegmentInfo(
			List<PassengerSegmentInfo> passengerSegmentInfo) { this.passengerSegmentInfo = passengerSegmentInfo; } public List<PriceInfo> getPriceInfo() { return priceInfo; } public void setPriceInfo(List<PriceInfo> priceInfo) { this.priceInfo = priceInfo; } public BigDecimal getBasePrice() { return basePrice; } public void setBasePrice(BigDecimal basePrice) { this.basePrice = basePrice; } public BigDecimal getTax() { return tax; } public void setTax(BigDecimal tax) { this.tax = tax; } public BigDecimal getTotalPrice() { return totalPrice; } public void setTotalPrice(BigDecimal totalPrice) { this.totalPrice = totalPrice; } public String getCurrency() { return currency; } public void setCurrency(String currency) { this.currency = currency; } public void addPassengerInfo(PassengerInfo passengerInfo) { this.passengerInfo.add(passengerInfo); } public void addPassengerSegmentInfo(PassengerSegmentInfo segmentInfo) { this.passengerSegmentInfo.add(segmentInfo); } public void addPriceInfo(PriceInfo priceInfo) { this.priceInfo.add(priceInfo); } public void addFlightInfo(FlightInfoExtended flightInfo) { this.flightInfo.add(flightInfo); } @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((basePrice == null) ? 0 : basePrice.hashCode()); result = prime * result
				+ ((currency == null) ? 0 : currency.hashCode()); result = prime * result
				+ ((flightInfo == null) ? 0 : flightInfo.hashCode()); result = prime * result
				+ ((passengerInfo == null) ? 0 : passengerInfo.hashCode()); result = prime
				* result
				+ ((passengerSegmentInfo == null) ? 0 : passengerSegmentInfo
						.hashCode()); result = prime * result
				+ ((priceInfo == null) ? 0 : priceInfo.hashCode()); result = prime * result + ((tax == null) ? 0 : tax.hashCode()); result = prime * result
				+ ((totalPrice == null) ? 0 : totalPrice.hashCode()); return result; } @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; AirlineItineraryTemplatePayload other = (AirlineItineraryTemplatePayload) obj; if (basePrice == null) { if (other.basePrice != null)
				return false; } else if (!basePrice.equals(other.basePrice))
			return false; if (currency == null) { if (other.currency != null)
				return false; } else if (!currency.equals(other.currency))
			return false; if (flightInfo == null) { if (other.flightInfo != null)
				return false; } else if (!flightInfo.equals(other.flightInfo))
			return false; if (passengerInfo == null) { if (other.passengerInfo != null)
				return false; } else if (!passengerInfo.equals(other.passengerInfo))
			return false; if (passengerSegmentInfo == null) { if (other.passengerSegmentInfo != null)
				return false; } else if (!passengerSegmentInfo.equals(other.passengerSegmentInfo))
			return false; if (priceInfo == null) { if (other.priceInfo != null)
				return false; } else if (!priceInfo.equals(other.priceInfo))
			return false; if (tax == null) { if (other.tax != null)
				return false; } else if (!tax.equals(other.tax))
			return false; if (totalPrice == null) { if (other.totalPrice != null)
				return false; } else if (!totalPrice.equals(other.totalPrice))
			return false; return true; } @Override
	public String toString() { return ""AirlineItineraryTemplatePayload [flightInfo="" + flightInfo
				+ "", passengerInfo="" + passengerInfo
				+ "", passengerSegmentInfo="" + passengerSegmentInfo
				+ "", priceInfo="" + priceInfo + "", basePrice="" + basePrice
				+ "", tax="" + tax + "", totalPrice="" + totalPrice + "", currency=""
				+ currency + "", templateType="" + templateType + ""]""; } } ","/*
 * MIT License
 *
 * Copyright (c) 2016 BotMill.io
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */ package co.aurasphere.botmill.fb.model.outcoming.payload.template.airline; 
import java.math.BigDecimal; import java.util.ArrayList; import java.util.List; 
import javax.validation.Valid; import javax.validation.constraints.NotNull; import javax.validation.constraints.Pattern; import javax.validation.constraints.Size; 
import org.hibernate.validator.constraints.NotBlank; import org.hibernate.validator.constraints.NotEmpty; 
import co.aurasphere.botmill.fb.model.outcoming.payload.PayloadType; import co.aurasphere.botmill.fb.model.outcoming.template.airline.FlightInfoExtended; import co.aurasphere.botmill.fb.model.outcoming.template.airline.PassengerInfo; import co.aurasphere.botmill.fb.model.outcoming.template.airline.PassengerSegmentInfo; import co.aurasphere.botmill.fb.model.outcoming.template.airline.PriceInfo; 
import com.google.gson.annotations.SerializedName; 
  public class AirlineItineraryTemplatePayload extends
		AirlineBasePnrNumberTemplatePayload { /**
 * The Class AirlineItineraryTemplatePayload.
 */  private static final long serialVersionUID = 1L; /** The Constant serialVersionUID. */  @Valid
	@NotEmpty
	@SerializedName(""flight_info"")
	private List<FlightInfoExtended> flightInfo; /** The flight info. */  @Valid
	@NotEmpty
	@SerializedName(""passenger_info"")
	private List<PassengerInfo> passengerInfo; /** The passenger info. */  @Valid
	@NotEmpty
	@SerializedName(""passenger_segment_info"")
	private List<PassengerSegmentInfo> passengerSegmentInfo; /** The passenger segment info. */  @Valid
	@Size(max = 4)
	@SerializedName(""price_info"")
	private List<PriceInfo> priceInfo; /** The price info. */  @SerializedName(""base_price"")
	private BigDecimal basePrice; /** The base price. */  private BigDecimal tax; /** The tax. */  @NotNull
	@SerializedName(""total_price"")
	private BigDecimal totalPrice; /** The total price. */  @NotBlank
	@Pattern(regexp = ""[A-Z]{ 3} "", message = ""{ currency.pattern.message} "")
	private String currency; /** The currency. */  public AirlineItineraryTemplatePayload(String introMessage, String locale,
			String pnrNumber, BigDecimal totalPrice, String currency) { super(introMessage, locale, pnrNumber); this.totalPrice = totalPrice; this.currency = currency; this.passengerInfo = new ArrayList<PassengerInfo>(); this.passengerSegmentInfo = new ArrayList<PassengerSegmentInfo>(); this.priceInfo = new ArrayList<PriceInfo>(); this.flightInfo = new ArrayList<FlightInfoExtended>(); this.templateType = PayloadType.AIRLINE_ITINERARY; } /**
	 * Instantiates a new airline itinerary template payload.
	 *
	 * @param introMessage
	 *            the intro message
	 * @param locale
	 *            the locale
	 * @param pnrNumber
	 *            the pnr number
	 * @param totalPrice
	 *            the total price
	 * @param currency
	 *            the currency
	 */  public AirlineItineraryTemplatePayload() { } /**
	 * Instantiates a new AirlineItineraryTemplatePayload.
	 */  public List<PassengerInfo> getPassengerInfo() { return passengerInfo; } /**
	 * Gets the passenger info.
	 *
	 * @return the passenger info
	 */  public void setPassengerInfo(List<PassengerInfo> passengerInfo) { this.passengerInfo = passengerInfo; } /**
	 * Sets the passenger info.
	 *
	 * @param passengerInfo
	 *            the new passenger info
	 */  public List<PassengerSegmentInfo> getPassengerSegmentInfo() { return passengerSegmentInfo; } /**
	 * Gets the passenger segment info.
	 *
	 * @return the passenger segment info
	 */  public void setPassengerSegmentInfo(
			List<PassengerSegmentInfo> passengerSegmentInfo) { this.passengerSegmentInfo = passengerSegmentInfo; } /**
	 * Sets the passenger segment info.
	 *
	 * @param passengerSegmentInfo
	 *            the new passenger segment info
	 */  public List<PriceInfo> getPriceInfo() { return priceInfo; } /**
	 * Gets the price info.
	 *
	 * @return the price info
	 */  public void setPriceInfo(List<PriceInfo> priceInfo) { this.priceInfo = priceInfo; } /**
	 * Sets the price info.
	 *
	 * @param priceInfo
	 *            the new price info
	 */  public BigDecimal getBasePrice() { return basePrice; } /**
	 * Gets the base price.
	 *
	 * @return the base price
	 */  public void setBasePrice(BigDecimal basePrice) { this.basePrice = basePrice; } /**
	 * Sets the base price.
	 *
	 * @param basePrice the new base price
	 */  public BigDecimal getTax() { return tax; } /**
	 * Gets the tax.
	 *
	 * @return the tax
	 */  public void setTax(BigDecimal tax) { this.tax = tax; } /**
	 * Sets the tax.
	 *
	 * @param tax the new tax
	 */  public BigDecimal getTotalPrice() { return totalPrice; } /**
	 * Gets the total price.
	 *
	 * @return the total price
	 */  public void setTotalPrice(BigDecimal totalPrice) { this.totalPrice = totalPrice; } /**
	 * Sets the total price.
	 *
	 * @param totalPrice the new total price
	 */  public String getCurrency() { return currency; } /**
	 * Gets the currency.
	 *
	 * @return the currency
	 */  public void setCurrency(String currency) { this.currency = currency; } /**
	 * Sets the currency.
	 *
	 * @param currency
	 *            the new currency
	 */  public void addPassengerInfo(PassengerInfo passengerInfo) { this.passengerInfo.add(passengerInfo); } /**
	 * Adds the passenger info.
	 *
	 * @param passengerInfo
	 *            the passenger info
	 */  public void addPassengerSegmentInfo(PassengerSegmentInfo segmentInfo) { this.passengerSegmentInfo.add(segmentInfo); } /**
	 * Adds the passenger segment info.
	 *
	 * @param segmentInfo
	 *            the segment info
	 */  public void addPriceInfo(PriceInfo priceInfo) { this.priceInfo.add(priceInfo); } /**
	 * Adds the price info.
	 *
	 * @param priceInfo
	 *            the price info
	 */  public void addFlightInfo(FlightInfoExtended flightInfo) { this.flightInfo.add(flightInfo); } /**
	 * Adds the flight info.
	 *
	 * @param flightInfo
	 *            the flight info
	 */  @Override
	public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result
				+ ((basePrice == null) ? 0 : basePrice.hashCode()); result = prime * result
				+ ((currency == null) ? 0 : currency.hashCode()); result = prime * result
				+ ((flightInfo == null) ? 0 : flightInfo.hashCode()); result = prime * result
				+ ((passengerInfo == null) ? 0 : passengerInfo.hashCode()); result = prime
				* result
				+ ((passengerSegmentInfo == null) ? 0 : passengerSegmentInfo
						.hashCode()); result = prime * result
				+ ((priceInfo == null) ? 0 : priceInfo.hashCode()); result = prime * result + ((tax == null) ? 0 : tax.hashCode()); result = prime * result
				+ ((totalPrice == null) ? 0 : totalPrice.hashCode()); return result; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBasePnrNumberTemplatePayload#hashCode()
	 */  @Override
	public boolean equals(Object obj) { if (this == obj)
			return true; if (!super.equals(obj))
			return false; if (getClass() != obj.getClass())
			return false; AirlineItineraryTemplatePayload other = (AirlineItineraryTemplatePayload) obj; if (basePrice == null) { if (other.basePrice != null)
				return false; } else if (!basePrice.equals(other.basePrice))
			return false; if (currency == null) { if (other.currency != null)
				return false; } else if (!currency.equals(other.currency))
			return false; if (flightInfo == null) { if (other.flightInfo != null)
				return false; } else if (!flightInfo.equals(other.flightInfo))
			return false; if (passengerInfo == null) { if (other.passengerInfo != null)
				return false; } else if (!passengerInfo.equals(other.passengerInfo))
			return false; if (passengerSegmentInfo == null) { if (other.passengerSegmentInfo != null)
				return false; } else if (!passengerSegmentInfo.equals(other.passengerSegmentInfo))
			return false; if (priceInfo == null) { if (other.priceInfo != null)
				return false; } else if (!priceInfo.equals(other.priceInfo))
			return false; if (tax == null) { if (other.tax != null)
				return false; } else if (!tax.equals(other.tax))
			return false; if (totalPrice == null) { if (other.totalPrice != null)
				return false; } else if (!totalPrice.equals(other.totalPrice))
			return false; return true; } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBasePnrNumberTemplatePayload#equals(java.lang.Object)
	 */  @Override
	public String toString() { return ""AirlineItineraryTemplatePayload [flightInfo="" + flightInfo
				+ "", passengerInfo="" + passengerInfo
				+ "", passengerSegmentInfo="" + passengerSegmentInfo
				+ "", priceInfo="" + priceInfo + "", basePrice="" + basePrice
				+ "", tax="" + tax + "", totalPrice="" + totalPrice + "", currency=""
				+ currency + "", templateType="" + templateType + ""]""; } } /*
	 * (non-Javadoc)
	 * 
	 * @see co.aurasphere.botmill.fb.model.outcoming.payload.template.airline.
	 * AirlineBasePnrNumberTemplatePayload#toString()
	 */ "
